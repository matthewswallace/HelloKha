// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_System
#define INCLUDED_kha_System

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Framebuffer)
HX_DECLARE_CLASS1(kha,ScreenRotation)
HX_DECLARE_CLASS1(kha,System)
HX_DECLARE_CLASS1(kha,WindowOptions)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES System_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef System_obj OBJ_;
		System_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.System")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"kha.System"); }
		static hx::ObjectPtr< System_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~System_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("System","\x0f","\x0b","\x77","\x27"); }

		static void __boot();
		static ::Array< ::Dynamic> renderListeners;
		static ::Array< ::Dynamic> foregroundListeners;
		static ::Array< ::Dynamic> resumeListeners;
		static ::Array< ::Dynamic> pauseListeners;
		static ::Array< ::Dynamic> backgroundListeners;
		static ::Array< ::Dynamic> shutdownListeners;
		static void init( ::Dynamic options, ::Dynamic callback);
		static ::Dynamic init_dyn();

		static void initEx(::String title,::Array< ::Dynamic> options, ::Dynamic windowCallback, ::Dynamic callback);
		static ::Dynamic initEx_dyn();

		static void notifyOnRender( ::Dynamic listener,hx::Null< Int >  id);
		static ::Dynamic notifyOnRender_dyn();

		static void removeRenderListener( ::Dynamic listener,hx::Null< Int >  id);
		static ::Dynamic removeRenderListener_dyn();

		static void notifyOnApplicationState( ::Dynamic foregroundListener, ::Dynamic resumeListener, ::Dynamic pauseListener, ::Dynamic backgroundListener, ::Dynamic shutdownListener);
		static ::Dynamic notifyOnApplicationState_dyn();

		static void render(Int id, ::kha::Framebuffer framebuffer);
		static ::Dynamic render_dyn();

		static void foreground();
		static ::Dynamic foreground_dyn();

		static void resume();
		static ::Dynamic resume_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void background();
		static ::Dynamic background_dyn();

		static void shutdown();
		static ::Dynamic shutdown_dyn();

		static Float time;
		static Float get_time();
		static ::Dynamic get_time_dyn();

		static Int windowWidth(hx::Null< Int >  windowId);
		static ::Dynamic windowWidth_dyn();

		static Int windowHeight(hx::Null< Int >  windowId);
		static ::Dynamic windowHeight_dyn();

		static Int screenDpi();
		static ::Dynamic screenDpi_dyn();

		static ::hx::EnumBase screenRotation;
		static ::hx::EnumBase get_screenRotation();
		static ::Dynamic get_screenRotation_dyn();

		static Bool vsync;
		static Bool get_vsync();
		static ::Dynamic get_vsync_dyn();

		static Int refreshRate;
		static Int get_refreshRate();
		static ::Dynamic get_refreshRate_dyn();

		static ::String systemId;
		static ::String get_systemId();
		static ::Dynamic get_systemId_dyn();

		static void requestShutdown();
		static ::Dynamic requestShutdown_dyn();

		static void changeResolution(Int width,Int height);
		static ::Dynamic changeResolution_dyn();

		static void loadUrl(::String url);
		static ::Dynamic loadUrl_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_System */ 
