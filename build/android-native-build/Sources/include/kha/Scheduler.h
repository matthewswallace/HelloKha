// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_Scheduler
#define INCLUDED_kha_Scheduler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,FrameTask)
HX_DECLARE_CLASS1(kha,Scheduler)
HX_DECLARE_CLASS1(kha,TimeTask)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES Scheduler_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Scheduler_obj OBJ_;
		Scheduler_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.Scheduler")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"kha.Scheduler"); }
		static hx::ObjectPtr< Scheduler_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Scheduler_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Scheduler","\x1b","\x22","\x45","\xab"); }

		static void __boot();
		static ::Array< ::Dynamic> timeTasks;
		static ::Array< ::Dynamic> pausedTimeTasks;
		static ::Array< ::Dynamic> outdatedTimeTasks;
		static ::Array< ::Dynamic> timeTasksScratchpad;
		static Float timeWarpSaveTime;
		static ::Array< ::Dynamic> frameTasks;
		static ::Array< ::Dynamic> toDeleteFrame;
		static Float current;
		static Float lastTime;
		static Bool frame_tasks_sorted;
		static Bool stopped;
		static Bool vsync;
		static Float onedifhz;
		static Int currentFrameTaskId;
		static Int currentTimeTaskId;
		static Int currentGroupId;
		static Int DIF_COUNT;
		static Float maxframetime;
		static ::Array< Float > deltas;
		static Float startTime;
		static  ::kha::TimeTask activeTimeTask;
		static void init();
		static ::Dynamic init_dyn();

		static void start(hx::Null< Bool >  restartTimers);
		static ::Dynamic start_dyn();

		static void stop();
		static ::Dynamic stop_dyn();

		static Bool isStopped();
		static ::Dynamic isStopped_dyn();

		static void warpTimeTasks(Float time,::Array< ::Dynamic> tasks);
		static ::Dynamic warpTimeTasks_dyn();

		static void back(Float time);
		static ::Dynamic back_dyn();

		static void executeFrame();
		static ::Dynamic executeFrame_dyn();

		static void archiveTimeTask( ::kha::TimeTask timeTask,Float frameEnd);
		static ::Dynamic archiveTimeTask_dyn();

		static Float time();
		static ::Dynamic time_dyn();

		static Float realTime();
		static ::Dynamic realTime_dyn();

		static void resetTime();
		static ::Dynamic resetTime_dyn();

		static Int addBreakableFrameTask( ::Dynamic task,Int priority);
		static ::Dynamic addBreakableFrameTask_dyn();

		static Int addFrameTask( ::Dynamic task,Int priority);
		static ::Dynamic addFrameTask_dyn();

		static void pauseFrameTask(Int id,Bool paused);
		static ::Dynamic pauseFrameTask_dyn();

		static void removeFrameTask(Int id);
		static ::Dynamic removeFrameTask_dyn();

		static Int generateGroupId();
		static ::Dynamic generateGroupId_dyn();

		static Int addBreakableTimeTaskToGroup(Int groupId, ::Dynamic task,Float start,hx::Null< Float >  period,hx::Null< Float >  duration);
		static ::Dynamic addBreakableTimeTaskToGroup_dyn();

		static Int addTimeTaskToGroup(Int groupId, ::Dynamic task,Float start,hx::Null< Float >  period,hx::Null< Float >  duration);
		static ::Dynamic addTimeTaskToGroup_dyn();

		static Int addBreakableTimeTask( ::Dynamic task,Float start,hx::Null< Float >  period,hx::Null< Float >  duration);
		static ::Dynamic addBreakableTimeTask_dyn();

		static Int addTimeTask( ::Dynamic task,Float start,hx::Null< Float >  period,hx::Null< Float >  duration);
		static ::Dynamic addTimeTask_dyn();

		static  ::kha::TimeTask getTimeTask(Int id);
		static ::Dynamic getTimeTask_dyn();

		static void pauseTimeTask(Int id,Bool paused);
		static ::Dynamic pauseTimeTask_dyn();

		static void pauseRunningTimeTask( ::kha::TimeTask timeTask,Bool paused);
		static ::Dynamic pauseRunningTimeTask_dyn();

		static void pauseTimeTasks(Int groupId,Bool paused);
		static ::Dynamic pauseTimeTasks_dyn();

		static void removeTimeTask(Int id);
		static ::Dynamic removeTimeTask_dyn();

		static void removeTimeTasks(Int groupId);
		static ::Dynamic removeTimeTasks_dyn();

		static Int numTasksInSchedule();
		static ::Dynamic numTasksInSchedule_dyn();

		static void insertSorted(::Array< ::Dynamic> list, ::kha::TimeTask task);
		static ::Dynamic insertSorted_dyn();

		static void sortFrameTasks();
		static ::Dynamic sortFrameTasks_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_Scheduler */ 
