// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_Font
#define INCLUDED_kha_Font

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
HX_DECLARE_CLASS1(kha,Font)
HX_DECLARE_CLASS1(kha,Resource)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES Font_obj {
	public:
		typedef  ::kha::Resource_obj super;
		HX_DO_INTERFACE_RTTI;

		Float (hx::Object :: *_hx_height)(Int fontSize); 
		static inline Float height( ::Dynamic _hx_,Int fontSize) {
			return (_hx_.mPtr->*( static_cast< ::kha::Font_obj *>(_hx_.mPtr->_hx_getInterface(0xed915bd3)))->_hx_height)(fontSize);
		}
		Float (hx::Object :: *_hx_width)(Int fontSize,::String str); 
		static inline Float width( ::Dynamic _hx_,Int fontSize,::String str) {
			return (_hx_.mPtr->*( static_cast< ::kha::Font_obj *>(_hx_.mPtr->_hx_getInterface(0xed915bd3)))->_hx_width)(fontSize,str);
		}
		Float (hx::Object :: *_hx_baseline)(Int fontSize); 
		static inline Float baseline( ::Dynamic _hx_,Int fontSize) {
			return (_hx_.mPtr->*( static_cast< ::kha::Font_obj *>(_hx_.mPtr->_hx_getInterface(0xed915bd3)))->_hx_baseline)(fontSize);
		}
		void (hx::Object :: *_hx_unload)(); 
		static inline void unload( ::Dynamic _hx_) {
			(_hx_.mPtr->*( static_cast< ::kha::Font_obj *>(_hx_.mPtr->_hx_getInterface(0xed915bd3)))->_hx_unload)();
		}
};

} // end namespace kha

#endif /* INCLUDED_kha_Font */ 
