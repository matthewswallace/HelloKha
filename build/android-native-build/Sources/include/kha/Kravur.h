// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_Kravur
#define INCLUDED_kha_Kravur

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_Font
#include <kha/Font.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(kha,Blob)
HX_DECLARE_CLASS1(kha,Font)
HX_DECLARE_CLASS1(kha,Kravur)
HX_DECLARE_CLASS1(kha,KravurImage)
HX_DECLARE_CLASS1(kha,Resource)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES Kravur_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Kravur_obj OBJ_;
		Kravur_obj();

	public:
		void __construct( ::kha::Blob blob);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.Kravur")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.Kravur"); }
		static hx::ObjectPtr< Kravur_obj > __new( ::kha::Blob blob);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Kravur_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Kravur","\xd9","\xd3","\xe9","\xe0"); }

		 ::kha::Blob blob;
		 ::haxe::ds::IntMap images;
		 ::kha::KravurImage _get(Int fontSize,::Array< Int > glyphs);
		::Dynamic _get_dyn();

		Float height(Int fontSize);
		::Dynamic height_dyn();

		Float width(Int fontSize,::String str);
		::Dynamic width_dyn();

		Float baseline(Int fontSize);
		::Dynamic baseline_dyn();

		void unload();
		::Dynamic unload_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_Kravur */ 
