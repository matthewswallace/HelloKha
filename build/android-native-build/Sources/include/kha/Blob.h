// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_Blob
#define INCLUDED_kha_Blob

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(kha,Blob)


#include <Kore/pch.h>

namespace kha{


class HXCPP_CLASS_ATTRIBUTES Blob_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Blob_obj OBJ_;
		Blob_obj();

	public:
		void __construct( ::haxe::io::Bytes bytes);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.Blob")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.Blob"); }
		static hx::ObjectPtr< Blob_obj > __new( ::haxe::io::Bytes bytes);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Blob_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Blob","\x7d","\x69","\xf2","\x2b"); }

		static  ::kha::Blob fromBytes( ::haxe::io::Bytes bytes);
		static ::Dynamic fromBytes_dyn();

		static  ::kha::Blob alloc(Int size);
		static ::Dynamic alloc_dyn();

		 ::haxe::io::Bytes bytes;
		 ::kha::Blob sub(Int start,Int length);
		::Dynamic sub_dyn();

		Int length;
		Int get_length();
		::Dynamic get_length_dyn();

		void writeU8(Int position,Int value);
		::Dynamic writeU8_dyn();

		Int readS8(Int position);
		::Dynamic readS8_dyn();

		Int readU8(Int position);
		::Dynamic readU8_dyn();

		Int readS16LE(Int position);
		::Dynamic readS16LE_dyn();

		Int readS16BE(Int position);
		::Dynamic readS16BE_dyn();

		Int readU16LE(Int position);
		::Dynamic readU16LE_dyn();

		Int readU16BE(Int position);
		::Dynamic readU16BE_dyn();

		Int readS32LE(Int position);
		::Dynamic readS32LE_dyn();

		Int readS32BE(Int position);
		::Dynamic readS32BE_dyn();

		Int readU32LE(Int position);
		::Dynamic readU32LE_dyn();

		Int readU32BE(Int position);
		::Dynamic readU32BE_dyn();

		Float readF32LE(Int position);
		::Dynamic readF32LE_dyn();

		Float readF32BE(Int position);
		::Dynamic readF32BE_dyn();

		Float readF64LE(Int position);
		::Dynamic readF64LE_dyn();

		Float readF64BE(Int position);
		::Dynamic readF64BE_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::haxe::io::Bytes toBytes();
		::Dynamic toBytes_dyn();

		void unload();
		::Dynamic unload_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_Blob */ 
