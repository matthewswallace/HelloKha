// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha__Color_Color_Impl_
#define INCLUDED_kha__Color_Color_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(kha,_Color,Color_Impl_)

namespace kha{
namespace _Color{


class HXCPP_CLASS_ATTRIBUTES Color_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Color_Impl__obj OBJ_;
		Color_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha._Color.Color_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"kha._Color.Color_Impl_"); }
		static hx::ObjectPtr< Color_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Color_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Color_Impl_","\x23","\xf2","\x4f","\xb6"); }

		static void __boot();
		static Int Black;
		static Int White;
		static Int Red;
		static Int Blue;
		static Int Green;
		static Int Magenta;
		static Int Yellow;
		static Int Cyan;
		static Int Purple;
		static Int Pink;
		static Int Orange;
		static float invMaxChannelValue;
		static Int fromValue(Int value);
		static ::Dynamic fromValue_dyn();

		static Int fromBytes(Int r,Int g,Int b,hx::Null< Int >  a);
		static ::Dynamic fromBytes_dyn();

		static Int fromFloats(float r,float g,float b,hx::Null< float >  a);
		static ::Dynamic fromFloats_dyn();

		static Int fromString(::String value);
		static ::Dynamic fromString_dyn();

		static Int _new(Int value);
		static ::Dynamic _new_dyn();

		static Int get_value(Int this1);
		static ::Dynamic get_value_dyn();

		static Int set_value(Int this1,Int value);
		static ::Dynamic set_value_dyn();

		static Int get_Rb(Int this1);
		static ::Dynamic get_Rb_dyn();

		static Int get_Gb(Int this1);
		static ::Dynamic get_Gb_dyn();

		static Int get_Bb(Int this1);
		static ::Dynamic get_Bb_dyn();

		static Int get_Ab(Int this1);
		static ::Dynamic get_Ab_dyn();

		static Int set_Rb(Int this1,Int i);
		static ::Dynamic set_Rb_dyn();

		static Int set_Gb(Int this1,Int i);
		static ::Dynamic set_Gb_dyn();

		static Int set_Bb(Int this1,Int i);
		static ::Dynamic set_Bb_dyn();

		static Int set_Ab(Int this1,Int i);
		static ::Dynamic set_Ab_dyn();

		static float get_R(Int this1);
		static ::Dynamic get_R_dyn();

		static float get_G(Int this1);
		static ::Dynamic get_G_dyn();

		static float get_B(Int this1);
		static ::Dynamic get_B_dyn();

		static float get_A(Int this1);
		static ::Dynamic get_A_dyn();

		static float set_R(Int this1,float f);
		static ::Dynamic set_R_dyn();

		static float set_G(Int this1,float f);
		static ::Dynamic set_G_dyn();

		static float set_B(Int this1,float f);
		static ::Dynamic set_B_dyn();

		static float set_A(Int this1,float f);
		static ::Dynamic set_A_dyn();

};

} // end namespace kha
} // end namespace _Color

#endif /* INCLUDED_kha__Color_Color_Impl_ */ 
