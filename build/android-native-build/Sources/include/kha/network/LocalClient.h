// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_network_LocalClient
#define INCLUDED_kha_network_LocalClient

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_network_Client
#include <kha/network/Client.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(kha,network,Client)
HX_DECLARE_CLASS2(kha,network,Controller)
HX_DECLARE_CLASS2(kha,network,LocalClient)

namespace kha{
namespace network{


class HXCPP_CLASS_ATTRIBUTES LocalClient_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef LocalClient_obj OBJ_;
		LocalClient_obj();

	public:
		void __construct(Int id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.network.LocalClient")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.network.LocalClient"); }
		static hx::ObjectPtr< LocalClient_obj > __new(Int id);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LocalClient_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("LocalClient","\xf6","\x01","\xbd","\xab"); }

		Int myId;
		void send( ::haxe::io::Bytes bytes,Bool mandatory);
		::Dynamic send_dyn();

		void receive( ::Dynamic receiver);
		::Dynamic receive_dyn();

		void onClose( ::Dynamic close);
		::Dynamic onClose_dyn();

		::Array< ::Dynamic> controllers;
		::Array< ::Dynamic> get_controllers();
		::Dynamic get_controllers_dyn();

		Int id;
		Int get_id();
		::Dynamic get_id_dyn();

};

} // end namespace kha
} // end namespace network

#endif /* INCLUDED_kha_network_LocalClient */ 
