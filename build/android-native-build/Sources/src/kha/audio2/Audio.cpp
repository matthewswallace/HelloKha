// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <kha/Sound.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio
#include <kha/audio2/Audio.h>
#endif
#ifndef INCLUDED_kha_audio2_Buffer
#include <kha/audio2/Buffer.h>
#endif

namespace kha{
namespace audio2{

void Audio_obj::__construct() { }

Dynamic Audio_obj::__CreateEmpty() { return new Audio_obj; }

hx::ObjectPtr< Audio_obj > Audio_obj::__new()
{
	hx::ObjectPtr< Audio_obj > _hx_result = new Audio_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Audio_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Audio_obj > _hx_result = new Audio_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::kha::audio2::Buffer Audio_obj::buffer;

void Audio_obj::_init(){
            	HX_STACK_FRAME("kha.audio2.Audio","_init",0xded2726f,"kha.audio2.Audio._init","kha/audio2/Audio.hx",12,0xd33fa1b0)
HXLINE(  12)		::kha::audio2::Audio_obj::buffer =  ::kha::audio2::Buffer_obj::__new((int)8192,(int)2,(int)44100);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,_init,(void))

void Audio_obj::_callCallback(Int samples){
            	HX_STACK_FRAME("kha.audio2.Audio","_callCallback",0xe4856ae2,"kha.audio2.Audio._callCallback","kha/audio2/Audio.hx",16,0xd33fa1b0)
            	HX_STACK_ARG(samples,"samples")
HXLINE(  17)		Bool _hx_tmp = hx::IsNull( ::kha::audio2::Audio_obj::buffer );
HXDLIN(  17)		if (_hx_tmp) {
HXLINE(  17)			return;
            		}
HXLINE(  18)		Bool _hx_tmp1 = hx::IsNotNull( ::kha::audio2::Audio_obj::audioCallback );
HXDLIN(  18)		if (_hx_tmp1) {
HXLINE(  19)			::kha::audio2::Audio_obj::audioCallback(samples,::kha::audio2::Audio_obj::buffer);
            		}
            		else {
HXLINE(  22)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  22)			while((_g1 < samples)){
HXLINE(  22)				++_g1;
HXLINE(  23)				{
HXLINE(  23)					Int index = ::kha::audio2::Audio_obj::buffer->writeLocation;
HXDLIN(  23)					::kha::audio2::Audio_obj::buffer->data->__unsafe_set(index,(int)0);
            				}
HXLINE(  24)				hx::AddEq(::kha::audio2::Audio_obj::buffer->writeLocation,(int)1);
HXLINE(  25)				Bool _hx_tmp2 = (::kha::audio2::Audio_obj::buffer->writeLocation >= ::kha::audio2::Audio_obj::buffer->size);
HXDLIN(  25)				if (_hx_tmp2) {
HXLINE(  26)					::kha::audio2::Audio_obj::buffer->writeLocation = (int)0;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,_callCallback,(void))

Float Audio_obj::_readSample(){
            	HX_STACK_FRAME("kha.audio2.Audio","_readSample",0xa617ccbf,"kha.audio2.Audio._readSample","kha/audio2/Audio.hx",33,0xd33fa1b0)
HXLINE(  34)		Bool _hx_tmp = hx::IsNull( ::kha::audio2::Audio_obj::buffer );
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  34)			return (int)0;
            		}
HXLINE(  35)		Int index = ::kha::audio2::Audio_obj::buffer->readLocation;
HXDLIN(  35)		HX_VARI( Float,value) = ( (Float)(_hx_array_unsafe_get(::kha::audio2::Audio_obj::buffer->data,index)) );
HXLINE(  36)		++::kha::audio2::Audio_obj::buffer->readLocation;
HXLINE(  37)		Bool _hx_tmp1 = (::kha::audio2::Audio_obj::buffer->readLocation >= ::kha::audio2::Audio_obj::buffer->size);
HXDLIN(  37)		if (_hx_tmp1) {
HXLINE(  38)			::kha::audio2::Audio_obj::buffer->readLocation = (int)0;
            		}
HXLINE(  40)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,_readSample,return )

 ::Dynamic Audio_obj::audioCallback;

::Dynamic Audio_obj::stream( ::kha::Sound sound,hx::Null< Bool >  __o_loop){
Bool loop = __o_loop.Default(false);
            	HX_STACK_FRAME("kha.audio2.Audio","stream",0x707f0900,"kha.audio2.Audio.stream","kha/audio2/Audio.hx",46,0xd33fa1b0)
            	HX_STACK_ARG(sound,"sound")
            	HX_STACK_ARG(loop,"loop")
HXLINE(  46)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,stream,return )


Audio_obj::Audio_obj()
{
}

bool Audio_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_init") ) { outValue = _init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { outValue = buffer; return true; }
		if (HX_FIELD_EQ(inName,"stream") ) { outValue = stream_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_readSample") ) { outValue = _readSample_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_callCallback") ) { outValue = _callCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"audioCallback") ) { outValue = audioCallback; return true; }
	}
	return false;
}

bool Audio_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=ioValue.Cast<  ::kha::audio2::Buffer >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"audioCallback") ) { audioCallback=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Audio_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Audio_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::audio2::Buffer*/ ,(void *) &Audio_obj::buffer,HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Audio_obj::audioCallback,HX_HCSTRING("audioCallback","\xbb","\x94","\x3e","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Audio_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Audio_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Audio_obj::buffer,"buffer");
	HX_MARK_MEMBER_NAME(Audio_obj::audioCallback,"audioCallback");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Audio_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Audio_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Audio_obj::buffer,"buffer");
	HX_VISIT_MEMBER_NAME(Audio_obj::audioCallback,"audioCallback");
};

#endif

hx::Class Audio_obj::__mClass;

static ::String Audio_obj_sStaticFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("_init","\xef","\x56","\xcc","\xf8"),
	HX_HCSTRING("_callCallback","\x62","\xcf","\xb7","\x99"),
	HX_HCSTRING("_readSample","\x3f","\x11","\x50","\xe9"),
	HX_HCSTRING("audioCallback","\xbb","\x94","\x3e","\x7f"),
	HX_HCSTRING("stream","\x80","\x14","\x2d","\x11"),
	::String(null())
};

void Audio_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.Audio","\xee","\xdb","\x10","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Audio_obj::__GetStatic;
	__mClass->mSetStaticField = &Audio_obj::__SetStatic;
	__mClass->mMarkFunc = Audio_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Audio_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Audio_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Audio_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Audio_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Audio_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
