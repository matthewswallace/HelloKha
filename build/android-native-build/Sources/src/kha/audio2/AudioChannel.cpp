// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_audio1_AudioChannel
#include <kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_AudioChannel
#include <kha/audio2/AudioChannel.h>
#endif

namespace kha{
namespace audio2{

void AudioChannel_obj::__construct(Bool looping){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","new",0x149245e7,"kha.audio2.AudioChannel.new","kha/audio2/AudioChannel.hx",5,0x9a222549)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(looping,"looping")
HXLINE(   9)		this->paused = false;
HXLINE(  13)		this->looping = looping;
HXLINE(  14)		this->myVolume = (int)1;
HXLINE(  15)		this->myPosition = (int)0;
            	}

Dynamic AudioChannel_obj::__CreateEmpty() { return new AudioChannel_obj; }

hx::ObjectPtr< AudioChannel_obj > AudioChannel_obj::__new(Bool looping)
{
	hx::ObjectPtr< AudioChannel_obj > _hx_result = new AudioChannel_obj();
	_hx_result->__construct(looping);
	return _hx_result;
}

Dynamic AudioChannel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioChannel_obj > _hx_result = new AudioChannel_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::kha::audio1::AudioChannel_obj _hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel= {
	( void (hx::Object::*)())&::kha::audio2::AudioChannel_obj::play,
	( void (hx::Object::*)())&::kha::audio2::AudioChannel_obj::pause,
	( void (hx::Object::*)())&::kha::audio2::AudioChannel_obj::stop,
	( Float (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_length,
	( Float (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_position,
	( Float (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_volume,
	( Float (hx::Object::*)(Float))&::kha::audio2::AudioChannel_obj::set_volume,
	( Bool (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_finished,
};

void *AudioChannel_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x78040b2c: return &_hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void AudioChannel_obj::nextSamples(::Array< float > samples,Int length,Int sampleRate){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","nextSamples",0x6e9d10dd,"kha.audio2.AudioChannel.nextSamples","kha/audio2/AudioChannel.hx",18,0x9a222549)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(samples,"samples")
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(sampleRate,"sampleRate")
HXLINE(  19)		Bool _hx_tmp = this->paused;
HXDLIN(  19)		if (_hx_tmp) {
HXLINE(  20)			{
HXLINE(  20)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)				while((_g1 < length)){
HXLINE(  20)					HX_VARI( Int,i) = _g1++;
HXLINE(  21)					samples->__unsafe_set(i,(int)0);
            				}
            			}
HXLINE(  23)			return;
            		}
HXLINE(  26)		{
HXLINE(  26)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  26)			while((_g11 < length)){
HXLINE(  26)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE(  27)				Bool _hx_tmp1;
HXDLIN(  27)				if ((this->myPosition >= this->data->length)) {
HXLINE(  27)					_hx_tmp1 = this->looping;
            				}
            				else {
HXLINE(  27)					_hx_tmp1 = false;
            				}
HXDLIN(  27)				if (_hx_tmp1) {
HXLINE(  28)					this->myPosition = (int)0;
            				}
HXLINE(  30)				{
HXLINE(  30)					float val;
HXDLIN(  30)					Bool _hx_tmp2 = (this->myPosition < this->data->length);
HXDLIN(  30)					if (_hx_tmp2) {
HXLINE(  30)						Int index = this->myPosition;
HXDLIN(  30)						val = ( (Float)(_hx_array_unsafe_get(this->data,index)) );
            					}
            					else {
HXLINE(  30)						val = (int)0;
            					}
HXDLIN(  30)					samples->__unsafe_set(i1,val);
            				}
HXLINE(  31)				++this->myPosition;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AudioChannel_obj,nextSamples,(void))

void AudioChannel_obj::play(){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","play",0xecc28e8d,"kha.audio2.AudioChannel.play","kha/audio2/AudioChannel.hx",36,0x9a222549)
            	HX_STACK_THIS(this)
HXLINE(  36)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,play,(void))

void AudioChannel_obj::pause(){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","pause",0x3643fc3d,"kha.audio2.AudioChannel.pause","kha/audio2/AudioChannel.hx",40,0x9a222549)
            	HX_STACK_THIS(this)
HXLINE(  40)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,pause,(void))

void AudioChannel_obj::stop(){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","stop",0xeec4509b,"kha.audio2.AudioChannel.stop","kha/audio2/AudioChannel.hx",44,0x9a222549)
            	HX_STACK_THIS(this)
HXLINE(  44)		this->myPosition = this->data->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,stop,(void))

Float AudioChannel_obj::get_length(){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","get_length",0xd6d35e08,"kha.audio2.AudioChannel.get_length","kha/audio2/AudioChannel.hx",50,0x9a222549)
            	HX_STACK_THIS(this)
HXLINE(  50)		return ((Float)((Float)this->data->length / (Float)(int)44100) / (Float)(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_length,return )

Float AudioChannel_obj::get_position(){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","get_position",0x6424764b,"kha.audio2.AudioChannel.get_position","kha/audio2/AudioChannel.hx",56,0x9a222549)
            	HX_STACK_THIS(this)
HXLINE(  56)		return ((Float)((Float)this->myPosition / (Float)(int)44100) / (Float)(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_position,return )

Float AudioChannel_obj::get_volume(){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","get_volume",0x971ef2fc,"kha.audio2.AudioChannel.get_volume","kha/audio2/AudioChannel.hx",62,0x9a222549)
            	HX_STACK_THIS(this)
HXLINE(  62)		return this->myVolume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_volume,return )

Float AudioChannel_obj::set_volume(Float value){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","set_volume",0x9a9c9170,"kha.audio2.AudioChannel.set_volume","kha/audio2/AudioChannel.hx",66,0x9a222549)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  66)		return (this->myVolume = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_volume,return )

Bool AudioChannel_obj::get_finished(){
            	HX_STACK_FRAME("kha.audio2.AudioChannel","get_finished",0x2e386914,"kha.audio2.AudioChannel.get_finished","kha/audio2/AudioChannel.hx",72,0x9a222549)
            	HX_STACK_THIS(this)
HXLINE(  72)		return (this->myPosition >= this->data->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_finished,return )


AudioChannel_obj::AudioChannel_obj()
{
}

void AudioChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioChannel);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(myVolume,"myVolume");
	HX_MARK_MEMBER_NAME(myPosition,"myPosition");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(looping,"looping");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_END_CLASS();
}

void AudioChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(myVolume,"myVolume");
	HX_VISIT_MEMBER_NAME(myPosition,"myPosition");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(looping,"looping");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(finished,"finished");
}

hx::Val AudioChannel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_volume()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"looping") ) { return hx::Val( looping); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { return hx::Val( myVolume); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( inCallProp == hx::paccAlways ? get_position() : position); }
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( inCallProp == hx::paccAlways ? get_finished() : finished); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { return hx::Val( myPosition); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return hx::Val( get_volume_dyn()); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return hx::Val( set_volume_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nextSamples") ) { return hx::Val( nextSamples_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"get_finished") ) { return hx::Val( get_finished_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AudioChannel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_volume(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"looping") ) { looping=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { myVolume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { myPosition=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("myVolume","\x66","\x56","\x07","\x96"));
	outFields->push(HX_HCSTRING("myPosition","\x35","\x08","\x7c","\x38"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("looping","\xfe","\x7c","\x7d","\x20"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AudioChannel_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(AudioChannel_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsFloat,(int)offsetof(AudioChannel_obj,myVolume),HX_HCSTRING("myVolume","\x66","\x56","\x07","\x96")},
	{hx::fsInt,(int)offsetof(AudioChannel_obj,myPosition),HX_HCSTRING("myPosition","\x35","\x08","\x7c","\x38")},
	{hx::fsBool,(int)offsetof(AudioChannel_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsBool,(int)offsetof(AudioChannel_obj,looping),HX_HCSTRING("looping","\xfe","\x7c","\x7d","\x20")},
	{hx::fsFloat,(int)offsetof(AudioChannel_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsFloat,(int)offsetof(AudioChannel_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsBool,(int)offsetof(AudioChannel_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AudioChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioChannel_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("myVolume","\x66","\x56","\x07","\x96"),
	HX_HCSTRING("myPosition","\x35","\x08","\x7c","\x38"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("looping","\xfe","\x7c","\x7d","\x20"),
	HX_HCSTRING("nextSamples","\x56","\x3c","\x13","\x5a"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("get_volume","\xa3","\x99","\xda","\x4f"),
	HX_HCSTRING("set_volume","\x17","\x38","\x58","\x53"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("get_finished","\x7b","\x47","\x28","\x4a"),
	::String(null()) };

static void AudioChannel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AudioChannel_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AudioChannel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AudioChannel_obj::__mClass,"__mClass");
};

#endif

hx::Class AudioChannel_obj::__mClass;

void AudioChannel_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.AudioChannel","\x75","\xc6","\x99","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AudioChannel_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AudioChannel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AudioChannel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AudioChannel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioChannel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
