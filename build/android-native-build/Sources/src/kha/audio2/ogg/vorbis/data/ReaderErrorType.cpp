// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::BAD_PACKET_TYPE;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::CANT_FIND_LAST_PAGE;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::CONTINUED_PACKET_FLAG_INVALID;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::FEATURE_NOT_SUPPORTED;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::FILE_OPEN_FAILURE;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::INCORRECT_STREAM_SERIAL_NUMBER;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::INVALID_API_MIXING;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::INVALID_FIRST_PAGE;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::INVALID_SETUP;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::INVALID_STREAM;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::INVALID_STREAM_STRUCTURE_VERSION;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::MISSING_CAPTURE_PATTERN;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::NEED_MORE_DATA;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::OTHER;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::OUTOFMEM;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::SEEK_FAILED;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::SEEK_INVALID;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::SEEK_WITHOUT_LENGTH;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::TOO_MANY_CHANNELS;

::kha::audio2::ogg::vorbis::data::ReaderErrorType ReaderErrorType_obj::UNEXPECTED_EOF;

bool ReaderErrorType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BAD_PACKET_TYPE",37,65,8a,89)) { outValue = ReaderErrorType_obj::BAD_PACKET_TYPE; return true; }
	if (inName==HX_("CANT_FIND_LAST_PAGE",0d,60,a4,66)) { outValue = ReaderErrorType_obj::CANT_FIND_LAST_PAGE; return true; }
	if (inName==HX_("CONTINUED_PACKET_FLAG_INVALID",d9,2f,6e,7b)) { outValue = ReaderErrorType_obj::CONTINUED_PACKET_FLAG_INVALID; return true; }
	if (inName==HX_("FEATURE_NOT_SUPPORTED",d9,c5,59,6d)) { outValue = ReaderErrorType_obj::FEATURE_NOT_SUPPORTED; return true; }
	if (inName==HX_("FILE_OPEN_FAILURE",58,e2,fb,aa)) { outValue = ReaderErrorType_obj::FILE_OPEN_FAILURE; return true; }
	if (inName==HX_("INCORRECT_STREAM_SERIAL_NUMBER",6f,d0,09,81)) { outValue = ReaderErrorType_obj::INCORRECT_STREAM_SERIAL_NUMBER; return true; }
	if (inName==HX_("INVALID_API_MIXING",d3,5c,e6,63)) { outValue = ReaderErrorType_obj::INVALID_API_MIXING; return true; }
	if (inName==HX_("INVALID_FIRST_PAGE",c6,c3,85,e2)) { outValue = ReaderErrorType_obj::INVALID_FIRST_PAGE; return true; }
	if (inName==HX_("INVALID_SETUP",b5,17,9e,f8)) { outValue = ReaderErrorType_obj::INVALID_SETUP; return true; }
	if (inName==HX_("INVALID_STREAM",28,bc,5a,33)) { outValue = ReaderErrorType_obj::INVALID_STREAM; return true; }
	if (inName==HX_("INVALID_STREAM_STRUCTURE_VERSION",75,2e,4f,be)) { outValue = ReaderErrorType_obj::INVALID_STREAM_STRUCTURE_VERSION; return true; }
	if (inName==HX_("MISSING_CAPTURE_PATTERN",de,ef,15,71)) { outValue = ReaderErrorType_obj::MISSING_CAPTURE_PATTERN; return true; }
	if (inName==HX_("NEED_MORE_DATA",eb,b5,e3,4e)) { outValue = ReaderErrorType_obj::NEED_MORE_DATA; return true; }
	if (inName==HX_("OTHER",b0,9e,64,b4)) { outValue = ReaderErrorType_obj::OTHER; return true; }
	if (inName==HX_("OUTOFMEM",10,62,53,b6)) { outValue = ReaderErrorType_obj::OUTOFMEM; return true; }
	if (inName==HX_("SEEK_FAILED",e4,54,00,42)) { outValue = ReaderErrorType_obj::SEEK_FAILED; return true; }
	if (inName==HX_("SEEK_INVALID",d0,8d,a3,a2)) { outValue = ReaderErrorType_obj::SEEK_INVALID; return true; }
	if (inName==HX_("SEEK_WITHOUT_LENGTH",84,c3,3b,4c)) { outValue = ReaderErrorType_obj::SEEK_WITHOUT_LENGTH; return true; }
	if (inName==HX_("TOO_MANY_CHANNELS",e5,f6,08,7e)) { outValue = ReaderErrorType_obj::TOO_MANY_CHANNELS; return true; }
	if (inName==HX_("UNEXPECTED_EOF",ee,2b,b5,75)) { outValue = ReaderErrorType_obj::UNEXPECTED_EOF; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(ReaderErrorType_obj)

int ReaderErrorType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("BAD_PACKET_TYPE",37,65,8a,89)) return 16;
	if (inName==HX_("CANT_FIND_LAST_PAGE",0d,60,a4,66)) return 17;
	if (inName==HX_("CONTINUED_PACKET_FLAG_INVALID",d9,2f,6e,7b)) return 13;
	if (inName==HX_("FEATURE_NOT_SUPPORTED",d9,c5,59,6d)) return 3;
	if (inName==HX_("FILE_OPEN_FAILURE",58,e2,fb,aa)) return 5;
	if (inName==HX_("INCORRECT_STREAM_SERIAL_NUMBER",6f,d0,09,81)) return 14;
	if (inName==HX_("INVALID_API_MIXING",d3,5c,e6,63)) return 1;
	if (inName==HX_("INVALID_FIRST_PAGE",c6,c3,85,e2)) return 15;
	if (inName==HX_("INVALID_SETUP",b5,17,9e,f8)) return 9;
	if (inName==HX_("INVALID_STREAM",28,bc,5a,33)) return 10;
	if (inName==HX_("INVALID_STREAM_STRUCTURE_VERSION",75,2e,4f,be)) return 12;
	if (inName==HX_("MISSING_CAPTURE_PATTERN",de,ef,15,71)) return 11;
	if (inName==HX_("NEED_MORE_DATA",eb,b5,e3,4e)) return 0;
	if (inName==HX_("OTHER",b0,9e,64,b4)) return 19;
	if (inName==HX_("OUTOFMEM",10,62,53,b6)) return 2;
	if (inName==HX_("SEEK_FAILED",e4,54,00,42)) return 18;
	if (inName==HX_("SEEK_INVALID",d0,8d,a3,a2)) return 8;
	if (inName==HX_("SEEK_WITHOUT_LENGTH",84,c3,3b,4c)) return 6;
	if (inName==HX_("TOO_MANY_CHANNELS",e5,f6,08,7e)) return 4;
	if (inName==HX_("UNEXPECTED_EOF",ee,2b,b5,75)) return 7;
	return super::__FindIndex(inName);
}

int ReaderErrorType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("BAD_PACKET_TYPE",37,65,8a,89)) return 0;
	if (inName==HX_("CANT_FIND_LAST_PAGE",0d,60,a4,66)) return 0;
	if (inName==HX_("CONTINUED_PACKET_FLAG_INVALID",d9,2f,6e,7b)) return 0;
	if (inName==HX_("FEATURE_NOT_SUPPORTED",d9,c5,59,6d)) return 0;
	if (inName==HX_("FILE_OPEN_FAILURE",58,e2,fb,aa)) return 0;
	if (inName==HX_("INCORRECT_STREAM_SERIAL_NUMBER",6f,d0,09,81)) return 0;
	if (inName==HX_("INVALID_API_MIXING",d3,5c,e6,63)) return 0;
	if (inName==HX_("INVALID_FIRST_PAGE",c6,c3,85,e2)) return 0;
	if (inName==HX_("INVALID_SETUP",b5,17,9e,f8)) return 0;
	if (inName==HX_("INVALID_STREAM",28,bc,5a,33)) return 0;
	if (inName==HX_("INVALID_STREAM_STRUCTURE_VERSION",75,2e,4f,be)) return 0;
	if (inName==HX_("MISSING_CAPTURE_PATTERN",de,ef,15,71)) return 0;
	if (inName==HX_("NEED_MORE_DATA",eb,b5,e3,4e)) return 0;
	if (inName==HX_("OTHER",b0,9e,64,b4)) return 0;
	if (inName==HX_("OUTOFMEM",10,62,53,b6)) return 0;
	if (inName==HX_("SEEK_FAILED",e4,54,00,42)) return 0;
	if (inName==HX_("SEEK_INVALID",d0,8d,a3,a2)) return 0;
	if (inName==HX_("SEEK_WITHOUT_LENGTH",84,c3,3b,4c)) return 0;
	if (inName==HX_("TOO_MANY_CHANNELS",e5,f6,08,7e)) return 0;
	if (inName==HX_("UNEXPECTED_EOF",ee,2b,b5,75)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val ReaderErrorType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BAD_PACKET_TYPE",37,65,8a,89)) return BAD_PACKET_TYPE;
	if (inName==HX_("CANT_FIND_LAST_PAGE",0d,60,a4,66)) return CANT_FIND_LAST_PAGE;
	if (inName==HX_("CONTINUED_PACKET_FLAG_INVALID",d9,2f,6e,7b)) return CONTINUED_PACKET_FLAG_INVALID;
	if (inName==HX_("FEATURE_NOT_SUPPORTED",d9,c5,59,6d)) return FEATURE_NOT_SUPPORTED;
	if (inName==HX_("FILE_OPEN_FAILURE",58,e2,fb,aa)) return FILE_OPEN_FAILURE;
	if (inName==HX_("INCORRECT_STREAM_SERIAL_NUMBER",6f,d0,09,81)) return INCORRECT_STREAM_SERIAL_NUMBER;
	if (inName==HX_("INVALID_API_MIXING",d3,5c,e6,63)) return INVALID_API_MIXING;
	if (inName==HX_("INVALID_FIRST_PAGE",c6,c3,85,e2)) return INVALID_FIRST_PAGE;
	if (inName==HX_("INVALID_SETUP",b5,17,9e,f8)) return INVALID_SETUP;
	if (inName==HX_("INVALID_STREAM",28,bc,5a,33)) return INVALID_STREAM;
	if (inName==HX_("INVALID_STREAM_STRUCTURE_VERSION",75,2e,4f,be)) return INVALID_STREAM_STRUCTURE_VERSION;
	if (inName==HX_("MISSING_CAPTURE_PATTERN",de,ef,15,71)) return MISSING_CAPTURE_PATTERN;
	if (inName==HX_("NEED_MORE_DATA",eb,b5,e3,4e)) return NEED_MORE_DATA;
	if (inName==HX_("OTHER",b0,9e,64,b4)) return OTHER;
	if (inName==HX_("OUTOFMEM",10,62,53,b6)) return OUTOFMEM;
	if (inName==HX_("SEEK_FAILED",e4,54,00,42)) return SEEK_FAILED;
	if (inName==HX_("SEEK_INVALID",d0,8d,a3,a2)) return SEEK_INVALID;
	if (inName==HX_("SEEK_WITHOUT_LENGTH",84,c3,3b,4c)) return SEEK_WITHOUT_LENGTH;
	if (inName==HX_("TOO_MANY_CHANNELS",e5,f6,08,7e)) return TOO_MANY_CHANNELS;
	if (inName==HX_("UNEXPECTED_EOF",ee,2b,b5,75)) return UNEXPECTED_EOF;
	return super::__Field(inName,inCallProp);
}

static ::String ReaderErrorType_obj_sStaticFields[] = {
	HX_("NEED_MORE_DATA",eb,b5,e3,4e),
	HX_("INVALID_API_MIXING",d3,5c,e6,63),
	HX_("OUTOFMEM",10,62,53,b6),
	HX_("FEATURE_NOT_SUPPORTED",d9,c5,59,6d),
	HX_("TOO_MANY_CHANNELS",e5,f6,08,7e),
	HX_("FILE_OPEN_FAILURE",58,e2,fb,aa),
	HX_("SEEK_WITHOUT_LENGTH",84,c3,3b,4c),
	HX_("UNEXPECTED_EOF",ee,2b,b5,75),
	HX_("SEEK_INVALID",d0,8d,a3,a2),
	HX_("INVALID_SETUP",b5,17,9e,f8),
	HX_("INVALID_STREAM",28,bc,5a,33),
	HX_("MISSING_CAPTURE_PATTERN",de,ef,15,71),
	HX_("INVALID_STREAM_STRUCTURE_VERSION",75,2e,4f,be),
	HX_("CONTINUED_PACKET_FLAG_INVALID",d9,2f,6e,7b),
	HX_("INCORRECT_STREAM_SERIAL_NUMBER",6f,d0,09,81),
	HX_("INVALID_FIRST_PAGE",c6,c3,85,e2),
	HX_("BAD_PACKET_TYPE",37,65,8a,89),
	HX_("CANT_FIND_LAST_PAGE",0d,60,a4,66),
	HX_("SEEK_FAILED",e4,54,00,42),
	HX_("OTHER",b0,9e,64,b4),
	::String(null())
};

static void ReaderErrorType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::BAD_PACKET_TYPE,"BAD_PACKET_TYPE");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::CANT_FIND_LAST_PAGE,"CANT_FIND_LAST_PAGE");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::CONTINUED_PACKET_FLAG_INVALID,"CONTINUED_PACKET_FLAG_INVALID");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::FEATURE_NOT_SUPPORTED,"FEATURE_NOT_SUPPORTED");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::FILE_OPEN_FAILURE,"FILE_OPEN_FAILURE");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::INCORRECT_STREAM_SERIAL_NUMBER,"INCORRECT_STREAM_SERIAL_NUMBER");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::INVALID_API_MIXING,"INVALID_API_MIXING");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::INVALID_FIRST_PAGE,"INVALID_FIRST_PAGE");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::INVALID_SETUP,"INVALID_SETUP");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::INVALID_STREAM,"INVALID_STREAM");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::INVALID_STREAM_STRUCTURE_VERSION,"INVALID_STREAM_STRUCTURE_VERSION");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::MISSING_CAPTURE_PATTERN,"MISSING_CAPTURE_PATTERN");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::NEED_MORE_DATA,"NEED_MORE_DATA");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::OTHER,"OTHER");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::OUTOFMEM,"OUTOFMEM");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::SEEK_FAILED,"SEEK_FAILED");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::SEEK_INVALID,"SEEK_INVALID");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::SEEK_WITHOUT_LENGTH,"SEEK_WITHOUT_LENGTH");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::TOO_MANY_CHANNELS,"TOO_MANY_CHANNELS");
	HX_MARK_MEMBER_NAME(ReaderErrorType_obj::UNEXPECTED_EOF,"UNEXPECTED_EOF");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ReaderErrorType_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::BAD_PACKET_TYPE,"BAD_PACKET_TYPE");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::CANT_FIND_LAST_PAGE,"CANT_FIND_LAST_PAGE");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::CONTINUED_PACKET_FLAG_INVALID,"CONTINUED_PACKET_FLAG_INVALID");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::FEATURE_NOT_SUPPORTED,"FEATURE_NOT_SUPPORTED");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::FILE_OPEN_FAILURE,"FILE_OPEN_FAILURE");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::INCORRECT_STREAM_SERIAL_NUMBER,"INCORRECT_STREAM_SERIAL_NUMBER");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::INVALID_API_MIXING,"INVALID_API_MIXING");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::INVALID_FIRST_PAGE,"INVALID_FIRST_PAGE");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::INVALID_SETUP,"INVALID_SETUP");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::INVALID_STREAM,"INVALID_STREAM");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::INVALID_STREAM_STRUCTURE_VERSION,"INVALID_STREAM_STRUCTURE_VERSION");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::MISSING_CAPTURE_PATTERN,"MISSING_CAPTURE_PATTERN");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::NEED_MORE_DATA,"NEED_MORE_DATA");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::OTHER,"OTHER");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::OUTOFMEM,"OUTOFMEM");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::SEEK_FAILED,"SEEK_FAILED");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::SEEK_INVALID,"SEEK_INVALID");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::SEEK_WITHOUT_LENGTH,"SEEK_WITHOUT_LENGTH");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::TOO_MANY_CHANNELS,"TOO_MANY_CHANNELS");
	HX_VISIT_MEMBER_NAME(ReaderErrorType_obj::UNEXPECTED_EOF,"UNEXPECTED_EOF");
};
#endif

hx::Class ReaderErrorType_obj::__mClass;

Dynamic __Create_ReaderErrorType_obj() { return new ReaderErrorType_obj; }

void ReaderErrorType_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("kha.audio2.ogg.vorbis.data.ReaderErrorType","\x0f","\xf0","\xfb","\x45"), hx::TCanCast< ReaderErrorType_obj >,ReaderErrorType_obj_sStaticFields,0,
	&__Create_ReaderErrorType_obj, &__Create,
	&super::__SGetClass(), &CreateReaderErrorType_obj, ReaderErrorType_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , ReaderErrorType_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &ReaderErrorType_obj::__GetStatic;
}

void ReaderErrorType_obj::__boot()
{
BAD_PACKET_TYPE = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("BAD_PACKET_TYPE","\x37","\x65","\x8a","\x89"),16,0);
CANT_FIND_LAST_PAGE = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("CANT_FIND_LAST_PAGE","\x0d","\x60","\xa4","\x66"),17,0);
CONTINUED_PACKET_FLAG_INVALID = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("CONTINUED_PACKET_FLAG_INVALID","\xd9","\x2f","\x6e","\x7b"),13,0);
FEATURE_NOT_SUPPORTED = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("FEATURE_NOT_SUPPORTED","\xd9","\xc5","\x59","\x6d"),3,0);
FILE_OPEN_FAILURE = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("FILE_OPEN_FAILURE","\x58","\xe2","\xfb","\xaa"),5,0);
INCORRECT_STREAM_SERIAL_NUMBER = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("INCORRECT_STREAM_SERIAL_NUMBER","\x6f","\xd0","\x09","\x81"),14,0);
INVALID_API_MIXING = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("INVALID_API_MIXING","\xd3","\x5c","\xe6","\x63"),1,0);
INVALID_FIRST_PAGE = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("INVALID_FIRST_PAGE","\xc6","\xc3","\x85","\xe2"),15,0);
INVALID_SETUP = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("INVALID_SETUP","\xb5","\x17","\x9e","\xf8"),9,0);
INVALID_STREAM = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("INVALID_STREAM","\x28","\xbc","\x5a","\x33"),10,0);
INVALID_STREAM_STRUCTURE_VERSION = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("INVALID_STREAM_STRUCTURE_VERSION","\x75","\x2e","\x4f","\xbe"),12,0);
MISSING_CAPTURE_PATTERN = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("MISSING_CAPTURE_PATTERN","\xde","\xef","\x15","\x71"),11,0);
NEED_MORE_DATA = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("NEED_MORE_DATA","\xeb","\xb5","\xe3","\x4e"),0,0);
OTHER = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("OTHER","\xb0","\x9e","\x64","\xb4"),19,0);
OUTOFMEM = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("OUTOFMEM","\x10","\x62","\x53","\xb6"),2,0);
SEEK_FAILED = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("SEEK_FAILED","\xe4","\x54","\x00","\x42"),18,0);
SEEK_INVALID = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("SEEK_INVALID","\xd0","\x8d","\xa3","\xa2"),8,0);
SEEK_WITHOUT_LENGTH = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("SEEK_WITHOUT_LENGTH","\x84","\xc3","\x3b","\x4c"),6,0);
TOO_MANY_CHANNELS = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("TOO_MANY_CHANNELS","\xe5","\xf6","\x08","\x7e"),4,0);
UNEXPECTED_EOF = hx::CreateEnum< ReaderErrorType_obj >(HX_HCSTRING("UNEXPECTED_EOF","\xee","\x2b","\xb5","\x75"),7,0);
}


} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
