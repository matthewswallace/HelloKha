// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisTools
#include <kha/audio2/ogg/vorbis/VorbisTools.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor
#include <kha/audio2/ogg/vorbis/data/Floor.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor1
#include <kha/audio2/ogg/vorbis/data/Floor1.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mapping
#include <kha/audio2/ogg/vorbis/data/Mapping.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_MappingChannel
#include <kha/audio2/ogg/vorbis/data/MappingChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

static const Int _hx_array_data_19[] = {
	(Int)0,(Int)1,(Int)2,(Int)2,(Int)3,(Int)3,(Int)3,(Int)3,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,
};
static const Int _hx_array_data_20[] = {
	(Int)0,(Int)1,(Int)2,(Int)2,(Int)3,(Int)3,(Int)3,(Int)3,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,
};
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Mapping_obj::__construct(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Mapping","new",0xf4d4ea30,"kha.audio2.ogg.vorbis.data.Mapping.new","kha/audio2/ogg/vorbis/data/Mapping.hx",14,0x30bf6281)
            	HX_STACK_THIS(this)
            	}

Dynamic Mapping_obj::__CreateEmpty() { return new Mapping_obj; }

hx::ObjectPtr< Mapping_obj > Mapping_obj::__new()
{
	hx::ObjectPtr< Mapping_obj > _hx_result = new Mapping_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Mapping_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mapping_obj > _hx_result = new Mapping_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Mapping_obj::doFloor(::Array< ::Dynamic> floors,Int i,Int n,::Array< Float > target,::Array< Int > finalY,::Array< Bool > step2Flag){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Mapping","doFloor",0xc69df411,"kha.audio2.ogg.vorbis.data.Mapping.doFloor","kha/audio2/ogg/vorbis/data/Mapping.hx",89,0x30bf6281)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(floors,"floors")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(finalY,"finalY")
            	HX_STACK_ARG(step2Flag,"step2Flag")
HXLINE(  90)		HX_VARI( Int,n2) = ((int)n >> (int)(int)1);
HXLINE(  91)		HX_VARI( Int,s) = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(this->chan,i)) )->mux;
HXLINE(  92)		Int index = ( (Int)(_hx_array_unsafe_get(this->submapFloor,s)) );
HXDLIN(  92)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Floor,floor) = ( ( ::kha::audio2::ogg::vorbis::data::Floor)(_hx_array_unsafe_get(floors,index)) );
HXLINE(  93)		Bool _hx_tmp = (floor->type == (int)0);
HXDLIN(  93)		if (_hx_tmp) {
HXLINE(  94)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),94,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("doFloor",41,b2,c3,35))));
            		}
            		else {
HXLINE(  96)			HX_VARI(  ::kha::audio2::ogg::vorbis::data::Floor1,g) = floor->floor1;
HXLINE(  97)			HX_VARI( Int,lx) = (int)0;
HXDLIN(  97)			HX_VARI( Int,ly) = (finalY->__get((int)0) * g->floor1Multiplier);
HXLINE(  98)			{
HXLINE(  98)				HX_VARI( Int,_g1) = (int)1;
HXDLIN(  98)				HX_VARI( Int,_g) = g->values;
HXDLIN(  98)				while((_g1 < _g)){
HXLINE(  98)					HX_VARI( Int,q) = _g1++;
HXLINE(  99)					HX_VARI( Int,j) = ( (Int)(_hx_array_unsafe_get(g->sortedOrder,q)) );
HXLINE( 100)					Bool _hx_tmp1 = (finalY->__get(j) >= (int)0);
HXDLIN( 100)					if (_hx_tmp1) {
HXLINE( 102)						HX_VARI( Int,hy) = (finalY->__get(j) * g->floor1Multiplier);
HXLINE( 103)						HX_VARI( Int,hx) = ( (Int)(_hx_array_unsafe_get(g->xlist,j)) );
HXLINE( 104)						::kha::audio2::ogg::vorbis::VorbisTools_obj::drawLine(target,lx,ly,hx,hy,n2);
HXLINE( 105)						lx = hx;
HXLINE( 106)						ly = hy;
            					}
            				}
            			}
HXLINE( 109)			if ((lx < n2)) {
HXLINE( 111)				HX_VARI_NAME( Int,_g11,"_g1") = lx;
HXDLIN( 111)				while((_g11 < n2)){
HXLINE( 111)					HX_VARI_NAME( Int,j1,"j") = _g11++;
HXLINE( 112)					{
HXLINE( 112)						Float _hx_tmp2 = ( (Float)(_hx_array_unsafe_get(target,j1)) );
HXDLIN( 112)						Float val = (_hx_tmp2 * ::kha::audio2::ogg::vorbis::VorbisTools_obj::INVERSE_DB_TABLE->__get(ly));
HXDLIN( 112)						target->__unsafe_set(j1,val);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mapping_obj,doFloor,(void))

 ::kha::audio2::ogg::vorbis::data::Mapping Mapping_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,Int channels){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Mapping","read",0x481cc786,"kha.audio2.ogg.vorbis.data.Mapping.read","kha/audio2/ogg/vorbis/data/Mapping.hx",18,0x30bf6281)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(channels,"channels")
HXLINE(  19)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Mapping,m) =  ::kha::audio2::ogg::vorbis::data::Mapping_obj::__new();
HXLINE(  20)		HX_VAR( Int,mappingType);
HXDLIN(  20)		Bool _hx_tmp = (decodeState->validBits < (int)0);
HXDLIN(  20)		if (_hx_tmp) {
HXLINE(  20)			mappingType = (int)0;
            		}
            		else {
HXLINE(  20)			Bool _hx_tmp1 = (decodeState->validBits < (int)16);
HXDLIN(  20)			if (_hx_tmp1) {
HXLINE(  20)				Bool _hx_tmp2 = (decodeState->validBits == (int)0);
HXDLIN(  20)				if (_hx_tmp2) {
HXLINE(  20)					decodeState->acc = (int)0;
            				}
HXDLIN(  20)				while(true){
HXLINE(  20)					Bool _hx_tmp3;
HXDLIN(  20)					Bool _hx_tmp4 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  20)					if (_hx_tmp4) {
HXLINE(  20)						Bool _hx_tmp5 = !(decodeState->lastSeg);
HXDLIN(  20)						if (_hx_tmp5) {
HXLINE(  20)							Int _hx_tmp6 = decodeState->next();
HXDLIN(  20)							_hx_tmp3 = (_hx_tmp6 == (int)0);
            						}
            						else {
HXLINE(  20)							_hx_tmp3 = true;
            						}
            					}
            					else {
HXLINE(  20)						_hx_tmp3 = false;
            					}
HXDLIN(  20)					if (_hx_tmp3) {
HXLINE(  20)						decodeState->validBits = (int)-1;
HXDLIN(  20)						goto _hx_goto_2;
            					}
            					else {
HXLINE(  20)						decodeState->bytesInSeg--;
HXDLIN(  20)						Int a = decodeState->acc;
HXDLIN(  20)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  20)						Int _hx_tmp7 = decodeState->input->readByte();
HXDLIN(  20)						Int _hx_tmp8 = (a + ((int)_hx_tmp7 << (int)decodeState->validBits));
HXDLIN(  20)						decodeState->acc = _hx_tmp8;
HXDLIN(  20)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  20)					if (!((decodeState->validBits < (int)16))) {
HXLINE(  20)						goto _hx_goto_2;
            					}
            				}
            				_hx_goto_2:;
HXDLIN(  20)				Bool _hx_tmp9 = (decodeState->validBits < (int)0);
HXDLIN(  20)				if (_hx_tmp9) {
HXLINE(  20)					mappingType = (int)0;
            				}
            				else {
HXLINE(  20)					HX_VARI( Int,z) = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  20)					Int _hx_tmp10 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  20)					decodeState->acc = _hx_tmp10;
HXDLIN(  20)					hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  20)					mappingType = z;
            				}
            			}
            			else {
HXLINE(  20)				HX_VARI_NAME( Int,z1,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  20)				Int _hx_tmp11 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  20)				decodeState->acc = _hx_tmp11;
HXDLIN(  20)				hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  20)				mappingType = z1;
            			}
            		}
HXLINE(  21)		if ((mappingType != (int)0)) {
HXLINE(  22)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),(HX_("mapping type ",94,35,6c,d8) + mappingType),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),22,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  25)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(  25)		_hx_array_set_size_exact(this1,channels);
HXDLIN(  25)		m->chan = this1;
HXLINE(  26)		{
HXLINE(  26)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  26)			while((_g1 < channels)){
HXLINE(  26)				HX_VARI( Int,j) = _g1++;
HXLINE(  27)				m->chan->__unsafe_set(j, ::kha::audio2::ogg::vorbis::data::MappingChannel_obj::__new());
            			}
            		}
HXLINE(  30)		Int _hx_tmp12;
HXDLIN(  30)		Bool _hx_tmp13 = (decodeState->validBits < (int)0);
HXDLIN(  30)		if (_hx_tmp13) {
HXLINE(  30)			_hx_tmp12 = (int)0;
            		}
            		else {
HXLINE(  30)			Bool _hx_tmp14 = (decodeState->validBits < (int)1);
HXDLIN(  30)			if (_hx_tmp14) {
HXLINE(  30)				Bool _hx_tmp15 = (decodeState->validBits == (int)0);
HXDLIN(  30)				if (_hx_tmp15) {
HXLINE(  30)					decodeState->acc = (int)0;
            				}
HXDLIN(  30)				while(true){
HXLINE(  30)					Bool _hx_tmp16;
HXDLIN(  30)					Bool _hx_tmp17 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  30)					if (_hx_tmp17) {
HXLINE(  30)						Bool _hx_tmp18 = !(decodeState->lastSeg);
HXDLIN(  30)						if (_hx_tmp18) {
HXLINE(  30)							Int _hx_tmp19 = decodeState->next();
HXDLIN(  30)							_hx_tmp16 = (_hx_tmp19 == (int)0);
            						}
            						else {
HXLINE(  30)							_hx_tmp16 = true;
            						}
            					}
            					else {
HXLINE(  30)						_hx_tmp16 = false;
            					}
HXDLIN(  30)					if (_hx_tmp16) {
HXLINE(  30)						decodeState->validBits = (int)-1;
HXDLIN(  30)						goto _hx_goto_4;
            					}
            					else {
HXLINE(  30)						decodeState->bytesInSeg--;
HXDLIN(  30)						Int a1 = decodeState->acc;
HXDLIN(  30)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  30)						Int _hx_tmp20 = decodeState->input->readByte();
HXDLIN(  30)						Int _hx_tmp21 = (a1 + ((int)_hx_tmp20 << (int)decodeState->validBits));
HXDLIN(  30)						decodeState->acc = _hx_tmp21;
HXDLIN(  30)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  30)					if (!((decodeState->validBits < (int)1))) {
HXLINE(  30)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
HXDLIN(  30)				Bool _hx_tmp22 = (decodeState->validBits < (int)0);
HXDLIN(  30)				if (_hx_tmp22) {
HXLINE(  30)					_hx_tmp12 = (int)0;
            				}
            				else {
HXLINE(  30)					HX_VARI_NAME( Int,z2,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  30)					Int _hx_tmp23 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  30)					decodeState->acc = _hx_tmp23;
HXDLIN(  30)					hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  30)					_hx_tmp12 = z2;
            				}
            			}
            			else {
HXLINE(  30)				HX_VARI_NAME( Int,z3,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  30)				Int _hx_tmp24 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  30)				decodeState->acc = _hx_tmp24;
HXDLIN(  30)				hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  30)				_hx_tmp12 = z3;
            			}
            		}
HXDLIN(  30)		if ((_hx_tmp12 != (int)0)) {
HXLINE(  31)			Int _hx_tmp25;
HXDLIN(  31)			Bool _hx_tmp26 = (decodeState->validBits < (int)0);
HXDLIN(  31)			if (_hx_tmp26) {
HXLINE(  31)				_hx_tmp25 = (int)0;
            			}
            			else {
HXLINE(  31)				Bool _hx_tmp27 = (decodeState->validBits < (int)4);
HXDLIN(  31)				if (_hx_tmp27) {
HXLINE(  31)					Bool _hx_tmp28 = (decodeState->validBits == (int)0);
HXDLIN(  31)					if (_hx_tmp28) {
HXLINE(  31)						decodeState->acc = (int)0;
            					}
HXDLIN(  31)					while(true){
HXLINE(  31)						Bool _hx_tmp29;
HXDLIN(  31)						Bool _hx_tmp30 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  31)						if (_hx_tmp30) {
HXLINE(  31)							Bool _hx_tmp31 = !(decodeState->lastSeg);
HXDLIN(  31)							if (_hx_tmp31) {
HXLINE(  31)								Int _hx_tmp32 = decodeState->next();
HXDLIN(  31)								_hx_tmp29 = (_hx_tmp32 == (int)0);
            							}
            							else {
HXLINE(  31)								_hx_tmp29 = true;
            							}
            						}
            						else {
HXLINE(  31)							_hx_tmp29 = false;
            						}
HXDLIN(  31)						if (_hx_tmp29) {
HXLINE(  31)							decodeState->validBits = (int)-1;
HXDLIN(  31)							goto _hx_goto_5;
            						}
            						else {
HXLINE(  31)							decodeState->bytesInSeg--;
HXDLIN(  31)							Int a2 = decodeState->acc;
HXDLIN(  31)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  31)							Int _hx_tmp33 = decodeState->input->readByte();
HXDLIN(  31)							Int _hx_tmp34 = (a2 + ((int)_hx_tmp33 << (int)decodeState->validBits));
HXDLIN(  31)							decodeState->acc = _hx_tmp34;
HXDLIN(  31)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  31)						if (!((decodeState->validBits < (int)4))) {
HXLINE(  31)							goto _hx_goto_5;
            						}
            					}
            					_hx_goto_5:;
HXDLIN(  31)					Bool _hx_tmp35 = (decodeState->validBits < (int)0);
HXDLIN(  31)					if (_hx_tmp35) {
HXLINE(  31)						_hx_tmp25 = (int)0;
            					}
            					else {
HXLINE(  31)						HX_VARI_NAME( Int,z4,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  31)						Int _hx_tmp36 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  31)						decodeState->acc = _hx_tmp36;
HXDLIN(  31)						hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  31)						_hx_tmp25 = z4;
            					}
            				}
            				else {
HXLINE(  31)					HX_VARI_NAME( Int,z5,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  31)					Int _hx_tmp37 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  31)					decodeState->acc = _hx_tmp37;
HXDLIN(  31)					hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  31)					_hx_tmp25 = z5;
            				}
            			}
HXDLIN(  31)			m->submaps = (_hx_tmp25 + (int)1);
            		}
            		else {
HXLINE(  33)			m->submaps = (int)1;
            		}
HXLINE(  40)		Int _hx_tmp38;
HXDLIN(  40)		Bool _hx_tmp39 = (decodeState->validBits < (int)0);
HXDLIN(  40)		if (_hx_tmp39) {
HXLINE(  40)			_hx_tmp38 = (int)0;
            		}
            		else {
HXLINE(  40)			Bool _hx_tmp40 = (decodeState->validBits < (int)1);
HXDLIN(  40)			if (_hx_tmp40) {
HXLINE(  40)				Bool _hx_tmp41 = (decodeState->validBits == (int)0);
HXDLIN(  40)				if (_hx_tmp41) {
HXLINE(  40)					decodeState->acc = (int)0;
            				}
HXDLIN(  40)				while(true){
HXLINE(  40)					Bool _hx_tmp42;
HXDLIN(  40)					Bool _hx_tmp43 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  40)					if (_hx_tmp43) {
HXLINE(  40)						Bool _hx_tmp44 = !(decodeState->lastSeg);
HXDLIN(  40)						if (_hx_tmp44) {
HXLINE(  40)							Int _hx_tmp45 = decodeState->next();
HXDLIN(  40)							_hx_tmp42 = (_hx_tmp45 == (int)0);
            						}
            						else {
HXLINE(  40)							_hx_tmp42 = true;
            						}
            					}
            					else {
HXLINE(  40)						_hx_tmp42 = false;
            					}
HXDLIN(  40)					if (_hx_tmp42) {
HXLINE(  40)						decodeState->validBits = (int)-1;
HXDLIN(  40)						goto _hx_goto_6;
            					}
            					else {
HXLINE(  40)						decodeState->bytesInSeg--;
HXDLIN(  40)						Int a3 = decodeState->acc;
HXDLIN(  40)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  40)						Int _hx_tmp46 = decodeState->input->readByte();
HXDLIN(  40)						Int _hx_tmp47 = (a3 + ((int)_hx_tmp46 << (int)decodeState->validBits));
HXDLIN(  40)						decodeState->acc = _hx_tmp47;
HXDLIN(  40)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  40)					if (!((decodeState->validBits < (int)1))) {
HXLINE(  40)						goto _hx_goto_6;
            					}
            				}
            				_hx_goto_6:;
HXDLIN(  40)				Bool _hx_tmp48 = (decodeState->validBits < (int)0);
HXDLIN(  40)				if (_hx_tmp48) {
HXLINE(  40)					_hx_tmp38 = (int)0;
            				}
            				else {
HXLINE(  40)					HX_VARI_NAME( Int,z6,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  40)					Int _hx_tmp49 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  40)					decodeState->acc = _hx_tmp49;
HXDLIN(  40)					hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  40)					_hx_tmp38 = z6;
            				}
            			}
            			else {
HXLINE(  40)				HX_VARI_NAME( Int,z7,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  40)				Int _hx_tmp50 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  40)				decodeState->acc = _hx_tmp50;
HXDLIN(  40)				hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  40)				_hx_tmp38 = z7;
            			}
            		}
HXDLIN(  40)		if ((_hx_tmp38 != (int)0)) {
HXLINE(  41)			Int _hx_tmp51;
HXDLIN(  41)			Bool _hx_tmp52 = (decodeState->validBits < (int)0);
HXDLIN(  41)			if (_hx_tmp52) {
HXLINE(  41)				_hx_tmp51 = (int)0;
            			}
            			else {
HXLINE(  41)				Bool _hx_tmp53 = (decodeState->validBits < (int)8);
HXDLIN(  41)				if (_hx_tmp53) {
HXLINE(  41)					Bool _hx_tmp54 = (decodeState->validBits == (int)0);
HXDLIN(  41)					if (_hx_tmp54) {
HXLINE(  41)						decodeState->acc = (int)0;
            					}
HXDLIN(  41)					while(true){
HXLINE(  41)						Bool _hx_tmp55;
HXDLIN(  41)						Bool _hx_tmp56 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  41)						if (_hx_tmp56) {
HXLINE(  41)							Bool _hx_tmp57 = !(decodeState->lastSeg);
HXDLIN(  41)							if (_hx_tmp57) {
HXLINE(  41)								Int _hx_tmp58 = decodeState->next();
HXDLIN(  41)								_hx_tmp55 = (_hx_tmp58 == (int)0);
            							}
            							else {
HXLINE(  41)								_hx_tmp55 = true;
            							}
            						}
            						else {
HXLINE(  41)							_hx_tmp55 = false;
            						}
HXDLIN(  41)						if (_hx_tmp55) {
HXLINE(  41)							decodeState->validBits = (int)-1;
HXDLIN(  41)							goto _hx_goto_7;
            						}
            						else {
HXLINE(  41)							decodeState->bytesInSeg--;
HXDLIN(  41)							Int a4 = decodeState->acc;
HXDLIN(  41)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  41)							Int _hx_tmp59 = decodeState->input->readByte();
HXDLIN(  41)							Int _hx_tmp60 = (a4 + ((int)_hx_tmp59 << (int)decodeState->validBits));
HXDLIN(  41)							decodeState->acc = _hx_tmp60;
HXDLIN(  41)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  41)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  41)							goto _hx_goto_7;
            						}
            					}
            					_hx_goto_7:;
HXDLIN(  41)					Bool _hx_tmp61 = (decodeState->validBits < (int)0);
HXDLIN(  41)					if (_hx_tmp61) {
HXLINE(  41)						_hx_tmp51 = (int)0;
            					}
            					else {
HXLINE(  41)						HX_VARI_NAME( Int,z8,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  41)						Int _hx_tmp62 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  41)						decodeState->acc = _hx_tmp62;
HXDLIN(  41)						hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  41)						_hx_tmp51 = z8;
            					}
            				}
            				else {
HXLINE(  41)					HX_VARI_NAME( Int,z9,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  41)					Int _hx_tmp63 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  41)					decodeState->acc = _hx_tmp63;
HXDLIN(  41)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  41)					_hx_tmp51 = z9;
            				}
            			}
HXDLIN(  41)			m->couplingSteps = (_hx_tmp51 + (int)1);
HXLINE(  42)			{
HXLINE(  42)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  42)				HX_VARI( Int,_g) = m->couplingSteps;
HXDLIN(  42)				while((_g11 < _g)){
HXLINE(  42)					HX_VARI( Int,k) = _g11++;
HXLINE(  43)					HX_VARI( Int,n) = (channels - (int)1);
HXDLIN(  43)					HX_VARI( ::Array< Int >,log2_4) = ::Array_obj< Int >::fromData( _hx_array_data_19,16);
HXDLIN(  43)					HX_VAR_NAME( Int,n1,"n");
HXDLIN(  43)					if ((n < (int)16384)) {
HXLINE(  43)						if ((n < (int)16)) {
HXLINE(  43)							n1 = log2_4->__get(n);
            						}
            						else {
HXLINE(  43)							if ((n < (int)512)) {
HXLINE(  43)								n1 = ((int)5 + log2_4->__get(((int)n >> (int)(int)5)));
            							}
            							else {
HXLINE(  43)								n1 = ((int)10 + log2_4->__get(((int)n >> (int)(int)10)));
            							}
            						}
            					}
            					else {
HXLINE(  43)						if ((n < (int)16777216)) {
HXLINE(  43)							if ((n < (int)524288)) {
HXLINE(  43)								n1 = ((int)15 + log2_4->__get(((int)n >> (int)(int)15)));
            							}
            							else {
HXLINE(  43)								n1 = ((int)20 + log2_4->__get(((int)n >> (int)(int)20)));
            							}
            						}
            						else {
HXLINE(  43)							if ((n < (int)536870912)) {
HXLINE(  43)								n1 = ((int)25 + log2_4->__get(((int)n >> (int)(int)25)));
            							}
            							else {
HXLINE(  43)								if ((n < (int)-2147483648)) {
HXLINE(  43)									n1 = ((int)30 + log2_4->__get(((int)n >> (int)(int)30)));
            								}
            								else {
HXLINE(  43)									n1 = (int)0;
            								}
            							}
            						}
            					}
HXDLIN(  43)					Int _hx_tmp64;
HXDLIN(  43)					Bool _hx_tmp65 = (decodeState->validBits < (int)0);
HXDLIN(  43)					if (_hx_tmp65) {
HXLINE(  43)						_hx_tmp64 = (int)0;
            					}
            					else {
HXLINE(  43)						Bool _hx_tmp66 = (decodeState->validBits < n1);
HXDLIN(  43)						if (_hx_tmp66) {
HXLINE(  43)							if ((n1 > (int)24)) {
HXLINE(  43)								Int _hx_tmp67 = decodeState->readBits((int)24);
HXDLIN(  43)								Int _hx_tmp68 = decodeState->readBits((n1 - (int)24));
HXDLIN(  43)								_hx_tmp64 = (_hx_tmp67 + ((int)_hx_tmp68 << (int)(int)24));
            							}
            							else {
HXLINE(  43)								Bool _hx_tmp69 = (decodeState->validBits == (int)0);
HXDLIN(  43)								if (_hx_tmp69) {
HXLINE(  43)									decodeState->acc = (int)0;
            								}
HXDLIN(  43)								while(true){
HXLINE(  43)									Bool _hx_tmp70;
HXDLIN(  43)									Bool _hx_tmp71 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  43)									if (_hx_tmp71) {
HXLINE(  43)										Bool _hx_tmp72 = !(decodeState->lastSeg);
HXDLIN(  43)										if (_hx_tmp72) {
HXLINE(  43)											Int _hx_tmp73 = decodeState->next();
HXDLIN(  43)											_hx_tmp70 = (_hx_tmp73 == (int)0);
            										}
            										else {
HXLINE(  43)											_hx_tmp70 = true;
            										}
            									}
            									else {
HXLINE(  43)										_hx_tmp70 = false;
            									}
HXDLIN(  43)									if (_hx_tmp70) {
HXLINE(  43)										decodeState->validBits = (int)-1;
HXDLIN(  43)										goto _hx_goto_9;
            									}
            									else {
HXLINE(  43)										decodeState->bytesInSeg--;
HXDLIN(  43)										Int a5 = decodeState->acc;
HXDLIN(  43)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  43)										Int _hx_tmp74 = decodeState->input->readByte();
HXDLIN(  43)										Int _hx_tmp75 = (a5 + ((int)_hx_tmp74 << (int)decodeState->validBits));
HXDLIN(  43)										decodeState->acc = _hx_tmp75;
HXDLIN(  43)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN(  43)									if (!((decodeState->validBits < n1))) {
HXLINE(  43)										goto _hx_goto_9;
            									}
            								}
            								_hx_goto_9:;
HXDLIN(  43)								Bool _hx_tmp76 = (decodeState->validBits < (int)0);
HXDLIN(  43)								if (_hx_tmp76) {
HXLINE(  43)									_hx_tmp64 = (int)0;
            								}
            								else {
HXLINE(  43)									HX_VARI_NAME( Int,z10,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n1) - (int)1));
HXDLIN(  43)									Int _hx_tmp77 = hx::UShr(decodeState->acc,n1);
HXDLIN(  43)									decodeState->acc = _hx_tmp77;
HXDLIN(  43)									hx::SubEq(decodeState->validBits,n1);
HXDLIN(  43)									_hx_tmp64 = z10;
            								}
            							}
            						}
            						else {
HXLINE(  43)							HX_VARI_NAME( Int,z11,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n1) - (int)1));
HXDLIN(  43)							Int _hx_tmp78 = hx::UShr(decodeState->acc,n1);
HXDLIN(  43)							decodeState->acc = _hx_tmp78;
HXDLIN(  43)							hx::SubEq(decodeState->validBits,n1);
HXDLIN(  43)							_hx_tmp64 = z11;
            						}
            					}
HXDLIN(  43)					( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->magnitude = _hx_tmp64;
HXLINE(  44)					HX_VARI_NAME( Int,n2,"n") = (channels - (int)1);
HXDLIN(  44)					HX_VARI_NAME( ::Array< Int >,log2_41,"log2_4") = ::Array_obj< Int >::fromData( _hx_array_data_20,16);
HXDLIN(  44)					HX_VAR_NAME( Int,n3,"n");
HXDLIN(  44)					if ((n2 < (int)16384)) {
HXLINE(  44)						if ((n2 < (int)16)) {
HXLINE(  44)							n3 = log2_41->__get(n2);
            						}
            						else {
HXLINE(  44)							if ((n2 < (int)512)) {
HXLINE(  44)								n3 = ((int)5 + log2_41->__get(((int)n2 >> (int)(int)5)));
            							}
            							else {
HXLINE(  44)								n3 = ((int)10 + log2_41->__get(((int)n2 >> (int)(int)10)));
            							}
            						}
            					}
            					else {
HXLINE(  44)						if ((n2 < (int)16777216)) {
HXLINE(  44)							if ((n2 < (int)524288)) {
HXLINE(  44)								n3 = ((int)15 + log2_41->__get(((int)n2 >> (int)(int)15)));
            							}
            							else {
HXLINE(  44)								n3 = ((int)20 + log2_41->__get(((int)n2 >> (int)(int)20)));
            							}
            						}
            						else {
HXLINE(  44)							if ((n2 < (int)536870912)) {
HXLINE(  44)								n3 = ((int)25 + log2_41->__get(((int)n2 >> (int)(int)25)));
            							}
            							else {
HXLINE(  44)								if ((n2 < (int)-2147483648)) {
HXLINE(  44)									n3 = ((int)30 + log2_41->__get(((int)n2 >> (int)(int)30)));
            								}
            								else {
HXLINE(  44)									n3 = (int)0;
            								}
            							}
            						}
            					}
HXDLIN(  44)					Int _hx_tmp79;
HXDLIN(  44)					Bool _hx_tmp80 = (decodeState->validBits < (int)0);
HXDLIN(  44)					if (_hx_tmp80) {
HXLINE(  44)						_hx_tmp79 = (int)0;
            					}
            					else {
HXLINE(  44)						Bool _hx_tmp81 = (decodeState->validBits < n3);
HXDLIN(  44)						if (_hx_tmp81) {
HXLINE(  44)							if ((n3 > (int)24)) {
HXLINE(  44)								Int _hx_tmp82 = decodeState->readBits((int)24);
HXDLIN(  44)								Int _hx_tmp83 = decodeState->readBits((n3 - (int)24));
HXDLIN(  44)								_hx_tmp79 = (_hx_tmp82 + ((int)_hx_tmp83 << (int)(int)24));
            							}
            							else {
HXLINE(  44)								Bool _hx_tmp84 = (decodeState->validBits == (int)0);
HXDLIN(  44)								if (_hx_tmp84) {
HXLINE(  44)									decodeState->acc = (int)0;
            								}
HXDLIN(  44)								while(true){
HXLINE(  44)									Bool _hx_tmp85;
HXDLIN(  44)									Bool _hx_tmp86 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  44)									if (_hx_tmp86) {
HXLINE(  44)										Bool _hx_tmp87 = !(decodeState->lastSeg);
HXDLIN(  44)										if (_hx_tmp87) {
HXLINE(  44)											Int _hx_tmp88 = decodeState->next();
HXDLIN(  44)											_hx_tmp85 = (_hx_tmp88 == (int)0);
            										}
            										else {
HXLINE(  44)											_hx_tmp85 = true;
            										}
            									}
            									else {
HXLINE(  44)										_hx_tmp85 = false;
            									}
HXDLIN(  44)									if (_hx_tmp85) {
HXLINE(  44)										decodeState->validBits = (int)-1;
HXDLIN(  44)										goto _hx_goto_10;
            									}
            									else {
HXLINE(  44)										decodeState->bytesInSeg--;
HXDLIN(  44)										Int a6 = decodeState->acc;
HXDLIN(  44)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  44)										Int _hx_tmp89 = decodeState->input->readByte();
HXDLIN(  44)										Int _hx_tmp90 = (a6 + ((int)_hx_tmp89 << (int)decodeState->validBits));
HXDLIN(  44)										decodeState->acc = _hx_tmp90;
HXDLIN(  44)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN(  44)									if (!((decodeState->validBits < n3))) {
HXLINE(  44)										goto _hx_goto_10;
            									}
            								}
            								_hx_goto_10:;
HXDLIN(  44)								Bool _hx_tmp91 = (decodeState->validBits < (int)0);
HXDLIN(  44)								if (_hx_tmp91) {
HXLINE(  44)									_hx_tmp79 = (int)0;
            								}
            								else {
HXLINE(  44)									HX_VARI_NAME( Int,z12,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n3) - (int)1));
HXDLIN(  44)									Int _hx_tmp92 = hx::UShr(decodeState->acc,n3);
HXDLIN(  44)									decodeState->acc = _hx_tmp92;
HXDLIN(  44)									hx::SubEq(decodeState->validBits,n3);
HXDLIN(  44)									_hx_tmp79 = z12;
            								}
            							}
            						}
            						else {
HXLINE(  44)							HX_VARI_NAME( Int,z13,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n3) - (int)1));
HXDLIN(  44)							Int _hx_tmp93 = hx::UShr(decodeState->acc,n3);
HXDLIN(  44)							decodeState->acc = _hx_tmp93;
HXDLIN(  44)							hx::SubEq(decodeState->validBits,n3);
HXDLIN(  44)							_hx_tmp79 = z13;
            						}
            					}
HXDLIN(  44)					( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->angle = _hx_tmp79;
HXLINE(  45)					Bool _hx_tmp94 = (( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->magnitude >= channels);
HXDLIN(  45)					if (_hx_tmp94) {
HXLINE(  46)						HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),46,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            					}
HXLINE(  48)					Bool _hx_tmp95 = (( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->angle >= channels);
HXDLIN(  48)					if (_hx_tmp95) {
HXLINE(  49)						HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),49,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            					}
HXLINE(  51)					Int _hx_tmp96 = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->magnitude;
HXDLIN(  51)					Bool _hx_tmp97 = (_hx_tmp96 == ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->angle);
HXDLIN(  51)					if (_hx_tmp97) {
HXLINE(  52)						HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),52,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            					}
            				}
            			}
            		}
            		else {
HXLINE(  56)			m->couplingSteps = (int)0;
            		}
HXLINE(  60)		Int _hx_tmp98;
HXDLIN(  60)		Bool _hx_tmp99 = (decodeState->validBits < (int)0);
HXDLIN(  60)		if (_hx_tmp99) {
HXLINE(  60)			_hx_tmp98 = (int)0;
            		}
            		else {
HXLINE(  60)			Bool _hx_tmp100 = (decodeState->validBits < (int)2);
HXDLIN(  60)			if (_hx_tmp100) {
HXLINE(  60)				Bool _hx_tmp101 = (decodeState->validBits == (int)0);
HXDLIN(  60)				if (_hx_tmp101) {
HXLINE(  60)					decodeState->acc = (int)0;
            				}
HXDLIN(  60)				while(true){
HXLINE(  60)					Bool _hx_tmp102;
HXDLIN(  60)					Bool _hx_tmp103 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  60)					if (_hx_tmp103) {
HXLINE(  60)						Bool _hx_tmp104 = !(decodeState->lastSeg);
HXDLIN(  60)						if (_hx_tmp104) {
HXLINE(  60)							Int _hx_tmp105 = decodeState->next();
HXDLIN(  60)							_hx_tmp102 = (_hx_tmp105 == (int)0);
            						}
            						else {
HXLINE(  60)							_hx_tmp102 = true;
            						}
            					}
            					else {
HXLINE(  60)						_hx_tmp102 = false;
            					}
HXDLIN(  60)					if (_hx_tmp102) {
HXLINE(  60)						decodeState->validBits = (int)-1;
HXDLIN(  60)						goto _hx_goto_11;
            					}
            					else {
HXLINE(  60)						decodeState->bytesInSeg--;
HXDLIN(  60)						Int a7 = decodeState->acc;
HXDLIN(  60)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  60)						Int _hx_tmp106 = decodeState->input->readByte();
HXDLIN(  60)						Int _hx_tmp107 = (a7 + ((int)_hx_tmp106 << (int)decodeState->validBits));
HXDLIN(  60)						decodeState->acc = _hx_tmp107;
HXDLIN(  60)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  60)					if (!((decodeState->validBits < (int)2))) {
HXLINE(  60)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
HXDLIN(  60)				Bool _hx_tmp108 = (decodeState->validBits < (int)0);
HXDLIN(  60)				if (_hx_tmp108) {
HXLINE(  60)					_hx_tmp98 = (int)0;
            				}
            				else {
HXLINE(  60)					HX_VARI_NAME( Int,z14,"z") = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)					Int _hx_tmp109 = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)					decodeState->acc = _hx_tmp109;
HXDLIN(  60)					hx::SubEq(decodeState->validBits,(int)2);
HXDLIN(  60)					_hx_tmp98 = z14;
            				}
            			}
            			else {
HXLINE(  60)				HX_VARI_NAME( Int,z15,"z") = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)				Int _hx_tmp110 = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)				decodeState->acc = _hx_tmp110;
HXDLIN(  60)				hx::SubEq(decodeState->validBits,(int)2);
HXDLIN(  60)				_hx_tmp98 = z15;
            			}
            		}
HXDLIN(  60)		if ((_hx_tmp98 != (int)0)) {
HXLINE(  61)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),61,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  63)		Bool _hx_tmp111 = (m->submaps > (int)1);
HXDLIN(  63)		if (_hx_tmp111) {
HXLINE(  64)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(  64)			while((_g12 < channels)){
HXLINE(  64)				HX_VARI_NAME( Int,j1,"j") = _g12++;
HXLINE(  65)				Int _hx_tmp112;
HXDLIN(  65)				Bool _hx_tmp113 = (decodeState->validBits < (int)0);
HXDLIN(  65)				if (_hx_tmp113) {
HXLINE(  65)					_hx_tmp112 = (int)0;
            				}
            				else {
HXLINE(  65)					Bool _hx_tmp114 = (decodeState->validBits < (int)4);
HXDLIN(  65)					if (_hx_tmp114) {
HXLINE(  65)						Bool _hx_tmp115 = (decodeState->validBits == (int)0);
HXDLIN(  65)						if (_hx_tmp115) {
HXLINE(  65)							decodeState->acc = (int)0;
            						}
HXDLIN(  65)						while(true){
HXLINE(  65)							Bool _hx_tmp116;
HXDLIN(  65)							Bool _hx_tmp117 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  65)							if (_hx_tmp117) {
HXLINE(  65)								Bool _hx_tmp118 = !(decodeState->lastSeg);
HXDLIN(  65)								if (_hx_tmp118) {
HXLINE(  65)									Int _hx_tmp119 = decodeState->next();
HXDLIN(  65)									_hx_tmp116 = (_hx_tmp119 == (int)0);
            								}
            								else {
HXLINE(  65)									_hx_tmp116 = true;
            								}
            							}
            							else {
HXLINE(  65)								_hx_tmp116 = false;
            							}
HXDLIN(  65)							if (_hx_tmp116) {
HXLINE(  65)								decodeState->validBits = (int)-1;
HXDLIN(  65)								goto _hx_goto_13;
            							}
            							else {
HXLINE(  65)								decodeState->bytesInSeg--;
HXDLIN(  65)								Int a8 = decodeState->acc;
HXDLIN(  65)								hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  65)								Int _hx_tmp120 = decodeState->input->readByte();
HXDLIN(  65)								Int _hx_tmp121 = (a8 + ((int)_hx_tmp120 << (int)decodeState->validBits));
HXDLIN(  65)								decodeState->acc = _hx_tmp121;
HXDLIN(  65)								hx::AddEq(decodeState->validBits,(int)8);
            							}
HXDLIN(  65)							if (!((decodeState->validBits < (int)4))) {
HXLINE(  65)								goto _hx_goto_13;
            							}
            						}
            						_hx_goto_13:;
HXDLIN(  65)						Bool _hx_tmp122 = (decodeState->validBits < (int)0);
HXDLIN(  65)						if (_hx_tmp122) {
HXLINE(  65)							_hx_tmp112 = (int)0;
            						}
            						else {
HXLINE(  65)							HX_VARI_NAME( Int,z16,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  65)							Int _hx_tmp123 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  65)							decodeState->acc = _hx_tmp123;
HXDLIN(  65)							hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  65)							_hx_tmp112 = z16;
            						}
            					}
            					else {
HXLINE(  65)						HX_VARI_NAME( Int,z17,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  65)						Int _hx_tmp124 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  65)						decodeState->acc = _hx_tmp124;
HXDLIN(  65)						hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  65)						_hx_tmp112 = z17;
            					}
            				}
HXDLIN(  65)				( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,j1)) )->mux = _hx_tmp112;
HXLINE(  66)				Bool _hx_tmp125 = (( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,j1)) )->mux >= m->submaps);
HXDLIN(  66)				if (_hx_tmp125) {
HXLINE(  67)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),67,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            				}
            			}
            		}
            		else {
HXLINE(  71)			HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN(  71)			while((_g13 < channels)){
HXLINE(  71)				HX_VARI_NAME( Int,j2,"j") = _g13++;
HXLINE(  72)				( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,j2)) )->mux = (int)0;
            			}
            		}
HXLINE(  76)		Int length = m->submaps;
HXDLIN(  76)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new();
HXDLIN(  76)		_hx_array_set_size_exact(this2,length);
HXDLIN(  76)		m->submapFloor = this2;
HXLINE(  77)		Int length1 = m->submaps;
HXDLIN(  77)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new();
HXDLIN(  77)		_hx_array_set_size_exact(this3,length1);
HXDLIN(  77)		m->submapResidue = this3;
HXLINE(  79)		{
HXLINE(  79)			HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN(  79)			HX_VARI_NAME( Int,_g2,"_g") = m->submaps;
HXDLIN(  79)			while((_g14 < _g2)){
HXLINE(  79)				HX_VARI_NAME( Int,j3,"j") = _g14++;
HXLINE(  80)				Bool _hx_tmp126 = (decodeState->validBits < (int)0);
HXDLIN(  80)				if (!(_hx_tmp126)) {
HXLINE(  80)					Bool _hx_tmp127 = (decodeState->validBits < (int)8);
HXDLIN(  80)					if (_hx_tmp127) {
HXLINE(  80)						Bool _hx_tmp128 = (decodeState->validBits == (int)0);
HXDLIN(  80)						if (_hx_tmp128) {
HXLINE(  80)							decodeState->acc = (int)0;
            						}
HXDLIN(  80)						while(true){
HXLINE(  80)							Bool _hx_tmp129;
HXDLIN(  80)							Bool _hx_tmp130 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  80)							if (_hx_tmp130) {
HXLINE(  80)								Bool _hx_tmp131 = !(decodeState->lastSeg);
HXDLIN(  80)								if (_hx_tmp131) {
HXLINE(  80)									Int _hx_tmp132 = decodeState->next();
HXDLIN(  80)									_hx_tmp129 = (_hx_tmp132 == (int)0);
            								}
            								else {
HXLINE(  80)									_hx_tmp129 = true;
            								}
            							}
            							else {
HXLINE(  80)								_hx_tmp129 = false;
            							}
HXDLIN(  80)							if (_hx_tmp129) {
HXLINE(  80)								decodeState->validBits = (int)-1;
HXDLIN(  80)								goto _hx_goto_16;
            							}
            							else {
HXLINE(  80)								decodeState->bytesInSeg--;
HXDLIN(  80)								Int a9 = decodeState->acc;
HXDLIN(  80)								hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  80)								Int _hx_tmp133 = decodeState->input->readByte();
HXDLIN(  80)								Int _hx_tmp134 = (a9 + ((int)_hx_tmp133 << (int)decodeState->validBits));
HXDLIN(  80)								decodeState->acc = _hx_tmp134;
HXDLIN(  80)								hx::AddEq(decodeState->validBits,(int)8);
            							}
HXDLIN(  80)							if (!((decodeState->validBits < (int)8))) {
HXLINE(  80)								goto _hx_goto_16;
            							}
            						}
            						_hx_goto_16:;
HXDLIN(  80)						Bool _hx_tmp135 = (decodeState->validBits < (int)0);
HXDLIN(  80)						if (!(_hx_tmp135)) {
HXLINE(  80)							Int _hx_tmp136 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  80)							decodeState->acc = _hx_tmp136;
HXDLIN(  80)							hx::SubEq(decodeState->validBits,(int)8);
            						}
            					}
            					else {
HXLINE(  80)						Int _hx_tmp137 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  80)						decodeState->acc = _hx_tmp137;
HXDLIN(  80)						hx::SubEq(decodeState->validBits,(int)8);
            					}
            				}
HXLINE(  81)				{
HXLINE(  81)					Int val;
HXDLIN(  81)					Bool _hx_tmp138 = (decodeState->validBits < (int)0);
HXDLIN(  81)					if (_hx_tmp138) {
HXLINE(  81)						val = (int)0;
            					}
            					else {
HXLINE(  81)						Bool _hx_tmp139 = (decodeState->validBits < (int)8);
HXDLIN(  81)						if (_hx_tmp139) {
HXLINE(  81)							Bool _hx_tmp140 = (decodeState->validBits == (int)0);
HXDLIN(  81)							if (_hx_tmp140) {
HXLINE(  81)								decodeState->acc = (int)0;
            							}
HXDLIN(  81)							while(true){
HXLINE(  81)								Bool _hx_tmp141;
HXDLIN(  81)								Bool _hx_tmp142 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  81)								if (_hx_tmp142) {
HXLINE(  81)									Bool _hx_tmp143 = !(decodeState->lastSeg);
HXDLIN(  81)									if (_hx_tmp143) {
HXLINE(  81)										Int _hx_tmp144 = decodeState->next();
HXDLIN(  81)										_hx_tmp141 = (_hx_tmp144 == (int)0);
            									}
            									else {
HXLINE(  81)										_hx_tmp141 = true;
            									}
            								}
            								else {
HXLINE(  81)									_hx_tmp141 = false;
            								}
HXDLIN(  81)								if (_hx_tmp141) {
HXLINE(  81)									decodeState->validBits = (int)-1;
HXDLIN(  81)									goto _hx_goto_17;
            								}
            								else {
HXLINE(  81)									decodeState->bytesInSeg--;
HXDLIN(  81)									Int a10 = decodeState->acc;
HXDLIN(  81)									hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  81)									Int _hx_tmp145 = decodeState->input->readByte();
HXDLIN(  81)									Int _hx_tmp146 = (a10 + ((int)_hx_tmp145 << (int)decodeState->validBits));
HXDLIN(  81)									decodeState->acc = _hx_tmp146;
HXDLIN(  81)									hx::AddEq(decodeState->validBits,(int)8);
            								}
HXDLIN(  81)								if (!((decodeState->validBits < (int)8))) {
HXLINE(  81)									goto _hx_goto_17;
            								}
            							}
            							_hx_goto_17:;
HXDLIN(  81)							Bool _hx_tmp147 = (decodeState->validBits < (int)0);
HXDLIN(  81)							if (_hx_tmp147) {
HXLINE(  81)								val = (int)0;
            							}
            							else {
HXLINE(  81)								HX_VARI_NAME( Int,z18,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  81)								Int _hx_tmp148 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  81)								decodeState->acc = _hx_tmp148;
HXDLIN(  81)								hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  81)								val = z18;
            							}
            						}
            						else {
HXLINE(  81)							HX_VARI_NAME( Int,z19,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  81)							Int _hx_tmp149 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  81)							decodeState->acc = _hx_tmp149;
HXDLIN(  81)							hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  81)							val = z19;
            						}
            					}
HXDLIN(  81)					m->submapFloor->__unsafe_set(j3,val);
            				}
HXLINE(  82)				{
HXLINE(  82)					Int val1;
HXDLIN(  82)					Bool _hx_tmp150 = (decodeState->validBits < (int)0);
HXDLIN(  82)					if (_hx_tmp150) {
HXLINE(  82)						val1 = (int)0;
            					}
            					else {
HXLINE(  82)						Bool _hx_tmp151 = (decodeState->validBits < (int)8);
HXDLIN(  82)						if (_hx_tmp151) {
HXLINE(  82)							Bool _hx_tmp152 = (decodeState->validBits == (int)0);
HXDLIN(  82)							if (_hx_tmp152) {
HXLINE(  82)								decodeState->acc = (int)0;
            							}
HXDLIN(  82)							while(true){
HXLINE(  82)								Bool _hx_tmp153;
HXDLIN(  82)								Bool _hx_tmp154 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  82)								if (_hx_tmp154) {
HXLINE(  82)									Bool _hx_tmp155 = !(decodeState->lastSeg);
HXDLIN(  82)									if (_hx_tmp155) {
HXLINE(  82)										Int _hx_tmp156 = decodeState->next();
HXDLIN(  82)										_hx_tmp153 = (_hx_tmp156 == (int)0);
            									}
            									else {
HXLINE(  82)										_hx_tmp153 = true;
            									}
            								}
            								else {
HXLINE(  82)									_hx_tmp153 = false;
            								}
HXDLIN(  82)								if (_hx_tmp153) {
HXLINE(  82)									decodeState->validBits = (int)-1;
HXDLIN(  82)									goto _hx_goto_18;
            								}
            								else {
HXLINE(  82)									decodeState->bytesInSeg--;
HXDLIN(  82)									Int a11 = decodeState->acc;
HXDLIN(  82)									hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  82)									Int _hx_tmp157 = decodeState->input->readByte();
HXDLIN(  82)									Int _hx_tmp158 = (a11 + ((int)_hx_tmp157 << (int)decodeState->validBits));
HXDLIN(  82)									decodeState->acc = _hx_tmp158;
HXDLIN(  82)									hx::AddEq(decodeState->validBits,(int)8);
            								}
HXDLIN(  82)								if (!((decodeState->validBits < (int)8))) {
HXLINE(  82)									goto _hx_goto_18;
            								}
            							}
            							_hx_goto_18:;
HXDLIN(  82)							Bool _hx_tmp159 = (decodeState->validBits < (int)0);
HXDLIN(  82)							if (_hx_tmp159) {
HXLINE(  82)								val1 = (int)0;
            							}
            							else {
HXLINE(  82)								HX_VARI_NAME( Int,z20,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  82)								Int _hx_tmp160 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  82)								decodeState->acc = _hx_tmp160;
HXDLIN(  82)								hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  82)								val1 = z20;
            							}
            						}
            						else {
HXLINE(  82)							HX_VARI_NAME( Int,z21,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  82)							Int _hx_tmp161 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  82)							decodeState->acc = _hx_tmp161;
HXDLIN(  82)							hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  82)							val1 = z21;
            						}
            					}
HXDLIN(  82)					m->submapResidue->__unsafe_set(j3,val1);
            				}
            			}
            		}
HXLINE(  85)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mapping_obj,read,return )


Mapping_obj::Mapping_obj()
{
}

void Mapping_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mapping);
	HX_MARK_MEMBER_NAME(couplingSteps,"couplingSteps");
	HX_MARK_MEMBER_NAME(chan,"chan");
	HX_MARK_MEMBER_NAME(submaps,"submaps");
	HX_MARK_MEMBER_NAME(submapFloor,"submapFloor");
	HX_MARK_MEMBER_NAME(submapResidue,"submapResidue");
	HX_MARK_END_CLASS();
}

void Mapping_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(couplingSteps,"couplingSteps");
	HX_VISIT_MEMBER_NAME(chan,"chan");
	HX_VISIT_MEMBER_NAME(submaps,"submaps");
	HX_VISIT_MEMBER_NAME(submapFloor,"submapFloor");
	HX_VISIT_MEMBER_NAME(submapResidue,"submapResidue");
}

hx::Val Mapping_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"chan") ) { return hx::Val( chan); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"submaps") ) { return hx::Val( submaps); }
		if (HX_FIELD_EQ(inName,"doFloor") ) { return hx::Val( doFloor_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"submapFloor") ) { return hx::Val( submapFloor); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"couplingSteps") ) { return hx::Val( couplingSteps); }
		if (HX_FIELD_EQ(inName,"submapResidue") ) { return hx::Val( submapResidue); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mapping_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Mapping_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"chan") ) { chan=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"submaps") ) { submaps=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"submapFloor") ) { submapFloor=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"couplingSteps") ) { couplingSteps=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"submapResidue") ) { submapResidue=inValue.Cast< ::Array< Int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mapping_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("couplingSteps","\xea","\xbe","\x6c","\x19"));
	outFields->push(HX_HCSTRING("chan","\xd2","\x5e","\xbf","\x41"));
	outFields->push(HX_HCSTRING("submaps","\xd7","\xa7","\x80","\x2b"));
	outFields->push(HX_HCSTRING("submapFloor","\x10","\x6b","\x36","\x00"));
	outFields->push(HX_HCSTRING("submapResidue","\x8f","\x2a","\x0e","\xbb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mapping_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Mapping_obj,couplingSteps),HX_HCSTRING("couplingSteps","\xea","\xbe","\x6c","\x19")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mapping_obj,chan),HX_HCSTRING("chan","\xd2","\x5e","\xbf","\x41")},
	{hx::fsInt,(int)offsetof(Mapping_obj,submaps),HX_HCSTRING("submaps","\xd7","\xa7","\x80","\x2b")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Mapping_obj,submapFloor),HX_HCSTRING("submapFloor","\x10","\x6b","\x36","\x00")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Mapping_obj,submapResidue),HX_HCSTRING("submapResidue","\x8f","\x2a","\x0e","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mapping_obj_sStaticStorageInfo = 0;
#endif

static ::String Mapping_obj_sMemberFields[] = {
	HX_HCSTRING("couplingSteps","\xea","\xbe","\x6c","\x19"),
	HX_HCSTRING("chan","\xd2","\x5e","\xbf","\x41"),
	HX_HCSTRING("submaps","\xd7","\xa7","\x80","\x2b"),
	HX_HCSTRING("submapFloor","\x10","\x6b","\x36","\x00"),
	HX_HCSTRING("submapResidue","\x8f","\x2a","\x0e","\xbb"),
	HX_HCSTRING("doFloor","\x41","\xb2","\xc3","\x35"),
	::String(null()) };

static void Mapping_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mapping_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mapping_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mapping_obj::__mClass,"__mClass");
};

#endif

hx::Class Mapping_obj::__mClass;

static ::String Mapping_obj_sStaticFields[] = {
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Mapping_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Mapping","\x3e","\x52","\xb0","\xaf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mapping_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Mapping_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mapping_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mapping_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mapping_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mapping_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mapping_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mapping_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
