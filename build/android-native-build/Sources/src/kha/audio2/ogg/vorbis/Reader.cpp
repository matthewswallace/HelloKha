// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_FPHelper
#include <haxe/io/FPHelper.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_Reader
#include <kha/audio2/ogg/vorbis/Reader.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecoder
#include <kha/audio2/ogg/vorbis/VorbisDecoder.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Comment
#include <kha/audio2/ogg/vorbis/data/Comment.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif
#ifndef INCLUDED_sys_io_FileSeek
#include <sys/io/FileSeek.h>
#endif

namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{

void Reader_obj::__construct( ::haxe::io::Input input, ::Dynamic seekFunc,Int inputLength){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","new",0x26b8f869,"kha.audio2.ogg.vorbis.Reader.new","kha/audio2/ogg/vorbis/Reader.hx",76,0x425c5327)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(input,"input")
            	HX_STACK_ARG(seekFunc,"seekFunc")
            	HX_STACK_ARG(inputLength,"inputLength")
HXLINE(  77)		this->seekFunc = seekFunc;
HXLINE(  78)		this->inputLength = inputLength;
HXLINE(  79)		this->decoder = ::kha::audio2::ogg::vorbis::VorbisDecoder_obj::start(input);
HXLINE(  80)		this->decoder->setupSampleNumber(seekFunc,inputLength);
HXLINE(  81)		this->loopStart = this->get_header()->comment->get_loopStart();
HXLINE(  82)		this->loopLength = this->get_header()->comment->get_loopLength();
            	}

Dynamic Reader_obj::__CreateEmpty() { return new Reader_obj; }

hx::ObjectPtr< Reader_obj > Reader_obj::__new( ::haxe::io::Input input, ::Dynamic seekFunc,Int inputLength)
{
	hx::ObjectPtr< Reader_obj > _hx_result = new Reader_obj();
	_hx_result->__construct(input,seekFunc,inputLength);
	return _hx_result;
}

Dynamic Reader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Reader_obj > _hx_result = new Reader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

 ::kha::audio2::ogg::vorbis::data::Header Reader_obj::get_header(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","get_header",0x725d546d,"kha.audio2.ogg.vorbis.Reader.get_header","kha/audio2/ogg/vorbis/Reader.hx",34,0x425c5327)
            	HX_STACK_THIS(this)
HXLINE(  34)		return this->decoder->header;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_header,return )

Int Reader_obj::get_totalSample(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","get_totalSample",0xd5a79c2e,"kha.audio2.ogg.vorbis.Reader.get_totalSample","kha/audio2/ogg/vorbis/Reader.hx",39,0x425c5327)
            	HX_STACK_THIS(this)
HXLINE(  39)		return this->decoder->totalSample;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_totalSample,return )

Float Reader_obj::get_totalMillisecond(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","get_totalMillisecond",0x288b80bd,"kha.audio2.ogg.vorbis.Reader.get_totalMillisecond","kha/audio2/ogg/vorbis/Reader.hx",45,0x425c5327)
            	HX_STACK_THIS(this)
HXLINE(  45)		Int samples = this->decoder->totalSample;
HXDLIN(  45)		Int b = this->get_header()->sampleRate;
HXDLIN(  45)		Float _hx_tmp;
HXDLIN(  45)		if ((samples < (int)0)) {
HXLINE(  45)			_hx_tmp = (((Float)4294967296.0) + samples);
            		}
            		else {
HXLINE(  45)			_hx_tmp = (samples + ((Float)0.0));
            		}
HXDLIN(  45)		HX_VARI_NAME( Int,_hx_int,"int") = b;
HXDLIN(  45)		Float _hx_tmp1;
HXDLIN(  45)		if ((_hx_int < (int)0)) {
HXLINE(  45)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  45)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  45)		return (((Float)_hx_tmp / (Float)_hx_tmp1) * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_totalMillisecond,return )

Int Reader_obj::get_currentSample(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","get_currentSample",0x420ab263,"kha.audio2.ogg.vorbis.Reader.get_currentSample","kha/audio2/ogg/vorbis/Reader.hx",50,0x425c5327)
            	HX_STACK_THIS(this)
HXLINE(  50)		return this->decoder->currentSample;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_currentSample,return )

Int Reader_obj::set_currentSample(Int value){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","set_currentSample",0x65788a6f,"kha.audio2.ogg.vorbis.Reader.set_currentSample","kha/audio2/ogg/vorbis/Reader.hx",53,0x425c5327)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  54)		this->decoder->seek(this->seekFunc,this->inputLength,value);
HXLINE(  55)		return this->decoder->currentSample;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,set_currentSample,return )

Float Reader_obj::get_currentMillisecond(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","get_currentMillisecond",0x0022ca68,"kha.audio2.ogg.vorbis.Reader.get_currentMillisecond","kha/audio2/ogg/vorbis/Reader.hx",62,0x425c5327)
            	HX_STACK_THIS(this)
HXLINE(  62)		Int samples = this->get_currentSample();
HXDLIN(  62)		Int b = this->get_header()->sampleRate;
HXDLIN(  62)		Float _hx_tmp;
HXDLIN(  62)		if ((samples < (int)0)) {
HXLINE(  62)			_hx_tmp = (((Float)4294967296.0) + samples);
            		}
            		else {
HXLINE(  62)			_hx_tmp = (samples + ((Float)0.0));
            		}
HXDLIN(  62)		HX_VARI_NAME( Int,_hx_int,"int") = b;
HXDLIN(  62)		Float _hx_tmp1;
HXDLIN(  62)		if ((_hx_int < (int)0)) {
HXLINE(  62)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  62)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  62)		return (((Float)_hx_tmp / (Float)_hx_tmp1) * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_currentMillisecond,return )

Float Reader_obj::set_currentMillisecond(Float value){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","set_currentMillisecond",0x33ce46dc,"kha.audio2.ogg.vorbis.Reader.set_currentMillisecond","kha/audio2/ogg/vorbis/Reader.hx",65,0x425c5327)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  66)		HX_VARI( Float,_g) = ((Float)value / (Float)(int)1000);
HXDLIN(  66)		HX_VARI( Int,_g1) = this->get_header()->sampleRate;
HXDLIN(  66)		HX_VARI_NAME( Int,_hx_int,"int") = _g1;
HXDLIN(  66)		Float _hx_tmp;
HXDLIN(  66)		if ((_hx_int < (int)0)) {
HXLINE(  66)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  66)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  66)		Int _hx_tmp1 = ::Math_obj::floor((_hx_tmp * _g));
HXDLIN(  66)		this->set_currentSample(_hx_tmp1);
HXLINE(  67)		return this->get_currentMillisecond();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,set_currentMillisecond,return )

Int Reader_obj::read(::Array< Float > output, ::Dynamic samples, ::Dynamic channels, ::Dynamic sampleRate,hx::Null< Bool >  __o_useFloat){
Bool useFloat = __o_useFloat.Default(false);
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","read",0xbdc52b2d,"kha.audio2.ogg.vorbis.Reader.read","kha/audio2/ogg/vorbis/Reader.hx",121,0x425c5327)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(samples,"samples")
            	HX_STACK_ARG(channels,"channels")
            	HX_STACK_ARG(sampleRate,"sampleRate")
            	HX_STACK_ARG(useFloat,"useFloat")
HXLINE( 122)		this->decoder->ensurePosition(this->seekFunc);
HXLINE( 124)		Bool _hx_tmp = hx::IsNull( samples );
HXDLIN( 124)		if (_hx_tmp) {
HXLINE( 125)			samples = this->decoder->totalSample;
            		}
HXLINE( 127)		Bool _hx_tmp1 = hx::IsNull( channels );
HXDLIN( 127)		if (_hx_tmp1) {
HXLINE( 128)			channels = this->get_header()->channel;
            		}
HXLINE( 130)		Bool _hx_tmp2 = hx::IsNull( sampleRate );
HXDLIN( 130)		if (_hx_tmp2) {
HXLINE( 131)			sampleRate = this->get_header()->sampleRate;
            		}
HXLINE( 133)		return this->decoder->read(output,samples,channels,sampleRate,useFloat);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Reader_obj,read,return )

 ::kha::audio2::ogg::vorbis::Reader Reader_obj::clone(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","clone",0xb0690fa6,"kha.audio2.ogg.vorbis.Reader.clone","kha/audio2/ogg/vorbis/Reader.hx",136,0x425c5327)
            	HX_STACK_THIS(this)
HXLINE( 137)		HX_VARI(  ::kha::audio2::ogg::vorbis::Reader,reader) = ( ( ::kha::audio2::ogg::vorbis::Reader)(::Type_obj::createEmptyInstance(hx::ClassOf< ::kha::audio2::ogg::vorbis::Reader >())) );
HXLINE( 138)		reader->seekFunc = this->seekFunc;
HXLINE( 139)		reader->inputLength = this->inputLength;
HXLINE( 140)		reader->decoder = this->decoder->clone(this->seekFunc);
HXLINE( 141)		reader->loopStart = this->loopStart;
HXLINE( 142)		reader->loopLength = this->loopLength;
HXLINE( 143)		return reader;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,clone,return )

Float Reader_obj::sampleToMillisecond(Int samples){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","sampleToMillisecond",0x1841f105,"kha.audio2.ogg.vorbis.Reader.sampleToMillisecond","kha/audio2/ogg/vorbis/Reader.hx",148,0x425c5327)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(samples,"samples")
HXLINE( 148)		Int b = this->get_header()->sampleRate;
HXDLIN( 148)		Float _hx_tmp;
HXDLIN( 148)		if ((samples < (int)0)) {
HXLINE( 148)			_hx_tmp = (((Float)4294967296.0) + samples);
            		}
            		else {
HXLINE( 148)			_hx_tmp = (samples + ((Float)0.0));
            		}
HXDLIN( 148)		HX_VARI_NAME( Int,_hx_int,"int") = b;
HXDLIN( 148)		Float _hx_tmp1;
HXDLIN( 148)		if ((_hx_int < (int)0)) {
HXLINE( 148)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 148)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 148)		return (((Float)_hx_tmp / (Float)_hx_tmp1) * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,sampleToMillisecond,return )

Int Reader_obj::millisecondToSample(Float millseconds){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","millisecondToSample",0x3285c26f,"kha.audio2.ogg.vorbis.Reader.millisecondToSample","kha/audio2/ogg/vorbis/Reader.hx",152,0x425c5327)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(millseconds,"millseconds")
HXLINE( 152)		HX_VARI( Float,_g) = ((Float)millseconds / (Float)(int)1000);
HXDLIN( 152)		HX_VARI( Int,_g1) = this->get_header()->sampleRate;
HXDLIN( 152)		HX_VARI_NAME( Int,_hx_int,"int") = _g1;
HXDLIN( 152)		Float _hx_tmp;
HXDLIN( 152)		if ((_hx_int < (int)0)) {
HXLINE( 152)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 152)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 152)		return ::Math_obj::floor((_hx_tmp * _g));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,millisecondToSample,return )

 ::kha::audio2::ogg::vorbis::Reader Reader_obj::openFromBytes( ::haxe::io::Bytes bytes){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::io::BytesInput,a1) HXARGC(1)
            		void _hx_run(Int a2){
            			HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","openFromBytes",0xcd22f2c0,"kha.audio2.ogg.vorbis.Reader.openFromBytes","kha/audio2/ogg/vorbis/Reader.hx",87,0x425c5327)
            			HX_STACK_ARG(a2,"a2")
HXLINE(  87)			::kha::audio2::ogg::vorbis::Reader_obj::seekBytes(a1,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","openFromBytes",0xcd22f2c0,"kha.audio2.ogg.vorbis.Reader.openFromBytes","kha/audio2/ogg/vorbis/Reader.hx",85,0x425c5327)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(  86)		HX_VARI(  ::haxe::io::BytesInput,input) =  ::haxe::io::BytesInput_obj::__new(bytes,null(),null());
HXLINE(  87)		 ::haxe::io::BytesInput a1 = input;
HXDLIN(  87)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1));
HXDLIN(  87)		return  ::kha::audio2::ogg::vorbis::Reader_obj::__new(input,_hx_tmp,bytes->length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,openFromBytes,return )

void Reader_obj::seekBytes( ::haxe::io::BytesInput bytes,Int pos){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","seekBytes",0x253a749c,"kha.audio2.ogg.vorbis.Reader.seekBytes","kha/audio2/ogg/vorbis/Reader.hx",91,0x425c5327)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  91)		bytes->set_position(pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reader_obj,seekBytes,(void))

 ::kha::audio2::ogg::vorbis::Reader Reader_obj::openFromFile(::String fileName){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		void _hx_run(Int p){
            			HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","openFromFile",0xa9f945c7,"kha.audio2.ogg.vorbis.Reader.openFromFile","kha/audio2/ogg/vorbis/Reader.hx",98,0x425c5327)
            			HX_STACK_ARG(p,"p")
HXLINE(  98)			f(p,::sys::io::FileSeek_obj::SeekBegin_dyn());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","openFromFile",0xa9f945c7,"kha.audio2.ogg.vorbis.Reader.openFromFile","kha/audio2/ogg/vorbis/Reader.hx",95,0x425c5327)
            	HX_STACK_ARG(fileName,"fileName")
HXLINE(  96)		HX_VARI(  ::sys::io::FileInput,file) = ::sys::io::File_obj::read(fileName,true);
HXLINE(  97)		HX_VARI(  ::Dynamic,stat) = ::sys::FileSystem_obj::stat(fileName);
HXLINE(  98)		 ::Dynamic f = file->seek_dyn();
HXDLIN(  98)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f));
HXDLIN(  98)		return  ::kha::audio2::ogg::vorbis::Reader_obj::__new(file,_hx_tmp, ::Dynamic(stat->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,openFromFile,return )

 ::kha::audio2::ogg::vorbis::data::Header Reader_obj::readAll( ::haxe::io::Bytes bytes, ::haxe::io::Output output,hx::Null< Bool >  __o_useFloat){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::io::BytesInput,a1) HXARGC(1)
            		void _hx_run(Int a2){
            			HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","readAll",0xf577fff4,"kha.audio2.ogg.vorbis.Reader.readAll","kha/audio2/ogg/vorbis/Reader.hx",105,0x425c5327)
            			HX_STACK_ARG(a2,"a2")
HXLINE( 105)			::kha::audio2::ogg::vorbis::Reader_obj::seekBytes(a1,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

Bool useFloat = __o_useFloat.Default(false);
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.Reader","readAll",0xf577fff4,"kha.audio2.ogg.vorbis.Reader.readAll","kha/audio2/ogg/vorbis/Reader.hx",102,0x425c5327)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(useFloat,"useFloat")
HXLINE( 103)		HX_VARI(  ::haxe::io::BytesInput,input) =  ::haxe::io::BytesInput_obj::__new(bytes,null(),null());
HXLINE( 104)		HX_VARI(  ::kha::audio2::ogg::vorbis::VorbisDecoder,decoder) = ::kha::audio2::ogg::vorbis::VorbisDecoder_obj::start(input);
HXLINE( 105)		 ::haxe::io::BytesInput a1 = input;
HXDLIN( 105)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1));
HXDLIN( 105)		decoder->setupSampleNumber(_hx_tmp,bytes->length);
HXLINE( 106)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Header,header) = decoder->header;
HXLINE( 109)		Int length = ((int)4096 * header->channel);
HXDLIN( 109)		HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN( 109)		_hx_array_set_size_exact(this1,length);
HXDLIN( 109)		HX_VARI( ::Array< Float >,buffer) = this1;
HXLINE( 110)		while(true){
HXLINE( 111)			HX_VARI( Int,n) = decoder->read(buffer,(int)4096,header->channel,header->sampleRate,useFloat);
HXLINE( 112)			{
HXLINE( 112)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 112)				HX_VARI( Int,_g) = (n * header->channel);
HXDLIN( 112)				while((_g1 < _g)){
HXLINE( 112)					HX_VARI( Int,i) = _g1++;
HXLINE( 113)					{
HXLINE( 113)						Float x = ( (Float)(_hx_array_unsafe_get(buffer,i)) );
HXDLIN( 113)						Int _hx_tmp1 = ::haxe::io::FPHelper_obj::floatToI32(x);
HXDLIN( 113)						output->writeInt32(_hx_tmp1);
            					}
            				}
            			}
HXLINE( 115)			if ((n == (int)0)) {
HXLINE( 115)				goto _hx_goto_0;
            			}
            		}
            		_hx_goto_0:;
HXLINE( 118)		return decoder->header;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reader_obj,readAll,return )


Reader_obj::Reader_obj()
{
}

void Reader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Reader);
	HX_MARK_MEMBER_NAME(decoder,"decoder");
	HX_MARK_MEMBER_NAME(loopStart,"loopStart");
	HX_MARK_MEMBER_NAME(loopLength,"loopLength");
	HX_MARK_MEMBER_NAME(seekFunc,"seekFunc");
	HX_MARK_MEMBER_NAME(inputLength,"inputLength");
	HX_MARK_END_CLASS();
}

void Reader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(decoder,"decoder");
	HX_VISIT_MEMBER_NAME(loopStart,"loopStart");
	HX_VISIT_MEMBER_NAME(loopLength,"loopLength");
	HX_VISIT_MEMBER_NAME(seekFunc,"seekFunc");
	HX_VISIT_MEMBER_NAME(inputLength,"inputLength");
}

hx::Val Reader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_header()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"decoder") ) { return hx::Val( decoder); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"seekFunc") ) { return hx::Val( seekFunc); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopStart") ) { return hx::Val( loopStart); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_header") ) { return hx::Val( get_header_dyn()); }
		if (HX_FIELD_EQ(inName,"loopLength") ) { return hx::Val( loopLength); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalSample") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_totalSample()); }
		if (HX_FIELD_EQ(inName,"inputLength") ) { return hx::Val( inputLength); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentSample") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentSample()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_totalSample") ) { return hx::Val( get_totalSample_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"totalMillisecond") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_totalMillisecond()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_currentSample") ) { return hx::Val( get_currentSample_dyn()); }
		if (HX_FIELD_EQ(inName,"set_currentSample") ) { return hx::Val( set_currentSample_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentMillisecond") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentMillisecond()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sampleToMillisecond") ) { return hx::Val( sampleToMillisecond_dyn()); }
		if (HX_FIELD_EQ(inName,"millisecondToSample") ) { return hx::Val( millisecondToSample_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_totalMillisecond") ) { return hx::Val( get_totalMillisecond_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_currentMillisecond") ) { return hx::Val( get_currentMillisecond_dyn()); }
		if (HX_FIELD_EQ(inName,"set_currentMillisecond") ) { return hx::Val( set_currentMillisecond_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Reader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"readAll") ) { outValue = readAll_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"seekBytes") ) { outValue = seekBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"openFromFile") ) { outValue = openFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"openFromBytes") ) { outValue = openFromBytes_dyn(); return true; }
	}
	return false;
}

hx::Val Reader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"decoder") ) { decoder=inValue.Cast<  ::kha::audio2::ogg::vorbis::VorbisDecoder >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"seekFunc") ) { seekFunc=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopStart") ) { loopStart=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loopLength") ) { loopLength=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputLength") ) { inputLength=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentSample") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currentSample(inValue) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentMillisecond") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currentMillisecond(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Reader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("decoder","\x84","\x2b","\xc4","\xea"));
	outFields->push(HX_HCSTRING("header","\x8d","\x09","\x00","\xfd"));
	outFields->push(HX_HCSTRING("totalSample","\x0e","\x53","\x80","\xe3"));
	outFields->push(HX_HCSTRING("totalMillisecond","\xdd","\xdd","\x4f","\x6f"));
	outFields->push(HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00"));
	outFields->push(HX_HCSTRING("currentMillisecond","\x88","\xaf","\x90","\xc6"));
	outFields->push(HX_HCSTRING("loopStart","\x5e","\x93","\xb7","\xb1"));
	outFields->push(HX_HCSTRING("loopLength","\x6a","\x92","\xf6","\x67"));
	outFields->push(HX_HCSTRING("inputLength","\x90","\x70","\x3b","\x94"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Reader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::audio2::ogg::vorbis::VorbisDecoder*/ ,(int)offsetof(Reader_obj,decoder),HX_HCSTRING("decoder","\x84","\x2b","\xc4","\xea")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Reader_obj,loopStart),HX_HCSTRING("loopStart","\x5e","\x93","\xb7","\xb1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Reader_obj,loopLength),HX_HCSTRING("loopLength","\x6a","\x92","\xf6","\x67")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Reader_obj,seekFunc),HX_HCSTRING("seekFunc","\xdc","\xb8","\x2a","\x46")},
	{hx::fsInt,(int)offsetof(Reader_obj,inputLength),HX_HCSTRING("inputLength","\x90","\x70","\x3b","\x94")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Reader_obj_sStaticStorageInfo = 0;
#endif

static ::String Reader_obj_sMemberFields[] = {
	HX_HCSTRING("decoder","\x84","\x2b","\xc4","\xea"),
	HX_HCSTRING("get_header","\x56","\x79","\x87","\xed"),
	HX_HCSTRING("get_totalSample","\xa5","\x0a","\x62","\xa4"),
	HX_HCSTRING("get_totalMillisecond","\xe6","\x42","\xba","\x8d"),
	HX_HCSTRING("get_currentSample","\x9a","\xec","\x16","\x07"),
	HX_HCSTRING("set_currentSample","\xa6","\xc4","\x84","\x2a"),
	HX_HCSTRING("get_currentMillisecond","\xd1","\x28","\x25","\x20"),
	HX_HCSTRING("set_currentMillisecond","\x45","\xa5","\xd0","\x53"),
	HX_HCSTRING("loopStart","\x5e","\x93","\xb7","\xb1"),
	HX_HCSTRING("loopLength","\x6a","\x92","\xf6","\x67"),
	HX_HCSTRING("seekFunc","\xdc","\xb8","\x2a","\x46"),
	HX_HCSTRING("inputLength","\x90","\x70","\x3b","\x94"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("sampleToMillisecond","\xfc","\x66","\x7a","\x64"),
	HX_HCSTRING("millisecondToSample","\x66","\x38","\xbe","\x7e"),
	::String(null()) };

static void Reader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Reader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Reader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Reader_obj::__mClass,"__mClass");
};

#endif

hx::Class Reader_obj::__mClass;

static ::String Reader_obj_sStaticFields[] = {
	HX_HCSTRING("openFromBytes","\x77","\x05","\xea","\x8d"),
	HX_HCSTRING("seekBytes","\xd3","\x1f","\x46","\xd4"),
	HX_HCSTRING("openFromFile","\xf0","\x36","\xa5","\xdf"),
	HX_HCSTRING("readAll","\x6b","\x9f","\xc3","\x02"),
	::String(null())
};

void Reader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.Reader","\xf7","\x8f","\x10","\xbb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reader_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Reader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Reader_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Reader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Reader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Reader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
