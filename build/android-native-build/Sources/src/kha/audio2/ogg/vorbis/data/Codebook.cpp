// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisTools
#include <kha/audio2/ogg/vorbis/VorbisTools.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

static const Int _hx_array_data_50[] = {
	(Int)0,(Int)1,(Int)2,(Int)2,(Int)3,(Int)3,(Int)3,(Int)3,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,
};
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Codebook_obj::__construct(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","new",0x6d842e98,"kha.audio2.ogg.vorbis.data.Codebook.new","kha/audio2/ogg/vorbis/data/Codebook.hx",34,0xa03d0d77)
            	HX_STACK_THIS(this)
            	}

Dynamic Codebook_obj::__CreateEmpty() { return new Codebook_obj; }

hx::ObjectPtr< Codebook_obj > Codebook_obj::__new()
{
	hx::ObjectPtr< Codebook_obj > _hx_result = new Codebook_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Codebook_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Codebook_obj > _hx_result = new Codebook_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Codebook_obj::addEntry(Int huffCode,Int symbol,Int count,Int len,::Array< Int > values){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","addEntry",0x9e9ab559,"kha.audio2.ogg.vorbis.data.Codebook.addEntry","kha/audio2/ogg/vorbis/data/Codebook.hx",189,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(huffCode,"huffCode")
            	HX_STACK_ARG(symbol,"symbol")
            	HX_STACK_ARG(count,"count")
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(values,"values")
HXLINE( 189)		Bool _hx_tmp = !(this->sparse);
HXDLIN( 189)		if (_hx_tmp) {
HXLINE( 190)			this->codewords->__unsafe_set(symbol,huffCode);
            		}
            		else {
HXLINE( 192)			this->codewords->__unsafe_set(count,huffCode);
HXLINE( 193)			this->codewordLengths->__unsafe_set(count,len);
HXLINE( 194)			values->__unsafe_set(count,symbol);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Codebook_obj,addEntry,(void))

Bool Codebook_obj::includeInSort(Int len){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","includeInSort",0x5c2fda63,"kha.audio2.ogg.vorbis.data.Codebook.includeInSort","kha/audio2/ogg/vorbis/data/Codebook.hx",200,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(len,"len")
HXLINE( 200)		if (this->sparse) {
HXLINE( 200)			return true;
            		}
            		else {
HXLINE( 203)			if ((len == (int)255)) {
HXLINE( 200)				return false;
            			}
            			else {
HXLINE( 205)				if ((len > (int)10)) {
HXLINE( 200)					return true;
            				}
            				else {
HXLINE( 200)					return false;
            				}
            			}
            		}
HXDLIN( 200)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Codebook_obj,includeInSort,return )

Bool Codebook_obj::computeCodewords(::Array< Int > len,Int n,::Array< Int > values){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","computeCodewords",0x179c0b6d,"kha.audio2.ogg.vorbis.data.Codebook.computeCodewords","kha/audio2/ogg/vorbis/data/Codebook.hx",214,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(values,"values")
HXLINE( 215)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN( 215)		_hx_array_set_size_exact(this1,(int)32);
HXDLIN( 215)		HX_VARI( ::Array< Int >,available) = this1;
HXLINE( 216)		{
HXLINE( 216)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 216)			while((_g < (int)32)){
HXLINE( 216)				HX_VARI( Int,x) = _g++;
HXDLIN( 216)				available->__unsafe_set(x,(int)0);
            			}
            		}
HXLINE( 219)		HX_VARI( Int,k) = (int)0;
HXLINE( 220)		while((k < n)){
HXLINE( 221)			Bool _hx_tmp = (( (Int)(_hx_array_unsafe_get(len,k)) ) < (int)255);
HXDLIN( 221)			if (_hx_tmp) {
HXLINE( 222)				goto _hx_goto_1;
            			}
HXLINE( 224)			++k;
            		}
            		_hx_goto_1:;
HXLINE( 227)		if ((k == n)) {
HXLINE( 229)			return true;
            		}
HXLINE( 232)		HX_VARI( Int,m) = (int)0;
HXLINE( 235)		{
HXLINE( 235)			m = (int)1;
HXDLIN( 235)			Int len1 = ( (Int)(_hx_array_unsafe_get(len,k)) );
HXDLIN( 235)			Bool _hx_tmp1 = !(this->sparse);
HXDLIN( 235)			if (_hx_tmp1) {
HXLINE( 235)				this->codewords->__unsafe_set(k,(int)0);
            			}
            			else {
HXLINE( 235)				this->codewords->__unsafe_set((int)0,(int)0);
HXDLIN( 235)				this->codewordLengths->__unsafe_set((int)0,len1);
HXDLIN( 235)				values->__unsafe_set((int)0,k);
            			}
            		}
HXLINE( 238)		HX_VARI( Int,i) = (int)0;
HXLINE( 240)		while(true){
HXLINE( 240)			Int _hx_tmp2 = ++i;
HXDLIN( 240)			Bool _hx_tmp3 = !((_hx_tmp2 <= ( (Int)(_hx_array_unsafe_get(len,k)) )));
HXDLIN( 240)			if (_hx_tmp3) {
HXLINE( 240)				goto _hx_goto_2;
            			}
HXLINE( 241)			available->__unsafe_set(i,((int)(int)1 << (int)((int)32 - i)));
            		}
            		_hx_goto_2:;
HXLINE( 248)		i = k;
HXLINE( 249)		while(true){
HXLINE( 249)			Int _hx_tmp4 = ++i;
HXDLIN( 249)			if (!((_hx_tmp4 < n))) {
HXLINE( 249)				goto _hx_goto_3;
            			}
HXLINE( 250)			HX_VARI( Int,z) = ( (Int)(_hx_array_unsafe_get(len,i)) );
HXLINE( 251)			if ((z == (int)255)) {
HXLINE( 251)				continue;
            			}
HXLINE( 259)			while(true){
HXLINE( 259)				Bool _hx_tmp5;
HXDLIN( 259)				if ((z > (int)0)) {
HXLINE( 259)					Int a = ( (Int)(_hx_array_unsafe_get(available,z)) );
HXDLIN( 259)					_hx_tmp5 = (a == (int)0);
            				}
            				else {
HXLINE( 259)					_hx_tmp5 = false;
            				}
HXDLIN( 259)				if (!(_hx_tmp5)) {
HXLINE( 259)					goto _hx_goto_4;
            				}
HXDLIN( 259)				--z;
            			}
            			_hx_goto_4:;
HXLINE( 260)			if ((z == (int)0)) {
HXLINE( 261)				return false;
            			}
HXLINE( 264)			HX_VARI( Int,res) = ( (Int)(_hx_array_unsafe_get(available,z)) );
HXLINE( 265)			available->__unsafe_set(z,(int)0);
HXLINE( 266)			{
HXLINE( 266)				HX_VARI_NAME( Int,n1,"n") = res;
HXDLIN( 266)				n1 = ((int)hx::UShr(((int)res & (int)(int)-1431655766),(int)1) | (int)((int)((int)res & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 266)				n1 = ((int)hx::UShr(((int)n1 & (int)(int)-858993460),(int)2) | (int)((int)((int)n1 & (int)(int)858993459) << (int)(int)2));
HXDLIN( 266)				n1 = ((int)hx::UShr(((int)n1 & (int)(int)-252645136),(int)4) | (int)((int)((int)n1 & (int)(int)252645135) << (int)(int)4));
HXDLIN( 266)				n1 = ((int)hx::UShr(((int)n1 & (int)(int)-16711936),(int)8) | (int)((int)((int)n1 & (int)(int)16711935) << (int)(int)8));
HXDLIN( 266)				HX_VARI( Int,huffCode) = ((int)hx::UShr(n1,(int)16) | (int)((int)n1 << (int)(int)16));
HXDLIN( 266)				HX_VARI( Int,count) = m++;
HXDLIN( 266)				Int len2 = ( (Int)(_hx_array_unsafe_get(len,i)) );
HXDLIN( 266)				Bool _hx_tmp6 = !(this->sparse);
HXDLIN( 266)				if (_hx_tmp6) {
HXLINE( 266)					this->codewords->__unsafe_set(i,huffCode);
            				}
            				else {
HXLINE( 266)					this->codewords->__unsafe_set(count,huffCode);
HXDLIN( 266)					this->codewordLengths->__unsafe_set(count,len2);
HXDLIN( 266)					values->__unsafe_set(count,i);
            				}
            			}
HXLINE( 269)			Bool _hx_tmp7 = (z != ( (Int)(_hx_array_unsafe_get(len,i)) ));
HXDLIN( 269)			if (_hx_tmp7) {
HXLINE( 270)				HX_VARI( Int,y) = ( (Int)(_hx_array_unsafe_get(len,i)) );
HXLINE( 271)				while((y > z)){
HXLINE( 272)					_hx_array_unsafe_get(available,y);
HXLINE( 273)					available->__unsafe_set(y,(res + ((int)(int)1 << (int)((int)32 - y))));
HXLINE( 274)					--y;
            				}
            			}
            		}
            		_hx_goto_3:;
HXLINE( 279)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Codebook_obj,computeCodewords,return )

void Codebook_obj::computeSortedHuffman(::Array< Int > lengths,::Array< Int > values){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","computeSortedHuffman",0x642a2241,"kha.audio2.ogg.vorbis.data.Codebook.computeSortedHuffman","kha/audio2/ogg/vorbis/data/Codebook.hx",284,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lengths,"lengths")
            	HX_STACK_ARG(values,"values")
HXLINE( 289)		Bool _hx_tmp = !(this->sparse);
HXDLIN( 289)		if (_hx_tmp) {
HXLINE( 290)			HX_VARI( Int,k) = (int)0;
HXLINE( 291)			{
HXLINE( 291)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 291)				HX_VARI( Int,_g) = this->entries;
HXDLIN( 291)				while((_g1 < _g)){
HXLINE( 291)					HX_VARI( Int,i) = _g1++;
HXLINE( 292)					HX_VARI( Int,len) = ( (Int)(_hx_array_unsafe_get(lengths,i)) );
HXDLIN( 292)					Bool _hx_tmp1;
HXDLIN( 292)					if (this->sparse) {
HXLINE( 292)						_hx_tmp1 = true;
            					}
            					else {
HXLINE( 292)						if ((len == (int)255)) {
HXLINE( 292)							_hx_tmp1 = false;
            						}
            						else {
HXLINE( 292)							if ((len > (int)10)) {
HXLINE( 292)								_hx_tmp1 = true;
            							}
            							else {
HXLINE( 292)								_hx_tmp1 = false;
            							}
            						}
            					}
HXDLIN( 292)					if (_hx_tmp1) {
HXLINE( 293)						Int _hx_tmp2 = k++;
HXDLIN( 293)						HX_VARI( Int,n) = ( (Int)(_hx_array_unsafe_get(this->codewords,i)) );
HXDLIN( 293)						n = ((int)hx::UShr(((int)n & (int)(int)-1431655766),(int)1) | (int)((int)((int)n & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 293)						n = ((int)hx::UShr(((int)n & (int)(int)-858993460),(int)2) | (int)((int)((int)n & (int)(int)858993459) << (int)(int)2));
HXDLIN( 293)						n = ((int)hx::UShr(((int)n & (int)(int)-252645136),(int)4) | (int)((int)((int)n & (int)(int)252645135) << (int)(int)4));
HXDLIN( 293)						n = ((int)hx::UShr(((int)n & (int)(int)-16711936),(int)8) | (int)((int)((int)n & (int)(int)16711935) << (int)(int)8));
HXDLIN( 293)						this->sortedCodewords[_hx_tmp2] = ((int)hx::UShr(n,(int)16) | (int)((int)n << (int)(int)16));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 298)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 298)			HX_VARI_NAME( Int,_g2,"_g") = this->sortedEntries;
HXDLIN( 298)			while((_g11 < _g2)){
HXLINE( 298)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 299)				HX_VARI_NAME( Int,n1,"n") = ( (Int)(_hx_array_unsafe_get(this->codewords,i1)) );
HXDLIN( 299)				n1 = ((int)hx::UShr(((int)n1 & (int)(int)-1431655766),(int)1) | (int)((int)((int)n1 & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 299)				n1 = ((int)hx::UShr(((int)n1 & (int)(int)-858993460),(int)2) | (int)((int)((int)n1 & (int)(int)858993459) << (int)(int)2));
HXDLIN( 299)				n1 = ((int)hx::UShr(((int)n1 & (int)(int)-252645136),(int)4) | (int)((int)((int)n1 & (int)(int)252645135) << (int)(int)4));
HXDLIN( 299)				n1 = ((int)hx::UShr(((int)n1 & (int)(int)-16711936),(int)8) | (int)((int)((int)n1 & (int)(int)16711935) << (int)(int)8));
HXDLIN( 299)				this->sortedCodewords[i1] = ((int)hx::UShr(n1,(int)16) | (int)((int)n1 << (int)(int)16));
            			}
            		}
HXLINE( 303)		this->sortedCodewords[this->sortedEntries] = (int)-1;
HXLINE( 304)		this->sortedCodewords->sort(::kha::audio2::ogg::vorbis::VorbisTools_obj::uintAsc_dyn());
HXLINE( 306)		HX_VAR_NAME( Int,len1,"len");
HXDLIN( 306)		if (this->sparse) {
HXLINE( 306)			len1 = this->sortedEntries;
            		}
            		else {
HXLINE( 306)			len1 = this->entries;
            		}
HXLINE( 312)		{
HXLINE( 312)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 312)			HX_VARI_NAME( Int,_g3,"_g") = len1;
HXDLIN( 312)			while((_g12 < _g3)){
HXLINE( 312)				HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 313)				HX_VAR( Int,huffLen);
HXDLIN( 313)				Bool _hx_tmp3 = this->sparse;
HXDLIN( 313)				if (_hx_tmp3) {
HXLINE( 313)					Int index = ( (Int)(_hx_array_unsafe_get(values,i2)) );
HXDLIN( 313)					huffLen = ( (Int)(_hx_array_unsafe_get(lengths,index)) );
            				}
            				else {
HXLINE( 313)					huffLen = ( (Int)(_hx_array_unsafe_get(lengths,i2)) );
            				}
HXLINE( 314)				Bool _hx_tmp4;
HXDLIN( 314)				if (this->sparse) {
HXLINE( 314)					_hx_tmp4 = true;
            				}
            				else {
HXLINE( 314)					if ((huffLen == (int)255)) {
HXLINE( 314)						_hx_tmp4 = false;
            					}
            					else {
HXLINE( 314)						if ((huffLen > (int)10)) {
HXLINE( 314)							_hx_tmp4 = true;
            						}
            						else {
HXLINE( 314)							_hx_tmp4 = false;
            						}
            					}
            				}
HXDLIN( 314)				if (_hx_tmp4) {
HXLINE( 315)					HX_VARI_NAME( Int,n2,"n") = ( (Int)(_hx_array_unsafe_get(this->codewords,i2)) );
HXDLIN( 315)					n2 = ((int)hx::UShr(((int)n2 & (int)(int)-1431655766),(int)1) | (int)((int)((int)n2 & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 315)					n2 = ((int)hx::UShr(((int)n2 & (int)(int)-858993460),(int)2) | (int)((int)((int)n2 & (int)(int)858993459) << (int)(int)2));
HXDLIN( 315)					n2 = ((int)hx::UShr(((int)n2 & (int)(int)-252645136),(int)4) | (int)((int)((int)n2 & (int)(int)252645135) << (int)(int)4));
HXDLIN( 315)					n2 = ((int)hx::UShr(((int)n2 & (int)(int)-16711936),(int)8) | (int)((int)((int)n2 & (int)(int)16711935) << (int)(int)8));
HXDLIN( 315)					HX_VARI( Int,code) = ((int)hx::UShr(n2,(int)16) | (int)((int)n2 << (int)(int)16));
HXLINE( 316)					HX_VARI( Int,x) = (int)0;
HXLINE( 317)					HX_VARI_NAME( Int,n3,"n") = this->sortedEntries;
HXLINE( 318)					while((n3 > (int)1)){
HXLINE( 320)						HX_VARI( Int,m) = (x + ((int)n3 >> (int)(int)1));
HXLINE( 321)						HX_VARI( Int,a) = this->sortedCodewords->__get(m);
HXDLIN( 321)						HX_VARI( Bool,aNeg) = (code < (int)0);
HXDLIN( 321)						HX_VARI( Bool,bNeg) = (a < (int)0);
HXDLIN( 321)						Bool _hx_tmp5;
HXDLIN( 321)						if ((aNeg != bNeg)) {
HXLINE( 321)							_hx_tmp5 = aNeg;
            						}
            						else {
HXLINE( 321)							_hx_tmp5 = (code >= a);
            						}
HXDLIN( 321)						if (_hx_tmp5) {
HXLINE( 322)							x = m;
HXLINE( 323)							Int _hx_tmp6 = ((int)n3 >> (int)(int)1);
HXDLIN( 323)							hx::SubEq(n3,_hx_tmp6);
            						}
            						else {
HXLINE( 325)							hx::ShrEq(n3,(int)1);
            						}
            					}
HXLINE( 330)					Bool _hx_tmp7 = this->sparse;
HXDLIN( 330)					if (_hx_tmp7) {
HXLINE( 331)						{
HXLINE( 331)							Int val = ( (Int)(_hx_array_unsafe_get(values,i2)) );
HXDLIN( 331)							this->sortedValues->__unsafe_set(x,val);
            						}
HXLINE( 332)						this->codewordLengths->__unsafe_set(x,huffLen);
            					}
            					else {
HXLINE( 334)						this->sortedValues->__unsafe_set(x,i2);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Codebook_obj,computeSortedHuffman,(void))

void Codebook_obj::computeAcceleratedHuffman(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","computeAcceleratedHuffman",0x486d1295,"kha.audio2.ogg.vorbis.data.Codebook.computeAcceleratedHuffman","kha/audio2/ogg/vorbis/data/Codebook.hx",341,0xa03d0d77)
            	HX_STACK_THIS(this)
HXLINE( 342)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN( 342)		_hx_array_set_size_exact(this1,(int)1024);
HXDLIN( 342)		this->fastHuffman = this1;
HXLINE( 343)		this->fastHuffman->__unsafe_set((int)0,(int)-1);
HXLINE( 344)		{
HXLINE( 344)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 344)			while((_g1 < (int)1024)){
HXLINE( 344)				HX_VARI( Int,i) = _g1++;
HXLINE( 345)				this->fastHuffman->__unsafe_set(i,(int)-1);
            			}
            		}
HXLINE( 348)		HX_VAR( Int,len);
HXDLIN( 348)		if (this->sparse) {
HXLINE( 348)			len = this->sortedEntries;
            		}
            		else {
HXLINE( 348)			len = this->entries;
            		}
HXLINE( 353)		{
HXLINE( 353)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 353)			HX_VARI( Int,_g) = len;
HXDLIN( 353)			while((_g11 < _g)){
HXLINE( 353)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 354)				Bool _hx_tmp = (( (Int)(_hx_array_unsafe_get(this->codewordLengths,i1)) ) <= (int)10);
HXDLIN( 354)				if (_hx_tmp) {
HXLINE( 355)					HX_VAR( Int,z);
HXDLIN( 355)					Bool _hx_tmp1 = this->sparse;
HXDLIN( 355)					if (_hx_tmp1) {
HXLINE( 355)						HX_VARI( Int,n) = this->sortedCodewords->__get(i1);
HXDLIN( 355)						n = ((int)hx::UShr(((int)n & (int)(int)-1431655766),(int)1) | (int)((int)((int)n & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 355)						n = ((int)hx::UShr(((int)n & (int)(int)-858993460),(int)2) | (int)((int)((int)n & (int)(int)858993459) << (int)(int)2));
HXDLIN( 355)						n = ((int)hx::UShr(((int)n & (int)(int)-252645136),(int)4) | (int)((int)((int)n & (int)(int)252645135) << (int)(int)4));
HXDLIN( 355)						n = ((int)hx::UShr(((int)n & (int)(int)-16711936),(int)8) | (int)((int)((int)n & (int)(int)16711935) << (int)(int)8));
HXDLIN( 355)						z = ((int)hx::UShr(n,(int)16) | (int)((int)n << (int)(int)16));
            					}
            					else {
HXLINE( 355)						z = ( (Int)(_hx_array_unsafe_get(this->codewords,i1)) );
            					}
HXLINE( 357)					while((z < (int)1024)){
HXLINE( 358)						this->fastHuffman->__unsafe_set(z,i1);
HXLINE( 359)						Int _hx_tmp2 = ((int)(int)1 << (int)( (Int)(_hx_array_unsafe_get(this->codewordLengths,i1)) ));
HXDLIN( 359)						hx::AddEq(z,_hx_tmp2);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Codebook_obj,computeAcceleratedHuffman,(void))

Bool Codebook_obj::codebookDecode( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< Float > output,Int offset,Int len){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","codebookDecode",0xd5fd826c,"kha.audio2.ogg.vorbis.data.Codebook.codebookDecode","kha/audio2/ogg/vorbis/data/Codebook.hx",367,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(len,"len")
HXLINE( 368)		Bool _hx_tmp = (decodeState->validBits < (int)10);
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 368)			decodeState->prepHuffman();
            		}
HXDLIN( 368)		Int index = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 368)		HX_VARI( Int,i) = ( (Int)(_hx_array_unsafe_get(this->fastHuffman,index)) );
HXDLIN( 368)		HX_VAR( Int,val);
HXDLIN( 368)		if ((i >= (int)0)) {
HXLINE( 368)			HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(this->codewordLengths,i)) );
HXDLIN( 368)			Int _hx_tmp1 = hx::UShr(decodeState->acc,l);
HXDLIN( 368)			decodeState->acc = _hx_tmp1;
HXDLIN( 368)			hx::SubEq(decodeState->validBits,l);
HXDLIN( 368)			Bool _hx_tmp2 = (decodeState->validBits < (int)0);
HXDLIN( 368)			if (_hx_tmp2) {
HXLINE( 368)				decodeState->validBits = (int)0;
HXDLIN( 368)				val = (int)-1;
            			}
            			else {
HXLINE( 368)				val = i;
            			}
            		}
            		else {
HXLINE( 368)			val = decodeState->decodeScalarRaw(hx::ObjectPtr<OBJ_>(this));
            		}
HXDLIN( 368)		Bool _hx_tmp3 = this->sparse;
HXDLIN( 368)		if (_hx_tmp3) {
HXLINE( 368)			val = ( (Int)(_hx_array_unsafe_get(this->sortedValues,val)) );
            		}
HXDLIN( 368)		HX_VARI( Int,z) = val;
HXLINE( 369)		HX_VARI( Int,lookupValues) = this->lookupValues;
HXLINE( 370)		HX_VARI( Bool,sequenceP) = this->sequenceP;
HXLINE( 371)		HX_VARI( ::Array< Float >,multiplicands) = this->multiplicands;
HXLINE( 372)		HX_VARI( Float,minimumValue) = this->minimumValue;
HXLINE( 374)		if ((z < (int)0)) {
HXLINE( 375)			return false;
            		}
HXLINE( 377)		Bool _hx_tmp4 = (len > this->dimensions);
HXDLIN( 377)		if (_hx_tmp4) {
HXLINE( 378)			len = this->dimensions;
            		}
HXLINE( 382)		Bool _hx_tmp5 = (this->lookupType == (int)1);
HXDLIN( 382)		if (_hx_tmp5) {
HXLINE( 383)			HX_VARI( Int,div) = (int)1;
HXLINE( 384)			HX_VARI( Float,last) = ((Float)0.0);
HXLINE( 385)			{
HXLINE( 385)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 385)				HX_VARI( Int,_g) = len;
HXDLIN( 385)				while((_g1 < _g)){
HXLINE( 385)					HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 386)					Int a = ::Std_obj::_hx_int(((Float)z / (Float)div));
HXDLIN( 386)					HX_VARI_NAME( Int,_hx_int,"int") = a;
HXDLIN( 386)					Float _hx_tmp6;
HXDLIN( 386)					if ((_hx_int < (int)0)) {
HXLINE( 386)						_hx_tmp6 = (((Float)4294967296.0) + _hx_int);
            					}
            					else {
HXLINE( 386)						_hx_tmp6 = (_hx_int + ((Float)0.0));
            					}
HXDLIN( 386)					HX_VARI_NAME( Int,int1,"int") = lookupValues;
HXDLIN( 386)					Float _hx_tmp7;
HXDLIN( 386)					if ((int1 < (int)0)) {
HXLINE( 386)						_hx_tmp7 = (((Float)4294967296.0) + int1);
            					}
            					else {
HXLINE( 386)						_hx_tmp7 = (int1 + ((Float)0.0));
            					}
HXDLIN( 386)					HX_VARI( Int,off) = ::Std_obj::_hx_int(hx::Mod(_hx_tmp6,_hx_tmp7));
HXLINE( 387)					HX_VARI_NAME( Float,val1,"val") = (( (Float)(_hx_array_unsafe_get(multiplicands,off)) ) + last);
HXLINE( 388)					{
HXLINE( 388)						HX_VARI( Int,_g2) = (offset + i1);
HXDLIN( 388)						{
HXLINE( 388)							Float val2 = (( (Float)(_hx_array_unsafe_get(output,_g2)) ) + val1);
HXDLIN( 388)							output->__unsafe_set(_g2,val2);
            						}
            					}
HXLINE( 389)					if (sequenceP) {
HXLINE( 390)						last = (val1 + minimumValue);
            					}
HXLINE( 392)					div = (div * lookupValues);
            				}
            			}
HXLINE( 394)			return true;
            		}
HXLINE( 397)		hx::MultEq(z,this->dimensions);
HXLINE( 398)		if (sequenceP) {
HXLINE( 399)			HX_VARI_NAME( Float,last1,"last") = ((Float)0.0);
HXLINE( 400)			{
HXLINE( 400)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 400)				HX_VARI_NAME( Int,_g3,"_g") = len;
HXDLIN( 400)				while((_g11 < _g3)){
HXLINE( 400)					HX_VARI_NAME( Int,i2,"i") = _g11++;
HXLINE( 401)					HX_VARI_NAME( Float,val3,"val") = (( (Float)(_hx_array_unsafe_get(multiplicands,(z + i2))) ) + last1);
HXLINE( 402)					{
HXLINE( 402)						HX_VARI_NAME( Int,_g21,"_g2") = (offset + i2);
HXDLIN( 402)						{
HXLINE( 402)							Float val4 = (( (Float)(_hx_array_unsafe_get(output,_g21)) ) + val3);
HXDLIN( 402)							output->__unsafe_set(_g21,val4);
            						}
            					}
HXLINE( 403)					last1 = (val3 + minimumValue);
            				}
            			}
            		}
            		else {
HXLINE( 407)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 407)			HX_VARI_NAME( Int,_g4,"_g") = len;
HXDLIN( 407)			while((_g12 < _g4)){
HXLINE( 407)				HX_VARI_NAME( Int,i3,"i") = _g12++;
HXLINE( 408)				{
HXLINE( 408)					HX_VARI_NAME( Int,_g22,"_g2") = (offset + i3);
HXDLIN( 408)					{
HXLINE( 408)						Float _hx_tmp8 = ( (Float)(_hx_array_unsafe_get(output,_g22)) );
HXDLIN( 408)						Float _hx_tmp9 = ( (Float)(_hx_array_unsafe_get(multiplicands,(z + i3))) );
HXDLIN( 408)						output->__unsafe_set(_g22,(_hx_tmp8 + _hx_tmp9));
            					}
            				}
            			}
            		}
HXLINE( 411)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Codebook_obj,codebookDecode,return )

Bool Codebook_obj::codebookDecodeStep( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< Float > output,Int offset,Int len,Int step){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","codebookDecodeStep",0x96623bd8,"kha.audio2.ogg.vorbis.data.Codebook.codebookDecodeStep","kha/audio2/ogg/vorbis/data/Codebook.hx",415,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(step,"step")
HXLINE( 416)		Bool _hx_tmp = (decodeState->validBits < (int)10);
HXDLIN( 416)		if (_hx_tmp) {
HXLINE( 416)			decodeState->prepHuffman();
            		}
HXDLIN( 416)		Int index = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 416)		HX_VARI( Int,i) = ( (Int)(_hx_array_unsafe_get(this->fastHuffman,index)) );
HXDLIN( 416)		HX_VAR( Int,val);
HXDLIN( 416)		if ((i >= (int)0)) {
HXLINE( 416)			HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(this->codewordLengths,i)) );
HXDLIN( 416)			Int _hx_tmp1 = hx::UShr(decodeState->acc,l);
HXDLIN( 416)			decodeState->acc = _hx_tmp1;
HXDLIN( 416)			hx::SubEq(decodeState->validBits,l);
HXDLIN( 416)			Bool _hx_tmp2 = (decodeState->validBits < (int)0);
HXDLIN( 416)			if (_hx_tmp2) {
HXLINE( 416)				decodeState->validBits = (int)0;
HXDLIN( 416)				val = (int)-1;
            			}
            			else {
HXLINE( 416)				val = i;
            			}
            		}
            		else {
HXLINE( 416)			val = decodeState->decodeScalarRaw(hx::ObjectPtr<OBJ_>(this));
            		}
HXDLIN( 416)		Bool _hx_tmp3 = this->sparse;
HXDLIN( 416)		if (_hx_tmp3) {
HXLINE( 416)			val = ( (Int)(_hx_array_unsafe_get(this->sortedValues,val)) );
            		}
HXDLIN( 416)		HX_VARI( Int,z) = val;
HXLINE( 417)		HX_VARI( Float,last) = ((Float)0.0);
HXLINE( 418)		if ((z < (int)0)) {
HXLINE( 419)			return false;
            		}
HXLINE( 421)		Bool _hx_tmp4 = (len > this->dimensions);
HXDLIN( 421)		if (_hx_tmp4) {
HXLINE( 422)			len = this->dimensions;
            		}
HXLINE( 425)		HX_VARI( Int,lookupValues) = this->lookupValues;
HXLINE( 426)		HX_VARI( Bool,sequenceP) = this->sequenceP;
HXLINE( 427)		HX_VARI( ::Array< Float >,multiplicands) = this->multiplicands;
HXLINE( 431)		Bool _hx_tmp5 = (this->lookupType == (int)1);
HXDLIN( 431)		if (_hx_tmp5) {
HXLINE( 432)			HX_VARI( Int,div) = (int)1;
HXLINE( 433)			{
HXLINE( 433)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 433)				HX_VARI( Int,_g) = len;
HXDLIN( 433)				while((_g1 < _g)){
HXLINE( 433)					HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 434)					Int a = ::Std_obj::_hx_int(((Float)z / (Float)div));
HXDLIN( 434)					HX_VARI_NAME( Int,_hx_int,"int") = a;
HXDLIN( 434)					Float _hx_tmp6;
HXDLIN( 434)					if ((_hx_int < (int)0)) {
HXLINE( 434)						_hx_tmp6 = (((Float)4294967296.0) + _hx_int);
            					}
            					else {
HXLINE( 434)						_hx_tmp6 = (_hx_int + ((Float)0.0));
            					}
HXDLIN( 434)					HX_VARI_NAME( Int,int1,"int") = lookupValues;
HXDLIN( 434)					Float _hx_tmp7;
HXDLIN( 434)					if ((int1 < (int)0)) {
HXLINE( 434)						_hx_tmp7 = (((Float)4294967296.0) + int1);
            					}
            					else {
HXLINE( 434)						_hx_tmp7 = (int1 + ((Float)0.0));
            					}
HXDLIN( 434)					HX_VARI( Int,off) = ::Std_obj::_hx_int(hx::Mod(_hx_tmp6,_hx_tmp7));
HXLINE( 435)					HX_VARI_NAME( Float,val1,"val") = (( (Float)(_hx_array_unsafe_get(multiplicands,off)) ) + last);
HXLINE( 436)					{
HXLINE( 436)						HX_VARI( Int,_g2) = (offset + (i1 * step));
HXDLIN( 436)						{
HXLINE( 436)							Float val2 = (( (Float)(_hx_array_unsafe_get(output,_g2)) ) + val1);
HXDLIN( 436)							output->__unsafe_set(_g2,val2);
            						}
            					}
HXLINE( 437)					if (sequenceP) {
HXLINE( 438)						last = val1;
            					}
HXLINE( 440)					div = (div * lookupValues);
            				}
            			}
HXLINE( 442)			return true;
            		}
HXLINE( 445)		hx::MultEq(z,this->dimensions);
HXLINE( 446)		{
HXLINE( 446)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 446)			HX_VARI_NAME( Int,_g3,"_g") = len;
HXDLIN( 446)			while((_g11 < _g3)){
HXLINE( 446)				HX_VARI_NAME( Int,i2,"i") = _g11++;
HXLINE( 447)				HX_VARI_NAME( Float,val3,"val") = (( (Float)(_hx_array_unsafe_get(multiplicands,(z + i2))) ) + last);
HXLINE( 448)				{
HXLINE( 448)					HX_VARI_NAME( Int,_g21,"_g2") = (offset + (i2 * step));
HXDLIN( 448)					{
HXLINE( 448)						Float val4 = (( (Float)(_hx_array_unsafe_get(output,_g21)) ) + val3);
HXDLIN( 448)						output->__unsafe_set(_g21,val4);
            					}
            				}
HXLINE( 449)				if (sequenceP) {
HXLINE( 450)					last = val3;
            				}
            			}
            		}
HXLINE( 454)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Codebook_obj,codebookDecodeStep,return )

Int Codebook_obj::decodeStart( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","decodeStart",0x32b2568c,"kha.audio2.ogg.vorbis.data.Codebook.decodeStart","kha/audio2/ogg/vorbis/data/Codebook.hx",459,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
HXLINE( 459)		Bool _hx_tmp = (decodeState->validBits < (int)10);
HXDLIN( 459)		if (_hx_tmp) {
HXLINE( 459)			decodeState->prepHuffman();
            		}
HXDLIN( 459)		Int index = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 459)		HX_VARI( Int,i) = ( (Int)(_hx_array_unsafe_get(this->fastHuffman,index)) );
HXDLIN( 459)		HX_VAR( Int,val);
HXDLIN( 459)		if ((i >= (int)0)) {
HXLINE( 459)			HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(this->codewordLengths,i)) );
HXDLIN( 459)			Int _hx_tmp1 = hx::UShr(decodeState->acc,l);
HXDLIN( 459)			decodeState->acc = _hx_tmp1;
HXDLIN( 459)			hx::SubEq(decodeState->validBits,l);
HXDLIN( 459)			Bool _hx_tmp2 = (decodeState->validBits < (int)0);
HXDLIN( 459)			if (_hx_tmp2) {
HXLINE( 459)				decodeState->validBits = (int)0;
HXDLIN( 459)				val = (int)-1;
            			}
            			else {
HXLINE( 459)				val = i;
            			}
            		}
            		else {
HXLINE( 459)			val = decodeState->decodeScalarRaw(hx::ObjectPtr<OBJ_>(this));
            		}
HXDLIN( 459)		Bool _hx_tmp3 = this->sparse;
HXDLIN( 459)		if (_hx_tmp3) {
HXLINE( 459)			val = ( (Int)(_hx_array_unsafe_get(this->sortedValues,val)) );
            		}
HXDLIN( 459)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Codebook_obj,decodeStart,return )

 ::Dynamic Codebook_obj::decodeDeinterleaveRepeat( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< ::Dynamic> residueBuffers,Int ch,Int cInter,Int pInter,Int len,Int totalDecode){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","decodeDeinterleaveRepeat",0x5171272d,"kha.audio2.ogg.vorbis.data.Codebook.decodeDeinterleaveRepeat","kha/audio2/ogg/vorbis/data/Codebook.hx",483,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(residueBuffers,"residueBuffers")
            	HX_STACK_ARG(ch,"ch")
            	HX_STACK_ARG(cInter,"cInter")
            	HX_STACK_ARG(pInter,"pInter")
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(totalDecode,"totalDecode")
HXLINE( 484)		HX_VARI( Int,effective) = this->dimensions;
HXLINE( 487)		if ((this->lookupType == (int)0)) {
HXLINE( 488)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_dyn(),null(),hx::SourceInfo(HX_("Codebook.hx",88,14,e0,8e),488,HX_("kha.audio2.ogg.vorbis.data.Codebook",a6,42,7b,ee),HX_("decodeDeinterleaveRepeat",65,00,32,3c))));
            		}
HXLINE( 491)		HX_VARI( ::Array< Float >,multiplicands) = this->multiplicands;
HXLINE( 492)		HX_VARI( Bool,sequenceP) = this->sequenceP;
HXLINE( 493)		HX_VARI( Int,lookupValues) = this->lookupValues;
HXLINE( 495)		while((totalDecode > (int)0)){
HXLINE( 496)			HX_VARI( Float,last) = ((Float)0.0);
HXLINE( 497)			Bool _hx_tmp = (decodeState->validBits < (int)10);
HXDLIN( 497)			if (_hx_tmp) {
HXLINE( 497)				decodeState->prepHuffman();
            			}
HXDLIN( 497)			Int index = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 497)			HX_VARI( Int,i) = ( (Int)(_hx_array_unsafe_get(this->fastHuffman,index)) );
HXDLIN( 497)			HX_VAR( Int,val);
HXDLIN( 497)			if ((i >= (int)0)) {
HXLINE( 497)				HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(this->codewordLengths,i)) );
HXDLIN( 497)				Int _hx_tmp1 = hx::UShr(decodeState->acc,l);
HXDLIN( 497)				decodeState->acc = _hx_tmp1;
HXDLIN( 497)				hx::SubEq(decodeState->validBits,l);
HXDLIN( 497)				Bool _hx_tmp2 = (decodeState->validBits < (int)0);
HXDLIN( 497)				if (_hx_tmp2) {
HXLINE( 497)					decodeState->validBits = (int)0;
HXDLIN( 497)					val = (int)-1;
            				}
            				else {
HXLINE( 497)					val = i;
            				}
            			}
            			else {
HXLINE( 497)				val = decodeState->decodeScalarRaw(hx::ObjectPtr<OBJ_>(this));
            			}
HXDLIN( 497)			Bool _hx_tmp3 = this->sparse;
HXDLIN( 497)			if (_hx_tmp3) {
HXLINE( 497)				val = ( (Int)(_hx_array_unsafe_get(this->sortedValues,val)) );
            			}
HXDLIN( 497)			HX_VARI( Int,z) = val;
HXLINE( 499)			if ((z < (int)0)) {
HXLINE( 500)				Bool _hx_tmp4;
HXDLIN( 500)				if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 500)					_hx_tmp4 = decodeState->lastSeg;
            				}
            				else {
HXLINE( 500)					_hx_tmp4 = false;
            				}
HXDLIN( 500)				if (_hx_tmp4) {
HXLINE( 501)					return null();
            				}
HXLINE( 503)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_dyn(),null(),hx::SourceInfo(HX_("Codebook.hx",88,14,e0,8e),503,HX_("kha.audio2.ogg.vorbis.data.Codebook",a6,42,7b,ee),HX_("decodeDeinterleaveRepeat",65,00,32,3c))));
            			}
HXLINE( 510)			Int _hx_tmp5 = ((cInter + (pInter * ch)) + effective);
HXDLIN( 510)			if ((_hx_tmp5 > (len * ch))) {
HXLINE( 511)				effective = ((len * ch) - ((pInter * ch) - cInter));
            			}
HXLINE( 514)			Bool _hx_tmp6 = (this->lookupType == (int)1);
HXDLIN( 514)			if (_hx_tmp6) {
HXLINE( 515)				HX_VARI( Int,div) = (int)1;
HXLINE( 516)				if (sequenceP) {
HXLINE( 517)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 517)					HX_VARI( Int,_g) = effective;
HXDLIN( 517)					while((_g1 < _g)){
HXLINE( 517)						++_g1;
HXLINE( 518)						Int a = ::Std_obj::_hx_int(((Float)z / (Float)div));
HXDLIN( 518)						HX_VARI_NAME( Int,_hx_int,"int") = a;
HXDLIN( 518)						Float _hx_tmp7;
HXDLIN( 518)						if ((_hx_int < (int)0)) {
HXLINE( 518)							_hx_tmp7 = (((Float)4294967296.0) + _hx_int);
            						}
            						else {
HXLINE( 518)							_hx_tmp7 = (_hx_int + ((Float)0.0));
            						}
HXDLIN( 518)						HX_VARI_NAME( Int,int1,"int") = lookupValues;
HXDLIN( 518)						Float _hx_tmp8;
HXDLIN( 518)						if ((int1 < (int)0)) {
HXLINE( 518)							_hx_tmp8 = (((Float)4294967296.0) + int1);
            						}
            						else {
HXLINE( 518)							_hx_tmp8 = (int1 + ((Float)0.0));
            						}
HXDLIN( 518)						HX_VARI( Int,off) = ::Std_obj::_hx_int(hx::Mod(_hx_tmp7,_hx_tmp8));
HXLINE( 519)						HX_VARI_NAME( Float,val1,"val") = (( (Float)(_hx_array_unsafe_get(multiplicands,off)) ) + last);
HXLINE( 520)						{
HXLINE( 520)							HX_VARI( Int,_g2) = pInter;
HXDLIN( 520)							{
HXLINE( 520)								::Array< Float > this1 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 520)								::Array< Float > this2 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 520)								Float _hx_tmp9 = ( (Float)(_hx_array_unsafe_get(this2,_g2)) );
HXDLIN( 520)								this1->__unsafe_set(_g2,(_hx_tmp9 + val1));
            							}
            						}
HXLINE( 521)						Int _hx_tmp10 = ++cInter;
HXDLIN( 521)						if ((_hx_tmp10 == ch)) {
HXLINE( 522)							cInter = (int)0;
HXLINE( 523)							++pInter;
            						}
HXLINE( 525)						last = val1;
HXLINE( 526)						div = (div * lookupValues);
            					}
            				}
            				else {
HXLINE( 529)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 529)					HX_VARI_NAME( Int,_g3,"_g") = effective;
HXDLIN( 529)					while((_g11 < _g3)){
HXLINE( 529)						++_g11;
HXLINE( 530)						Int a1 = ::Std_obj::_hx_int(((Float)z / (Float)div));
HXDLIN( 530)						HX_VARI_NAME( Int,int2,"int") = a1;
HXDLIN( 530)						Float _hx_tmp11;
HXDLIN( 530)						if ((int2 < (int)0)) {
HXLINE( 530)							_hx_tmp11 = (((Float)4294967296.0) + int2);
            						}
            						else {
HXLINE( 530)							_hx_tmp11 = (int2 + ((Float)0.0));
            						}
HXDLIN( 530)						HX_VARI_NAME( Int,int3,"int") = lookupValues;
HXDLIN( 530)						Float _hx_tmp12;
HXDLIN( 530)						if ((int3 < (int)0)) {
HXLINE( 530)							_hx_tmp12 = (((Float)4294967296.0) + int3);
            						}
            						else {
HXLINE( 530)							_hx_tmp12 = (int3 + ((Float)0.0));
            						}
HXDLIN( 530)						HX_VARI_NAME( Int,off1,"off") = ::Std_obj::_hx_int(hx::Mod(_hx_tmp11,_hx_tmp12));
HXLINE( 531)						HX_VARI_NAME( Float,val2,"val") = ( (Float)(_hx_array_unsafe_get(multiplicands,off1)) );
HXLINE( 532)						{
HXLINE( 532)							HX_VARI_NAME( Int,_g21,"_g2") = pInter;
HXDLIN( 532)							{
HXLINE( 532)								::Array< Float > this3 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 532)								::Array< Float > this4 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 532)								Float _hx_tmp13 = ( (Float)(_hx_array_unsafe_get(this4,_g21)) );
HXDLIN( 532)								this3->__unsafe_set(_g21,(_hx_tmp13 + val2));
            							}
            						}
HXLINE( 533)						Int _hx_tmp14 = ++cInter;
HXDLIN( 533)						if ((_hx_tmp14 == ch)) {
HXLINE( 534)							cInter = (int)0;
HXLINE( 535)							++pInter;
            						}
HXLINE( 537)						div = (div * lookupValues);
            					}
            				}
            			}
            			else {
HXLINE( 541)				hx::MultEq(z,this->dimensions);
HXLINE( 542)				if (sequenceP) {
HXLINE( 543)					HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 543)					HX_VARI_NAME( Int,_g4,"_g") = effective;
HXDLIN( 543)					while((_g12 < _g4)){
HXLINE( 543)						HX_VARI_NAME( Int,i1,"i") = _g12++;
HXLINE( 544)						HX_VARI_NAME( Float,val3,"val") = (( (Float)(_hx_array_unsafe_get(multiplicands,(z + i1))) ) + last);
HXLINE( 545)						{
HXLINE( 545)							HX_VARI_NAME( Int,_g22,"_g2") = pInter;
HXDLIN( 545)							{
HXLINE( 545)								::Array< Float > this5 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 545)								::Array< Float > this6 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 545)								Float _hx_tmp15 = ( (Float)(_hx_array_unsafe_get(this6,_g22)) );
HXDLIN( 545)								this5->__unsafe_set(_g22,(_hx_tmp15 + val3));
            							}
            						}
HXLINE( 546)						Int _hx_tmp16 = ++cInter;
HXDLIN( 546)						if ((_hx_tmp16 == ch)) {
HXLINE( 547)							cInter = (int)0;
HXLINE( 548)							++pInter;
            						}
HXLINE( 550)						last = val3;
            					}
            				}
            				else {
HXLINE( 553)					HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 553)					HX_VARI_NAME( Int,_g5,"_g") = effective;
HXDLIN( 553)					while((_g13 < _g5)){
HXLINE( 553)						HX_VARI_NAME( Int,i2,"i") = _g13++;
HXLINE( 554)						HX_VARI_NAME( Float,val4,"val") = ( (Float)(_hx_array_unsafe_get(multiplicands,(z + i2))) );
HXLINE( 555)						{
HXLINE( 555)							HX_VARI_NAME( Int,_g23,"_g2") = pInter;
HXDLIN( 555)							{
HXLINE( 555)								::Array< Float > this7 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 555)								::Array< Float > this8 = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,cInter)) );
HXDLIN( 555)								Float _hx_tmp17 = ( (Float)(_hx_array_unsafe_get(this8,_g23)) );
HXDLIN( 555)								this7->__unsafe_set(_g23,(_hx_tmp17 + val4));
            							}
            						}
HXLINE( 556)						Int _hx_tmp18 = ++cInter;
HXDLIN( 556)						if ((_hx_tmp18 == ch)) {
HXLINE( 557)							cInter = (int)0;
HXLINE( 558)							++pInter;
            						}
            					}
            				}
            			}
HXLINE( 564)			hx::SubEq(totalDecode,effective);
            		}
HXLINE( 567)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("cInter",b9,e7,a2,e6),cInter)
            			->setFixed(1,HX_("pInter",8c,98,46,19),pInter));
            	}


HX_DEFINE_DYNAMIC_FUNC7(Codebook_obj,decodeDeinterleaveRepeat,return )

Bool Codebook_obj::residueDecode( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< Float > target,Int offset,Int n,Int rtype){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","residueDecode",0xf3c1a811,"kha.audio2.ogg.vorbis.data.Codebook.residueDecode","kha/audio2/ogg/vorbis/data/Codebook.hx",574,0xa03d0d77)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(rtype,"rtype")
HXLINE( 575)		if ((rtype == (int)0)) {
HXLINE( 576)			Float _hx_tmp = ((Float)n / (Float)this->dimensions);
HXDLIN( 576)			HX_VARI( Int,step) = ::Std_obj::_hx_int(_hx_tmp);
HXLINE( 577)			{
HXLINE( 577)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 577)				while((_g1 < step)){
HXLINE( 577)					HX_VARI( Int,k) = _g1++;
HXLINE( 578)					Bool _hx_tmp1 = !(this->codebookDecodeStep(decodeState,target,(offset + k),((n - offset) - k),step));
HXDLIN( 578)					if (_hx_tmp1) {
HXLINE( 579)						return false;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 583)			HX_VARI_NAME( Int,k1,"k") = (int)0;
HXLINE( 584)			while((k1 < n)){
HXLINE( 585)				Bool _hx_tmp2 = !(this->codebookDecode(decodeState,target,offset,(n - k1)));
HXDLIN( 585)				if (_hx_tmp2) {
HXLINE( 586)					return false;
            				}
HXLINE( 588)				hx::AddEq(k1,this->dimensions);
HXLINE( 589)				hx::AddEq(offset,this->dimensions);
            			}
            		}
HXLINE( 592)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Codebook_obj,residueDecode,return )

Int Codebook_obj::NO_CODE;

 ::kha::audio2::ogg::vorbis::data::Codebook Codebook_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","read",0x68c95e1e,"kha.audio2.ogg.vorbis.data.Codebook.read","kha/audio2/ogg/vorbis/data/Codebook.hx",37,0xa03d0d77)
            	HX_STACK_ARG(decodeState,"decodeState")
HXLINE(  38)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Codebook,c) =  ::kha::audio2::ogg::vorbis::data::Codebook_obj::__new();
HXLINE(  39)		Bool _hx_tmp;
HXDLIN(  39)		Bool _hx_tmp1;
HXDLIN(  39)		Int _hx_tmp2;
HXDLIN(  39)		Bool _hx_tmp3 = (decodeState->validBits < (int)0);
HXDLIN(  39)		if (_hx_tmp3) {
HXLINE(  39)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE(  39)			Bool _hx_tmp4 = (decodeState->validBits < (int)8);
HXDLIN(  39)			if (_hx_tmp4) {
HXLINE(  39)				Bool _hx_tmp5 = (decodeState->validBits == (int)0);
HXDLIN(  39)				if (_hx_tmp5) {
HXLINE(  39)					decodeState->acc = (int)0;
            				}
HXDLIN(  39)				while(true){
HXLINE(  39)					Bool _hx_tmp6;
HXDLIN(  39)					Bool _hx_tmp7 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  39)					if (_hx_tmp7) {
HXLINE(  39)						Bool _hx_tmp8 = !(decodeState->lastSeg);
HXDLIN(  39)						if (_hx_tmp8) {
HXLINE(  39)							Int _hx_tmp9 = decodeState->next();
HXDLIN(  39)							_hx_tmp6 = (_hx_tmp9 == (int)0);
            						}
            						else {
HXLINE(  39)							_hx_tmp6 = true;
            						}
            					}
            					else {
HXLINE(  39)						_hx_tmp6 = false;
            					}
HXDLIN(  39)					if (_hx_tmp6) {
HXLINE(  39)						decodeState->validBits = (int)-1;
HXDLIN(  39)						goto _hx_goto_25;
            					}
            					else {
HXLINE(  39)						decodeState->bytesInSeg--;
HXDLIN(  39)						Int a = decodeState->acc;
HXDLIN(  39)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  39)						Int _hx_tmp10 = decodeState->input->readByte();
HXDLIN(  39)						Int _hx_tmp11 = (a + ((int)_hx_tmp10 << (int)decodeState->validBits));
HXDLIN(  39)						decodeState->acc = _hx_tmp11;
HXDLIN(  39)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  39)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  39)						goto _hx_goto_25;
            					}
            				}
            				_hx_goto_25:;
HXDLIN(  39)				Bool _hx_tmp12 = (decodeState->validBits < (int)0);
HXDLIN(  39)				if (_hx_tmp12) {
HXLINE(  39)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE(  39)					HX_VARI( Int,z) = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)					Int _hx_tmp13 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)					decodeState->acc = _hx_tmp13;
HXDLIN(  39)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)					_hx_tmp2 = z;
            				}
            			}
            			else {
HXLINE(  39)				HX_VARI_NAME( Int,z1,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)				Int _hx_tmp14 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)				decodeState->acc = _hx_tmp14;
HXDLIN(  39)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)				_hx_tmp2 = z1;
            			}
            		}
HXDLIN(  39)		if ((_hx_tmp2 == (int)66)) {
HXLINE(  39)			Int _hx_tmp15;
HXDLIN(  39)			Bool _hx_tmp16 = (decodeState->validBits < (int)0);
HXDLIN(  39)			if (_hx_tmp16) {
HXLINE(  39)				_hx_tmp15 = (int)0;
            			}
            			else {
HXLINE(  39)				Bool _hx_tmp17 = (decodeState->validBits < (int)8);
HXDLIN(  39)				if (_hx_tmp17) {
HXLINE(  39)					Bool _hx_tmp18 = (decodeState->validBits == (int)0);
HXDLIN(  39)					if (_hx_tmp18) {
HXLINE(  39)						decodeState->acc = (int)0;
            					}
HXDLIN(  39)					while(true){
HXLINE(  39)						Bool _hx_tmp19;
HXDLIN(  39)						Bool _hx_tmp20 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  39)						if (_hx_tmp20) {
HXLINE(  39)							Bool _hx_tmp21 = !(decodeState->lastSeg);
HXDLIN(  39)							if (_hx_tmp21) {
HXLINE(  39)								Int _hx_tmp22 = decodeState->next();
HXDLIN(  39)								_hx_tmp19 = (_hx_tmp22 == (int)0);
            							}
            							else {
HXLINE(  39)								_hx_tmp19 = true;
            							}
            						}
            						else {
HXLINE(  39)							_hx_tmp19 = false;
            						}
HXDLIN(  39)						if (_hx_tmp19) {
HXLINE(  39)							decodeState->validBits = (int)-1;
HXDLIN(  39)							goto _hx_goto_26;
            						}
            						else {
HXLINE(  39)							decodeState->bytesInSeg--;
HXDLIN(  39)							Int a1 = decodeState->acc;
HXDLIN(  39)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  39)							Int _hx_tmp23 = decodeState->input->readByte();
HXDLIN(  39)							Int _hx_tmp24 = (a1 + ((int)_hx_tmp23 << (int)decodeState->validBits));
HXDLIN(  39)							decodeState->acc = _hx_tmp24;
HXDLIN(  39)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  39)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  39)							goto _hx_goto_26;
            						}
            					}
            					_hx_goto_26:;
HXDLIN(  39)					Bool _hx_tmp25 = (decodeState->validBits < (int)0);
HXDLIN(  39)					if (_hx_tmp25) {
HXLINE(  39)						_hx_tmp15 = (int)0;
            					}
            					else {
HXLINE(  39)						HX_VARI_NAME( Int,z2,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)						Int _hx_tmp26 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)						decodeState->acc = _hx_tmp26;
HXDLIN(  39)						hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)						_hx_tmp15 = z2;
            					}
            				}
            				else {
HXLINE(  39)					HX_VARI_NAME( Int,z3,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)					Int _hx_tmp27 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)					decodeState->acc = _hx_tmp27;
HXDLIN(  39)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)					_hx_tmp15 = z3;
            				}
            			}
HXDLIN(  39)			_hx_tmp1 = (_hx_tmp15 != (int)67);
            		}
            		else {
HXLINE(  39)			_hx_tmp1 = true;
            		}
HXDLIN(  39)		if (!(_hx_tmp1)) {
HXLINE(  39)			Int _hx_tmp28;
HXDLIN(  39)			Bool _hx_tmp29 = (decodeState->validBits < (int)0);
HXDLIN(  39)			if (_hx_tmp29) {
HXLINE(  39)				_hx_tmp28 = (int)0;
            			}
            			else {
HXLINE(  39)				Bool _hx_tmp30 = (decodeState->validBits < (int)8);
HXDLIN(  39)				if (_hx_tmp30) {
HXLINE(  39)					Bool _hx_tmp31 = (decodeState->validBits == (int)0);
HXDLIN(  39)					if (_hx_tmp31) {
HXLINE(  39)						decodeState->acc = (int)0;
            					}
HXDLIN(  39)					while(true){
HXLINE(  39)						Bool _hx_tmp32;
HXDLIN(  39)						Bool _hx_tmp33 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  39)						if (_hx_tmp33) {
HXLINE(  39)							Bool _hx_tmp34 = !(decodeState->lastSeg);
HXDLIN(  39)							if (_hx_tmp34) {
HXLINE(  39)								Int _hx_tmp35 = decodeState->next();
HXDLIN(  39)								_hx_tmp32 = (_hx_tmp35 == (int)0);
            							}
            							else {
HXLINE(  39)								_hx_tmp32 = true;
            							}
            						}
            						else {
HXLINE(  39)							_hx_tmp32 = false;
            						}
HXDLIN(  39)						if (_hx_tmp32) {
HXLINE(  39)							decodeState->validBits = (int)-1;
HXDLIN(  39)							goto _hx_goto_27;
            						}
            						else {
HXLINE(  39)							decodeState->bytesInSeg--;
HXDLIN(  39)							Int a2 = decodeState->acc;
HXDLIN(  39)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  39)							Int _hx_tmp36 = decodeState->input->readByte();
HXDLIN(  39)							Int _hx_tmp37 = (a2 + ((int)_hx_tmp36 << (int)decodeState->validBits));
HXDLIN(  39)							decodeState->acc = _hx_tmp37;
HXDLIN(  39)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  39)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  39)							goto _hx_goto_27;
            						}
            					}
            					_hx_goto_27:;
HXDLIN(  39)					Bool _hx_tmp38 = (decodeState->validBits < (int)0);
HXDLIN(  39)					if (_hx_tmp38) {
HXLINE(  39)						_hx_tmp28 = (int)0;
            					}
            					else {
HXLINE(  39)						HX_VARI_NAME( Int,z4,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)						Int _hx_tmp39 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)						decodeState->acc = _hx_tmp39;
HXDLIN(  39)						hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)						_hx_tmp28 = z4;
            					}
            				}
            				else {
HXLINE(  39)					HX_VARI_NAME( Int,z5,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)					Int _hx_tmp40 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)					decodeState->acc = _hx_tmp40;
HXDLIN(  39)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)					_hx_tmp28 = z5;
            				}
            			}
HXDLIN(  39)			_hx_tmp = (_hx_tmp28 != (int)86);
            		}
            		else {
HXLINE(  39)			_hx_tmp = true;
            		}
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  40)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Codebook.hx",88,14,e0,8e),40,HX_("kha.audio2.ogg.vorbis.data.Codebook",a6,42,7b,ee),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  43)		HX_VAR( Int,x);
HXDLIN(  43)		Bool _hx_tmp41 = (decodeState->validBits < (int)0);
HXDLIN(  43)		if (_hx_tmp41) {
HXLINE(  43)			x = (int)0;
            		}
            		else {
HXLINE(  43)			Bool _hx_tmp42 = (decodeState->validBits < (int)8);
HXDLIN(  43)			if (_hx_tmp42) {
HXLINE(  43)				Bool _hx_tmp43 = (decodeState->validBits == (int)0);
HXDLIN(  43)				if (_hx_tmp43) {
HXLINE(  43)					decodeState->acc = (int)0;
            				}
HXDLIN(  43)				while(true){
HXLINE(  43)					Bool _hx_tmp44;
HXDLIN(  43)					Bool _hx_tmp45 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  43)					if (_hx_tmp45) {
HXLINE(  43)						Bool _hx_tmp46 = !(decodeState->lastSeg);
HXDLIN(  43)						if (_hx_tmp46) {
HXLINE(  43)							Int _hx_tmp47 = decodeState->next();
HXDLIN(  43)							_hx_tmp44 = (_hx_tmp47 == (int)0);
            						}
            						else {
HXLINE(  43)							_hx_tmp44 = true;
            						}
            					}
            					else {
HXLINE(  43)						_hx_tmp44 = false;
            					}
HXDLIN(  43)					if (_hx_tmp44) {
HXLINE(  43)						decodeState->validBits = (int)-1;
HXDLIN(  43)						goto _hx_goto_28;
            					}
            					else {
HXLINE(  43)						decodeState->bytesInSeg--;
HXDLIN(  43)						Int a3 = decodeState->acc;
HXDLIN(  43)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  43)						Int _hx_tmp48 = decodeState->input->readByte();
HXDLIN(  43)						Int _hx_tmp49 = (a3 + ((int)_hx_tmp48 << (int)decodeState->validBits));
HXDLIN(  43)						decodeState->acc = _hx_tmp49;
HXDLIN(  43)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  43)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  43)						goto _hx_goto_28;
            					}
            				}
            				_hx_goto_28:;
HXDLIN(  43)				Bool _hx_tmp50 = (decodeState->validBits < (int)0);
HXDLIN(  43)				if (_hx_tmp50) {
HXLINE(  43)					x = (int)0;
            				}
            				else {
HXLINE(  43)					HX_VARI_NAME( Int,z6,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  43)					Int _hx_tmp51 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  43)					decodeState->acc = _hx_tmp51;
HXDLIN(  43)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  43)					x = z6;
            				}
            			}
            			else {
HXLINE(  43)				HX_VARI_NAME( Int,z7,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  43)				Int _hx_tmp52 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  43)				decodeState->acc = _hx_tmp52;
HXDLIN(  43)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  43)				x = z7;
            			}
            		}
HXLINE(  44)		Int _hx_tmp53;
HXDLIN(  44)		Bool _hx_tmp54 = (decodeState->validBits < (int)0);
HXDLIN(  44)		if (_hx_tmp54) {
HXLINE(  44)			_hx_tmp53 = (int)0;
            		}
            		else {
HXLINE(  44)			Bool _hx_tmp55 = (decodeState->validBits < (int)8);
HXDLIN(  44)			if (_hx_tmp55) {
HXLINE(  44)				Bool _hx_tmp56 = (decodeState->validBits == (int)0);
HXDLIN(  44)				if (_hx_tmp56) {
HXLINE(  44)					decodeState->acc = (int)0;
            				}
HXDLIN(  44)				while(true){
HXLINE(  44)					Bool _hx_tmp57;
HXDLIN(  44)					Bool _hx_tmp58 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  44)					if (_hx_tmp58) {
HXLINE(  44)						Bool _hx_tmp59 = !(decodeState->lastSeg);
HXDLIN(  44)						if (_hx_tmp59) {
HXLINE(  44)							Int _hx_tmp60 = decodeState->next();
HXDLIN(  44)							_hx_tmp57 = (_hx_tmp60 == (int)0);
            						}
            						else {
HXLINE(  44)							_hx_tmp57 = true;
            						}
            					}
            					else {
HXLINE(  44)						_hx_tmp57 = false;
            					}
HXDLIN(  44)					if (_hx_tmp57) {
HXLINE(  44)						decodeState->validBits = (int)-1;
HXDLIN(  44)						goto _hx_goto_29;
            					}
            					else {
HXLINE(  44)						decodeState->bytesInSeg--;
HXDLIN(  44)						Int a4 = decodeState->acc;
HXDLIN(  44)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  44)						Int _hx_tmp61 = decodeState->input->readByte();
HXDLIN(  44)						Int _hx_tmp62 = (a4 + ((int)_hx_tmp61 << (int)decodeState->validBits));
HXDLIN(  44)						decodeState->acc = _hx_tmp62;
HXDLIN(  44)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  44)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  44)						goto _hx_goto_29;
            					}
            				}
            				_hx_goto_29:;
HXDLIN(  44)				Bool _hx_tmp63 = (decodeState->validBits < (int)0);
HXDLIN(  44)				if (_hx_tmp63) {
HXLINE(  44)					_hx_tmp53 = (int)0;
            				}
            				else {
HXLINE(  44)					HX_VARI_NAME( Int,z8,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  44)					Int _hx_tmp64 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  44)					decodeState->acc = _hx_tmp64;
HXDLIN(  44)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  44)					_hx_tmp53 = z8;
            				}
            			}
            			else {
HXLINE(  44)				HX_VARI_NAME( Int,z9,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  44)				Int _hx_tmp65 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  44)				decodeState->acc = _hx_tmp65;
HXDLIN(  44)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  44)				_hx_tmp53 = z9;
            			}
            		}
HXDLIN(  44)		c->dimensions = (((int)_hx_tmp53 << (int)(int)8) + x);
HXLINE(  46)		HX_VAR_NAME( Int,x1,"x");
HXDLIN(  46)		Bool _hx_tmp66 = (decodeState->validBits < (int)0);
HXDLIN(  46)		if (_hx_tmp66) {
HXLINE(  46)			x1 = (int)0;
            		}
            		else {
HXLINE(  46)			Bool _hx_tmp67 = (decodeState->validBits < (int)8);
HXDLIN(  46)			if (_hx_tmp67) {
HXLINE(  46)				Bool _hx_tmp68 = (decodeState->validBits == (int)0);
HXDLIN(  46)				if (_hx_tmp68) {
HXLINE(  46)					decodeState->acc = (int)0;
            				}
HXDLIN(  46)				while(true){
HXLINE(  46)					Bool _hx_tmp69;
HXDLIN(  46)					Bool _hx_tmp70 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  46)					if (_hx_tmp70) {
HXLINE(  46)						Bool _hx_tmp71 = !(decodeState->lastSeg);
HXDLIN(  46)						if (_hx_tmp71) {
HXLINE(  46)							Int _hx_tmp72 = decodeState->next();
HXDLIN(  46)							_hx_tmp69 = (_hx_tmp72 == (int)0);
            						}
            						else {
HXLINE(  46)							_hx_tmp69 = true;
            						}
            					}
            					else {
HXLINE(  46)						_hx_tmp69 = false;
            					}
HXDLIN(  46)					if (_hx_tmp69) {
HXLINE(  46)						decodeState->validBits = (int)-1;
HXDLIN(  46)						goto _hx_goto_30;
            					}
            					else {
HXLINE(  46)						decodeState->bytesInSeg--;
HXDLIN(  46)						Int a5 = decodeState->acc;
HXDLIN(  46)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  46)						Int _hx_tmp73 = decodeState->input->readByte();
HXDLIN(  46)						Int _hx_tmp74 = (a5 + ((int)_hx_tmp73 << (int)decodeState->validBits));
HXDLIN(  46)						decodeState->acc = _hx_tmp74;
HXDLIN(  46)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  46)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  46)						goto _hx_goto_30;
            					}
            				}
            				_hx_goto_30:;
HXDLIN(  46)				Bool _hx_tmp75 = (decodeState->validBits < (int)0);
HXDLIN(  46)				if (_hx_tmp75) {
HXLINE(  46)					x1 = (int)0;
            				}
            				else {
HXLINE(  46)					HX_VARI_NAME( Int,z10,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  46)					Int _hx_tmp76 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  46)					decodeState->acc = _hx_tmp76;
HXDLIN(  46)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  46)					x1 = z10;
            				}
            			}
            			else {
HXLINE(  46)				HX_VARI_NAME( Int,z11,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  46)				Int _hx_tmp77 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  46)				decodeState->acc = _hx_tmp77;
HXDLIN(  46)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  46)				x1 = z11;
            			}
            		}
HXLINE(  47)		HX_VAR( Int,y);
HXDLIN(  47)		Bool _hx_tmp78 = (decodeState->validBits < (int)0);
HXDLIN(  47)		if (_hx_tmp78) {
HXLINE(  47)			y = (int)0;
            		}
            		else {
HXLINE(  47)			Bool _hx_tmp79 = (decodeState->validBits < (int)8);
HXDLIN(  47)			if (_hx_tmp79) {
HXLINE(  47)				Bool _hx_tmp80 = (decodeState->validBits == (int)0);
HXDLIN(  47)				if (_hx_tmp80) {
HXLINE(  47)					decodeState->acc = (int)0;
            				}
HXDLIN(  47)				while(true){
HXLINE(  47)					Bool _hx_tmp81;
HXDLIN(  47)					Bool _hx_tmp82 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  47)					if (_hx_tmp82) {
HXLINE(  47)						Bool _hx_tmp83 = !(decodeState->lastSeg);
HXDLIN(  47)						if (_hx_tmp83) {
HXLINE(  47)							Int _hx_tmp84 = decodeState->next();
HXDLIN(  47)							_hx_tmp81 = (_hx_tmp84 == (int)0);
            						}
            						else {
HXLINE(  47)							_hx_tmp81 = true;
            						}
            					}
            					else {
HXLINE(  47)						_hx_tmp81 = false;
            					}
HXDLIN(  47)					if (_hx_tmp81) {
HXLINE(  47)						decodeState->validBits = (int)-1;
HXDLIN(  47)						goto _hx_goto_31;
            					}
            					else {
HXLINE(  47)						decodeState->bytesInSeg--;
HXDLIN(  47)						Int a6 = decodeState->acc;
HXDLIN(  47)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  47)						Int _hx_tmp85 = decodeState->input->readByte();
HXDLIN(  47)						Int _hx_tmp86 = (a6 + ((int)_hx_tmp85 << (int)decodeState->validBits));
HXDLIN(  47)						decodeState->acc = _hx_tmp86;
HXDLIN(  47)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  47)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  47)						goto _hx_goto_31;
            					}
            				}
            				_hx_goto_31:;
HXDLIN(  47)				Bool _hx_tmp87 = (decodeState->validBits < (int)0);
HXDLIN(  47)				if (_hx_tmp87) {
HXLINE(  47)					y = (int)0;
            				}
            				else {
HXLINE(  47)					HX_VARI_NAME( Int,z12,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  47)					Int _hx_tmp88 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  47)					decodeState->acc = _hx_tmp88;
HXDLIN(  47)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  47)					y = z12;
            				}
            			}
            			else {
HXLINE(  47)				HX_VARI_NAME( Int,z13,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  47)				Int _hx_tmp89 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  47)				decodeState->acc = _hx_tmp89;
HXDLIN(  47)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  47)				y = z13;
            			}
            		}
HXLINE(  48)		Int _hx_tmp90;
HXDLIN(  48)		Bool _hx_tmp91 = (decodeState->validBits < (int)0);
HXDLIN(  48)		if (_hx_tmp91) {
HXLINE(  48)			_hx_tmp90 = (int)0;
            		}
            		else {
HXLINE(  48)			Bool _hx_tmp92 = (decodeState->validBits < (int)8);
HXDLIN(  48)			if (_hx_tmp92) {
HXLINE(  48)				Bool _hx_tmp93 = (decodeState->validBits == (int)0);
HXDLIN(  48)				if (_hx_tmp93) {
HXLINE(  48)					decodeState->acc = (int)0;
            				}
HXDLIN(  48)				while(true){
HXLINE(  48)					Bool _hx_tmp94;
HXDLIN(  48)					Bool _hx_tmp95 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  48)					if (_hx_tmp95) {
HXLINE(  48)						Bool _hx_tmp96 = !(decodeState->lastSeg);
HXDLIN(  48)						if (_hx_tmp96) {
HXLINE(  48)							Int _hx_tmp97 = decodeState->next();
HXDLIN(  48)							_hx_tmp94 = (_hx_tmp97 == (int)0);
            						}
            						else {
HXLINE(  48)							_hx_tmp94 = true;
            						}
            					}
            					else {
HXLINE(  48)						_hx_tmp94 = false;
            					}
HXDLIN(  48)					if (_hx_tmp94) {
HXLINE(  48)						decodeState->validBits = (int)-1;
HXDLIN(  48)						goto _hx_goto_32;
            					}
            					else {
HXLINE(  48)						decodeState->bytesInSeg--;
HXDLIN(  48)						Int a7 = decodeState->acc;
HXDLIN(  48)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  48)						Int _hx_tmp98 = decodeState->input->readByte();
HXDLIN(  48)						Int _hx_tmp99 = (a7 + ((int)_hx_tmp98 << (int)decodeState->validBits));
HXDLIN(  48)						decodeState->acc = _hx_tmp99;
HXDLIN(  48)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  48)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  48)						goto _hx_goto_32;
            					}
            				}
            				_hx_goto_32:;
HXDLIN(  48)				Bool _hx_tmp100 = (decodeState->validBits < (int)0);
HXDLIN(  48)				if (_hx_tmp100) {
HXLINE(  48)					_hx_tmp90 = (int)0;
            				}
            				else {
HXLINE(  48)					HX_VARI_NAME( Int,z14,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  48)					Int _hx_tmp101 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  48)					decodeState->acc = _hx_tmp101;
HXDLIN(  48)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  48)					_hx_tmp90 = z14;
            				}
            			}
            			else {
HXLINE(  48)				HX_VARI_NAME( Int,z15,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  48)				Int _hx_tmp102 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  48)				decodeState->acc = _hx_tmp102;
HXDLIN(  48)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  48)				_hx_tmp90 = z15;
            			}
            		}
HXDLIN(  48)		c->entries = ((((int)_hx_tmp90 << (int)(int)16) + ((int)y << (int)(int)8)) + x1);
HXLINE(  49)		HX_VAR( Int,ordered);
HXDLIN(  49)		Bool _hx_tmp103 = (decodeState->validBits < (int)0);
HXDLIN(  49)		if (_hx_tmp103) {
HXLINE(  49)			ordered = (int)0;
            		}
            		else {
HXLINE(  49)			Bool _hx_tmp104 = (decodeState->validBits < (int)1);
HXDLIN(  49)			if (_hx_tmp104) {
HXLINE(  49)				Bool _hx_tmp105 = (decodeState->validBits == (int)0);
HXDLIN(  49)				if (_hx_tmp105) {
HXLINE(  49)					decodeState->acc = (int)0;
            				}
HXDLIN(  49)				while(true){
HXLINE(  49)					Bool _hx_tmp106;
HXDLIN(  49)					Bool _hx_tmp107 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  49)					if (_hx_tmp107) {
HXLINE(  49)						Bool _hx_tmp108 = !(decodeState->lastSeg);
HXDLIN(  49)						if (_hx_tmp108) {
HXLINE(  49)							Int _hx_tmp109 = decodeState->next();
HXDLIN(  49)							_hx_tmp106 = (_hx_tmp109 == (int)0);
            						}
            						else {
HXLINE(  49)							_hx_tmp106 = true;
            						}
            					}
            					else {
HXLINE(  49)						_hx_tmp106 = false;
            					}
HXDLIN(  49)					if (_hx_tmp106) {
HXLINE(  49)						decodeState->validBits = (int)-1;
HXDLIN(  49)						goto _hx_goto_33;
            					}
            					else {
HXLINE(  49)						decodeState->bytesInSeg--;
HXDLIN(  49)						Int a8 = decodeState->acc;
HXDLIN(  49)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  49)						Int _hx_tmp110 = decodeState->input->readByte();
HXDLIN(  49)						Int _hx_tmp111 = (a8 + ((int)_hx_tmp110 << (int)decodeState->validBits));
HXDLIN(  49)						decodeState->acc = _hx_tmp111;
HXDLIN(  49)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  49)					if (!((decodeState->validBits < (int)1))) {
HXLINE(  49)						goto _hx_goto_33;
            					}
            				}
            				_hx_goto_33:;
HXDLIN(  49)				Bool _hx_tmp112 = (decodeState->validBits < (int)0);
HXDLIN(  49)				if (_hx_tmp112) {
HXLINE(  49)					ordered = (int)0;
            				}
            				else {
HXLINE(  49)					HX_VARI_NAME( Int,z16,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  49)					Int _hx_tmp113 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  49)					decodeState->acc = _hx_tmp113;
HXDLIN(  49)					hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  49)					ordered = z16;
            				}
            			}
            			else {
HXLINE(  49)				HX_VARI_NAME( Int,z17,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  49)				Int _hx_tmp114 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  49)				decodeState->acc = _hx_tmp114;
HXDLIN(  49)				hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  49)				ordered = z17;
            			}
            		}
HXLINE(  50)		Bool _hx_tmp115;
HXDLIN(  50)		if ((ordered != (int)0)) {
HXLINE(  50)			_hx_tmp115 = false;
            		}
            		else {
HXLINE(  50)			Int _hx_tmp116;
HXDLIN(  50)			Bool _hx_tmp117 = (decodeState->validBits < (int)0);
HXDLIN(  50)			if (_hx_tmp117) {
HXLINE(  50)				_hx_tmp116 = (int)0;
            			}
            			else {
HXLINE(  50)				Bool _hx_tmp118 = (decodeState->validBits < (int)1);
HXDLIN(  50)				if (_hx_tmp118) {
HXLINE(  50)					Bool _hx_tmp119 = (decodeState->validBits == (int)0);
HXDLIN(  50)					if (_hx_tmp119) {
HXLINE(  50)						decodeState->acc = (int)0;
            					}
HXDLIN(  50)					while(true){
HXLINE(  50)						Bool _hx_tmp120;
HXDLIN(  50)						Bool _hx_tmp121 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  50)						if (_hx_tmp121) {
HXLINE(  50)							Bool _hx_tmp122 = !(decodeState->lastSeg);
HXDLIN(  50)							if (_hx_tmp122) {
HXLINE(  50)								Int _hx_tmp123 = decodeState->next();
HXDLIN(  50)								_hx_tmp120 = (_hx_tmp123 == (int)0);
            							}
            							else {
HXLINE(  50)								_hx_tmp120 = true;
            							}
            						}
            						else {
HXLINE(  50)							_hx_tmp120 = false;
            						}
HXDLIN(  50)						if (_hx_tmp120) {
HXLINE(  50)							decodeState->validBits = (int)-1;
HXDLIN(  50)							goto _hx_goto_34;
            						}
            						else {
HXLINE(  50)							decodeState->bytesInSeg--;
HXDLIN(  50)							Int a9 = decodeState->acc;
HXDLIN(  50)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  50)							Int _hx_tmp124 = decodeState->input->readByte();
HXDLIN(  50)							Int _hx_tmp125 = (a9 + ((int)_hx_tmp124 << (int)decodeState->validBits));
HXDLIN(  50)							decodeState->acc = _hx_tmp125;
HXDLIN(  50)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  50)						if (!((decodeState->validBits < (int)1))) {
HXLINE(  50)							goto _hx_goto_34;
            						}
            					}
            					_hx_goto_34:;
HXDLIN(  50)					Bool _hx_tmp126 = (decodeState->validBits < (int)0);
HXDLIN(  50)					if (_hx_tmp126) {
HXLINE(  50)						_hx_tmp116 = (int)0;
            					}
            					else {
HXLINE(  50)						HX_VARI_NAME( Int,z18,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  50)						Int _hx_tmp127 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  50)						decodeState->acc = _hx_tmp127;
HXDLIN(  50)						hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  50)						_hx_tmp116 = z18;
            					}
            				}
            				else {
HXLINE(  50)					HX_VARI_NAME( Int,z19,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  50)					Int _hx_tmp128 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  50)					decodeState->acc = _hx_tmp128;
HXDLIN(  50)					hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  50)					_hx_tmp116 = z19;
            				}
            			}
HXDLIN(  50)			_hx_tmp115 = (_hx_tmp116 != (int)0);
            		}
HXDLIN(  50)		c->sparse = _hx_tmp115;
HXLINE(  52)		Int length = c->entries;
HXDLIN(  52)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN(  52)		_hx_array_set_size_exact(this1,length);
HXDLIN(  52)		HX_VARI( ::Array< Int >,lengths) = this1;
HXLINE(  53)		Bool _hx_tmp129 = !(c->sparse);
HXDLIN(  53)		if (_hx_tmp129) {
HXLINE(  54)			c->codewordLengths = lengths;
            		}
HXLINE(  57)		HX_VARI( Int,total) = (int)0;
HXLINE(  59)		if ((ordered != (int)0)) {
HXLINE(  60)			HX_VARI( Int,currentEntry) = (int)0;
HXLINE(  61)			Int _hx_tmp130;
HXDLIN(  61)			Bool _hx_tmp131 = (decodeState->validBits < (int)0);
HXDLIN(  61)			if (_hx_tmp131) {
HXLINE(  61)				_hx_tmp130 = (int)0;
            			}
            			else {
HXLINE(  61)				Bool _hx_tmp132 = (decodeState->validBits < (int)5);
HXDLIN(  61)				if (_hx_tmp132) {
HXLINE(  61)					Bool _hx_tmp133 = (decodeState->validBits == (int)0);
HXDLIN(  61)					if (_hx_tmp133) {
HXLINE(  61)						decodeState->acc = (int)0;
            					}
HXDLIN(  61)					while(true){
HXLINE(  61)						Bool _hx_tmp134;
HXDLIN(  61)						Bool _hx_tmp135 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  61)						if (_hx_tmp135) {
HXLINE(  61)							Bool _hx_tmp136 = !(decodeState->lastSeg);
HXDLIN(  61)							if (_hx_tmp136) {
HXLINE(  61)								Int _hx_tmp137 = decodeState->next();
HXDLIN(  61)								_hx_tmp134 = (_hx_tmp137 == (int)0);
            							}
            							else {
HXLINE(  61)								_hx_tmp134 = true;
            							}
            						}
            						else {
HXLINE(  61)							_hx_tmp134 = false;
            						}
HXDLIN(  61)						if (_hx_tmp134) {
HXLINE(  61)							decodeState->validBits = (int)-1;
HXDLIN(  61)							goto _hx_goto_35;
            						}
            						else {
HXLINE(  61)							decodeState->bytesInSeg--;
HXDLIN(  61)							Int a10 = decodeState->acc;
HXDLIN(  61)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  61)							Int _hx_tmp138 = decodeState->input->readByte();
HXDLIN(  61)							Int _hx_tmp139 = (a10 + ((int)_hx_tmp138 << (int)decodeState->validBits));
HXDLIN(  61)							decodeState->acc = _hx_tmp139;
HXDLIN(  61)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  61)						if (!((decodeState->validBits < (int)5))) {
HXLINE(  61)							goto _hx_goto_35;
            						}
            					}
            					_hx_goto_35:;
HXDLIN(  61)					Bool _hx_tmp140 = (decodeState->validBits < (int)0);
HXDLIN(  61)					if (_hx_tmp140) {
HXLINE(  61)						_hx_tmp130 = (int)0;
            					}
            					else {
HXLINE(  61)						HX_VARI_NAME( Int,z20,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  61)						Int _hx_tmp141 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  61)						decodeState->acc = _hx_tmp141;
HXDLIN(  61)						hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  61)						_hx_tmp130 = z20;
            					}
            				}
            				else {
HXLINE(  61)					HX_VARI_NAME( Int,z21,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  61)					Int _hx_tmp142 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  61)					decodeState->acc = _hx_tmp142;
HXDLIN(  61)					hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  61)					_hx_tmp130 = z21;
            				}
            			}
HXDLIN(  61)			HX_VARI( Int,currentLength) = (_hx_tmp130 + (int)1);
HXLINE(  63)			while((currentEntry < c->entries)){
HXLINE(  64)				HX_VARI( Int,limit) = (c->entries - currentEntry);
HXLINE(  65)				HX_VARI( ::Array< Int >,log2_4) = ::Array_obj< Int >::fromData( _hx_array_data_50,16);
HXDLIN(  65)				HX_VAR( Int,n);
HXDLIN(  65)				if ((limit < (int)16384)) {
HXLINE(  65)					if ((limit < (int)16)) {
HXLINE(  65)						n = log2_4->__get(limit);
            					}
            					else {
HXLINE(  65)						if ((limit < (int)512)) {
HXLINE(  65)							n = ((int)5 + log2_4->__get(((int)limit >> (int)(int)5)));
            						}
            						else {
HXLINE(  65)							n = ((int)10 + log2_4->__get(((int)limit >> (int)(int)10)));
            						}
            					}
            				}
            				else {
HXLINE(  65)					if ((limit < (int)16777216)) {
HXLINE(  65)						if ((limit < (int)524288)) {
HXLINE(  65)							n = ((int)15 + log2_4->__get(((int)limit >> (int)(int)15)));
            						}
            						else {
HXLINE(  65)							n = ((int)20 + log2_4->__get(((int)limit >> (int)(int)20)));
            						}
            					}
            					else {
HXLINE(  65)						if ((limit < (int)536870912)) {
HXLINE(  65)							n = ((int)25 + log2_4->__get(((int)limit >> (int)(int)25)));
            						}
            						else {
HXLINE(  65)							if ((limit < (int)-2147483648)) {
HXLINE(  65)								n = ((int)30 + log2_4->__get(((int)limit >> (int)(int)30)));
            							}
            							else {
HXLINE(  65)								n = (int)0;
            							}
            						}
            					}
            				}
HXDLIN(  65)				HX_VAR_NAME( Int,n1,"n");
HXDLIN(  65)				Bool _hx_tmp143 = (decodeState->validBits < (int)0);
HXDLIN(  65)				if (_hx_tmp143) {
HXLINE(  65)					n1 = (int)0;
            				}
            				else {
HXLINE(  65)					Bool _hx_tmp144 = (decodeState->validBits < n);
HXDLIN(  65)					if (_hx_tmp144) {
HXLINE(  65)						if ((n > (int)24)) {
HXLINE(  65)							Int _hx_tmp145 = decodeState->readBits((int)24);
HXDLIN(  65)							Int _hx_tmp146 = decodeState->readBits((n - (int)24));
HXDLIN(  65)							n1 = (_hx_tmp145 + ((int)_hx_tmp146 << (int)(int)24));
            						}
            						else {
HXLINE(  65)							Bool _hx_tmp147 = (decodeState->validBits == (int)0);
HXDLIN(  65)							if (_hx_tmp147) {
HXLINE(  65)								decodeState->acc = (int)0;
            							}
HXDLIN(  65)							while(true){
HXLINE(  65)								Bool _hx_tmp148;
HXDLIN(  65)								Bool _hx_tmp149 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  65)								if (_hx_tmp149) {
HXLINE(  65)									Bool _hx_tmp150 = !(decodeState->lastSeg);
HXDLIN(  65)									if (_hx_tmp150) {
HXLINE(  65)										Int _hx_tmp151 = decodeState->next();
HXDLIN(  65)										_hx_tmp148 = (_hx_tmp151 == (int)0);
            									}
            									else {
HXLINE(  65)										_hx_tmp148 = true;
            									}
            								}
            								else {
HXLINE(  65)									_hx_tmp148 = false;
            								}
HXDLIN(  65)								if (_hx_tmp148) {
HXLINE(  65)									decodeState->validBits = (int)-1;
HXDLIN(  65)									goto _hx_goto_37;
            								}
            								else {
HXLINE(  65)									decodeState->bytesInSeg--;
HXDLIN(  65)									Int a11 = decodeState->acc;
HXDLIN(  65)									hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  65)									Int _hx_tmp152 = decodeState->input->readByte();
HXDLIN(  65)									Int _hx_tmp153 = (a11 + ((int)_hx_tmp152 << (int)decodeState->validBits));
HXDLIN(  65)									decodeState->acc = _hx_tmp153;
HXDLIN(  65)									hx::AddEq(decodeState->validBits,(int)8);
            								}
HXDLIN(  65)								if (!((decodeState->validBits < n))) {
HXLINE(  65)									goto _hx_goto_37;
            								}
            							}
            							_hx_goto_37:;
HXDLIN(  65)							Bool _hx_tmp154 = (decodeState->validBits < (int)0);
HXDLIN(  65)							if (_hx_tmp154) {
HXLINE(  65)								n1 = (int)0;
            							}
            							else {
HXLINE(  65)								HX_VARI_NAME( Int,z22,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXDLIN(  65)								Int _hx_tmp155 = hx::UShr(decodeState->acc,n);
HXDLIN(  65)								decodeState->acc = _hx_tmp155;
HXDLIN(  65)								hx::SubEq(decodeState->validBits,n);
HXDLIN(  65)								n1 = z22;
            							}
            						}
            					}
            					else {
HXLINE(  65)						HX_VARI_NAME( Int,z23,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXDLIN(  65)						Int _hx_tmp156 = hx::UShr(decodeState->acc,n);
HXDLIN(  65)						decodeState->acc = _hx_tmp156;
HXDLIN(  65)						hx::SubEq(decodeState->validBits,n);
HXDLIN(  65)						n1 = z23;
            					}
            				}
HXLINE(  66)				if (((currentEntry + n1) > c->entries)) {
HXLINE(  67)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("codebook entrys",cb,3a,30,82),hx::SourceInfo(HX_("Codebook.hx",88,14,e0,8e),67,HX_("kha.audio2.ogg.vorbis.data.Codebook",a6,42,7b,ee),HX_("read",56,4b,a7,4b))));
            				}
HXLINE(  69)				{
HXLINE(  69)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(  69)					HX_VARI( Int,_g) = n1;
HXDLIN(  69)					while((_g1 < _g)){
HXLINE(  69)						HX_VARI( Int,i) = _g1++;
HXLINE(  70)						lengths->__unsafe_set((currentEntry + i),currentLength);
            					}
            				}
HXLINE(  72)				hx::AddEq(currentEntry,n1);
HXLINE(  73)				++currentLength;
            			}
            		}
            		else {
HXLINE(  76)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  76)			HX_VARI_NAME( Int,_g2,"_g") = c->entries;
HXDLIN(  76)			while((_g11 < _g2)){
HXLINE(  76)				HX_VARI( Int,j) = _g11++;
HXLINE(  77)				HX_VAR( Int,present);
HXDLIN(  77)				Bool _hx_tmp157 = c->sparse;
HXDLIN(  77)				if (_hx_tmp157) {
HXLINE(  77)					Bool _hx_tmp158 = (decodeState->validBits < (int)0);
HXDLIN(  77)					if (_hx_tmp158) {
HXLINE(  77)						present = (int)0;
            					}
            					else {
HXLINE(  77)						Bool _hx_tmp159 = (decodeState->validBits < (int)1);
HXDLIN(  77)						if (_hx_tmp159) {
HXLINE(  77)							Bool _hx_tmp160 = (decodeState->validBits == (int)0);
HXDLIN(  77)							if (_hx_tmp160) {
HXLINE(  77)								decodeState->acc = (int)0;
            							}
HXDLIN(  77)							while(true){
HXLINE(  77)								Bool _hx_tmp161;
HXDLIN(  77)								Bool _hx_tmp162 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  77)								if (_hx_tmp162) {
HXLINE(  77)									Bool _hx_tmp163 = !(decodeState->lastSeg);
HXDLIN(  77)									if (_hx_tmp163) {
HXLINE(  77)										Int _hx_tmp164 = decodeState->next();
HXDLIN(  77)										_hx_tmp161 = (_hx_tmp164 == (int)0);
            									}
            									else {
HXLINE(  77)										_hx_tmp161 = true;
            									}
            								}
            								else {
HXLINE(  77)									_hx_tmp161 = false;
            								}
HXDLIN(  77)								if (_hx_tmp161) {
HXLINE(  77)									decodeState->validBits = (int)-1;
HXDLIN(  77)									goto _hx_goto_40;
            								}
            								else {
HXLINE(  77)									decodeState->bytesInSeg--;
HXDLIN(  77)									Int a12 = decodeState->acc;
HXDLIN(  77)									hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  77)									Int _hx_tmp165 = decodeState->input->readByte();
HXDLIN(  77)									Int _hx_tmp166 = (a12 + ((int)_hx_tmp165 << (int)decodeState->validBits));
HXDLIN(  77)									decodeState->acc = _hx_tmp166;
HXDLIN(  77)									hx::AddEq(decodeState->validBits,(int)8);
            								}
HXDLIN(  77)								if (!((decodeState->validBits < (int)1))) {
HXLINE(  77)									goto _hx_goto_40;
            								}
            							}
            							_hx_goto_40:;
HXDLIN(  77)							Bool _hx_tmp167 = (decodeState->validBits < (int)0);
HXDLIN(  77)							if (_hx_tmp167) {
HXLINE(  77)								present = (int)0;
            							}
            							else {
HXLINE(  77)								HX_VARI_NAME( Int,z24,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  77)								Int _hx_tmp168 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  77)								decodeState->acc = _hx_tmp168;
HXDLIN(  77)								hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  77)								present = z24;
            							}
            						}
            						else {
HXLINE(  77)							HX_VARI_NAME( Int,z25,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  77)							Int _hx_tmp169 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  77)							decodeState->acc = _hx_tmp169;
HXDLIN(  77)							hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  77)							present = z25;
            						}
            					}
            				}
            				else {
HXLINE(  77)					present = (int)1;
            				}
HXLINE(  78)				if ((present != (int)0)) {
HXLINE(  79)					{
HXLINE(  79)						Int _hx_tmp170;
HXDLIN(  79)						Bool _hx_tmp171 = (decodeState->validBits < (int)0);
HXDLIN(  79)						if (_hx_tmp171) {
HXLINE(  79)							_hx_tmp170 = (int)0;
            						}
            						else {
HXLINE(  79)							Bool _hx_tmp172 = (decodeState->validBits < (int)5);
HXDLIN(  79)							if (_hx_tmp172) {
HXLINE(  79)								Bool _hx_tmp173 = (decodeState->validBits == (int)0);
HXDLIN(  79)								if (_hx_tmp173) {
HXLINE(  79)									decodeState->acc = (int)0;
            								}
HXDLIN(  79)								while(true){
HXLINE(  79)									Bool _hx_tmp174;
HXDLIN(  79)									Bool _hx_tmp175 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  79)									if (_hx_tmp175) {
HXLINE(  79)										Bool _hx_tmp176 = !(decodeState->lastSeg);
HXDLIN(  79)										if (_hx_tmp176) {
HXLINE(  79)											Int _hx_tmp177 = decodeState->next();
HXDLIN(  79)											_hx_tmp174 = (_hx_tmp177 == (int)0);
            										}
            										else {
HXLINE(  79)											_hx_tmp174 = true;
            										}
            									}
            									else {
HXLINE(  79)										_hx_tmp174 = false;
            									}
HXDLIN(  79)									if (_hx_tmp174) {
HXLINE(  79)										decodeState->validBits = (int)-1;
HXDLIN(  79)										goto _hx_goto_41;
            									}
            									else {
HXLINE(  79)										decodeState->bytesInSeg--;
HXDLIN(  79)										Int a13 = decodeState->acc;
HXDLIN(  79)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  79)										Int _hx_tmp178 = decodeState->input->readByte();
HXDLIN(  79)										Int _hx_tmp179 = (a13 + ((int)_hx_tmp178 << (int)decodeState->validBits));
HXDLIN(  79)										decodeState->acc = _hx_tmp179;
HXDLIN(  79)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN(  79)									if (!((decodeState->validBits < (int)5))) {
HXLINE(  79)										goto _hx_goto_41;
            									}
            								}
            								_hx_goto_41:;
HXDLIN(  79)								Bool _hx_tmp180 = (decodeState->validBits < (int)0);
HXDLIN(  79)								if (_hx_tmp180) {
HXLINE(  79)									_hx_tmp170 = (int)0;
            								}
            								else {
HXLINE(  79)									HX_VARI_NAME( Int,z26,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  79)									Int _hx_tmp181 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  79)									decodeState->acc = _hx_tmp181;
HXDLIN(  79)									hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  79)									_hx_tmp170 = z26;
            								}
            							}
            							else {
HXLINE(  79)								HX_VARI_NAME( Int,z27,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  79)								Int _hx_tmp182 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  79)								decodeState->acc = _hx_tmp182;
HXDLIN(  79)								hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  79)								_hx_tmp170 = z27;
            							}
            						}
HXDLIN(  79)						lengths->__unsafe_set(j,(_hx_tmp170 + (int)1));
            					}
HXLINE(  80)					++total;
            				}
            				else {
HXLINE(  82)					lengths->__unsafe_set(j,(int)255);
            				}
            			}
            		}
HXLINE(  87)		Bool _hx_tmp183;
HXDLIN(  87)		if (c->sparse) {
HXLINE(  87)			_hx_tmp183 = (total >= ((int)c->entries >> (int)(int)2));
            		}
            		else {
HXLINE(  87)			_hx_tmp183 = false;
            		}
HXDLIN(  87)		if (_hx_tmp183) {
HXLINE(  88)			c->codewordLengths = lengths;
HXLINE(  89)			c->sparse = false;
            		}
HXLINE(  92)		Int _hx_tmp184;
HXDLIN(  92)		Bool _hx_tmp185 = c->sparse;
HXDLIN(  92)		if (_hx_tmp185) {
HXLINE(  92)			_hx_tmp184 = total;
            		}
            		else {
HXLINE(  95)			HX_VARI( Int,sortedCount) = (int)0;
HXLINE(  96)			{
HXLINE(  96)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(  96)				HX_VARI_NAME( Int,_g3,"_g") = c->entries;
HXDLIN(  96)				while((_g12 < _g3)){
HXLINE(  96)					HX_VARI_NAME( Int,j1,"j") = _g12++;
HXLINE(  97)					HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(lengths,j1)) );
HXLINE(  98)					Bool _hx_tmp186;
HXDLIN(  98)					if ((l > (int)10)) {
HXLINE(  98)						_hx_tmp186 = (l != (int)255);
            					}
            					else {
HXLINE(  98)						_hx_tmp186 = false;
            					}
HXDLIN(  98)					if (_hx_tmp186) {
HXLINE(  99)						++sortedCount;
            					}
            				}
            			}
HXLINE(  92)			_hx_tmp184 = sortedCount;
            		}
HXDLIN(  92)		c->sortedEntries = _hx_tmp184;
HXLINE( 105)		HX_VARI( ::Array< Int >,values) = null();
HXLINE( 107)		Bool _hx_tmp187 = !(c->sparse);
HXDLIN( 107)		if (_hx_tmp187) {
HXLINE( 108)			Int length1 = c->entries;
HXDLIN( 108)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new();
HXDLIN( 108)			_hx_array_set_size_exact(this2,length1);
HXDLIN( 108)			c->codewords = this2;
            		}
            		else {
HXLINE( 110)			Bool _hx_tmp188 = (c->sortedEntries != (int)0);
HXDLIN( 110)			if (_hx_tmp188) {
HXLINE( 111)				Int length2 = c->sortedEntries;
HXDLIN( 111)				HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new();
HXDLIN( 111)				_hx_array_set_size_exact(this3,length2);
HXDLIN( 111)				c->codewordLengths = this3;
HXLINE( 112)				Int length3 = c->entries;
HXDLIN( 112)				HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new();
HXDLIN( 112)				_hx_array_set_size_exact(this4,length3);
HXDLIN( 112)				c->codewords = this4;
HXLINE( 113)				Int length4 = c->entries;
HXDLIN( 113)				HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new();
HXDLIN( 113)				_hx_array_set_size_exact(this5,length4);
HXDLIN( 113)				values = this5;
            			}
            		}
HXLINE( 119)		Bool _hx_tmp189 = !(c->computeCodewords(lengths,c->entries,values));
HXDLIN( 119)		if (_hx_tmp189) {
HXLINE( 120)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("compute codewords",33,59,f7,f8),hx::SourceInfo(HX_("Codebook.hx",88,14,e0,8e),120,HX_("kha.audio2.ogg.vorbis.data.Codebook",a6,42,7b,ee),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 123)		Bool _hx_tmp190 = (c->sortedEntries != (int)0);
HXDLIN( 123)		if (_hx_tmp190) {
HXLINE( 125)			c->sortedCodewords = ::Array_obj< Int >::__new(0);
HXLINE( 129)			Int length5 = c->sortedEntries;
HXDLIN( 129)			HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new();
HXDLIN( 129)			_hx_array_set_size_exact(this6,length5);
HXDLIN( 129)			c->sortedValues = this6;
HXLINE( 130)			c->computeSortedHuffman(lengths,values);
            		}
HXLINE( 133)		Bool _hx_tmp191 = c->sparse;
HXDLIN( 133)		if (_hx_tmp191) {
HXLINE( 135)			c->codewords = null();
HXLINE( 136)			lengths = null();
            		}
HXLINE( 139)		c->computeAcceleratedHuffman();
HXLINE( 141)		Int _hx_tmp192;
HXDLIN( 141)		Bool _hx_tmp193 = (decodeState->validBits < (int)0);
HXDLIN( 141)		if (_hx_tmp193) {
HXLINE( 141)			_hx_tmp192 = (int)0;
            		}
            		else {
HXLINE( 141)			Bool _hx_tmp194 = (decodeState->validBits < (int)4);
HXDLIN( 141)			if (_hx_tmp194) {
HXLINE( 141)				Bool _hx_tmp195 = (decodeState->validBits == (int)0);
HXDLIN( 141)				if (_hx_tmp195) {
HXLINE( 141)					decodeState->acc = (int)0;
            				}
HXDLIN( 141)				while(true){
HXLINE( 141)					Bool _hx_tmp196;
HXDLIN( 141)					Bool _hx_tmp197 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 141)					if (_hx_tmp197) {
HXLINE( 141)						Bool _hx_tmp198 = !(decodeState->lastSeg);
HXDLIN( 141)						if (_hx_tmp198) {
HXLINE( 141)							Int _hx_tmp199 = decodeState->next();
HXDLIN( 141)							_hx_tmp196 = (_hx_tmp199 == (int)0);
            						}
            						else {
HXLINE( 141)							_hx_tmp196 = true;
            						}
            					}
            					else {
HXLINE( 141)						_hx_tmp196 = false;
            					}
HXDLIN( 141)					if (_hx_tmp196) {
HXLINE( 141)						decodeState->validBits = (int)-1;
HXDLIN( 141)						goto _hx_goto_43;
            					}
            					else {
HXLINE( 141)						decodeState->bytesInSeg--;
HXDLIN( 141)						Int a14 = decodeState->acc;
HXDLIN( 141)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 141)						Int _hx_tmp200 = decodeState->input->readByte();
HXDLIN( 141)						Int _hx_tmp201 = (a14 + ((int)_hx_tmp200 << (int)decodeState->validBits));
HXDLIN( 141)						decodeState->acc = _hx_tmp201;
HXDLIN( 141)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN( 141)					if (!((decodeState->validBits < (int)4))) {
HXLINE( 141)						goto _hx_goto_43;
            					}
            				}
            				_hx_goto_43:;
HXDLIN( 141)				Bool _hx_tmp202 = (decodeState->validBits < (int)0);
HXDLIN( 141)				if (_hx_tmp202) {
HXLINE( 141)					_hx_tmp192 = (int)0;
            				}
            				else {
HXLINE( 141)					HX_VARI_NAME( Int,z28,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN( 141)					Int _hx_tmp203 = hx::UShr(decodeState->acc,(int)4);
HXDLIN( 141)					decodeState->acc = _hx_tmp203;
HXDLIN( 141)					hx::SubEq(decodeState->validBits,(int)4);
HXDLIN( 141)					_hx_tmp192 = z28;
            				}
            			}
            			else {
HXLINE( 141)				HX_VARI_NAME( Int,z29,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN( 141)				Int _hx_tmp204 = hx::UShr(decodeState->acc,(int)4);
HXDLIN( 141)				decodeState->acc = _hx_tmp204;
HXDLIN( 141)				hx::SubEq(decodeState->validBits,(int)4);
HXDLIN( 141)				_hx_tmp192 = z29;
            			}
            		}
HXDLIN( 141)		c->lookupType = _hx_tmp192;
HXLINE( 142)		if ((c->lookupType > (int)2)) {
HXLINE( 143)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("codebook lookup type",d6,92,ea,e4),hx::SourceInfo(HX_("Codebook.hx",88,14,e0,8e),143,HX_("kha.audio2.ogg.vorbis.data.Codebook",a6,42,7b,ee),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 146)		Bool _hx_tmp205 = (c->lookupType > (int)0);
HXDLIN( 146)		if (_hx_tmp205) {
HXLINE( 147)			HX_VAR_NAME( Int,x2,"x");
HXDLIN( 147)			Bool _hx_tmp206 = (decodeState->validBits < (int)0);
HXDLIN( 147)			if (_hx_tmp206) {
HXLINE( 147)				x2 = (int)0;
            			}
            			else {
HXLINE( 147)				Bool _hx_tmp207 = (decodeState->validBits < (int)32);
HXDLIN( 147)				if (_hx_tmp207) {
HXLINE( 147)					Int _hx_tmp208 = decodeState->readBits((int)24);
HXDLIN( 147)					Int _hx_tmp209 = decodeState->readBits((int)8);
HXDLIN( 147)					x2 = (_hx_tmp208 + ((int)_hx_tmp209 << (int)(int)24));
            				}
            				else {
HXLINE( 147)					HX_VARI_NAME( Int,z30,"z") = ((int)decodeState->acc & (int)(int)-1);
HXDLIN( 147)					Int _hx_tmp210 = hx::UShr(decodeState->acc,(int)32);
HXDLIN( 147)					decodeState->acc = _hx_tmp210;
HXDLIN( 147)					hx::SubEq(decodeState->validBits,(int)32);
HXDLIN( 147)					x2 = z30;
            				}
            			}
HXDLIN( 147)			HX_VAR( Float,mantissa);
HXDLIN( 147)			HX_VARI_NAME( Int,_hx_int,"int") = ((int)x2 & (int)(int)2097151);
HXDLIN( 147)			if ((_hx_int < (int)0)) {
HXLINE( 147)				mantissa = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE( 147)				mantissa = (_hx_int + ((Float)0.0));
            			}
HXDLIN( 147)			HX_VARI( Int,sign) = ((int)x2 & (int)(int)-2147483648);
HXDLIN( 147)			HX_VARI( Int,exp) = hx::UShr(((int)x2 & (int)(int)2145386496),(int)21);
HXDLIN( 147)			HX_VAR( Float,res);
HXDLIN( 147)			if ((sign != (int)0)) {
HXLINE( 147)				res = -(mantissa);
            			}
            			else {
HXLINE( 147)				res = mantissa;
            			}
HXDLIN( 147)			Float _hx_tmp211 = ::Math_obj::pow((int)2,(exp - (int)788));
HXDLIN( 147)			c->minimumValue = (res * _hx_tmp211);
HXLINE( 148)			HX_VAR_NAME( Int,x3,"x");
HXDLIN( 148)			Bool _hx_tmp212 = (decodeState->validBits < (int)0);
HXDLIN( 148)			if (_hx_tmp212) {
HXLINE( 148)				x3 = (int)0;
            			}
            			else {
HXLINE( 148)				Bool _hx_tmp213 = (decodeState->validBits < (int)32);
HXDLIN( 148)				if (_hx_tmp213) {
HXLINE( 148)					Int _hx_tmp214 = decodeState->readBits((int)24);
HXDLIN( 148)					Int _hx_tmp215 = decodeState->readBits((int)8);
HXDLIN( 148)					x3 = (_hx_tmp214 + ((int)_hx_tmp215 << (int)(int)24));
            				}
            				else {
HXLINE( 148)					HX_VARI_NAME( Int,z31,"z") = ((int)decodeState->acc & (int)(int)-1);
HXDLIN( 148)					Int _hx_tmp216 = hx::UShr(decodeState->acc,(int)32);
HXDLIN( 148)					decodeState->acc = _hx_tmp216;
HXDLIN( 148)					hx::SubEq(decodeState->validBits,(int)32);
HXDLIN( 148)					x3 = z31;
            				}
            			}
HXDLIN( 148)			HX_VAR_NAME( Float,mantissa1,"mantissa");
HXDLIN( 148)			HX_VARI_NAME( Int,int1,"int") = ((int)x3 & (int)(int)2097151);
HXDLIN( 148)			if ((int1 < (int)0)) {
HXLINE( 148)				mantissa1 = (((Float)4294967296.0) + int1);
            			}
            			else {
HXLINE( 148)				mantissa1 = (int1 + ((Float)0.0));
            			}
HXDLIN( 148)			HX_VARI_NAME( Int,sign1,"sign") = ((int)x3 & (int)(int)-2147483648);
HXDLIN( 148)			HX_VARI_NAME( Int,exp1,"exp") = hx::UShr(((int)x3 & (int)(int)2145386496),(int)21);
HXDLIN( 148)			HX_VAR_NAME( Float,res1,"res");
HXDLIN( 148)			if ((sign1 != (int)0)) {
HXLINE( 148)				res1 = -(mantissa1);
            			}
            			else {
HXLINE( 148)				res1 = mantissa1;
            			}
HXDLIN( 148)			Float _hx_tmp217 = ::Math_obj::pow((int)2,(exp1 - (int)788));
HXDLIN( 148)			c->deltaValue = (res1 * _hx_tmp217);
HXLINE( 149)			Int _hx_tmp218;
HXDLIN( 149)			Bool _hx_tmp219 = (decodeState->validBits < (int)0);
HXDLIN( 149)			if (_hx_tmp219) {
HXLINE( 149)				_hx_tmp218 = (int)0;
            			}
            			else {
HXLINE( 149)				Bool _hx_tmp220 = (decodeState->validBits < (int)4);
HXDLIN( 149)				if (_hx_tmp220) {
HXLINE( 149)					Bool _hx_tmp221 = (decodeState->validBits == (int)0);
HXDLIN( 149)					if (_hx_tmp221) {
HXLINE( 149)						decodeState->acc = (int)0;
            					}
HXDLIN( 149)					while(true){
HXLINE( 149)						Bool _hx_tmp222;
HXDLIN( 149)						Bool _hx_tmp223 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 149)						if (_hx_tmp223) {
HXLINE( 149)							Bool _hx_tmp224 = !(decodeState->lastSeg);
HXDLIN( 149)							if (_hx_tmp224) {
HXLINE( 149)								Int _hx_tmp225 = decodeState->next();
HXDLIN( 149)								_hx_tmp222 = (_hx_tmp225 == (int)0);
            							}
            							else {
HXLINE( 149)								_hx_tmp222 = true;
            							}
            						}
            						else {
HXLINE( 149)							_hx_tmp222 = false;
            						}
HXDLIN( 149)						if (_hx_tmp222) {
HXLINE( 149)							decodeState->validBits = (int)-1;
HXDLIN( 149)							goto _hx_goto_44;
            						}
            						else {
HXLINE( 149)							decodeState->bytesInSeg--;
HXDLIN( 149)							Int a15 = decodeState->acc;
HXDLIN( 149)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 149)							Int _hx_tmp226 = decodeState->input->readByte();
HXDLIN( 149)							Int _hx_tmp227 = (a15 + ((int)_hx_tmp226 << (int)decodeState->validBits));
HXDLIN( 149)							decodeState->acc = _hx_tmp227;
HXDLIN( 149)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN( 149)						if (!((decodeState->validBits < (int)4))) {
HXLINE( 149)							goto _hx_goto_44;
            						}
            					}
            					_hx_goto_44:;
HXDLIN( 149)					Bool _hx_tmp228 = (decodeState->validBits < (int)0);
HXDLIN( 149)					if (_hx_tmp228) {
HXLINE( 149)						_hx_tmp218 = (int)0;
            					}
            					else {
HXLINE( 149)						HX_VARI_NAME( Int,z32,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN( 149)						Int _hx_tmp229 = hx::UShr(decodeState->acc,(int)4);
HXDLIN( 149)						decodeState->acc = _hx_tmp229;
HXDLIN( 149)						hx::SubEq(decodeState->validBits,(int)4);
HXDLIN( 149)						_hx_tmp218 = z32;
            					}
            				}
            				else {
HXLINE( 149)					HX_VARI_NAME( Int,z33,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN( 149)					Int _hx_tmp230 = hx::UShr(decodeState->acc,(int)4);
HXDLIN( 149)					decodeState->acc = _hx_tmp230;
HXDLIN( 149)					hx::SubEq(decodeState->validBits,(int)4);
HXDLIN( 149)					_hx_tmp218 = z33;
            				}
            			}
HXDLIN( 149)			c->valueBits = (_hx_tmp218 + (int)1);
HXLINE( 150)			Int _hx_tmp231;
HXDLIN( 150)			Bool _hx_tmp232 = (decodeState->validBits < (int)0);
HXDLIN( 150)			if (_hx_tmp232) {
HXLINE( 150)				_hx_tmp231 = (int)0;
            			}
            			else {
HXLINE( 150)				Bool _hx_tmp233 = (decodeState->validBits < (int)1);
HXDLIN( 150)				if (_hx_tmp233) {
HXLINE( 150)					Bool _hx_tmp234 = (decodeState->validBits == (int)0);
HXDLIN( 150)					if (_hx_tmp234) {
HXLINE( 150)						decodeState->acc = (int)0;
            					}
HXDLIN( 150)					while(true){
HXLINE( 150)						Bool _hx_tmp235;
HXDLIN( 150)						Bool _hx_tmp236 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 150)						if (_hx_tmp236) {
HXLINE( 150)							Bool _hx_tmp237 = !(decodeState->lastSeg);
HXDLIN( 150)							if (_hx_tmp237) {
HXLINE( 150)								Int _hx_tmp238 = decodeState->next();
HXDLIN( 150)								_hx_tmp235 = (_hx_tmp238 == (int)0);
            							}
            							else {
HXLINE( 150)								_hx_tmp235 = true;
            							}
            						}
            						else {
HXLINE( 150)							_hx_tmp235 = false;
            						}
HXDLIN( 150)						if (_hx_tmp235) {
HXLINE( 150)							decodeState->validBits = (int)-1;
HXDLIN( 150)							goto _hx_goto_45;
            						}
            						else {
HXLINE( 150)							decodeState->bytesInSeg--;
HXDLIN( 150)							Int a16 = decodeState->acc;
HXDLIN( 150)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 150)							Int _hx_tmp239 = decodeState->input->readByte();
HXDLIN( 150)							Int _hx_tmp240 = (a16 + ((int)_hx_tmp239 << (int)decodeState->validBits));
HXDLIN( 150)							decodeState->acc = _hx_tmp240;
HXDLIN( 150)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN( 150)						if (!((decodeState->validBits < (int)1))) {
HXLINE( 150)							goto _hx_goto_45;
            						}
            					}
            					_hx_goto_45:;
HXDLIN( 150)					Bool _hx_tmp241 = (decodeState->validBits < (int)0);
HXDLIN( 150)					if (_hx_tmp241) {
HXLINE( 150)						_hx_tmp231 = (int)0;
            					}
            					else {
HXLINE( 150)						HX_VARI_NAME( Int,z34,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN( 150)						Int _hx_tmp242 = hx::UShr(decodeState->acc,(int)1);
HXDLIN( 150)						decodeState->acc = _hx_tmp242;
HXDLIN( 150)						hx::SubEq(decodeState->validBits,(int)1);
HXDLIN( 150)						_hx_tmp231 = z34;
            					}
            				}
            				else {
HXLINE( 150)					HX_VARI_NAME( Int,z35,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN( 150)					Int _hx_tmp243 = hx::UShr(decodeState->acc,(int)1);
HXDLIN( 150)					decodeState->acc = _hx_tmp243;
HXDLIN( 150)					hx::SubEq(decodeState->validBits,(int)1);
HXDLIN( 150)					_hx_tmp231 = z35;
            				}
            			}
HXDLIN( 150)			c->sequenceP = (_hx_tmp231 != (int)0);
HXLINE( 152)			Bool _hx_tmp244 = (c->lookupType == (int)1);
HXDLIN( 152)			if (_hx_tmp244) {
HXLINE( 153)				c->lookupValues = ::kha::audio2::ogg::vorbis::VorbisTools_obj::lookup1Values(c->entries,c->dimensions);
            			}
            			else {
HXLINE( 155)				c->lookupValues = (c->entries * c->dimensions);
            			}
HXLINE( 157)			Int length6 = c->lookupValues;
HXDLIN( 157)			HX_VARI_NAME( ::Array< Int >,this7,"this") = ::Array_obj< Int >::__new();
HXDLIN( 157)			_hx_array_set_size_exact(this7,length6);
HXDLIN( 157)			HX_VARI( ::Array< Int >,mults) = this7;
HXLINE( 158)			{
HXLINE( 158)				HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 158)				HX_VARI_NAME( Int,_g4,"_g") = c->lookupValues;
HXDLIN( 158)				while((_g13 < _g4)){
HXLINE( 158)					HX_VARI_NAME( Int,j2,"j") = _g13++;
HXLINE( 159)					HX_VARI_NAME( Int,n2,"n") = c->valueBits;
HXDLIN( 159)					HX_VAR( Int,q);
HXDLIN( 159)					Bool _hx_tmp245 = (decodeState->validBits < (int)0);
HXDLIN( 159)					if (_hx_tmp245) {
HXLINE( 159)						q = (int)0;
            					}
            					else {
HXLINE( 159)						Bool _hx_tmp246 = (decodeState->validBits < n2);
HXDLIN( 159)						if (_hx_tmp246) {
HXLINE( 159)							if ((n2 > (int)24)) {
HXLINE( 159)								Int _hx_tmp247 = decodeState->readBits((int)24);
HXDLIN( 159)								Int _hx_tmp248 = decodeState->readBits((n2 - (int)24));
HXDLIN( 159)								q = (_hx_tmp247 + ((int)_hx_tmp248 << (int)(int)24));
            							}
            							else {
HXLINE( 159)								Bool _hx_tmp249 = (decodeState->validBits == (int)0);
HXDLIN( 159)								if (_hx_tmp249) {
HXLINE( 159)									decodeState->acc = (int)0;
            								}
HXDLIN( 159)								while(true){
HXLINE( 159)									Bool _hx_tmp250;
HXDLIN( 159)									Bool _hx_tmp251 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 159)									if (_hx_tmp251) {
HXLINE( 159)										Bool _hx_tmp252 = !(decodeState->lastSeg);
HXDLIN( 159)										if (_hx_tmp252) {
HXLINE( 159)											Int _hx_tmp253 = decodeState->next();
HXDLIN( 159)											_hx_tmp250 = (_hx_tmp253 == (int)0);
            										}
            										else {
HXLINE( 159)											_hx_tmp250 = true;
            										}
            									}
            									else {
HXLINE( 159)										_hx_tmp250 = false;
            									}
HXDLIN( 159)									if (_hx_tmp250) {
HXLINE( 159)										decodeState->validBits = (int)-1;
HXDLIN( 159)										goto _hx_goto_47;
            									}
            									else {
HXLINE( 159)										decodeState->bytesInSeg--;
HXDLIN( 159)										Int a17 = decodeState->acc;
HXDLIN( 159)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 159)										Int _hx_tmp254 = decodeState->input->readByte();
HXDLIN( 159)										Int _hx_tmp255 = (a17 + ((int)_hx_tmp254 << (int)decodeState->validBits));
HXDLIN( 159)										decodeState->acc = _hx_tmp255;
HXDLIN( 159)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN( 159)									if (!((decodeState->validBits < n2))) {
HXLINE( 159)										goto _hx_goto_47;
            									}
            								}
            								_hx_goto_47:;
HXDLIN( 159)								Bool _hx_tmp256 = (decodeState->validBits < (int)0);
HXDLIN( 159)								if (_hx_tmp256) {
HXLINE( 159)									q = (int)0;
            								}
            								else {
HXLINE( 159)									HX_VARI_NAME( Int,z36,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n2) - (int)1));
HXDLIN( 159)									Int _hx_tmp257 = hx::UShr(decodeState->acc,n2);
HXDLIN( 159)									decodeState->acc = _hx_tmp257;
HXDLIN( 159)									hx::SubEq(decodeState->validBits,n2);
HXDLIN( 159)									q = z36;
            								}
            							}
            						}
            						else {
HXLINE( 159)							HX_VARI_NAME( Int,z37,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n2) - (int)1));
HXDLIN( 159)							Int _hx_tmp258 = hx::UShr(decodeState->acc,n2);
HXDLIN( 159)							decodeState->acc = _hx_tmp258;
HXDLIN( 159)							hx::SubEq(decodeState->validBits,n2);
HXDLIN( 159)							q = z37;
            						}
            					}
HXLINE( 160)					if ((q == (int)-1)) {
HXLINE( 161)						HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("fail lookup",7c,d8,86,6f),hx::SourceInfo(HX_("Codebook.hx",88,14,e0,8e),161,HX_("kha.audio2.ogg.vorbis.data.Codebook",a6,42,7b,ee),HX_("read",56,4b,a7,4b))));
            					}
HXLINE( 163)					mults->__unsafe_set(j2,q);
            				}
            			}
HXLINE( 166)			{
HXLINE( 167)				Int length7 = c->lookupValues;
HXDLIN( 167)				HX_VARI_NAME( ::Array< Float >,this8,"this") = ::Array_obj< Float >::__new();
HXDLIN( 167)				_hx_array_set_size_exact(this8,length7);
HXDLIN( 167)				c->multiplicands = this8;
HXLINE( 170)				{
HXLINE( 170)					HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN( 170)					HX_VARI_NAME( Int,_g5,"_g") = c->lookupValues;
HXDLIN( 170)					while((_g14 < _g5)){
HXLINE( 170)						HX_VARI_NAME( Int,j3,"j") = _g14++;
HXLINE( 171)						{
HXLINE( 171)							Float _hx_tmp259 = (( (Int)(_hx_array_unsafe_get(mults,j3)) ) * c->deltaValue);
HXDLIN( 171)							Float val = (_hx_tmp259 + c->minimumValue);
HXDLIN( 171)							c->multiplicands->__unsafe_set(j3,val);
            						}
            					}
            				}
            			}
HXLINE( 176)			Bool _hx_tmp260;
HXDLIN( 176)			if ((c->lookupType == (int)2)) {
HXLINE( 176)				_hx_tmp260 = c->sequenceP;
            			}
            			else {
HXLINE( 176)				_hx_tmp260 = false;
            			}
HXDLIN( 176)			if (_hx_tmp260) {
HXLINE( 177)				{
HXLINE( 177)					HX_VARI_NAME( Int,_g15,"_g1") = (int)1;
HXDLIN( 177)					HX_VARI_NAME( Int,_g6,"_g") = c->lookupValues;
HXDLIN( 177)					while((_g15 < _g6)){
HXLINE( 177)						HX_VARI_NAME( Int,j4,"j") = _g15++;
HXLINE( 178)						{
HXLINE( 178)							Float val1 = ( (Float)(_hx_array_unsafe_get(c->multiplicands,(j4 - (int)1))) );
HXDLIN( 178)							c->multiplicands->__unsafe_set(j4,val1);
            						}
            					}
            				}
HXLINE( 180)				c->sequenceP = false;
            			}
            		}
HXLINE( 184)		return c;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Codebook_obj,read,return )

Int Codebook_obj::delay;


Codebook_obj::Codebook_obj()
{
}

void Codebook_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Codebook);
	HX_MARK_MEMBER_NAME(dimensions,"dimensions");
	HX_MARK_MEMBER_NAME(entries,"entries");
	HX_MARK_MEMBER_NAME(codewordLengths,"codewordLengths");
	HX_MARK_MEMBER_NAME(minimumValue,"minimumValue");
	HX_MARK_MEMBER_NAME(deltaValue,"deltaValue");
	HX_MARK_MEMBER_NAME(valueBits,"valueBits");
	HX_MARK_MEMBER_NAME(lookupType,"lookupType");
	HX_MARK_MEMBER_NAME(sequenceP,"sequenceP");
	HX_MARK_MEMBER_NAME(sparse,"sparse");
	HX_MARK_MEMBER_NAME(lookupValues,"lookupValues");
	HX_MARK_MEMBER_NAME(multiplicands,"multiplicands");
	HX_MARK_MEMBER_NAME(codewords,"codewords");
	HX_MARK_MEMBER_NAME(fastHuffman,"fastHuffman");
	HX_MARK_MEMBER_NAME(sortedCodewords,"sortedCodewords");
	HX_MARK_MEMBER_NAME(sortedValues,"sortedValues");
	HX_MARK_MEMBER_NAME(sortedEntries,"sortedEntries");
	HX_MARK_END_CLASS();
}

void Codebook_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dimensions,"dimensions");
	HX_VISIT_MEMBER_NAME(entries,"entries");
	HX_VISIT_MEMBER_NAME(codewordLengths,"codewordLengths");
	HX_VISIT_MEMBER_NAME(minimumValue,"minimumValue");
	HX_VISIT_MEMBER_NAME(deltaValue,"deltaValue");
	HX_VISIT_MEMBER_NAME(valueBits,"valueBits");
	HX_VISIT_MEMBER_NAME(lookupType,"lookupType");
	HX_VISIT_MEMBER_NAME(sequenceP,"sequenceP");
	HX_VISIT_MEMBER_NAME(sparse,"sparse");
	HX_VISIT_MEMBER_NAME(lookupValues,"lookupValues");
	HX_VISIT_MEMBER_NAME(multiplicands,"multiplicands");
	HX_VISIT_MEMBER_NAME(codewords,"codewords");
	HX_VISIT_MEMBER_NAME(fastHuffman,"fastHuffman");
	HX_VISIT_MEMBER_NAME(sortedCodewords,"sortedCodewords");
	HX_VISIT_MEMBER_NAME(sortedValues,"sortedValues");
	HX_VISIT_MEMBER_NAME(sortedEntries,"sortedEntries");
}

hx::Val Codebook_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sparse") ) { return hx::Val( sparse); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { return hx::Val( entries); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addEntry") ) { return hx::Val( addEntry_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"valueBits") ) { return hx::Val( valueBits); }
		if (HX_FIELD_EQ(inName,"sequenceP") ) { return hx::Val( sequenceP); }
		if (HX_FIELD_EQ(inName,"codewords") ) { return hx::Val( codewords); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dimensions") ) { return hx::Val( dimensions); }
		if (HX_FIELD_EQ(inName,"deltaValue") ) { return hx::Val( deltaValue); }
		if (HX_FIELD_EQ(inName,"lookupType") ) { return hx::Val( lookupType); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fastHuffman") ) { return hx::Val( fastHuffman); }
		if (HX_FIELD_EQ(inName,"decodeStart") ) { return hx::Val( decodeStart_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minimumValue") ) { return hx::Val( minimumValue); }
		if (HX_FIELD_EQ(inName,"lookupValues") ) { return hx::Val( lookupValues); }
		if (HX_FIELD_EQ(inName,"sortedValues") ) { return hx::Val( sortedValues); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplicands") ) { return hx::Val( multiplicands); }
		if (HX_FIELD_EQ(inName,"sortedEntries") ) { return hx::Val( sortedEntries); }
		if (HX_FIELD_EQ(inName,"includeInSort") ) { return hx::Val( includeInSort_dyn()); }
		if (HX_FIELD_EQ(inName,"residueDecode") ) { return hx::Val( residueDecode_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"codebookDecode") ) { return hx::Val( codebookDecode_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"codewordLengths") ) { return hx::Val( codewordLengths); }
		if (HX_FIELD_EQ(inName,"sortedCodewords") ) { return hx::Val( sortedCodewords); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"computeCodewords") ) { return hx::Val( computeCodewords_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"codebookDecodeStep") ) { return hx::Val( codebookDecodeStep_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"computeSortedHuffman") ) { return hx::Val( computeSortedHuffman_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"decodeDeinterleaveRepeat") ) { return hx::Val( decodeDeinterleaveRepeat_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"computeAcceleratedHuffman") ) { return hx::Val( computeAcceleratedHuffman_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Codebook_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { outValue = delay; return true; }
	}
	return false;
}

hx::Val Codebook_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sparse") ) { sparse=inValue.Cast< Bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { entries=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"valueBits") ) { valueBits=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sequenceP") ) { sequenceP=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"codewords") ) { codewords=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dimensions") ) { dimensions=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deltaValue") ) { deltaValue=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lookupType") ) { lookupType=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fastHuffman") ) { fastHuffman=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minimumValue") ) { minimumValue=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lookupValues") ) { lookupValues=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sortedValues") ) { sortedValues=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplicands") ) { multiplicands=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sortedEntries") ) { sortedEntries=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"codewordLengths") ) { codewordLengths=inValue.Cast< ::Array< Int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sortedCodewords") ) { sortedCodewords=inValue.Cast< ::Array< Int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Codebook_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void Codebook_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("dimensions","\x4d","\xbe","\x9f","\xdc"));
	outFields->push(HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79"));
	outFields->push(HX_HCSTRING("codewordLengths","\x16","\x3c","\xfc","\x19"));
	outFields->push(HX_HCSTRING("minimumValue","\xc3","\x5e","\x55","\xb4"));
	outFields->push(HX_HCSTRING("deltaValue","\x59","\x24","\xdb","\xdc"));
	outFields->push(HX_HCSTRING("valueBits","\x17","\xb3","\x9b","\x8d"));
	outFields->push(HX_HCSTRING("lookupType","\x54","\x86","\xf3","\x40"));
	outFields->push(HX_HCSTRING("sequenceP","\xef","\x5a","\x8d","\xe6"));
	outFields->push(HX_HCSTRING("sparse","\xe0","\x0e","\x60","\xb8"));
	outFields->push(HX_HCSTRING("lookupValues","\xfc","\x31","\x21","\x02"));
	outFields->push(HX_HCSTRING("multiplicands","\x0b","\x05","\xc0","\x91"));
	outFields->push(HX_HCSTRING("codewords","\x1c","\x7b","\x0d","\xcf"));
	outFields->push(HX_HCSTRING("fastHuffman","\xf1","\x9f","\x8c","\x5a"));
	outFields->push(HX_HCSTRING("sortedCodewords","\x1f","\xf8","\x5c","\x96"));
	outFields->push(HX_HCSTRING("sortedValues","\xff","\x96","\x90","\xf3"));
	outFields->push(HX_HCSTRING("sortedEntries","\x93","\x53","\xe6","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Codebook_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Codebook_obj,dimensions),HX_HCSTRING("dimensions","\x4d","\xbe","\x9f","\xdc")},
	{hx::fsInt,(int)offsetof(Codebook_obj,entries),HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Codebook_obj,codewordLengths),HX_HCSTRING("codewordLengths","\x16","\x3c","\xfc","\x19")},
	{hx::fsFloat,(int)offsetof(Codebook_obj,minimumValue),HX_HCSTRING("minimumValue","\xc3","\x5e","\x55","\xb4")},
	{hx::fsFloat,(int)offsetof(Codebook_obj,deltaValue),HX_HCSTRING("deltaValue","\x59","\x24","\xdb","\xdc")},
	{hx::fsInt,(int)offsetof(Codebook_obj,valueBits),HX_HCSTRING("valueBits","\x17","\xb3","\x9b","\x8d")},
	{hx::fsInt,(int)offsetof(Codebook_obj,lookupType),HX_HCSTRING("lookupType","\x54","\x86","\xf3","\x40")},
	{hx::fsBool,(int)offsetof(Codebook_obj,sequenceP),HX_HCSTRING("sequenceP","\xef","\x5a","\x8d","\xe6")},
	{hx::fsBool,(int)offsetof(Codebook_obj,sparse),HX_HCSTRING("sparse","\xe0","\x0e","\x60","\xb8")},
	{hx::fsInt,(int)offsetof(Codebook_obj,lookupValues),HX_HCSTRING("lookupValues","\xfc","\x31","\x21","\x02")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Codebook_obj,multiplicands),HX_HCSTRING("multiplicands","\x0b","\x05","\xc0","\x91")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Codebook_obj,codewords),HX_HCSTRING("codewords","\x1c","\x7b","\x0d","\xcf")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Codebook_obj,fastHuffman),HX_HCSTRING("fastHuffman","\xf1","\x9f","\x8c","\x5a")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Codebook_obj,sortedCodewords),HX_HCSTRING("sortedCodewords","\x1f","\xf8","\x5c","\x96")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Codebook_obj,sortedValues),HX_HCSTRING("sortedValues","\xff","\x96","\x90","\xf3")},
	{hx::fsInt,(int)offsetof(Codebook_obj,sortedEntries),HX_HCSTRING("sortedEntries","\x93","\x53","\xe6","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Codebook_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Codebook_obj::NO_CODE,HX_HCSTRING("NO_CODE","\x2b","\x45","\x52","\x21")},
	{hx::fsInt,(void *) &Codebook_obj::delay,HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Codebook_obj_sMemberFields[] = {
	HX_HCSTRING("dimensions","\x4d","\xbe","\x9f","\xdc"),
	HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79"),
	HX_HCSTRING("codewordLengths","\x16","\x3c","\xfc","\x19"),
	HX_HCSTRING("minimumValue","\xc3","\x5e","\x55","\xb4"),
	HX_HCSTRING("deltaValue","\x59","\x24","\xdb","\xdc"),
	HX_HCSTRING("valueBits","\x17","\xb3","\x9b","\x8d"),
	HX_HCSTRING("lookupType","\x54","\x86","\xf3","\x40"),
	HX_HCSTRING("sequenceP","\xef","\x5a","\x8d","\xe6"),
	HX_HCSTRING("sparse","\xe0","\x0e","\x60","\xb8"),
	HX_HCSTRING("lookupValues","\xfc","\x31","\x21","\x02"),
	HX_HCSTRING("multiplicands","\x0b","\x05","\xc0","\x91"),
	HX_HCSTRING("codewords","\x1c","\x7b","\x0d","\xcf"),
	HX_HCSTRING("fastHuffman","\xf1","\x9f","\x8c","\x5a"),
	HX_HCSTRING("sortedCodewords","\x1f","\xf8","\x5c","\x96"),
	HX_HCSTRING("sortedValues","\xff","\x96","\x90","\xf3"),
	HX_HCSTRING("sortedEntries","\x93","\x53","\xe6","\x33"),
	HX_HCSTRING("addEntry","\x91","\x9e","\xe3","\xe9"),
	HX_HCSTRING("includeInSort","\x2b","\x86","\xf6","\xb6"),
	HX_HCSTRING("computeCodewords","\xa5","\xec","\x44","\xc8"),
	HX_HCSTRING("computeSortedHuffman","\x79","\xff","\xc7","\xef"),
	HX_HCSTRING("computeAcceleratedHuffman","\x5d","\x4a","\x6a","\xc6"),
	HX_HCSTRING("codebookDecode","\xa4","\x25","\x0d","\xe9"),
	HX_HCSTRING("codebookDecodeStep","\x10","\xdb","\xef","\x6b"),
	HX_HCSTRING("decodeStart","\x54","\x00","\x25","\x4c"),
	HX_HCSTRING("decodeDeinterleaveRepeat","\x65","\x00","\x32","\x3c"),
	HX_HCSTRING("residueDecode","\xd9","\x53","\x88","\x4e"),
	::String(null()) };

static void Codebook_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Codebook_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Codebook_obj::NO_CODE,"NO_CODE");
	HX_MARK_MEMBER_NAME(Codebook_obj::delay,"delay");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Codebook_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Codebook_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Codebook_obj::NO_CODE,"NO_CODE");
	HX_VISIT_MEMBER_NAME(Codebook_obj::delay,"delay");
};

#endif

hx::Class Codebook_obj::__mClass;

static ::String Codebook_obj_sStaticFields[] = {
	HX_HCSTRING("NO_CODE","\x2b","\x45","\x52","\x21"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	::String(null())
};

void Codebook_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Codebook","\xa6","\x42","\x7b","\xee");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Codebook_obj::__GetStatic;
	__mClass->mSetStaticField = &Codebook_obj::__SetStatic;
	__mClass->mMarkFunc = Codebook_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Codebook_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Codebook_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Codebook_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Codebook_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Codebook_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Codebook_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Codebook_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","boot",0x5e3d96fa,"kha.audio2.ogg.vorbis.data.Codebook.boot","kha/audio2/ogg/vorbis/data/Codebook.hx",15,0xa03d0d77)
HXLINE(  15)		NO_CODE = (int)255;
            	}
{
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Codebook","boot",0x5e3d96fa,"kha.audio2.ogg.vorbis.data.Codebook.boot","kha/audio2/ogg/vorbis/data/Codebook.hx",480,0xa03d0d77)
HXLINE( 480)		delay = (int)0;
            	}
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
