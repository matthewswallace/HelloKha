// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_SoundList
#include <kha/SoundList.h>
#endif

namespace kha{

void SoundList_obj::__construct(){
            	HX_STACK_FRAME("kha.SoundList","new",0x0edbc255,"kha.SoundList.new","kha/internal/AssetsBuilder.hx",203,0x6901246d)
            	HX_STACK_THIS(this)
HXLINE( 203)		this->names = ::Array_obj< ::String >::__new(0);
            	}

Dynamic SoundList_obj::__CreateEmpty() { return new SoundList_obj; }

hx::ObjectPtr< SoundList_obj > SoundList_obj::__new()
{
	hx::ObjectPtr< SoundList_obj > _hx_result = new SoundList_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SoundList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SoundList_obj > _hx_result = new SoundList_obj();
	_hx_result->__construct();
	return _hx_result;
}


SoundList_obj::SoundList_obj()
{
}

void SoundList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SoundList);
	HX_MARK_MEMBER_NAME(names,"names");
	HX_MARK_END_CLASS();
}

void SoundList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(names,"names");
}

hx::Val SoundList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { return hx::Val( names); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SoundList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { names=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SoundList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("names","\xc8","\x8f","\x84","\x96"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SoundList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(SoundList_obj,names),HX_HCSTRING("names","\xc8","\x8f","\x84","\x96")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SoundList_obj_sStaticStorageInfo = 0;
#endif

static ::String SoundList_obj_sMemberFields[] = {
	HX_HCSTRING("names","\xc8","\x8f","\x84","\x96"),
	::String(null()) };

static void SoundList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundList_obj::__mClass,"__mClass");
};

#endif

hx::Class SoundList_obj::__mClass;

void SoundList_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.SoundList","\xe3","\xf3","\x34","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SoundList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SoundList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SoundList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
