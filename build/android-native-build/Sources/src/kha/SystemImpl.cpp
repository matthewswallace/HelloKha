// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Key
#include <kha/Key.h>
#endif
#ifndef INCLUDED_kha_Mode
#include <kha/Mode.h>
#endif
#ifndef INCLUDED_kha_Position
#include <kha/Position.h>
#endif
#ifndef INCLUDED_kha_RendererOptions
#include <kha/RendererOptions.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_ScreenRotation
#include <kha/ScreenRotation.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_SystemImpl
#include <kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_TargetDisplay
#include <kha/TargetDisplay.h>
#endif
#ifndef INCLUDED_kha_WindowOptions
#include <kha/WindowOptions.h>
#endif
#ifndef INCLUDED_kha_WindowedModeOptions
#include <kha/WindowedModeOptions.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio
#include <kha/audio2/Audio.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio1
#include <kha/audio2/Audio1.h>
#endif
#ifndef INCLUDED_kha_graphics1_Graphics
#include <kha/graphics1/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics1
#include <kha/graphics2/Graphics1.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_input_Gamepad
#include <kha/input/Gamepad.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_input_Sensor
#include <kha/input/Sensor.h>
#endif
#ifndef INCLUDED_kha_input_SensorType
#include <kha/input/SensorType.h>
#endif
#ifndef INCLUDED_kha_input_Surface
#include <kha/input/Surface.h>
#endif
#ifndef INCLUDED_kha_kore_Keyboard
#include <kha/kore/Keyboard.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics
#include <kha/kore/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics2
#include <kha/kore/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif

namespace kha{

void SystemImpl_obj::__construct() { }

Dynamic SystemImpl_obj::__CreateEmpty() { return new SystemImpl_obj; }

hx::ObjectPtr< SystemImpl_obj > SystemImpl_obj::__new()
{
	hx::ObjectPtr< SystemImpl_obj > _hx_result = new SystemImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SystemImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SystemImpl_obj > _hx_result = new SystemImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

void SystemImpl_obj::notifyOfFullscreenChange( ::Dynamic func, ::Dynamic error){
            	HX_STACK_FRAME("kha.SystemImpl","notifyOfFullscreenChange",0x59e6ede0,"kha.SystemImpl.notifyOfFullscreenChange","kha/SystemImpl.hx",650,0x57d4ce24)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(error,"error")
HXLINE( 650)		Bool _hx_tmp;
HXDLIN( 650)		if (::kha::SystemImpl_obj::canSwitchFullscreen()) {
HXLINE( 650)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXLINE( 650)			_hx_tmp = false;
            		}
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 651)			::kha::SystemImpl_obj::fullscreenListeners->push(func);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,notifyOfFullscreenChange,(void))

void SystemImpl_obj::removeFromFullscreenChange( ::Dynamic func, ::Dynamic error){
            	HX_STACK_FRAME("kha.SystemImpl","removeFromFullscreenChange",0x9c7bacae,"kha.SystemImpl.removeFromFullscreenChange","kha/SystemImpl.hx",657,0x57d4ce24)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(error,"error")
HXLINE( 657)		Bool _hx_tmp;
HXDLIN( 657)		if (::kha::SystemImpl_obj::canSwitchFullscreen()) {
HXLINE( 657)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXLINE( 657)			_hx_tmp = false;
            		}
HXDLIN( 657)		if (_hx_tmp) {
HXLINE( 658)			::kha::SystemImpl_obj::fullscreenListeners->remove(func);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,removeFromFullscreenChange,(void))

Bool SystemImpl_obj::needs3d;

 ::kha::input::Mouse SystemImpl_obj::getMouse(Int num){
            	HX_STACK_FRAME("kha.SystemImpl","getMouse",0x58b17b24,"kha.SystemImpl.getMouse","kha/SystemImpl.hx",46,0x57d4ce24)
            	HX_STACK_ARG(num,"num")
HXLINE(  47)		if ((num != (int)0)) {
HXLINE(  47)			return null();
            		}
HXLINE(  48)		return ::kha::SystemImpl_obj::mouse;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getMouse,return )

 ::kha::input::Keyboard SystemImpl_obj::getKeyboard(Int num){
            	HX_STACK_FRAME("kha.SystemImpl","getKeyboard",0x95414108,"kha.SystemImpl.getKeyboard","kha/SystemImpl.hx",51,0x57d4ce24)
            	HX_STACK_ARG(num,"num")
HXLINE(  52)		if ((num != (int)0)) {
HXLINE(  52)			return null();
            		}
HXLINE(  53)		return ::kha::SystemImpl_obj::keyboard;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getKeyboard,return )

Float SystemImpl_obj::getTime(){
            	HX_STACK_FRAME("kha.SystemImpl","getTime",0xebc04bee,"kha.SystemImpl.getTime","kha/SystemImpl.hx",60,0x57d4ce24)
            	
		return Kore::System::time();
	

HXLINE(  60)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getTime,return )

Int SystemImpl_obj::windowWidth(Int windowId){
            	HX_STACK_FRAME("kha.SystemImpl","windowWidth",0xc2590da1,"kha.SystemImpl.windowWidth","kha/SystemImpl.hx",64,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
HXLINE(  64)		return Kore::System::windowWidth(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,windowWidth,return )

Int SystemImpl_obj::windowHeight(Int windowId){
            	HX_STACK_FRAME("kha.SystemImpl","windowHeight",0x01e257ec,"kha.SystemImpl.windowHeight","kha/SystemImpl.hx",68,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
HXLINE(  68)		return Kore::System::windowHeight(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,windowHeight,return )

Int SystemImpl_obj::screenDpi(){
            	HX_STACK_FRAME("kha.SystemImpl","screenDpi",0x32261c3c,"kha.SystemImpl.screenDpi","kha/SystemImpl.hx",72,0x57d4ce24)
HXLINE(  72)		return Kore::System::screenDpi();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,screenDpi,return )

Bool SystemImpl_obj::getVsync(){
            	HX_STACK_FRAME("kha.SystemImpl","getVsync",0x89f492d0,"kha.SystemImpl.getVsync","kha/SystemImpl.hx",76,0x57d4ce24)
HXLINE(  76)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getVsync,return )

Int SystemImpl_obj::getRefreshRate(){
            	HX_STACK_FRAME("kha.SystemImpl","getRefreshRate",0x9bd0909a,"kha.SystemImpl.getRefreshRate","kha/SystemImpl.hx",80,0x57d4ce24)
HXLINE(  80)		return (int)60;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getRefreshRate,return )

::hx::EnumBase SystemImpl_obj::getScreenRotation(){
            	HX_STACK_FRAME("kha.SystemImpl","getScreenRotation",0x5ad503eb,"kha.SystemImpl.getScreenRotation","kha/SystemImpl.hx",84,0x57d4ce24)
HXLINE(  84)		return ::kha::ScreenRotation_obj::RotationNone_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getScreenRotation,return )

::String SystemImpl_obj::getSystemId(){
            	HX_STACK_FRAME("kha.SystemImpl","getSystemId",0x8f01350b,"kha.SystemImpl.getSystemId","kha/SystemImpl.hx",89,0x57d4ce24)
            	return ::String(Kore::System::systemId());

HXLINE(  89)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getSystemId,return )

void SystemImpl_obj::requestShutdown(){
            	HX_STACK_FRAME("kha.SystemImpl","requestShutdown",0xb0567230,"kha.SystemImpl.requestShutdown","kha/SystemImpl.hx",93,0x57d4ce24)
HXLINE(  93)		Kore::System::stop();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,requestShutdown,(void))

::Array< ::Dynamic> SystemImpl_obj::framebuffers;

 ::kha::input::Keyboard SystemImpl_obj::keyboard;

 ::kha::input::Mouse SystemImpl_obj::mouse;

 ::kha::input::Gamepad SystemImpl_obj::gamepad1;

 ::kha::input::Gamepad SystemImpl_obj::gamepad2;

 ::kha::input::Gamepad SystemImpl_obj::gamepad3;

 ::kha::input::Gamepad SystemImpl_obj::gamepad4;

 ::kha::input::Surface SystemImpl_obj::surface;

::Array< ::Dynamic> SystemImpl_obj::mouseLockListeners;

void SystemImpl_obj::init( ::Dynamic options, ::Dynamic callback){
            	HX_STACK_FRAME("kha.SystemImpl","init",0xcab17205,"kha.SystemImpl.init","kha/SystemImpl.hx",106,0x57d4ce24)
            	HX_STACK_ARG(options,"options")
            	HX_STACK_ARG(callback,"callback")
HXLINE( 107)		::kha::SystemImpl_obj::initKore( ::Dynamic(options->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)), ::Dynamic(options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)), ::Dynamic(options->__Field(HX_("samplesPerPixel",92,52,4f,57),hx::paccDynamic)));
HXLINE( 111)		post_kore_init();
HXLINE( 113)		::kha::Shaders_obj::init();
HXLINE( 116)		HX_VARI(  ::kha::kore::graphics4::Graphics,g4) =  ::kha::kore::graphics4::Graphics_obj::__new(null());
HXLINE( 117)		HX_VARI(  ::kha::Framebuffer,framebuffer) =  ::kha::Framebuffer_obj::__new((int)0,null(),null(),g4);
HXLINE( 118)		 ::kha::graphics2::Graphics1 _hx_tmp =  ::kha::graphics2::Graphics1_obj::__new(framebuffer);
HXDLIN( 118)		framebuffer->init(_hx_tmp, ::kha::kore::graphics4::Graphics2_obj::__new(framebuffer),g4);
HXLINE( 119)		::kha::SystemImpl_obj::framebuffers->push(framebuffer);
HXLINE( 122)		::kha::SystemImpl_obj::postInit(callback);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,init,(void))

void SystemImpl_obj::initEx(::String title,::Array< ::Dynamic> options, ::Dynamic windowCallback, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,windowCallback,::Array< Int >,windowIds) HXARGC(1)
            		void _hx_run(Int windowId){
            			HX_STACK_FRAME("kha.SystemImpl","initEx",0xef75f9d8,"kha.SystemImpl.initEx","kha/SystemImpl.hx",131,0x57d4ce24)
            			HX_STACK_ARG(windowId,"windowId")
HXLINE( 132)			windowIds->push(windowId);
HXLINE( 133)			windowCallback(windowId);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,a2) HXARGC(1)
            		void _hx_run( ::kha::WindowOptions a1){
            			HX_STACK_FRAME("kha.SystemImpl","initEx",0xef75f9d8,"kha.SystemImpl.initEx","kha/SystemImpl.hx",131,0x57d4ce24)
            			HX_STACK_ARG(a1,"a1")
HXLINE( 131)			::kha::SystemImpl_obj::initWindow(a1,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("kha.SystemImpl","initEx",0xef75f9d8,"kha.SystemImpl.initEx","kha/SystemImpl.hx",125,0x57d4ce24)
            	HX_STACK_ARG(title,"title")
            	HX_STACK_ARG(options,"options")
            	HX_STACK_ARG(windowCallback,"windowCallback")
            	HX_STACK_ARG(callback,"callback")
HXLINE( 126)		init_kore_ex(title);
HXLINE( 129)		HX_VARI( ::Array< Int >,windowIds) = ::Array_obj< Int >::__new(0);
HXLINE( 131)		 ::Dynamic a2 =  ::Dynamic(new _hx_Closure_0(windowCallback,windowIds));
HXDLIN( 131)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_1(a2));
HXDLIN( 131)		::Lambda_obj::iter(options,_hx_tmp);
HXLINE( 136)		::kha::Shaders_obj::init();
HXLINE( 139)		{
HXLINE( 139)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 139)			HX_VARI( Int,_g) = windowIds->length;
HXDLIN( 139)			while((_g1 < _g)){
HXLINE( 139)				HX_VARI( Int,index) = _g1++;
HXLINE( 140)				HX_VARI_NAME( Int,windowId1,"windowId") = windowIds->__get(index);
HXLINE( 141)				HX_VARI(  ::kha::kore::graphics4::Graphics,g4) =  ::kha::kore::graphics4::Graphics_obj::__new(null());
HXLINE( 142)				HX_VARI(  ::kha::Framebuffer,framebuffer) =  ::kha::Framebuffer_obj::__new(index,null(),null(),g4);
HXLINE( 143)				 ::kha::graphics2::Graphics1 _hx_tmp1 =  ::kha::graphics2::Graphics1_obj::__new(framebuffer);
HXDLIN( 143)				framebuffer->init(_hx_tmp1, ::kha::kore::graphics4::Graphics2_obj::__new(framebuffer),g4);
HXLINE( 144)				::kha::SystemImpl_obj::framebuffers[windowId1] = framebuffer;
            			}
            		}
HXLINE( 148)		post_kore_init();
HXLINE( 150)		::kha::SystemImpl_obj::postInit(callback);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,initEx,(void))

void SystemImpl_obj::postInit( ::Dynamic callback){
            	HX_STACK_FRAME("kha.SystemImpl","postInit",0xf06ff105,"kha.SystemImpl.postInit","kha/SystemImpl.hx",153,0x57d4ce24)
            	HX_STACK_ARG(callback,"callback")
HXLINE( 154)		::kha::SystemImpl_obj::mouseLockListeners = ::Array_obj< ::Dynamic>::__new();
HXLINE( 155)		::haxe::Timer_obj::stamp();
HXLINE( 156)		::kha::input::Sensor_obj::get(::kha::input::SensorType_obj::Accelerometer_dyn());
HXLINE( 157)		::kha::SystemImpl_obj::keyboard =  ::kha::kore::Keyboard_obj::__new();
HXLINE( 158)		::kha::SystemImpl_obj::mouse =  ::kha::input::Mouse_obj::__new();
HXLINE( 159)		::kha::SystemImpl_obj::gamepad1 =  ::kha::input::Gamepad_obj::__new((int)0);
HXLINE( 160)		::kha::SystemImpl_obj::gamepad2 =  ::kha::input::Gamepad_obj::__new((int)1);
HXLINE( 161)		::kha::SystemImpl_obj::gamepad3 =  ::kha::input::Gamepad_obj::__new((int)2);
HXLINE( 162)		::kha::SystemImpl_obj::gamepad4 =  ::kha::input::Gamepad_obj::__new((int)3);
HXLINE( 163)		::kha::SystemImpl_obj::surface =  ::kha::input::Surface_obj::__new();
HXLINE( 164)		::kha::audio2::Audio_obj::_init();
HXLINE( 165)		::kha::audio2::Audio1_obj::_init();
HXLINE( 166)		::kha::Scheduler_obj::init();
HXLINE( 167)		::kha::SystemImpl_obj::loadFinished();
HXLINE( 168)		callback();
HXLINE( 170)		run_kore();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,postInit,(void))

void SystemImpl_obj::loadFinished(){
            	HX_STACK_FRAME("kha.SystemImpl","loadFinished",0x869d33ad,"kha.SystemImpl.loadFinished","kha/SystemImpl.hx",174,0x57d4ce24)
HXLINE( 174)		::kha::Scheduler_obj::start(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,loadFinished,(void))

void SystemImpl_obj::lockMouse(hx::Null< Int >  __o_windowId){
Int windowId = __o_windowId.Default(0);
            	HX_STACK_FRAME("kha.SystemImpl","lockMouse",0x417c4725,"kha.SystemImpl.lockMouse","kha/SystemImpl.hx",211,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
HXLINE( 211)		Bool _hx_tmp = !(::kha::SystemImpl_obj::isMouseLocked(null()));
HXDLIN( 211)		if (_hx_tmp) {
HXLINE( 212)			Kore::Mouse::the()->lock(windowId);;
HXLINE( 213)			{
HXLINE( 213)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 213)				HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::SystemImpl_obj::mouseLockListeners;
HXDLIN( 213)				while((_g < _g1->length)){
HXLINE( 213)					HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 213)					++_g;
HXLINE( 214)					listener(windowId);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,lockMouse,(void))

void SystemImpl_obj::unlockMouse(hx::Null< Int >  __o_windowId){
Int windowId = __o_windowId.Default(0);
            	HX_STACK_FRAME("kha.SystemImpl","unlockMouse",0xd4111e6c,"kha.SystemImpl.unlockMouse","kha/SystemImpl.hx",220,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
HXLINE( 220)		Bool _hx_tmp = ::kha::SystemImpl_obj::isMouseLocked(null());
HXDLIN( 220)		if (_hx_tmp) {
HXLINE( 221)			Kore::Mouse::the()->unlock(windowId);;
HXLINE( 222)			{
HXLINE( 222)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 222)				HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::SystemImpl_obj::mouseLockListeners;
HXDLIN( 222)				while((_g < _g1->length)){
HXLINE( 222)					HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 222)					++_g;
HXLINE( 223)					listener(windowId);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,unlockMouse,(void))

Bool SystemImpl_obj::canLockMouse(hx::Null< Int >  __o_windowId){
Int windowId = __o_windowId.Default(0);
            	HX_STACK_FRAME("kha.SystemImpl","canLockMouse",0x028cf3ff,"kha.SystemImpl.canLockMouse","kha/SystemImpl.hx",229,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
HXLINE( 229)		return Kore::Mouse::the()->canLock(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,canLockMouse,return )

Bool SystemImpl_obj::isMouseLocked(hx::Null< Int >  __o_windowId){
Int windowId = __o_windowId.Default(0);
            	HX_STACK_FRAME("kha.SystemImpl","isMouseLocked",0x414b4bb0,"kha.SystemImpl.isMouseLocked","kha/SystemImpl.hx",233,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
HXLINE( 233)		return Kore::Mouse::the()->isLocked(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,isMouseLocked,return )

void SystemImpl_obj::notifyOfMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< Int >  __o_windowId){
Int windowId = __o_windowId.Default(0);
            	HX_STACK_FRAME("kha.SystemImpl","notifyOfMouseLockChange",0x88c3c00b,"kha.SystemImpl.notifyOfMouseLockChange","kha/SystemImpl.hx",237,0x57d4ce24)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(error,"error")
            	HX_STACK_ARG(windowId,"windowId")
HXLINE( 237)		Bool _hx_tmp;
HXDLIN( 237)		Bool _hx_tmp1 = ::kha::SystemImpl_obj::canLockMouse(windowId);
HXDLIN( 237)		if (_hx_tmp1) {
HXLINE( 237)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXLINE( 237)			_hx_tmp = false;
            		}
HXDLIN( 237)		if (_hx_tmp) {
HXLINE( 238)			::kha::SystemImpl_obj::mouseLockListeners->push(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,notifyOfMouseLockChange,(void))

void SystemImpl_obj::removeFromMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< Int >  __o_windowId){
Int windowId = __o_windowId.Default(0);
            	HX_STACK_FRAME("kha.SystemImpl","removeFromMouseLockChange",0x6a1154fd,"kha.SystemImpl.removeFromMouseLockChange","kha/SystemImpl.hx",243,0x57d4ce24)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(error,"error")
            	HX_STACK_ARG(windowId,"windowId")
HXLINE( 243)		Bool _hx_tmp;
HXDLIN( 243)		Bool _hx_tmp1 = ::kha::SystemImpl_obj::canLockMouse(windowId);
HXDLIN( 243)		if (_hx_tmp1) {
HXLINE( 243)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXLINE( 243)			_hx_tmp = false;
            		}
HXDLIN( 243)		if (_hx_tmp) {
HXLINE( 244)			::kha::SystemImpl_obj::mouseLockListeners->remove(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,removeFromMouseLockChange,(void))

void SystemImpl_obj::frame(Int id){
            	HX_STACK_FRAME("kha.SystemImpl","frame",0xd8fd5798,"kha.SystemImpl.frame","kha/SystemImpl.hx",248,0x57d4ce24)
            	HX_STACK_ARG(id,"id")
HXLINE( 264)		if ((id == (int)0)) {
HXLINE( 265)			::kha::Scheduler_obj::executeFrame();
            		}
HXLINE( 268)		 ::kha::Framebuffer _hx_tmp = ::kha::SystemImpl_obj::framebuffers->__get(id).StaticCast<  ::kha::Framebuffer >();
HXDLIN( 268)		::kha::System_obj::render(id,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,frame,(void))

void SystemImpl_obj::pushUp(){
            	HX_STACK_FRAME("kha.SystemImpl","pushUp",0xca56a50a,"kha.SystemImpl.pushUp","kha/SystemImpl.hx",272,0x57d4ce24)
HXLINE( 272)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::UP_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushUp,(void))

void SystemImpl_obj::pushDown(){
            	HX_STACK_FRAME("kha.SystemImpl","pushDown",0xfdd480d1,"kha.SystemImpl.pushDown","kha/SystemImpl.hx",276,0x57d4ce24)
HXLINE( 276)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::DOWN_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushDown,(void))

void SystemImpl_obj::pushLeft(){
            	HX_STACK_FRAME("kha.SystemImpl","pushLeft",0x03169076,"kha.SystemImpl.pushLeft","kha/SystemImpl.hx",280,0x57d4ce24)
HXLINE( 280)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::LEFT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushLeft,(void))

void SystemImpl_obj::pushRight(){
            	HX_STACK_FRAME("kha.SystemImpl","pushRight",0x27b4e48d,"kha.SystemImpl.pushRight","kha/SystemImpl.hx",284,0x57d4ce24)
HXLINE( 284)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::RIGHT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushRight,(void))

void SystemImpl_obj::releaseUp(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseUp",0x8de580ed,"kha.SystemImpl.releaseUp","kha/SystemImpl.hx",288,0x57d4ce24)
HXLINE( 288)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::UP_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseUp,(void))

void SystemImpl_obj::releaseDown(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseDown",0xe7bc5b74,"kha.SystemImpl.releaseDown","kha/SystemImpl.hx",292,0x57d4ce24)
HXLINE( 292)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::DOWN_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseDown,(void))

void SystemImpl_obj::releaseLeft(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseLeft",0xecfe6b19,"kha.SystemImpl.releaseLeft","kha/SystemImpl.hx",296,0x57d4ce24)
HXLINE( 296)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::LEFT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseLeft,(void))

void SystemImpl_obj::releaseRight(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseRight",0xe8ac588a,"kha.SystemImpl.releaseRight","kha/SystemImpl.hx",300,0x57d4ce24)
HXLINE( 300)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::RIGHT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseRight,(void))

void SystemImpl_obj::pushChar(Int charCode){
            	HX_STACK_FRAME("kha.SystemImpl","pushChar",0xfd25e745,"kha.SystemImpl.pushChar","kha/SystemImpl.hx",304,0x57d4ce24)
            	HX_STACK_ARG(charCode,"charCode")
HXLINE( 304)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::CHAR_dyn(),::String::fromCharCode(charCode));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,pushChar,(void))

void SystemImpl_obj::releaseChar(Int charCode){
            	HX_STACK_FRAME("kha.SystemImpl","releaseChar",0xe70dc1e8,"kha.SystemImpl.releaseChar","kha/SystemImpl.hx",308,0x57d4ce24)
            	HX_STACK_ARG(charCode,"charCode")
HXLINE( 308)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::CHAR_dyn(),::String::fromCharCode(charCode));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,releaseChar,(void))

void SystemImpl_obj::pushShift(){
            	HX_STACK_FRAME("kha.SystemImpl","pushShift",0xba73c533,"kha.SystemImpl.pushShift","kha/SystemImpl.hx",312,0x57d4ce24)
HXLINE( 312)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::SHIFT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushShift,(void))

void SystemImpl_obj::releaseShift(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseShift",0x7b6b3930,"kha.SystemImpl.releaseShift","kha/SystemImpl.hx",316,0x57d4ce24)
HXLINE( 316)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::SHIFT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseShift,(void))

void SystemImpl_obj::pushBackspace(){
            	HX_STACK_FRAME("kha.SystemImpl","pushBackspace",0xe8740a70,"kha.SystemImpl.pushBackspace","kha/SystemImpl.hx",320,0x57d4ce24)
HXLINE( 320)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::BACKSPACE_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushBackspace,(void))

void SystemImpl_obj::releaseBackspace(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseBackspace",0xb201c0ed,"kha.SystemImpl.releaseBackspace","kha/SystemImpl.hx",324,0x57d4ce24)
HXLINE( 324)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::BACKSPACE_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseBackspace,(void))

void SystemImpl_obj::pushTab(){
            	HX_STACK_FRAME("kha.SystemImpl","pushTab",0x4178f4c6,"kha.SystemImpl.pushTab","kha/SystemImpl.hx",328,0x57d4ce24)
HXLINE( 328)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::TAB_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushTab,(void))

void SystemImpl_obj::releaseTab(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseTab",0x9aea7f83,"kha.SystemImpl.releaseTab","kha/SystemImpl.hx",332,0x57d4ce24)
HXLINE( 332)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::TAB_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseTab,(void))

void SystemImpl_obj::pushEnter(){
            	HX_STACK_FRAME("kha.SystemImpl","pushEnter",0xaed745c9,"kha.SystemImpl.pushEnter","kha/SystemImpl.hx",336,0x57d4ce24)
HXLINE( 336)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::ENTER_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushEnter,(void))

void SystemImpl_obj::releaseEnter(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseEnter",0x6fceb9c6,"kha.SystemImpl.releaseEnter","kha/SystemImpl.hx",340,0x57d4ce24)
HXLINE( 340)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::ENTER_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseEnter,(void))

void SystemImpl_obj::pushControl(){
            	HX_STACK_FRAME("kha.SystemImpl","pushControl",0x303e924e,"kha.SystemImpl.pushControl","kha/SystemImpl.hx",344,0x57d4ce24)
HXLINE( 344)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::CTRL_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushControl,(void))

void SystemImpl_obj::releaseControl(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseControl",0xb4f8bf8b,"kha.SystemImpl.releaseControl","kha/SystemImpl.hx",348,0x57d4ce24)
HXLINE( 348)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::CTRL_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseControl,(void))

void SystemImpl_obj::pushAlt(){
            	HX_STACK_FRAME("kha.SystemImpl","pushAlt",0x416a939a,"kha.SystemImpl.pushAlt","kha/SystemImpl.hx",352,0x57d4ce24)
HXLINE( 352)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::ALT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushAlt,(void))

void SystemImpl_obj::releaseAlt(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseAlt",0x9adc1e57,"kha.SystemImpl.releaseAlt","kha/SystemImpl.hx",356,0x57d4ce24)
HXLINE( 356)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::ALT_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseAlt,(void))

void SystemImpl_obj::pushEscape(){
            	HX_STACK_FRAME("kha.SystemImpl","pushEscape",0x234705b0,"kha.SystemImpl.pushEscape","kha/SystemImpl.hx",360,0x57d4ce24)
HXLINE( 360)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::ESC_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushEscape,(void))

void SystemImpl_obj::releaseEscape(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseEscape",0x3ad50f13,"kha.SystemImpl.releaseEscape","kha/SystemImpl.hx",364,0x57d4ce24)
HXLINE( 364)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::ESC_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseEscape,(void))

void SystemImpl_obj::pushDelete(){
            	HX_STACK_FRAME("kha.SystemImpl","pushDelete",0xb345825a,"kha.SystemImpl.pushDelete","kha/SystemImpl.hx",368,0x57d4ce24)
HXLINE( 368)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::DEL_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushDelete,(void))

void SystemImpl_obj::releaseDelete(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseDelete",0xcad38bbd,"kha.SystemImpl.releaseDelete","kha/SystemImpl.hx",372,0x57d4ce24)
HXLINE( 372)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::DEL_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseDelete,(void))

void SystemImpl_obj::pushBack(){
            	HX_STACK_FRAME("kha.SystemImpl","pushBack",0xfc776296,"kha.SystemImpl.pushBack","kha/SystemImpl.hx",376,0x57d4ce24)
HXLINE( 376)		::kha::SystemImpl_obj::keyboard->sendDownEvent(::kha::Key_obj::BACK_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pushBack,(void))

void SystemImpl_obj::releaseBack(){
            	HX_STACK_FRAME("kha.SystemImpl","releaseBack",0xe65f3d39,"kha.SystemImpl.releaseBack","kha/SystemImpl.hx",380,0x57d4ce24)
HXLINE( 380)		::kha::SystemImpl_obj::keyboard->sendUpEvent(::kha::Key_obj::BACK_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,releaseBack,(void))

Int SystemImpl_obj::mouseX;

Int SystemImpl_obj::mouseY;

void SystemImpl_obj::mouseDown(Int windowId,Int button,Int x,Int y){
            	HX_STACK_FRAME("kha.SystemImpl","mouseDown",0xe8f82212,"kha.SystemImpl.mouseDown","kha/SystemImpl.hx",386,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 387)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 388)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 389)		::kha::SystemImpl_obj::mouse->sendDownEvent(windowId,button,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,mouseDown,(void))

void SystemImpl_obj::mouseUp(Int windowId,Int button,Int x,Int y){
            	HX_STACK_FRAME("kha.SystemImpl","mouseUp",0x8cb3c40b,"kha.SystemImpl.mouseUp","kha/SystemImpl.hx",392,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 393)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 394)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 395)		::kha::SystemImpl_obj::mouse->sendUpEvent(windowId,button,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,mouseUp,(void))

void SystemImpl_obj::mouseMove(Int windowId,Int x,Int y,Int movementX,Int movementY){
            	HX_STACK_FRAME("kha.SystemImpl","mouseMove",0xeeeb0cc1,"kha.SystemImpl.mouseMove","kha/SystemImpl.hx",398,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(movementX,"movementX")
            	HX_STACK_ARG(movementY,"movementY")
HXLINE( 401)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 402)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 403)		::kha::SystemImpl_obj::mouse->sendMoveEvent(windowId,x,y,movementX,movementY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(SystemImpl_obj,mouseMove,(void))

void SystemImpl_obj::mouseWheel(Int windowId,Int delta){
            	HX_STACK_FRAME("kha.SystemImpl","mouseWheel",0xdc1484eb,"kha.SystemImpl.mouseWheel","kha/SystemImpl.hx",407,0x57d4ce24)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(delta,"delta")
HXLINE( 407)		::kha::SystemImpl_obj::mouse->sendWheelEvent(windowId,delta);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,mouseWheel,(void))

void SystemImpl_obj::gamepad1Axis(Int axis,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad1Axis",0xbebda126,"kha.SystemImpl.gamepad1Axis","kha/SystemImpl.hx",411,0x57d4ce24)
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(value,"value")
HXLINE( 411)		::kha::SystemImpl_obj::gamepad1->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad1Axis,(void))

void SystemImpl_obj::gamepad1Button(Int button,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad1Button",0xd5b2d1b7,"kha.SystemImpl.gamepad1Button","kha/SystemImpl.hx",415,0x57d4ce24)
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(value,"value")
HXLINE( 415)		::kha::SystemImpl_obj::gamepad1->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad1Button,(void))

void SystemImpl_obj::gamepad2Axis(Int axis,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad2Axis",0x522435a7,"kha.SystemImpl.gamepad2Axis","kha/SystemImpl.hx",419,0x57d4ce24)
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(value,"value")
HXLINE( 419)		::kha::SystemImpl_obj::gamepad2->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad2Axis,(void))

void SystemImpl_obj::gamepad2Button(Int button,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad2Button",0xff484878,"kha.SystemImpl.gamepad2Button","kha/SystemImpl.hx",423,0x57d4ce24)
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(value,"value")
HXLINE( 423)		::kha::SystemImpl_obj::gamepad2->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad2Button,(void))

void SystemImpl_obj::gamepad3Axis(Int axis,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad3Axis",0xe58aca28,"kha.SystemImpl.gamepad3Axis","kha/SystemImpl.hx",427,0x57d4ce24)
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(value,"value")
HXLINE( 427)		::kha::SystemImpl_obj::gamepad3->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad3Axis,(void))

void SystemImpl_obj::gamepad3Button(Int button,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad3Button",0x28ddbf39,"kha.SystemImpl.gamepad3Button","kha/SystemImpl.hx",431,0x57d4ce24)
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(value,"value")
HXLINE( 431)		::kha::SystemImpl_obj::gamepad3->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad3Button,(void))

void SystemImpl_obj::gamepad4Axis(Int axis,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad4Axis",0x78f15ea9,"kha.SystemImpl.gamepad4Axis","kha/SystemImpl.hx",435,0x57d4ce24)
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(value,"value")
HXLINE( 435)		::kha::SystemImpl_obj::gamepad4->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad4Axis,(void))

void SystemImpl_obj::gamepad4Button(Int button,Float value){
            	HX_STACK_FRAME("kha.SystemImpl","gamepad4Button",0x527335fa,"kha.SystemImpl.gamepad4Button","kha/SystemImpl.hx",439,0x57d4ce24)
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(value,"value")
HXLINE( 439)		::kha::SystemImpl_obj::gamepad4->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad4Button,(void))

void SystemImpl_obj::touchStart(Int index,Int x,Int y){
            	HX_STACK_FRAME("kha.SystemImpl","touchStart",0x7229b4d8,"kha.SystemImpl.touchStart","kha/SystemImpl.hx",443,0x57d4ce24)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 443)		::kha::SystemImpl_obj::surface->sendTouchStartEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchStart,(void))

void SystemImpl_obj::touchEnd(Int index,Int x,Int y){
            	HX_STACK_FRAME("kha.SystemImpl","touchEnd",0xec7f1ad1,"kha.SystemImpl.touchEnd","kha/SystemImpl.hx",447,0x57d4ce24)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 447)		::kha::SystemImpl_obj::surface->sendTouchEndEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchEnd,(void))

void SystemImpl_obj::touchMove(Int index,Int x,Int y){
            	HX_STACK_FRAME("kha.SystemImpl","touchMove",0x0802e35b,"kha.SystemImpl.touchMove","kha/SystemImpl.hx",451,0x57d4ce24)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 451)		::kha::SystemImpl_obj::surface->sendMoveEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchMove,(void))

void SystemImpl_obj::foreground(){
            	HX_STACK_FRAME("kha.SystemImpl","foreground",0x057c7578,"kha.SystemImpl.foreground","kha/SystemImpl.hx",455,0x57d4ce24)
HXLINE( 455)		::kha::System_obj::foreground();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,foreground,(void))

void SystemImpl_obj::resume(){
            	HX_STACK_FRAME("kha.SystemImpl","resume",0x60ae07e2,"kha.SystemImpl.resume","kha/SystemImpl.hx",459,0x57d4ce24)
HXLINE( 459)		::kha::System_obj::resume();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,resume,(void))

void SystemImpl_obj::pause(){
            	HX_STACK_FRAME("kha.SystemImpl","pause",0x8fd1b661,"kha.SystemImpl.pause","kha/SystemImpl.hx",463,0x57d4ce24)
HXLINE( 463)		::kha::System_obj::pause();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pause,(void))

void SystemImpl_obj::background(){
            	HX_STACK_FRAME("kha.SystemImpl","background",0x1aaaf0a3,"kha.SystemImpl.background","kha/SystemImpl.hx",467,0x57d4ce24)
HXLINE( 467)		::kha::System_obj::background();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,background,(void))

void SystemImpl_obj::shutdown(){
            	HX_STACK_FRAME("kha.SystemImpl","shutdown",0x5781520b,"kha.SystemImpl.shutdown","kha/SystemImpl.hx",471,0x57d4ce24)
HXLINE( 471)		::kha::System_obj::shutdown();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,shutdown,(void))

void SystemImpl_obj::initKore(::String name,Int width,Int height,Int antialiasing){
            	HX_STACK_FRAME("kha.SystemImpl","initKore",0x383af6fc,"kha.SystemImpl.initKore","kha/SystemImpl.hx",475,0x57d4ce24)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(antialiasing,"antialiasing")
            	init_kore(name, width, height, antialiasing);

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,initKore,(void))

Int SystemImpl_obj::translatePosition(::hx::EnumBase value){
            	HX_STACK_FRAME("kha.SystemImpl","translatePosition",0x02aa0602,"kha.SystemImpl.translatePosition","kha/SystemImpl.hx",478,0x57d4ce24)
            	HX_STACK_ARG(value,"value")
HXLINE( 479)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 479)		if (_hx_tmp) {
HXLINE( 480)			return (int)-1;
            		}
HXLINE( 483)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 483)		switch((int)(_hx_tmp1)){
            			case (int)0: {
HXLINE( 483)				return (int)-1;
            			}
            			break;
            			case (int)1: {
HXLINE( 483)				return value->_hx_getInt(0);
            			}
            			break;
            		}
HXDLIN( 483)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translatePosition,return )

Int SystemImpl_obj::translateDisplay(::hx::EnumBase value){
            	HX_STACK_FRAME("kha.SystemImpl","translateDisplay",0x41da7309,"kha.SystemImpl.translateDisplay","kha/SystemImpl.hx",489,0x57d4ce24)
            	HX_STACK_ARG(value,"value")
HXLINE( 490)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 490)		if (_hx_tmp) {
HXLINE( 491)			return (int)-1;
            		}
HXLINE( 494)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 494)		switch((int)(_hx_tmp1)){
            			case (int)0: {
HXLINE( 494)				return (int)-1;
            			}
            			break;
            			case (int)1: {
HXLINE( 494)				return value->_hx_getInt(0);
            			}
            			break;
            		}
HXDLIN( 494)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateDisplay,return )

Int SystemImpl_obj::translateWindowMode(::hx::EnumBase value){
            	HX_STACK_FRAME("kha.SystemImpl","translateWindowMode",0xe18d790c,"kha.SystemImpl.translateWindowMode","kha/SystemImpl.hx",500,0x57d4ce24)
            	HX_STACK_ARG(value,"value")
HXLINE( 501)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 501)		if (_hx_tmp) {
HXLINE( 502)			return (int)0;
            		}
HXLINE( 505)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 505)		switch((int)(_hx_tmp1)){
            			case (int)0: {
HXLINE( 505)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 505)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 505)				return (int)2;
            			}
            			break;
            		}
HXDLIN( 505)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateWindowMode,return )

Int SystemImpl_obj::translateDepthBufferFormat( ::Dynamic value){
            	HX_STACK_FRAME("kha.SystemImpl","translateDepthBufferFormat",0x58265d81,"kha.SystemImpl.translateDepthBufferFormat","kha/SystemImpl.hx",512,0x57d4ce24)
            	HX_STACK_ARG(value,"value")
HXLINE( 513)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 513)		if (_hx_tmp) {
HXLINE( 514)			return (int)16;
            		}
HXLINE( 517)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 517)			return (int)-1;
HXDLIN( 517)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 517)			return (int)16;
HXDLIN( 517)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 517)			return (int)16;
HXDLIN( 517)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 517)			return (int)24;
HXDLIN( 517)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 517)			return (int)32;
HXDLIN( 517)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
HXDLIN( 517)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateDepthBufferFormat,return )

Int SystemImpl_obj::translateStencilBufferFormat( ::Dynamic value){
            	HX_STACK_FRAME("kha.SystemImpl","translateStencilBufferFormat",0x039a6bba,"kha.SystemImpl.translateStencilBufferFormat","kha/SystemImpl.hx",526,0x57d4ce24)
            	HX_STACK_ARG(value,"value")
HXLINE( 527)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 527)		if (_hx_tmp) {
HXLINE( 528)			return (int)-1;
            		}
HXLINE( 531)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 531)			return (int)-1;
HXDLIN( 531)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 531)			return (int)-1;
HXDLIN( 531)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 531)			return (int)8;
HXDLIN( 531)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 531)			return (int)8;
HXDLIN( 531)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 531)			return (int)8;
HXDLIN( 531)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
HXDLIN( 531)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateStencilBufferFormat,return )

Int SystemImpl_obj::translateTextureFormat(::hx::EnumBase value){
            	HX_STACK_FRAME("kha.SystemImpl","translateTextureFormat",0xbfcbfa79,"kha.SystemImpl.translateTextureFormat","kha/SystemImpl.hx",540,0x57d4ce24)
            	HX_STACK_ARG(value,"value")
HXLINE( 541)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 541)		if (_hx_tmp) {
HXLINE( 542)			return (int)0;
            		}
HXLINE( 545)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 545)		switch((int)(_hx_tmp1)){
            			case (int)0: {
HXLINE( 545)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 545)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 545)				return (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 545)				return (int)3;
            			}
            			break;
            			case (int)4: {
HXLINE( 545)				return (int)4;
            			}
            			break;
            			case (int)5: {
HXLINE( 545)				return (int)5;
            			}
            			break;
            			case (int)6: {
HXLINE( 545)				return (int)6;
            			}
            			break;
            		}
HXDLIN( 545)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateTextureFormat,return )

void SystemImpl_obj::initWindow( ::kha::WindowOptions options, ::Dynamic callback){
            	HX_STACK_FRAME("kha.SystemImpl","initWindow",0x4b5f4bd5,"kha.SystemImpl.initWindow","kha/SystemImpl.hx",556,0x57d4ce24)
            	HX_STACK_ARG(options,"options")
            	HX_STACK_ARG(callback,"callback")
HXLINE( 558)		HX_VARI( Int,x) = ::kha::SystemImpl_obj::translatePosition(options->x);
HXLINE( 559)		HX_VARI( Int,y) = ::kha::SystemImpl_obj::translatePosition(options->y);
HXLINE( 560)		::hx::EnumBase _hx_tmp;
HXDLIN( 560)		Bool _hx_tmp1 = hx::IsNotNull( options->mode );
HXDLIN( 560)		if (_hx_tmp1) {
HXLINE( 560)			_hx_tmp = options->mode;
            		}
            		else {
HXLINE( 560)			_hx_tmp = ::kha::Mode_obj::Window_dyn();
            		}
HXDLIN( 560)		HX_VARI( Int,mode) = ::kha::SystemImpl_obj::translateWindowMode(_hx_tmp);
HXLINE( 561)		::hx::EnumBase _hx_tmp2;
HXDLIN( 561)		Bool _hx_tmp3 = hx::IsNotNull( options->targetDisplay );
HXDLIN( 561)		if (_hx_tmp3) {
HXLINE( 561)			_hx_tmp2 = options->targetDisplay;
            		}
            		else {
HXLINE( 561)			_hx_tmp2 = ::kha::TargetDisplay_obj::Primary_dyn();
            		}
HXDLIN( 561)		HX_VARI( Int,targetDisplay) = ::kha::SystemImpl_obj::translateDisplay(_hx_tmp2);
HXLINE( 562)		 ::Dynamic _hx_tmp4;
HXDLIN( 562)		Bool _hx_tmp5 = hx::IsNotNull( options->rendererOptions );
HXDLIN( 562)		if (_hx_tmp5) {
HXLINE( 562)			_hx_tmp4 = options->rendererOptions->depthStencilFormat;
            		}
            		else {
HXLINE( 562)			_hx_tmp4 = (int)1;
            		}
HXDLIN( 562)		HX_VARI( Int,depthBufferBits) = ::kha::SystemImpl_obj::translateDepthBufferFormat(_hx_tmp4);
HXLINE( 563)		 ::Dynamic _hx_tmp6;
HXDLIN( 563)		Bool _hx_tmp7 = hx::IsNotNull( options->rendererOptions );
HXDLIN( 563)		if (_hx_tmp7) {
HXLINE( 563)			_hx_tmp6 = options->rendererOptions->depthStencilFormat;
            		}
            		else {
HXLINE( 563)			_hx_tmp6 = (int)1;
            		}
HXDLIN( 563)		HX_VARI( Int,stencilBufferBits) = ::kha::SystemImpl_obj::translateStencilBufferFormat(_hx_tmp6);
HXLINE( 564)		::hx::EnumBase _hx_tmp8;
HXDLIN( 564)		Bool _hx_tmp9 = hx::IsNotNull( options->rendererOptions );
HXDLIN( 564)		if (_hx_tmp9) {
HXLINE( 564)			_hx_tmp8 = options->rendererOptions->textureFormat;
            		}
            		else {
HXLINE( 564)			_hx_tmp8 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
HXDLIN( 564)		HX_VARI( Int,textureFormat) = ::kha::SystemImpl_obj::translateTextureFormat(_hx_tmp8);
HXLINE( 565)		HX_VARI( Int,windowId) = (int)-1;
HXLINE( 566)		HX_VARI( ::String,title) = options->title;
HXLINE( 567)		HX_VARI( Int,width) = options->width;
HXLINE( 568)		HX_VARI( Int,height) = options->height;
HXLINE( 569)		HX_VAR( Bool,resizable);
HXDLIN( 569)		Bool _hx_tmp10 = hx::IsNotNull( options->windowedModeOptions );
HXDLIN( 569)		if (_hx_tmp10) {
HXLINE( 569)			resizable = options->windowedModeOptions->resizable;
            		}
            		else {
HXLINE( 569)			resizable = false;
            		}
HXLINE( 570)		HX_VAR( Bool,maximizable);
HXDLIN( 570)		Bool _hx_tmp11 = hx::IsNotNull( options->windowedModeOptions );
HXDLIN( 570)		if (_hx_tmp11) {
HXLINE( 570)			maximizable = options->windowedModeOptions->maximizable;
            		}
            		else {
HXLINE( 570)			maximizable = false;
            		}
HXLINE( 571)		HX_VAR( Bool,minimizable);
HXDLIN( 571)		Bool _hx_tmp12 = hx::IsNotNull( options->windowedModeOptions );
HXDLIN( 571)		if (_hx_tmp12) {
HXLINE( 571)			minimizable = options->windowedModeOptions->minimizable;
            		}
            		else {
HXLINE( 571)			minimizable = true;
            		}
HXLINE( 573)		
			Kore::WindowOptions wo;
			wo.title = title;
			wo.x = x;
			wo.y = y;
			wo.width = width;
			wo.height = height;
			//wo.mode = mode;
			wo.targetDisplay = targetDisplay;
			wo.rendererOptions.textureFormat = textureFormat;
			wo.rendererOptions.depthBufferBits = depthBufferBits;
			wo.rendererOptions.stencilBufferBits = stencilBufferBits;

			wo.resizable = resizable;
			wo.maximizable = maximizable;
			wo.minimizable = minimizable;

			switch (mode) {
				default: // fall through
				case 0: wo.mode = Kore::WindowModeWindow; break;
				case 1: wo.mode = Kore::WindowModeBorderless; break;
				case 2: wo.mode = Kore::WindowModeFullscreen; break;
			}

			windowId = init_window(wo);
		;
HXLINE( 607)		Bool _hx_tmp13 = hx::IsNotNull( callback );
HXDLIN( 607)		if (_hx_tmp13) {
HXLINE( 608)			callback(windowId);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,initWindow,(void))

::Array< ::Dynamic> SystemImpl_obj::fullscreenListeners;

Int SystemImpl_obj::previousWidth;

Int SystemImpl_obj::previousHeight;

Bool SystemImpl_obj::canSwitchFullscreen(){
            	HX_STACK_FRAME("kha.SystemImpl","canSwitchFullscreen",0x7beb562a,"kha.SystemImpl.canSwitchFullscreen","kha/SystemImpl.hx",617,0x57d4ce24)
HXLINE( 617)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,canSwitchFullscreen,return )

Bool SystemImpl_obj::isFullscreen(){
            	HX_STACK_FRAME("kha.SystemImpl","isFullscreen",0x03f916ba,"kha.SystemImpl.isFullscreen","kha/SystemImpl.hx",621,0x57d4ce24)
HXLINE( 621)		return Kore::System::isFullscreen();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,isFullscreen,return )

void SystemImpl_obj::requestFullscreen(){
            	HX_STACK_FRAME("kha.SystemImpl","requestFullscreen",0xfebaca55,"kha.SystemImpl.requestFullscreen","kha/SystemImpl.hx",625,0x57d4ce24)
HXLINE( 625)		Bool _hx_tmp = !(::kha::SystemImpl_obj::isFullscreen());
HXDLIN( 625)		if (_hx_tmp) {
HXLINE( 626)			::kha::SystemImpl_obj::previousWidth = Kore::System::windowWidth(0);
HXLINE( 627)			::kha::SystemImpl_obj::previousHeight = Kore::System::windowHeight(0);
HXLINE( 628)			Kore::System::changeResolution(Kore::System::desktopWidth(), Kore::System::desktopHeight(), true);
HXLINE( 629)			{
HXLINE( 629)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 629)				HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::SystemImpl_obj::fullscreenListeners;
HXDLIN( 629)				while((_g < _g1->length)){
HXLINE( 629)					HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 629)					++_g;
HXLINE( 630)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,requestFullscreen,(void))

void SystemImpl_obj::exitFullscreen(){
            	HX_STACK_FRAME("kha.SystemImpl","exitFullscreen",0xa140e22e,"kha.SystemImpl.exitFullscreen","kha/SystemImpl.hx",637,0x57d4ce24)
HXLINE( 637)		Bool _hx_tmp = ::kha::SystemImpl_obj::isFullscreen();
HXDLIN( 637)		if (_hx_tmp) {
HXLINE( 638)			Bool _hx_tmp1;
HXDLIN( 638)			if ((::kha::SystemImpl_obj::previousWidth != (int)0)) {
HXLINE( 638)				_hx_tmp1 = (::kha::SystemImpl_obj::previousHeight == (int)0);
            			}
            			else {
HXLINE( 638)				_hx_tmp1 = true;
            			}
HXDLIN( 638)			if (_hx_tmp1) {
HXLINE( 639)				::kha::SystemImpl_obj::previousWidth = Kore::System::windowWidth(0);
HXLINE( 640)				::kha::SystemImpl_obj::previousHeight = Kore::System::windowHeight(0);
            			}
HXLINE( 642)			Kore::System::changeResolution(previousWidth, previousHeight, false);
HXLINE( 643)			{
HXLINE( 643)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 643)				HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::SystemImpl_obj::fullscreenListeners;
HXDLIN( 643)				while((_g < _g1->length)){
HXLINE( 643)					HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 643)					++_g;
HXLINE( 644)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,exitFullscreen,(void))

void SystemImpl_obj::changeResolution(Int width,Int height){
            	HX_STACK_FRAME("kha.SystemImpl","changeResolution",0x73a24931,"kha.SystemImpl.changeResolution","kha/SystemImpl.hx",662,0x57d4ce24)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,changeResolution,(void))

void SystemImpl_obj::setKeepScreenOn(Bool on){
            	HX_STACK_FRAME("kha.SystemImpl","setKeepScreenOn",0xd7fb933d,"kha.SystemImpl.setKeepScreenOn","kha/SystemImpl.hx",667,0x57d4ce24)
            	HX_STACK_ARG(on,"on")
HXLINE( 667)		Kore::System::setKeepScreenOn(on);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,setKeepScreenOn,(void))


SystemImpl_obj::SystemImpl_obj()
{
}

hx::Val SystemImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 24:
		if (HX_FIELD_EQ(inName,"notifyOfFullscreenChange") ) { return hx::Val( notifyOfFullscreenChange_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"removeFromFullscreenChange") ) { return hx::Val( removeFromFullscreenChange_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool SystemImpl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { outValue = mouse; return true; }
		if (HX_FIELD_EQ(inName,"frame") ) { outValue = frame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pause") ) { outValue = pause_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"initEx") ) { outValue = initEx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushUp") ) { outValue = pushUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseX") ) { outValue = mouseX; return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { outValue = mouseY; return true; }
		if (HX_FIELD_EQ(inName,"resume") ) { outValue = resume_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"needs3d") ) { outValue = needs3d; return true; }
		if (HX_FIELD_EQ(inName,"getTime") ) { outValue = getTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"surface") ) { outValue = surface; return true; }
		if (HX_FIELD_EQ(inName,"pushTab") ) { outValue = pushTab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushAlt") ) { outValue = pushAlt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseUp") ) { outValue = mouseUp_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getMouse") ) { outValue = getMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVsync") ) { outValue = getVsync_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyboard") ) { outValue = keyboard; return true; }
		if (HX_FIELD_EQ(inName,"gamepad1") ) { outValue = gamepad1; return true; }
		if (HX_FIELD_EQ(inName,"gamepad2") ) { outValue = gamepad2; return true; }
		if (HX_FIELD_EQ(inName,"gamepad3") ) { outValue = gamepad3; return true; }
		if (HX_FIELD_EQ(inName,"gamepad4") ) { outValue = gamepad4; return true; }
		if (HX_FIELD_EQ(inName,"postInit") ) { outValue = postInit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushDown") ) { outValue = pushDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushLeft") ) { outValue = pushLeft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushChar") ) { outValue = pushChar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushBack") ) { outValue = pushBack_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchEnd") ) { outValue = touchEnd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = shutdown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initKore") ) { outValue = initKore_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"screenDpi") ) { outValue = screenDpi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lockMouse") ) { outValue = lockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushRight") ) { outValue = pushRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseUp") ) { outValue = releaseUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushShift") ) { outValue = pushShift_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushEnter") ) { outValue = pushEnter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { outValue = mouseDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseMove") ) { outValue = mouseMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchMove") ) { outValue = touchMove_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"releaseTab") ) { outValue = releaseTab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseAlt") ) { outValue = releaseAlt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushEscape") ) { outValue = pushEscape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushDelete") ) { outValue = pushDelete_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { outValue = mouseWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchStart") ) { outValue = touchStart_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foreground") ) { outValue = foreground_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"background") ) { outValue = background_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initWindow") ) { outValue = initWindow_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getKeyboard") ) { outValue = getKeyboard_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"windowWidth") ) { outValue = windowWidth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSystemId") ) { outValue = getSystemId_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unlockMouse") ) { outValue = unlockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseDown") ) { outValue = releaseDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseLeft") ) { outValue = releaseLeft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseChar") ) { outValue = releaseChar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushControl") ) { outValue = pushControl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseBack") ) { outValue = releaseBack_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"windowHeight") ) { outValue = windowHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"framebuffers") ) { outValue = framebuffers; return true; }
		if (HX_FIELD_EQ(inName,"loadFinished") ) { outValue = loadFinished_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"canLockMouse") ) { outValue = canLockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseRight") ) { outValue = releaseRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseShift") ) { outValue = releaseShift_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseEnter") ) { outValue = releaseEnter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1Axis") ) { outValue = gamepad1Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2Axis") ) { outValue = gamepad2Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3Axis") ) { outValue = gamepad3Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4Axis") ) { outValue = gamepad4Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isFullscreen") ) { outValue = isFullscreen_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isMouseLocked") ) { outValue = isMouseLocked_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pushBackspace") ) { outValue = pushBackspace_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseEscape") ) { outValue = releaseEscape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseDelete") ) { outValue = releaseDelete_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"previousWidth") ) { outValue = previousWidth; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getRefreshRate") ) { outValue = getRefreshRate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"releaseControl") ) { outValue = releaseControl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1Button") ) { outValue = gamepad1Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2Button") ) { outValue = gamepad2Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3Button") ) { outValue = gamepad3Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4Button") ) { outValue = gamepad4Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"previousHeight") ) { outValue = previousHeight; return true; }
		if (HX_FIELD_EQ(inName,"exitFullscreen") ) { outValue = exitFullscreen_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"requestShutdown") ) { outValue = requestShutdown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setKeepScreenOn") ) { outValue = setKeepScreenOn_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"releaseBackspace") ) { outValue = releaseBackspace_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"translateDisplay") ) { outValue = translateDisplay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"changeResolution") ) { outValue = changeResolution_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getScreenRotation") ) { outValue = getScreenRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"translatePosition") ) { outValue = translatePosition_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"requestFullscreen") ) { outValue = requestFullscreen_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseLockListeners") ) { outValue = mouseLockListeners; return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"translateWindowMode") ) { outValue = translateWindowMode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fullscreenListeners") ) { outValue = fullscreenListeners; return true; }
		if (HX_FIELD_EQ(inName,"canSwitchFullscreen") ) { outValue = canSwitchFullscreen_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"translateTextureFormat") ) { outValue = translateTextureFormat_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"notifyOfMouseLockChange") ) { outValue = notifyOfMouseLockChange_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"removeFromMouseLockChange") ) { outValue = removeFromMouseLockChange_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"translateDepthBufferFormat") ) { outValue = translateDepthBufferFormat_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"translateStencilBufferFormat") ) { outValue = translateStencilBufferFormat_dyn(); return true; }
	}
	return false;
}

bool SystemImpl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=ioValue.Cast<  ::kha::input::Mouse >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mouseX") ) { mouseX=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { mouseY=ioValue.Cast< Int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"needs3d") ) { needs3d=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"surface") ) { surface=ioValue.Cast<  ::kha::input::Surface >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=ioValue.Cast<  ::kha::input::Keyboard >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1") ) { gamepad1=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2") ) { gamepad2=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3") ) { gamepad3=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4") ) { gamepad4=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"framebuffers") ) { framebuffers=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"previousWidth") ) { previousWidth=ioValue.Cast< Int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"previousHeight") ) { previousHeight=ioValue.Cast< Int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseLockListeners") ) { mouseLockListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"fullscreenListeners") ) { fullscreenListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SystemImpl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo SystemImpl_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &SystemImpl_obj::needs3d,HX_HCSTRING("needs3d","\x6e","\xd5","\x2d","\xaa")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &SystemImpl_obj::framebuffers,HX_HCSTRING("framebuffers","\xe6","\x3a","\xca","\x84")},
	{hx::fsObject /*::kha::input::Keyboard*/ ,(void *) &SystemImpl_obj::keyboard,HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68")},
	{hx::fsObject /*::kha::input::Mouse*/ ,(void *) &SystemImpl_obj::mouse,HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad1,HX_HCSTRING("gamepad1","\x70","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad2,HX_HCSTRING("gamepad2","\x71","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad3,HX_HCSTRING("gamepad3","\x72","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad4,HX_HCSTRING("gamepad4","\x73","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Surface*/ ,(void *) &SystemImpl_obj::surface,HX_HCSTRING("surface","\x2d","\x66","\x49","\x5d")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &SystemImpl_obj::mouseLockListeners,HX_HCSTRING("mouseLockListeners","\xaf","\xda","\x5c","\x62")},
	{hx::fsInt,(void *) &SystemImpl_obj::mouseX,HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc")},
	{hx::fsInt,(void *) &SystemImpl_obj::mouseY,HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &SystemImpl_obj::fullscreenListeners,HX_HCSTRING("fullscreenListeners","\xc4","\x6b","\x7f","\xf5")},
	{hx::fsInt,(void *) &SystemImpl_obj::previousWidth,HX_HCSTRING("previousWidth","\x4f","\xc2","\x56","\xf1")},
	{hx::fsInt,(void *) &SystemImpl_obj::previousHeight,HX_HCSTRING("previousHeight","\x7e","\xbb","\xe2","\xf0")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SystemImpl_obj_sMemberFields[] = {
	HX_HCSTRING("notifyOfFullscreenChange","\x6b","\x9e","\x48","\xa5"),
	HX_HCSTRING("removeFromFullscreenChange","\xf9","\xd5","\x12","\xc8"),
	::String(null()) };

static void SystemImpl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SystemImpl_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::needs3d,"needs3d");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::framebuffers,"framebuffers");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouse,"mouse");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad1,"gamepad1");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad2,"gamepad2");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad3,"gamepad3");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad4,"gamepad4");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::surface,"surface");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseLockListeners,"mouseLockListeners");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseX,"mouseX");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseY,"mouseY");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::fullscreenListeners,"fullscreenListeners");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::previousWidth,"previousWidth");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::previousHeight,"previousHeight");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SystemImpl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::needs3d,"needs3d");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::framebuffers,"framebuffers");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouse,"mouse");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad1,"gamepad1");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad2,"gamepad2");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad3,"gamepad3");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad4,"gamepad4");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::surface,"surface");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseLockListeners,"mouseLockListeners");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseX,"mouseX");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseY,"mouseY");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::fullscreenListeners,"fullscreenListeners");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::previousWidth,"previousWidth");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::previousHeight,"previousHeight");
};

#endif

hx::Class SystemImpl_obj::__mClass;

static ::String SystemImpl_obj_sStaticFields[] = {
	HX_HCSTRING("needs3d","\x6e","\xd5","\x2d","\xaa"),
	HX_HCSTRING("getMouse","\xaf","\x25","\x3c","\x6c"),
	HX_HCSTRING("getKeyboard","\x5d","\x7f","\x1d","\x8e"),
	HX_HCSTRING("getTime","\xc3","\x7b","\x7f","\x1f"),
	HX_HCSTRING("windowWidth","\xf6","\x4b","\x35","\xbb"),
	HX_HCSTRING("windowHeight","\xf7","\xa3","\xbc","\xc9"),
	HX_HCSTRING("screenDpi","\x51","\xab","\xf0","\x37"),
	HX_HCSTRING("getVsync","\x5b","\x3d","\x7f","\x9d"),
	HX_HCSTRING("getRefreshRate","\x65","\x35","\xde","\xc7"),
	HX_HCSTRING("getScreenRotation","\x00","\x30","\x14","\x62"),
	HX_HCSTRING("getSystemId","\x60","\x73","\xdd","\x87"),
	HX_HCSTRING("requestShutdown","\x05","\xff","\x38","\x10"),
	HX_HCSTRING("framebuffers","\xe6","\x3a","\xca","\x84"),
	HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("gamepad1","\x70","\xac","\x9e","\xcb"),
	HX_HCSTRING("gamepad2","\x71","\xac","\x9e","\xcb"),
	HX_HCSTRING("gamepad3","\x72","\xac","\x9e","\xcb"),
	HX_HCSTRING("gamepad4","\x73","\xac","\x9e","\xcb"),
	HX_HCSTRING("surface","\x2d","\x66","\x49","\x5d"),
	HX_HCSTRING("mouseLockListeners","\xaf","\xda","\x5c","\x62"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("initEx","\xa3","\x5b","\x4c","\x97"),
	HX_HCSTRING("postInit","\x90","\x9b","\xfa","\x03"),
	HX_HCSTRING("loadFinished","\xb8","\x7f","\x77","\x4e"),
	HX_HCSTRING("lockMouse","\x3a","\xd6","\x46","\x47"),
	HX_HCSTRING("unlockMouse","\xc1","\x5c","\xed","\xcc"),
	HX_HCSTRING("canLockMouse","\x0a","\x40","\x67","\xca"),
	HX_HCSTRING("isMouseLocked","\x45","\x89","\x73","\x58"),
	HX_HCSTRING("notifyOfMouseLockChange","\xe0","\xa9","\xee","\x22"),
	HX_HCSTRING("removeFromMouseLockChange","\x12","\x1e","\x2a","\x14"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("pushUp","\xd5","\x06","\x2d","\x72"),
	HX_HCSTRING("pushDown","\x5c","\x2b","\x5f","\x11"),
	HX_HCSTRING("pushLeft","\x01","\x3b","\xa1","\x16"),
	HX_HCSTRING("pushRight","\xa2","\x73","\x7f","\x2d"),
	HX_HCSTRING("releaseUp","\x02","\x10","\xb0","\x93"),
	HX_HCSTRING("releaseDown","\xc9","\x99","\x98","\xe0"),
	HX_HCSTRING("releaseLeft","\x6e","\xa9","\xda","\xe5"),
	HX_HCSTRING("releaseRight","\x95","\xa4","\x86","\xb0"),
	HX_HCSTRING("pushChar","\xd0","\x91","\xb0","\x10"),
	HX_HCSTRING("releaseChar","\x3d","\x00","\xea","\xdf"),
	HX_HCSTRING("pushShift","\x48","\x54","\x3e","\xc0"),
	HX_HCSTRING("releaseShift","\x3b","\x85","\x45","\x43"),
	HX_HCSTRING("pushBackspace","\x05","\x48","\x9c","\xff"),
	HX_HCSTRING("releaseBackspace","\x78","\x6e","\x5a","\x38"),
	HX_HCSTRING("pushTab","\x9b","\x24","\x38","\x75"),
	HX_HCSTRING("releaseTab","\xce","\x22","\x5d","\xa6"),
	HX_HCSTRING("pushEnter","\xde","\xd4","\xa1","\xb4"),
	HX_HCSTRING("releaseEnter","\xd1","\x05","\xa9","\x37"),
	HX_HCSTRING("pushControl","\xa3","\xd0","\x1a","\x29"),
	HX_HCSTRING("releaseControl","\x56","\x64","\x06","\xe1"),
	HX_HCSTRING("pushAlt","\x6f","\xc3","\x29","\x75"),
	HX_HCSTRING("releaseAlt","\xa2","\xc1","\x4e","\xa6"),
	HX_HCSTRING("pushEscape","\xfb","\xa8","\xb9","\x2e"),
	HX_HCSTRING("releaseEscape","\xa8","\x4c","\xfd","\x51"),
	HX_HCSTRING("pushDelete","\xa5","\x25","\xb8","\xbe"),
	HX_HCSTRING("releaseDelete","\x52","\xc9","\xfb","\xe1"),
	HX_HCSTRING("pushBack","\x21","\x0d","\x02","\x10"),
	HX_HCSTRING("releaseBack","\x8e","\x7b","\x3b","\xdf"),
	HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"),
	HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"),
	HX_HCSTRING("mouseDown","\x27","\xb1","\xc2","\xee"),
	HX_HCSTRING("mouseUp","\xe0","\xf3","\x72","\xc0"),
	HX_HCSTRING("mouseMove","\xd6","\x9b","\xb5","\xf4"),
	HX_HCSTRING("mouseWheel","\x36","\x28","\x87","\xe7"),
	HX_HCSTRING("gamepad1Axis","\x31","\xed","\x97","\x86"),
	HX_HCSTRING("gamepad1Button","\x82","\x76","\xc0","\x01"),
	HX_HCSTRING("gamepad2Axis","\xb2","\x81","\xfe","\x19"),
	HX_HCSTRING("gamepad2Button","\x43","\xed","\x55","\x2b"),
	HX_HCSTRING("gamepad3Axis","\x33","\x16","\x65","\xad"),
	HX_HCSTRING("gamepad3Button","\x04","\x64","\xeb","\x54"),
	HX_HCSTRING("gamepad4Axis","\xb4","\xaa","\xcb","\x40"),
	HX_HCSTRING("gamepad4Button","\xc5","\xda","\x80","\x7e"),
	HX_HCSTRING("touchStart","\x23","\x58","\x9c","\x7d"),
	HX_HCSTRING("touchEnd","\x5c","\xc5","\x09","\x00"),
	HX_HCSTRING("touchMove","\x70","\x72","\xcd","\x0d"),
	HX_HCSTRING("foreground","\xc3","\x18","\xef","\x10"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("shutdown","\x96","\xfc","\x0b","\x6b"),
	HX_HCSTRING("initKore","\x87","\xa1","\xc5","\x4b"),
	HX_HCSTRING("translatePosition","\x17","\x32","\xe9","\x09"),
	HX_HCSTRING("translateDisplay","\x94","\x20","\x33","\xc8"),
	HX_HCSTRING("translateWindowMode","\x61","\x94","\xff","\x97"),
	HX_HCSTRING("translateDepthBufferFormat","\xcc","\x86","\xbd","\x83"),
	HX_HCSTRING("translateStencilBufferFormat","\xc5","\xbd","\x46","\xa2"),
	HX_HCSTRING("translateTextureFormat","\x44","\xe2","\x8b","\x2d"),
	HX_HCSTRING("initWindow","\x20","\xef","\xd1","\x56"),
	HX_HCSTRING("fullscreenListeners","\xc4","\x6b","\x7f","\xf5"),
	HX_HCSTRING("previousWidth","\x4f","\xc2","\x56","\xf1"),
	HX_HCSTRING("previousHeight","\x7e","\xbb","\xe2","\xf0"),
	HX_HCSTRING("canSwitchFullscreen","\x7f","\x71","\x5d","\x32"),
	HX_HCSTRING("isFullscreen","\xc5","\x62","\xd3","\xcb"),
	HX_HCSTRING("requestFullscreen","\x6a","\xf6","\xf9","\x05"),
	HX_HCSTRING("exitFullscreen","\xf9","\x86","\x4e","\xcd"),
	HX_HCSTRING("changeResolution","\xbc","\xf6","\xfa","\xf9"),
	HX_HCSTRING("setKeepScreenOn","\x12","\x20","\xde","\x37"),
	::String(null())
};

void SystemImpl_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.SystemImpl","\x99","\x8d","\x13","\xb1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SystemImpl_obj::__GetStatic;
	__mClass->mSetStaticField = &SystemImpl_obj::__SetStatic;
	__mClass->mMarkFunc = SystemImpl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SystemImpl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SystemImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SystemImpl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SystemImpl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SystemImpl_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",44,0x57d4ce24)
HXLINE(  44)		needs3d = false;
            	}
{
            	HX_STACK_FRAME("kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",96,0x57d4ce24)
HXLINE(  96)		framebuffers = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",612,0x57d4ce24)
HXLINE( 612)		fullscreenListeners = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACK_FRAME("kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",613,0x57d4ce24)
HXLINE( 613)		previousWidth = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",614,0x57d4ce24)
HXLINE( 614)		previousHeight = (int)0;
            	}
}

} // end namespace kha
