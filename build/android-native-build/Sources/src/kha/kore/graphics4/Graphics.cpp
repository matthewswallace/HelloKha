// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Video
#include <kha/Video.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_CompareMode
#include <kha/graphics4/CompareMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_CubeMap
#include <kha/graphics4/CubeMap.h>
#endif
#ifndef INCLUDED_kha_graphics4_CullMode
#include <kha/graphics4/CullMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_MipMapFilter
#include <kha/graphics4/MipMapFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_StencilAction
#include <kha/graphics4/StencilAction.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureAddressing
#include <kha/graphics4/TextureAddressing.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFilter
#include <kha/graphics4/TextureFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_ConstantLocation
#include <kha/kore/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics
#include <kha/kore/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_TextureUnit
#include <kha/kore/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector2
#include <kha/math/FastVector2.h>
#endif
#ifndef INCLUDED_kha_math_FastVector3
#include <kha/math/FastVector3.h>
#endif
#ifndef INCLUDED_kha_math_FastVector4
#include <kha/math/FastVector4.h>
#endif


Kore::ZCompareMode convertCompareMode(int mode) {
	switch (mode) {
	case 0:
		return Kore::ZCompareAlways;
	case 1:
		return Kore::ZCompareNever;
	case 2:
		return Kore::ZCompareEqual;
	case 3:
		return Kore::ZCompareNotEqual;
	case 4:
		return Kore::ZCompareLess;
	case 5:
		return Kore::ZCompareLessEqual;
	case 6:
		return Kore::ZCompareGreater;
	case 7:
	default:
		return Kore::ZCompareGreaterEqual;
	}
}

Kore::StencilAction convertStencilAction(int action) {
	switch (action) {
	case 0:
		return Kore::Keep;
	case 1:
		return Kore::Zero;
	case 2:
		return Kore::Replace;
	case 3:
		return Kore::Increment;
	case 4:
		return Kore::IncrementWrap;
	case 5:
		return Kore::Decrement;
	case 6:
		return Kore::DecrementWrap;
	case 7:
	default:
		return Kore::Invert;	
	}
}

namespace kha{
namespace kore{
namespace graphics4{

void Graphics_obj::__construct( ::kha::Image target){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","new",0x244105cf,"kha.kore.graphics4.Graphics.new","kha/kore/graphics4/Graphics.hx",88,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
HXLINE(  88)		this->target = target;
            	}

Dynamic Graphics_obj::__CreateEmpty() { return new Graphics_obj; }

hx::ObjectPtr< Graphics_obj > Graphics_obj::__new( ::kha::Image target)
{
	hx::ObjectPtr< Graphics_obj > _hx_result = new Graphics_obj();
	_hx_result->__construct(target);
	return _hx_result;
}

Dynamic Graphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics_obj > _hx_result = new Graphics_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::kha::graphics4::Graphics_obj _hx_kha_kore_graphics4_Graphics__hx_kha_graphics4_Graphics= {
	( void (hx::Object::*)(::Array< ::Dynamic>))&::kha::kore::graphics4::Graphics_obj::begin,
	( void (hx::Object::*)())&::kha::kore::graphics4::Graphics_obj::end,
	( Bool (hx::Object::*)())&::kha::kore::graphics4::Graphics_obj::vsynced,
	( Int (hx::Object::*)())&::kha::kore::graphics4::Graphics_obj::refreshRate,
	( void (hx::Object::*)( ::Dynamic, ::Dynamic, ::Dynamic))&::kha::kore::graphics4::Graphics_obj::clear,
	( void (hx::Object::*)(Int,Int,Int,Int))&::kha::kore::graphics4::Graphics_obj::viewport,
	( void (hx::Object::*)(Int,Int,Int,Int))&::kha::kore::graphics4::Graphics_obj::scissor,
	( void (hx::Object::*)())&::kha::kore::graphics4::Graphics_obj::disableScissor,
	( void (hx::Object::*)( ::kha::graphics4::VertexBuffer))&::kha::kore::graphics4::Graphics_obj::setVertexBuffer,
	( void (hx::Object::*)(::Array< ::Dynamic>))&::kha::kore::graphics4::Graphics_obj::setVertexBuffers,
	( void (hx::Object::*)( ::kha::graphics4::IndexBuffer))&::kha::kore::graphics4::Graphics_obj::setIndexBuffer,
	( void (hx::Object::*)(::Dynamic, ::kha::Image))&::kha::kore::graphics4::Graphics_obj::setTexture,
	( void (hx::Object::*)(::Dynamic, ::kha::Image))&::kha::kore::graphics4::Graphics_obj::setTextureDepth,
	( void (hx::Object::*)(::Dynamic, ::kha::Video))&::kha::kore::graphics4::Graphics_obj::setVideoTexture,
	( void (hx::Object::*)(::Dynamic,::hx::EnumBase,::hx::EnumBase,::hx::EnumBase,::hx::EnumBase,::hx::EnumBase))&::kha::kore::graphics4::Graphics_obj::setTextureParameters,
	( ::Dynamic (hx::Object::*)(Int,::hx::EnumBase,::hx::EnumBase,hx::Null< Bool > ))&::kha::kore::graphics4::Graphics_obj::createCubeMap,
	( Bool (hx::Object::*)())&::kha::kore::graphics4::Graphics_obj::renderTargetsInvertedY,
	( Bool (hx::Object::*)())&::kha::kore::graphics4::Graphics_obj::instancedRenderingAvailable,
	( void (hx::Object::*)( ::kha::graphics4::PipelineState))&::kha::kore::graphics4::Graphics_obj::setPipeline,
	( void (hx::Object::*)(::Dynamic,Bool))&::kha::kore::graphics4::Graphics_obj::setBool,
	( void (hx::Object::*)(::Dynamic,Int))&::kha::kore::graphics4::Graphics_obj::setInt,
	( void (hx::Object::*)(::Dynamic,float))&::kha::kore::graphics4::Graphics_obj::setFloat,
	( void (hx::Object::*)(::Dynamic,float,float))&::kha::kore::graphics4::Graphics_obj::setFloat2,
	( void (hx::Object::*)(::Dynamic,float,float,float))&::kha::kore::graphics4::Graphics_obj::setFloat3,
	( void (hx::Object::*)(::Dynamic,float,float,float,float))&::kha::kore::graphics4::Graphics_obj::setFloat4,
	( void (hx::Object::*)(::Dynamic,::Array< float >))&::kha::kore::graphics4::Graphics_obj::setFloats,
	( void (hx::Object::*)(::Dynamic, ::kha::math::FastVector2))&::kha::kore::graphics4::Graphics_obj::setVector2,
	( void (hx::Object::*)(::Dynamic, ::kha::math::FastVector3))&::kha::kore::graphics4::Graphics_obj::setVector3,
	( void (hx::Object::*)(::Dynamic, ::kha::math::FastVector4))&::kha::kore::graphics4::Graphics_obj::setVector4,
	( void (hx::Object::*)(::Dynamic, ::kha::math::FastMatrix4))&::kha::kore::graphics4::Graphics_obj::setMatrix,
	( void (hx::Object::*)(hx::Null< Int > ,hx::Null< Int > ))&::kha::kore::graphics4::Graphics_obj::drawIndexedVertices,
	( void (hx::Object::*)(Int,hx::Null< Int > ,hx::Null< Int > ))&::kha::kore::graphics4::Graphics_obj::drawIndexedVerticesInstanced,
	( void (hx::Object::*)())&::kha::kore::graphics4::Graphics_obj::flush,
};

void *Graphics_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xba2f5490: return &_hx_kha_kore_graphics4_Graphics__hx_kha_graphics4_Graphics;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Bool Graphics_obj::vsynced(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","vsynced",0x5f12755f,"kha.kore.graphics4.Graphics.vsynced","kha/kore/graphics4/Graphics.hx",95,0xdc695dc0)
            	HX_STACK_THIS(this)
            	
		return Kore::Graphics::vsynced();
	

HXLINE(  95)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,vsynced,return )

Int Graphics_obj::refreshRate(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","refreshRate",0x0a969eca,"kha.kore.graphics4.Graphics.refreshRate","kha/kore/graphics4/Graphics.hx",102,0xdc695dc0)
            	HX_STACK_THIS(this)
            	
		return (Int)Kore::Graphics::refreshRate();
	

HXLINE( 102)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,refreshRate,return )

void Graphics_obj::clear( ::Dynamic color, ::Dynamic z, ::Dynamic stencil){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","clear",0x2a1420bc,"kha.kore.graphics4.Graphics.clear","kha/kore/graphics4/Graphics.hx",105,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(stencil,"stencil")
HXLINE( 106)		HX_VARI( Int,flags) = (int)0;
HXLINE( 107)		Bool _hx_tmp = hx::IsNotNull( color );
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 107)			flags = (int)1;
            		}
HXLINE( 108)		Bool _hx_tmp1 = hx::IsNotNull( z );
HXDLIN( 108)		if (_hx_tmp1) {
HXLINE( 108)			hx::OrEq(flags,(int)2);
            		}
HXLINE( 109)		Bool _hx_tmp2 = hx::IsNotNull( stencil );
HXDLIN( 109)		if (_hx_tmp2) {
HXLINE( 109)			hx::OrEq(flags,(int)4);
            		}
HXLINE( 110)		Int _hx_tmp3;
HXDLIN( 110)		Bool _hx_tmp4 = hx::IsNull( color );
HXDLIN( 110)		if (_hx_tmp4) {
HXLINE( 110)			_hx_tmp3 = (int)0;
            		}
            		else {
HXLINE( 110)			_hx_tmp3 = color;
            		}
HXDLIN( 110)		this->clear2(flags,_hx_tmp3,z,stencil);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,clear,(void))

void Graphics_obj::viewport(Int x,Int y,Int width,Int height){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","viewport",0x69550497,"kha.kore.graphics4.Graphics.viewport","kha/kore/graphics4/Graphics.hx",116,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	
		Kore::Graphics::viewport(x,y,width,height);
	

            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,viewport,(void))

void Graphics_obj::setDepthMode2(Bool write,Int mode){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setDepthMode2",0x250e4bdd,"kha.kore.graphics4.Graphics.setDepthMode2","kha/kore/graphics4/Graphics.hx",157,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(write,"write")
            	HX_STACK_ARG(mode,"mode")
            	
		switch (mode) {
		case 0:
			write ? Kore::Graphics::setRenderState(Kore::DepthTest, true) : Kore::Graphics::setRenderState(Kore::DepthTest, false);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareAlways);
			break;
		case 1:
			Kore::Graphics::setRenderState(Kore::DepthTest, true);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareNever);
			break;
		case 2:
			Kore::Graphics::setRenderState(Kore::DepthTest, true);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareEqual);
			break;
		case 3:
			Kore::Graphics::setRenderState(Kore::DepthTest, true);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareNotEqual);
			break;
		case 4:
			Kore::Graphics::setRenderState(Kore::DepthTest, true);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareLess);
			break;
		case 5:
			Kore::Graphics::setRenderState(Kore::DepthTest, true);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareLessEqual);
			break;
		case 6:
			Kore::Graphics::setRenderState(Kore::DepthTest, true);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareGreater);
			break;
		case 7:
			Kore::Graphics::setRenderState(Kore::DepthTest, true);
			Kore::Graphics::setRenderState(Kore::DepthTestCompare, Kore::ZCompareGreaterEqual);
			break;
		}
		Kore::Graphics::setRenderState(Kore::DepthWrite, write);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setDepthMode2,(void))

void Graphics_obj::setDepthMode(Bool write,::hx::EnumBase mode){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setDepthMode",0x04c212b5,"kha.kore.graphics4.Graphics.setDepthMode","kha/kore/graphics4/Graphics.hx",162,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(write,"write")
            	HX_STACK_ARG(mode,"mode")
HXLINE( 162)		Int _hx_tmp = ( ( ::hx::EnumBase)(mode) )->_hx_getIndex();
HXDLIN( 162)		this->setDepthMode2(write,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setDepthMode,(void))

Int Graphics_obj::getBlendingMode(::hx::EnumBase op){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","getBlendingMode",0xfbc6ced9,"kha.kore.graphics4.Graphics.getBlendingMode","kha/kore/graphics4/Graphics.hx",167,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(op,"op")
HXLINE( 167)		Int _hx_tmp = ( ( ::hx::EnumBase)(op) )->_hx_getIndex();
HXDLIN( 167)		switch((int)(_hx_tmp)){
            			case (int)0: case (int)1: {
HXLINE( 169)				return (int)0;
            			}
            			break;
            			case (int)2: {
HXLINE( 171)				return (int)1;
            			}
            			break;
            			case (int)3: {
HXLINE( 173)				return (int)2;
            			}
            			break;
            			case (int)4: {
HXLINE( 175)				return (int)3;
            			}
            			break;
            			case (int)5: {
HXLINE( 177)				return (int)4;
            			}
            			break;
            			case (int)6: {
HXLINE( 179)				return (int)5;
            			}
            			break;
            			case (int)7: {
HXLINE( 181)				return (int)6;
            			}
            			break;
            			case (int)8: {
HXLINE( 183)				return (int)7;
            			}
            			break;
            			case (int)9: {
HXLINE( 185)				return (int)8;
            			}
            			break;
            			case (int)10: {
HXLINE( 187)				return (int)9;
            			}
            			break;
            		}
HXLINE( 167)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,getBlendingMode,return )

void Graphics_obj::setBlendingModeNative(Int source,Int destination){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setBlendingModeNative",0x4441035c,"kha.kore.graphics4.Graphics.setBlendingModeNative","kha/kore/graphics4/Graphics.hx",202,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(destination,"destination")
            	
		if (source == 0 && destination == 1) {
			Kore::Graphics::setRenderState(Kore::BlendingState, false);
		}
		else {
			Kore::Graphics::setRenderState(Kore::BlendingState, true);
			Kore::Graphics::setBlendingMode((Kore::BlendingOperation)source, (Kore::BlendingOperation)destination);
		}
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setBlendingModeNative,(void))

void Graphics_obj::setBlendingMode(::hx::EnumBase source,::hx::EnumBase destination){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setBlendingMode",0xf7924be5,"kha.kore.graphics4.Graphics.setBlendingMode","kha/kore/graphics4/Graphics.hx",207,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(destination,"destination")
HXLINE( 207)		Int _hx_tmp = this->getBlendingMode(source);
HXDLIN( 207)		Int _hx_tmp1 = this->getBlendingMode(destination);
HXDLIN( 207)		this->setBlendingModeNative(_hx_tmp,_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setBlendingMode,(void))

void Graphics_obj::clear2(Int flags,Int color,Float z,Int stencil){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","clear2",0xa78883f6,"kha.kore.graphics4.Graphics.clear2","kha/kore/graphics4/Graphics.hx",213,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(flags,"flags")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(stencil,"stencil")
            	
		Kore::Graphics::clear(flags, color, z, stencil);
	

            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,clear2,(void))

void Graphics_obj::setVertexBuffer( ::kha::graphics4::VertexBuffer vertexBuffer){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVertexBuffer",0x7b3ea235,"kha.kore.graphics4.Graphics.setVertexBuffer","kha/kore/graphics4/Graphics.hx",222,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertexBuffer,"vertexBuffer")
            	Kore::Graphics::setVertexBuffer(*vertexBuffer->buffer);

            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,setVertexBuffer,(void))

void Graphics_obj::setVertexBuffersInternal( ::kha::graphics4::VertexBuffer vb0, ::kha::graphics4::VertexBuffer vb1, ::kha::graphics4::VertexBuffer vb2, ::kha::graphics4::VertexBuffer vb3,Int count){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVertexBuffersInternal",0xe0e23dfb,"kha.kore.graphics4.Graphics.setVertexBuffersInternal","kha/kore/graphics4/Graphics.hx",235,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vb0,"vb0")
            	HX_STACK_ARG(vb1,"vb1")
            	HX_STACK_ARG(vb2,"vb2")
            	HX_STACK_ARG(vb3,"vb3")
            	HX_STACK_ARG(count,"count")
            	
		Kore::VertexBuffer* vertexBuffers[4] = {
			vb0 == null() ? nullptr : vb0->buffer,
			vb1 == null() ? nullptr : vb1->buffer,
			vb2 == null() ? nullptr : vb2->buffer,
			vb3 == null() ? nullptr : vb3->buffer
		};
		Kore::Graphics::setVertexBuffers(vertexBuffers, count);
	

            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,setVertexBuffersInternal,(void))

void Graphics_obj::setVertexBuffers(::Array< ::Dynamic> vertexBuffers){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVertexBuffers",0x5b8f4c9e,"kha.kore.graphics4.Graphics.setVertexBuffers","kha/kore/graphics4/Graphics.hx",240,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertexBuffers,"vertexBuffers")
HXLINE( 241)		 ::kha::graphics4::VertexBuffer _hx_tmp;
HXDLIN( 241)		if ((vertexBuffers->length > (int)0)) {
HXLINE( 241)			_hx_tmp = vertexBuffers->__get((int)0).StaticCast<  ::kha::graphics4::VertexBuffer >();
            		}
            		else {
HXLINE( 241)			_hx_tmp = null();
            		}
HXLINE( 242)		 ::kha::graphics4::VertexBuffer _hx_tmp1;
HXDLIN( 242)		if ((vertexBuffers->length > (int)1)) {
HXLINE( 242)			_hx_tmp1 = vertexBuffers->__get((int)1).StaticCast<  ::kha::graphics4::VertexBuffer >();
            		}
            		else {
HXLINE( 242)			_hx_tmp1 = null();
            		}
HXLINE( 243)		 ::kha::graphics4::VertexBuffer _hx_tmp2;
HXDLIN( 243)		if ((vertexBuffers->length > (int)2)) {
HXLINE( 243)			_hx_tmp2 = vertexBuffers->__get((int)2).StaticCast<  ::kha::graphics4::VertexBuffer >();
            		}
            		else {
HXLINE( 243)			_hx_tmp2 = null();
            		}
HXLINE( 244)		 ::kha::graphics4::VertexBuffer _hx_tmp3;
HXDLIN( 244)		if ((vertexBuffers->length > (int)3)) {
HXLINE( 244)			_hx_tmp3 = vertexBuffers->__get((int)3).StaticCast<  ::kha::graphics4::VertexBuffer >();
            		}
            		else {
HXLINE( 244)			_hx_tmp3 = null();
            		}
HXLINE( 240)		this->setVertexBuffersInternal(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,vertexBuffers->length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,setVertexBuffers,(void))

void Graphics_obj::setIndexBuffer( ::kha::graphics4::IndexBuffer indexBuffer){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setIndexBuffer",0xfa4a1421,"kha.kore.graphics4.Graphics.setIndexBuffer","kha/kore/graphics4/Graphics.hx",253,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indexBuffer,"indexBuffer")
            	Kore::Graphics::setIndexBuffer(*indexBuffer->buffer);

            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,setIndexBuffer,(void))

Int Graphics_obj::maxTextureSize(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","maxTextureSize",0x676219e9,"kha.kore.graphics4.Graphics.maxTextureSize","kha/kore/graphics4/Graphics.hx",266,0xdc695dc0)
            	HX_STACK_THIS(this)
HXLINE( 266)		return (int)4096;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,maxTextureSize,return )

Bool Graphics_obj::supportsNonPow2Textures(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","supportsNonPow2Textures",0x1ded6b6a,"kha.kore.graphics4.Graphics.supportsNonPow2Textures","kha/kore/graphics4/Graphics.hx",270,0xdc695dc0)
            	HX_STACK_THIS(this)
HXLINE( 270)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,supportsNonPow2Textures,return )

::Dynamic Graphics_obj::createCubeMap(Int size,::hx::EnumBase format,::hx::EnumBase usage,hx::Null< Bool >  __o_canRead){
Bool canRead = __o_canRead.Default(false);
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","createCubeMap",0x8fe51b3a,"kha.kore.graphics4.Graphics.createCubeMap","kha/kore/graphics4/Graphics.hx",274,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(usage,"usage")
            	HX_STACK_ARG(canRead,"canRead")
HXLINE( 274)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,createCubeMap,return )

void Graphics_obj::setStencilParameters2(Int compareMode,Int bothPass,Int depthFail,Int stencilFail,Int referenceValue,Int readMask,Int writeMask){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setStencilParameters2",0xf303871d,"kha.kore.graphics4.Graphics.setStencilParameters2","kha/kore/graphics4/Graphics.hx",280,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(compareMode,"compareMode")
            	HX_STACK_ARG(bothPass,"bothPass")
            	HX_STACK_ARG(depthFail,"depthFail")
            	HX_STACK_ARG(stencilFail,"stencilFail")
            	HX_STACK_ARG(referenceValue,"referenceValue")
            	HX_STACK_ARG(readMask,"readMask")
            	HX_STACK_ARG(writeMask,"writeMask")
            	
		Kore::Graphics::setStencilParameters(convertCompareMode(compareMode), convertStencilAction(bothPass), convertStencilAction(depthFail), convertStencilAction(stencilFail), referenceValue, readMask, writeMask);
	

            	}


HX_DEFINE_DYNAMIC_FUNC7(Graphics_obj,setStencilParameters2,(void))

void Graphics_obj::setStencilParameters(::hx::EnumBase compareMode,::hx::EnumBase bothPass,::hx::EnumBase depthFail,::hx::EnumBase stencilFail,Int referenceValue,hx::Null< Int >  __o_readMask,hx::Null< Int >  __o_writeMask){
Int readMask = __o_readMask.Default(255);
Int writeMask = __o_writeMask.Default(255);
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setStencilParameters",0x597bff75,"kha.kore.graphics4.Graphics.setStencilParameters","kha/kore/graphics4/Graphics.hx",285,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(compareMode,"compareMode")
            	HX_STACK_ARG(bothPass,"bothPass")
            	HX_STACK_ARG(depthFail,"depthFail")
            	HX_STACK_ARG(stencilFail,"stencilFail")
            	HX_STACK_ARG(referenceValue,"referenceValue")
            	HX_STACK_ARG(readMask,"readMask")
            	HX_STACK_ARG(writeMask,"writeMask")
HXLINE( 285)		Int _hx_tmp = ( ( ::hx::EnumBase)(compareMode) )->_hx_getIndex();
HXDLIN( 285)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(bothPass) )->_hx_getIndex();
HXDLIN( 285)		Int _hx_tmp2 = ( ( ::hx::EnumBase)(depthFail) )->_hx_getIndex();
HXDLIN( 285)		Int _hx_tmp3 = ( ( ::hx::EnumBase)(stencilFail) )->_hx_getIndex();
HXDLIN( 285)		this->setStencilParameters2(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,referenceValue,readMask,writeMask);
            	}


HX_DEFINE_DYNAMIC_FUNC7(Graphics_obj,setStencilParameters,(void))

void Graphics_obj::scissor(Int x,Int y,Int width,Int height){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","scissor",0x498d410b,"kha.kore.graphics4.Graphics.scissor","kha/kore/graphics4/Graphics.hx",291,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	
		Kore::Graphics::scissor(x,y,width,height);
	

            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,scissor,(void))

void Graphics_obj::disableScissor(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","disableScissor",0x5f4be605,"kha.kore.graphics4.Graphics.disableScissor","kha/kore/graphics4/Graphics.hx",298,0xdc695dc0)
            	HX_STACK_THIS(this)
            	
		Kore::Graphics::disableScissor();
	

            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,disableScissor,(void))

Bool Graphics_obj::renderTargetsInvertedY(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","renderTargetsInvertedY",0x6d68a0c9,"kha.kore.graphics4.Graphics.renderTargetsInvertedY","kha/kore/graphics4/Graphics.hx",304,0xdc695dc0)
            	HX_STACK_THIS(this)
            	return Kore::Graphics::renderTargetsInvertedY();

HXLINE( 304)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,renderTargetsInvertedY,return )

Bool Graphics_obj::instancedRenderingAvailable(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","instancedRenderingAvailable",0xe8517e5b,"kha.kore.graphics4.Graphics.instancedRenderingAvailable","kha/kore/graphics4/Graphics.hx",308,0xdc695dc0)
            	HX_STACK_THIS(this)
HXLINE( 308)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,instancedRenderingAvailable,return )

void Graphics_obj::setTextureWrapNative( ::kha::kore::graphics4::TextureUnit unit,Int uWrap,Int vWrap){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setTextureWrapNative",0xb55b236b,"kha.kore.graphics4.Graphics.setTextureWrapNative","kha/kore/graphics4/Graphics.hx",315,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(unit,"unit")
            	HX_STACK_ARG(uWrap,"uWrap")
            	HX_STACK_ARG(vWrap,"vWrap")
            	
		Kore::Graphics::setTextureAddressing(unit->unit, Kore::U, (Kore::TextureAddressing)uWrap);
		Kore::Graphics::setTextureAddressing(unit->unit, Kore::V, (Kore::TextureAddressing)vWrap);
	

            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,setTextureWrapNative,(void))

void Graphics_obj::setTextureFiltersNative( ::kha::kore::graphics4::TextureUnit unit,Int minificationFilter,Int magnificationFilter,Int mipMapFilter){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setTextureFiltersNative",0x958dc388,"kha.kore.graphics4.Graphics.setTextureFiltersNative","kha/kore/graphics4/Graphics.hx",324,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(unit,"unit")
            	HX_STACK_ARG(minificationFilter,"minificationFilter")
            	HX_STACK_ARG(magnificationFilter,"magnificationFilter")
            	HX_STACK_ARG(mipMapFilter,"mipMapFilter")
            	
		Kore::Graphics::setTextureMinificationFilter(unit->unit, (Kore::TextureFilter)minificationFilter);
		Kore::Graphics::setTextureMagnificationFilter(unit->unit, (Kore::TextureFilter)magnificationFilter);
		Kore::Graphics::setTextureMipmapFilter(unit->unit, (Kore::MipmapFilter)mipMapFilter);
	

            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,setTextureFiltersNative,(void))

Int Graphics_obj::getTextureAddressing(::hx::EnumBase addressing){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","getTextureAddressing",0x668e24a4,"kha.kore.graphics4.Graphics.getTextureAddressing","kha/kore/graphics4/Graphics.hx",329,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(addressing,"addressing")
HXLINE( 329)		Int _hx_tmp = ( ( ::hx::EnumBase)(addressing) )->_hx_getIndex();
HXDLIN( 329)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 331)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 333)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 335)				return (int)2;
            			}
            			break;
            		}
HXLINE( 329)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,getTextureAddressing,return )

Int Graphics_obj::getTextureFilter(::hx::EnumBase filter){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","getTextureFilter",0xf9ca6dae,"kha.kore.graphics4.Graphics.getTextureFilter","kha/kore/graphics4/Graphics.hx",340,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 340)		Int _hx_tmp = ( ( ::hx::EnumBase)(filter) )->_hx_getIndex();
HXDLIN( 340)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 342)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 344)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 346)				return (int)2;
            			}
            			break;
            		}
HXLINE( 340)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,getTextureFilter,return )

Int Graphics_obj::getTextureMipMapFilter(::hx::EnumBase filter){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","getTextureMipMapFilter",0x80e4a1b6,"kha.kore.graphics4.Graphics.getTextureMipMapFilter","kha/kore/graphics4/Graphics.hx",351,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 351)		Int _hx_tmp = ( ( ::hx::EnumBase)(filter) )->_hx_getIndex();
HXDLIN( 351)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 353)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 355)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 357)				return (int)2;
            			}
            			break;
            		}
HXLINE( 351)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,getTextureMipMapFilter,return )

void Graphics_obj::setTextureParameters(::Dynamic texunit,::hx::EnumBase uAddressing,::hx::EnumBase vAddressing,::hx::EnumBase minificationFilter,::hx::EnumBase magnificationFilter,::hx::EnumBase mipmapFilter){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setTextureParameters",0x8088f714,"kha.kore.graphics4.Graphics.setTextureParameters","kha/kore/graphics4/Graphics.hx",361,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texunit,"texunit")
            	HX_STACK_ARG(uAddressing,"uAddressing")
            	HX_STACK_ARG(vAddressing,"vAddressing")
            	HX_STACK_ARG(minificationFilter,"minificationFilter")
            	HX_STACK_ARG(magnificationFilter,"magnificationFilter")
            	HX_STACK_ARG(mipmapFilter,"mipmapFilter")
HXLINE( 362)		Int _hx_tmp = this->getTextureAddressing(uAddressing);
HXDLIN( 362)		Int _hx_tmp1 = this->getTextureAddressing(vAddressing);
HXDLIN( 362)		this->setTextureWrapNative(( ( ::kha::kore::graphics4::TextureUnit)(texunit) ),_hx_tmp,_hx_tmp1);
HXLINE( 363)		Int _hx_tmp2 = this->getTextureFilter(minificationFilter);
HXDLIN( 363)		Int _hx_tmp3 = this->getTextureFilter(magnificationFilter);
HXDLIN( 363)		Int _hx_tmp4 = this->getTextureMipMapFilter(mipmapFilter);
HXDLIN( 363)		this->setTextureFiltersNative(( ( ::kha::kore::graphics4::TextureUnit)(texunit) ),_hx_tmp2,_hx_tmp3,_hx_tmp4);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,setTextureParameters,(void))

void Graphics_obj::setCullModeNative(Int value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setCullModeNative",0x37c41a9d,"kha.kore.graphics4.Graphics.setCullModeNative","kha/kore/graphics4/Graphics.hx",369,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	
		Kore::Graphics::setRenderState(Kore::BackfaceCulling, value);
	

            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,setCullModeNative,(void))

void Graphics_obj::setCullMode(::hx::EnumBase mode){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setCullMode",0xab948c66,"kha.kore.graphics4.Graphics.setCullMode","kha/kore/graphics4/Graphics.hx",374,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
HXLINE( 374)		Int _hx_tmp = ( ( ::hx::EnumBase)(mode) )->_hx_getIndex();
HXDLIN( 374)		this->setCullModeNative(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,setCullMode,(void))

void Graphics_obj::setTextureInternal( ::kha::kore::graphics4::TextureUnit unit, ::kha::Image texture){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setTextureInternal",0xc422d127,"kha.kore.graphics4.Graphics.setTextureInternal","kha/kore/graphics4/Graphics.hx",381,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(unit,"unit")
            	HX_STACK_ARG(texture,"texture")
            	
		if (texture->texture != nullptr) Kore::Graphics::setTexture(unit->unit, texture->texture);
		else texture->renderTarget->useColorAsTexture(unit->unit);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setTextureInternal,(void))

void Graphics_obj::setTexture(::Dynamic unit, ::kha::Image texture){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setTexture",0x13f2d3ca,"kha.kore.graphics4.Graphics.setTexture","kha/kore/graphics4/Graphics.hx",385,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(unit,"unit")
            	HX_STACK_ARG(texture,"texture")
HXLINE( 386)		Bool _hx_tmp = hx::IsNull( texture );
HXDLIN( 386)		if (_hx_tmp) {
HXLINE( 386)			return;
            		}
HXLINE( 387)		this->setTextureInternal(( ( ::kha::kore::graphics4::TextureUnit)(unit) ),texture);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setTexture,(void))

void Graphics_obj::setTextureDepth(::Dynamic unit, ::kha::Image texture){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setTextureDepth",0xda5e90d9,"kha.kore.graphics4.Graphics.setTextureDepth","kha/kore/graphics4/Graphics.hx",390,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(unit,"unit")
            	HX_STACK_ARG(texture,"texture")
HXLINE( 391)		Bool _hx_tmp = hx::IsNull( texture );
HXDLIN( 391)		if (_hx_tmp) {
HXLINE( 391)			return;
            		}
HXLINE( 392)		HX_VARI(  ::kha::kore::graphics4::TextureUnit,koreUnit) = hx::TCast<  ::kha::kore::graphics4::TextureUnit >::cast(unit);
HXLINE( 393)		texture->renderTarget->useDepthAsTexture(koreUnit->unit);;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setTextureDepth,(void))

void Graphics_obj::setVideoTexture(::Dynamic unit, ::kha::Video texture){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVideoTexture",0xc3722451,"kha.kore.graphics4.Graphics.setVideoTexture","kha/kore/graphics4/Graphics.hx",396,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(unit,"unit")
            	HX_STACK_ARG(texture,"texture")
HXLINE( 397)		Bool _hx_tmp = hx::IsNull( texture );
HXDLIN( 397)		if (_hx_tmp) {
HXLINE( 397)			return;
            		}
HXLINE( 398)		 ::kha::Image _hx_tmp1 = ::kha::Image_obj::createFromVideo(texture);
HXDLIN( 398)		this->setTextureInternal(( ( ::kha::kore::graphics4::TextureUnit)(unit) ),_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setVideoTexture,(void))

void Graphics_obj::setPipeline( ::kha::graphics4::PipelineState pipe){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setPipeline",0x463b4153,"kha.kore.graphics4.Graphics.setPipeline","kha/kore/graphics4/Graphics.hx",413,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pipe,"pipe")
HXLINE( 414)		this->setCullMode(pipe->cullMode);
HXLINE( 415)		this->setDepthMode(pipe->depthWrite,pipe->depthMode);
HXLINE( 416)		this->setStencilParameters(pipe->stencilMode,pipe->stencilBothPass,pipe->stencilDepthFail,pipe->stencilFail,pipe->stencilReferenceValue,pipe->stencilReadMask,pipe->stencilWriteMask);
HXLINE( 417)		this->setBlendingMode(pipe->blendSource,pipe->blendDestination);
HXLINE( 418)		this->setColorMask(pipe->colorWriteMaskRed,pipe->colorWriteMaskGreen,pipe->colorWriteMaskBlue,pipe->colorWriteMaskAlpha);
HXLINE( 419)		pipe->set();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,setPipeline,(void))

void Graphics_obj::setColorMask(Bool red,Bool green,Bool blue,Bool alpha){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setColorMask",0x89a1b09e,"kha.kore.graphics4.Graphics.setColorMask","kha/kore/graphics4/Graphics.hx",423,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
            	Kore::Graphics::setColorMask(red, green, blue, alpha);

            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,setColorMask,(void))

void Graphics_obj::setBool(::Dynamic location,Bool value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setBool",0x4b45dddb,"kha.kore.graphics4.Graphics.setBool","kha/kore/graphics4/Graphics.hx",427,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
HXLINE( 427)		this->setBoolPrivate(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setBool,(void))

void Graphics_obj::setBoolPrivate( ::kha::kore::graphics4::ConstantLocation location,Bool value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setBoolPrivate",0xa8c7b868,"kha.kore.graphics4.Graphics.setBoolPrivate","kha/kore/graphics4/Graphics.hx",433,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
            	
		Kore::Graphics::setBool(location->location, value);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setBoolPrivate,(void))

void Graphics_obj::setInt(::Dynamic location,Int value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setInt",0x0f48345e,"kha.kore.graphics4.Graphics.setInt","kha/kore/graphics4/Graphics.hx",438,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
HXLINE( 438)		this->setIntPrivate(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setInt,(void))

void Graphics_obj::setIntPrivate( ::kha::kore::graphics4::ConstantLocation location,Int value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setIntPrivate",0x802c8845,"kha.kore.graphics4.Graphics.setIntPrivate","kha/kore/graphics4/Graphics.hx",444,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
            	
		Kore::Graphics::setInt(location->location, value);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setIntPrivate,(void))

void Graphics_obj::setFloat(::Dynamic location,float value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloat",0xdd7ae6cb,"kha.kore.graphics4.Graphics.setFloat","kha/kore/graphics4/Graphics.hx",449,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
HXLINE( 449)		this->setFloatPrivate(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setFloat,(void))

void Graphics_obj::setFloatPrivate( ::kha::kore::graphics4::ConstantLocation location,float value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloatPrivate",0x2a0ead78,"kha.kore.graphics4.Graphics.setFloatPrivate","kha/kore/graphics4/Graphics.hx",455,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
            	
		Kore::Graphics::setFloat(location->location, value);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setFloatPrivate,(void))

void Graphics_obj::setFloat2(::Dynamic location,float value1,float value2){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloat2",0xee0f0b07,"kha.kore.graphics4.Graphics.setFloat2","kha/kore/graphics4/Graphics.hx",460,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
HXLINE( 460)		this->setFloat2Private(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value1,value2);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,setFloat2,(void))

void Graphics_obj::setFloat2Private( ::kha::kore::graphics4::ConstantLocation location,float value1,float value2){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloat2Private",0x93d9c8bc,"kha.kore.graphics4.Graphics.setFloat2Private","kha/kore/graphics4/Graphics.hx",466,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	
		Kore::Graphics::setFloat2(location->location, value1, value2);
	

            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,setFloat2Private,(void))

void Graphics_obj::setFloat3(::Dynamic location,float value1,float value2,float value3){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloat3",0xee0f0b08,"kha.kore.graphics4.Graphics.setFloat3","kha/kore/graphics4/Graphics.hx",471,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
HXLINE( 471)		this->setFloat3Private(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value1,value2,value3);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,setFloat3,(void))

void Graphics_obj::setFloat3Private( ::kha::kore::graphics4::ConstantLocation location,float value1,float value2,float value3){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloat3Private",0xcd0c3adb,"kha.kore.graphics4.Graphics.setFloat3Private","kha/kore/graphics4/Graphics.hx",477,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	
		Kore::Graphics::setFloat3(location->location, value1, value2, value3);
	

            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,setFloat3Private,(void))

void Graphics_obj::setFloat4(::Dynamic location,float value1,float value2,float value3,float value4){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloat4",0xee0f0b09,"kha.kore.graphics4.Graphics.setFloat4","kha/kore/graphics4/Graphics.hx",482,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	HX_STACK_ARG(value4,"value4")
HXLINE( 482)		this->setFloat4Private(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value1,value2,value3,value4);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,setFloat4,(void))

void Graphics_obj::setFloat4Private( ::kha::kore::graphics4::ConstantLocation location,float value1,float value2,float value3,float value4){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloat4Private",0x063eacfa,"kha.kore.graphics4.Graphics.setFloat4Private","kha/kore/graphics4/Graphics.hx",488,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value1,"value1")
            	HX_STACK_ARG(value2,"value2")
            	HX_STACK_ARG(value3,"value3")
            	HX_STACK_ARG(value4,"value4")
            	
		Kore::Graphics::setFloat4(location->location, value1, value2, value3, value4);
	

            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,setFloat4Private,(void))

void Graphics_obj::setVector2(::Dynamic location, ::kha::math::FastVector2 value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVector2",0x4faf04fe,"kha.kore.graphics4.Graphics.setVector2","kha/kore/graphics4/Graphics.hx",493,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
HXLINE( 493)		this->setVector2Private(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value->x,value->y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setVector2,(void))

void Graphics_obj::setVector2Private( ::kha::kore::graphics4::ConstantLocation location,float x,float y){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVector2Private",0x74c70ba5,"kha.kore.graphics4.Graphics.setVector2Private","kha/kore/graphics4/Graphics.hx",499,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	
		Kore::Graphics::setFloat2(location->location, x, y);
	

            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,setVector2Private,(void))

void Graphics_obj::setVector3(::Dynamic location, ::kha::math::FastVector3 value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVector3",0x4faf04ff,"kha.kore.graphics4.Graphics.setVector3","kha/kore/graphics4/Graphics.hx",504,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
HXLINE( 504)		this->setVector3Private(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value->x,value->y,value->z);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setVector3,(void))

void Graphics_obj::setVector3Private( ::kha::kore::graphics4::ConstantLocation location,float x,float y,float z){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVector3Private",0xadf97dc4,"kha.kore.graphics4.Graphics.setVector3Private","kha/kore/graphics4/Graphics.hx",510,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	
		Kore::Graphics::setFloat3(location->location, x, y, z);
	

            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,setVector3Private,(void))

void Graphics_obj::setVector4(::Dynamic location, ::kha::math::FastVector4 value){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVector4",0x4faf0500,"kha.kore.graphics4.Graphics.setVector4","kha/kore/graphics4/Graphics.hx",515,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(value,"value")
HXLINE( 515)		this->setVector4Private(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),value->x,value->y,value->z,value->w);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setVector4,(void))

void Graphics_obj::setVector4Private( ::kha::kore::graphics4::ConstantLocation location,float x,float y,float z,float w){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setVector4Private",0xe72befe3,"kha.kore.graphics4.Graphics.setVector4Private","kha/kore/graphics4/Graphics.hx",521,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
            	
		Kore::Graphics::setFloat4(location->location, x, y, z, w);
	

            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,setVector4Private,(void))

void Graphics_obj::setFloats(::Dynamic location,::Array< float > values){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloats",0xee0f0b48,"kha.kore.graphics4.Graphics.setFloats","kha/kore/graphics4/Graphics.hx",526,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(values,"values")
HXLINE( 526)		this->setFloatsPrivate(( ( ::kha::kore::graphics4::ConstantLocation)(location) ),values);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setFloats,(void))

void Graphics_obj::setFloatsPrivate( ::kha::kore::graphics4::ConstantLocation location,::Array< float > values){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setFloatsPrivate",0x19a8c29b,"kha.kore.graphics4.Graphics.setFloatsPrivate","kha/kore/graphics4/Graphics.hx",532,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(values,"values")
            	
		Kore::Graphics::setFloats(location->location, values->Pointer(), values->length);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setFloatsPrivate,(void))

void Graphics_obj::setMatrix(::Dynamic location, ::kha::math::FastMatrix4 matrix){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","setMatrix",0x68811e32,"kha.kore.graphics4.Graphics.setMatrix","kha/kore/graphics4/Graphics.hx",545,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(matrix,"matrix")
            	
		Kore::mat4 value;
		value.Set(0, 0, matrix->_00); value.Set(0, 1, matrix->_10); value.Set(0, 2, matrix->_20); value.Set(0, 3, matrix->_30);
		value.Set(1, 0, matrix->_01); value.Set(1, 1, matrix->_11); value.Set(1, 2, matrix->_21); value.Set(1, 3, matrix->_31);
		value.Set(2, 0, matrix->_02); value.Set(2, 1, matrix->_12); value.Set(2, 2, matrix->_22); value.Set(2, 3, matrix->_32);
		value.Set(3, 0, matrix->_03); value.Set(3, 1, matrix->_13); value.Set(3, 2, matrix->_23); value.Set(3, 3, matrix->_33);
		::kha::kore::graphics4::ConstantLocation_obj* loc = dynamic_cast< ::kha::kore::graphics4::ConstantLocation_obj*>(location->__GetRealObject());
		Kore::Graphics::setMatrix(loc->location, value);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,setMatrix,(void))

void Graphics_obj::drawIndexedVertices(hx::Null< Int >  __o_start,hx::Null< Int >  __o_count){
Int start = __o_start.Default(0);
Int count = __o_count.Default(-1);
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","drawIndexedVertices",0x712af4d5,"kha.kore.graphics4.Graphics.drawIndexedVertices","kha/kore/graphics4/Graphics.hx",550,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(count,"count")
HXLINE( 550)		if ((count < (int)0)) {
HXLINE( 550)			this->drawAllIndexedVertices();
            		}
            		else {
HXLINE( 551)			this->drawSomeIndexedVertices(start,count);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,drawIndexedVertices,(void))

void Graphics_obj::drawAllIndexedVertices(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","drawAllIndexedVertices",0x864219fe,"kha.kore.graphics4.Graphics.drawAllIndexedVertices","kha/kore/graphics4/Graphics.hx",557,0xdc695dc0)
            	HX_STACK_THIS(this)
            	
		Kore::Graphics::drawIndexedVertices();
	

            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,drawAllIndexedVertices,(void))

void Graphics_obj::drawSomeIndexedVertices(Int start,Int count){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","drawSomeIndexedVertices",0xad718dc1,"kha.kore.graphics4.Graphics.drawSomeIndexedVertices","kha/kore/graphics4/Graphics.hx",564,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(count,"count")
            	
		Kore::Graphics::drawIndexedVertices(start, count);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,drawSomeIndexedVertices,(void))

void Graphics_obj::drawIndexedVerticesInstanced(Int instanceCount,hx::Null< Int >  __o_start,hx::Null< Int >  __o_count){
Int start = __o_start.Default(0);
Int count = __o_count.Default(-1);
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","drawIndexedVerticesInstanced",0xfeb9ab9a,"kha.kore.graphics4.Graphics.drawIndexedVerticesInstanced","kha/kore/graphics4/Graphics.hx",569,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(instanceCount,"instanceCount")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(count,"count")
HXLINE( 569)		if ((count < (int)0)) {
HXLINE( 569)			this->drawAllIndexedVerticesInstanced(instanceCount);
            		}
            		else {
HXLINE( 570)			this->drawSomeIndexedVerticesInstanced(instanceCount,start,count);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawIndexedVerticesInstanced,(void))

void Graphics_obj::drawAllIndexedVerticesInstanced(Int instanceCount){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","drawAllIndexedVerticesInstanced",0x9e031951,"kha.kore.graphics4.Graphics.drawAllIndexedVerticesInstanced","kha/kore/graphics4/Graphics.hx",576,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(instanceCount,"instanceCount")
            	
		Kore::Graphics::drawIndexedVerticesInstanced(instanceCount);
	

            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,drawAllIndexedVerticesInstanced,(void))

void Graphics_obj::drawSomeIndexedVerticesInstanced(Int instanceCount,Int start,Int count){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","drawSomeIndexedVerticesInstanced",0x8586952e,"kha.kore.graphics4.Graphics.drawSomeIndexedVerticesInstanced","kha/kore/graphics4/Graphics.hx",583,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(instanceCount,"instanceCount")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(count,"count")
            	
		Kore::Graphics::drawIndexedVerticesInstanced(instanceCount, start, count);
	

            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawSomeIndexedVerticesInstanced,(void))

void Graphics_obj::renderToTexture(::Array< ::Dynamic> additionalRenderTargets){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","renderToTexture",0xa2fc7a59,"kha.kore.graphics4.Graphics.renderToTexture","kha/kore/graphics4/Graphics.hx",588,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(additionalRenderTargets,"additionalRenderTargets")
HXLINE( 588)		Bool _hx_tmp = hx::IsNotNull( additionalRenderTargets );
HXDLIN( 588)		if (_hx_tmp) {
HXLINE( 589)			HX_VARI( Int,len) = additionalRenderTargets->length;
HXLINE( 590)			Kore::Graphics::setRenderTarget(target->renderTarget, 0, len);
HXLINE( 591)			{
HXLINE( 591)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 591)				HX_VARI( Int,_g) = len;
HXDLIN( 591)				while((_g1 < _g)){
HXLINE( 591)					HX_VARI( Int,i) = _g1++;
HXLINE( 592)					HX_VARI(  ::kha::Image,image) = hx::TCast<  ::kha::Image >::cast(additionalRenderTargets->__get(i));
HXLINE( 593)					HX_VARI( Int,num) = (i + (int)1);
HXLINE( 594)					Kore::Graphics::setRenderTarget(image->renderTarget, num, len);
            				}
            			}
            		}
            		else {
HXLINE( 598)			Kore::Graphics::setRenderTarget(target->renderTarget, 0, 0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,renderToTexture,(void))

void Graphics_obj::renderToBackbuffer(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","renderToBackbuffer",0x6b5bffa9,"kha.kore.graphics4.Graphics.renderToBackbuffer","kha/kore/graphics4/Graphics.hx",603,0xdc695dc0)
            	HX_STACK_THIS(this)
            	Kore::Graphics::restoreRenderTarget();

            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,renderToBackbuffer,(void))

void Graphics_obj::begin(::Array< ::Dynamic> additionalRenderTargets){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","begin",0x920e9958,"kha.kore.graphics4.Graphics.begin","kha/kore/graphics4/Graphics.hx",608,0xdc695dc0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(additionalRenderTargets,"additionalRenderTargets")
HXLINE( 608)		Bool _hx_tmp = hx::IsNull( this->target );
HXDLIN( 608)		if (_hx_tmp) {
HXLINE( 608)			this->renderToBackbuffer();
            		}
            		else {
HXLINE( 609)			this->renderToTexture(additionalRenderTargets);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,begin,(void))

void Graphics_obj::end(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","end",0x243a394a,"kha.kore.graphics4.Graphics.end","kha/kore/graphics4/Graphics.hx",612,0xdc695dc0)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,end,(void))

void Graphics_obj::flush(){
            	HX_STACK_FRAME("kha.kore.graphics4.Graphics","flush",0xe45411f3,"kha.kore.graphics4.Graphics.flush","kha/kore/graphics4/Graphics.hx",617,0xdc695dc0)
            	HX_STACK_THIS(this)
            	Kore::Graphics::flush();

            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,flush,(void))


Graphics_obj::Graphics_obj()
{
}

void Graphics_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_END_CLASS();
}

void Graphics_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
}

hx::Val Graphics_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target); }
		if (HX_FIELD_EQ(inName,"clear2") ) { return hx::Val( clear2_dyn()); }
		if (HX_FIELD_EQ(inName,"setInt") ) { return hx::Val( setInt_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"vsynced") ) { return hx::Val( vsynced_dyn()); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn()); }
		if (HX_FIELD_EQ(inName,"setBool") ) { return hx::Val( setBool_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewport") ) { return hx::Val( viewport_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloat") ) { return hx::Val( setFloat_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setFloat2") ) { return hx::Val( setFloat2_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloat3") ) { return hx::Val( setFloat3_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloat4") ) { return hx::Val( setFloat4_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloats") ) { return hx::Val( setFloats_dyn()); }
		if (HX_FIELD_EQ(inName,"setMatrix") ) { return hx::Val( setMatrix_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setTexture") ) { return hx::Val( setTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector2") ) { return hx::Val( setVector2_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector3") ) { return hx::Val( setVector3_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector4") ) { return hx::Val( setVector4_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"refreshRate") ) { return hx::Val( refreshRate_dyn()); }
		if (HX_FIELD_EQ(inName,"setCullMode") ) { return hx::Val( setCullMode_dyn()); }
		if (HX_FIELD_EQ(inName,"setPipeline") ) { return hx::Val( setPipeline_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setDepthMode") ) { return hx::Val( setDepthMode_dyn()); }
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setDepthMode2") ) { return hx::Val( setDepthMode2_dyn()); }
		if (HX_FIELD_EQ(inName,"createCubeMap") ) { return hx::Val( createCubeMap_dyn()); }
		if (HX_FIELD_EQ(inName,"setIntPrivate") ) { return hx::Val( setIntPrivate_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setIndexBuffer") ) { return hx::Val( setIndexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"maxTextureSize") ) { return hx::Val( maxTextureSize_dyn()); }
		if (HX_FIELD_EQ(inName,"disableScissor") ) { return hx::Val( disableScissor_dyn()); }
		if (HX_FIELD_EQ(inName,"setBoolPrivate") ) { return hx::Val( setBoolPrivate_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getBlendingMode") ) { return hx::Val( getBlendingMode_dyn()); }
		if (HX_FIELD_EQ(inName,"setBlendingMode") ) { return hx::Val( setBlendingMode_dyn()); }
		if (HX_FIELD_EQ(inName,"setVertexBuffer") ) { return hx::Val( setVertexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureDepth") ) { return hx::Val( setTextureDepth_dyn()); }
		if (HX_FIELD_EQ(inName,"setVideoTexture") ) { return hx::Val( setVideoTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloatPrivate") ) { return hx::Val( setFloatPrivate_dyn()); }
		if (HX_FIELD_EQ(inName,"renderToTexture") ) { return hx::Val( renderToTexture_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setVertexBuffers") ) { return hx::Val( setVertexBuffers_dyn()); }
		if (HX_FIELD_EQ(inName,"getTextureFilter") ) { return hx::Val( getTextureFilter_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloat2Private") ) { return hx::Val( setFloat2Private_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloat3Private") ) { return hx::Val( setFloat3Private_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloat4Private") ) { return hx::Val( setFloat4Private_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloatsPrivate") ) { return hx::Val( setFloatsPrivate_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setCullModeNative") ) { return hx::Val( setCullModeNative_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector2Private") ) { return hx::Val( setVector2Private_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector3Private") ) { return hx::Val( setVector3Private_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector4Private") ) { return hx::Val( setVector4Private_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setTextureInternal") ) { return hx::Val( setTextureInternal_dyn()); }
		if (HX_FIELD_EQ(inName,"renderToBackbuffer") ) { return hx::Val( renderToBackbuffer_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"drawIndexedVertices") ) { return hx::Val( drawIndexedVertices_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setStencilParameters") ) { return hx::Val( setStencilParameters_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureWrapNative") ) { return hx::Val( setTextureWrapNative_dyn()); }
		if (HX_FIELD_EQ(inName,"getTextureAddressing") ) { return hx::Val( getTextureAddressing_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureParameters") ) { return hx::Val( setTextureParameters_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setBlendingModeNative") ) { return hx::Val( setBlendingModeNative_dyn()); }
		if (HX_FIELD_EQ(inName,"setStencilParameters2") ) { return hx::Val( setStencilParameters2_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"renderTargetsInvertedY") ) { return hx::Val( renderTargetsInvertedY_dyn()); }
		if (HX_FIELD_EQ(inName,"getTextureMipMapFilter") ) { return hx::Val( getTextureMipMapFilter_dyn()); }
		if (HX_FIELD_EQ(inName,"drawAllIndexedVertices") ) { return hx::Val( drawAllIndexedVertices_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"supportsNonPow2Textures") ) { return hx::Val( supportsNonPow2Textures_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureFiltersNative") ) { return hx::Val( setTextureFiltersNative_dyn()); }
		if (HX_FIELD_EQ(inName,"drawSomeIndexedVertices") ) { return hx::Val( drawSomeIndexedVertices_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setVertexBuffersInternal") ) { return hx::Val( setVertexBuffersInternal_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"instancedRenderingAvailable") ) { return hx::Val( instancedRenderingAvailable_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"drawIndexedVerticesInstanced") ) { return hx::Val( drawIndexedVerticesInstanced_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"drawAllIndexedVerticesInstanced") ) { return hx::Val( drawAllIndexedVerticesInstanced_dyn()); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"drawSomeIndexedVerticesInstanced") ) { return hx::Val( drawSomeIndexedVerticesInstanced_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Graphics_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::kha::Image >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Graphics_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(Graphics_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Graphics_obj_sStaticStorageInfo = 0;
#endif

static ::String Graphics_obj_sMemberFields[] = {
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("vsynced","\x70","\x5c","\x6c","\x1a"),
	HX_HCSTRING("refreshRate","\x5b","\xe2","\x3f","\x40"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"),
	HX_HCSTRING("setDepthMode2","\xae","\x55","\x3c","\x0a"),
	HX_HCSTRING("setDepthMode","\x04","\xee","\x33","\xc3"),
	HX_HCSTRING("getBlendingMode","\xea","\xae","\xe7","\x0f"),
	HX_HCSTRING("setBlendingModeNative","\x2d","\xc6","\x36","\xbb"),
	HX_HCSTRING("setBlendingMode","\xf6","\x2b","\xb3","\x0b"),
	HX_HCSTRING("clear2","\x05","\xea","\xa7","\x07"),
	HX_HCSTRING("setVertexBuffer","\x46","\x82","\x5f","\x8f"),
	HX_HCSTRING("setVertexBuffersInternal","\xca","\x53","\x97","\x36"),
	HX_HCSTRING("setVertexBuffers","\x6d","\x7b","\x32","\xe4"),
	HX_HCSTRING("setIndexBuffer","\x30","\xa1","\x64","\x9d"),
	HX_HCSTRING("maxTextureSize","\xf8","\xa6","\x7c","\x0a"),
	HX_HCSTRING("supportsNonPow2Textures","\x7b","\x44","\xf6","\x8f"),
	HX_HCSTRING("createCubeMap","\x0b","\x25","\x13","\x75"),
	HX_HCSTRING("setStencilParameters2","\xee","\x49","\xf9","\x69"),
	HX_HCSTRING("setStencilParameters","\xc4","\x41","\x40","\x0e"),
	HX_HCSTRING("scissor","\x1c","\x28","\xe7","\x04"),
	HX_HCSTRING("disableScissor","\x14","\x73","\x66","\x02"),
	HX_HCSTRING("renderTargetsInvertedY","\xd8","\x54","\x7d","\x0d"),
	HX_HCSTRING("instancedRenderingAvailable","\xec","\xb3","\x0a","\xbc"),
	HX_HCSTRING("setTextureWrapNative","\xba","\x65","\x1f","\x6a"),
	HX_HCSTRING("setTextureFiltersNative","\x99","\x9c","\x96","\x07"),
	HX_HCSTRING("getTextureAddressing","\xf3","\x66","\x52","\x1b"),
	HX_HCSTRING("getTextureFilter","\x7d","\x9c","\x6d","\x82"),
	HX_HCSTRING("getTextureMipMapFilter","\xc5","\x55","\xf9","\x20"),
	HX_HCSTRING("setTextureParameters","\x63","\x39","\x4d","\x35"),
	HX_HCSTRING("setCullModeNative","\xee","\xe0","\xe9","\x3d"),
	HX_HCSTRING("setCullMode","\xf7","\xcf","\x3d","\xe1"),
	HX_HCSTRING("setTextureInternal","\xb6","\x91","\x0a","\x1f"),
	HX_HCSTRING("setTexture","\x59","\xed","\xbf","\xf1"),
	HX_HCSTRING("setTextureDepth","\xea","\x70","\x7f","\xee"),
	HX_HCSTRING("setVideoTexture","\x62","\x04","\x93","\xd7"),
	HX_HCSTRING("setPipeline","\xe4","\x84","\xe4","\x7b"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setBool","\xec","\xc4","\x9f","\x06"),
	HX_HCSTRING("setBoolPrivate","\x77","\x45","\xe2","\x4b"),
	HX_HCSTRING("setInt","\x6d","\x9a","\x67","\x6f"),
	HX_HCSTRING("setIntPrivate","\x16","\x92","\x5a","\x65"),
	HX_HCSTRING("setFloat","\x9a","\x2e","\xcb","\x10"),
	HX_HCSTRING("setFloatPrivate","\x89","\x8d","\x2f","\x3e"),
	HX_HCSTRING("setFloat2","\x58","\x98","\xfd","\xa0"),
	HX_HCSTRING("setFloat2Private","\x8b","\xf7","\x7c","\x1c"),
	HX_HCSTRING("setFloat3","\x59","\x98","\xfd","\xa0"),
	HX_HCSTRING("setFloat3Private","\xaa","\x69","\xaf","\x55"),
	HX_HCSTRING("setFloat4","\x5a","\x98","\xfd","\xa0"),
	HX_HCSTRING("setFloat4Private","\xc9","\xdb","\xe1","\x8e"),
	HX_HCSTRING("setVector2","\x8d","\x1e","\x7c","\x2d"),
	HX_HCSTRING("setVector2Private","\xf6","\xd1","\xec","\x7a"),
	HX_HCSTRING("setVector3","\x8e","\x1e","\x7c","\x2d"),
	HX_HCSTRING("setVector3Private","\x15","\x44","\x1f","\xb4"),
	HX_HCSTRING("setVector4","\x8f","\x1e","\x7c","\x2d"),
	HX_HCSTRING("setVector4Private","\x34","\xb6","\x51","\xed"),
	HX_HCSTRING("setFloats","\x99","\x98","\xfd","\xa0"),
	HX_HCSTRING("setFloatsPrivate","\x6a","\xf1","\x4b","\xa2"),
	HX_HCSTRING("setMatrix","\x83","\xab","\x6f","\x1b"),
	HX_HCSTRING("drawIndexedVertices","\x66","\xb1","\x0b","\xa1"),
	HX_HCSTRING("drawAllIndexedVertices","\x0d","\xce","\x56","\x26"),
	HX_HCSTRING("drawSomeIndexedVertices","\xd2","\x66","\x7a","\x1f"),
	HX_HCSTRING("drawIndexedVerticesInstanced","\xe9","\x54","\x0f","\x6d"),
	HX_HCSTRING("drawAllIndexedVerticesInstanced","\x62","\xeb","\x14","\xfc"),
	HX_HCSTRING("drawSomeIndexedVerticesInstanced","\xfd","\x91","\x0c","\x77"),
	HX_HCSTRING("renderToTexture","\x6a","\x5a","\x1d","\xb7"),
	HX_HCSTRING("renderToBackbuffer","\x38","\xc0","\x43","\xc6"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	::String(null()) };

static void Graphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
};

#endif

hx::Class Graphics_obj::__mClass;

void Graphics_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.kore.graphics4.Graphics","\x5d","\x72","\x20","\xbb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Graphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace kore
} // end namespace graphics4
