// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_kha_Blob
#include <kha/Blob.h>
#endif
#ifndef INCLUDED_kha_Font
#include <kha/Font.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_StbTruetype
#include <kha/graphics2/truetype/StbTruetype.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_bakedchar
#include <kha/graphics2/truetype/Stbtt_bakedchar.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_fontinfo
#include <kha/graphics2/truetype/Stbtt_fontinfo.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_font_v_metrics
#include <kha/graphics2/truetype/Stbtt_temp_font_v_metrics.h>
#endif

namespace kha{

void Kravur_obj::__construct( ::kha::Blob blob){
            	HX_STACK_FRAME("kha.Kravur","new",0x6ca37955,"kha.Kravur.new","kha/Kravur.hx",108,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(blob,"blob")
HXLINE( 110)		this->images =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 113)		this->blob = blob;
            	}

Dynamic Kravur_obj::__CreateEmpty() { return new Kravur_obj; }

hx::ObjectPtr< Kravur_obj > Kravur_obj::__new( ::kha::Blob blob)
{
	hx::ObjectPtr< Kravur_obj > _hx_result = new Kravur_obj();
	_hx_result->__construct(blob);
	return _hx_result;
}

Dynamic Kravur_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Kravur_obj > _hx_result = new Kravur_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::kha::Font_obj _hx_kha_Kravur__hx_kha_Font= {
	( Float (hx::Object::*)(Int))&::kha::Kravur_obj::height,
	( Float (hx::Object::*)(Int,::String))&::kha::Kravur_obj::width,
	( Float (hx::Object::*)(Int))&::kha::Kravur_obj::baseline,
	( void (hx::Object::*)())&::kha::Kravur_obj::unload,
};

static ::kha::Resource_obj _hx_kha_Kravur__hx_kha_Resource= {
	( void (hx::Object::*)())&::kha::Kravur_obj::unload,
};

void *Kravur_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xed915bd3: return &_hx_kha_Kravur__hx_kha_Font;
		case (int)0xf962acd2: return &_hx_kha_Kravur__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::kha::KravurImage Kravur_obj::_get(Int fontSize,::Array< Int > glyphs){
            	HX_STACK_FRAME("kha.Kravur","_get",0x987df302,"kha.Kravur._get","kha/Kravur.hx",116,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fontSize,"fontSize")
            	HX_STACK_ARG(glyphs,"glyphs")
HXLINE( 117)		Bool _hx_tmp = !(this->images->exists(fontSize));
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 118)			Bool _hx_tmp1 = hx::IsNull( glyphs );
HXDLIN( 118)			if (_hx_tmp1) {
HXLINE( 119)				glyphs = ::Array_obj< Int >::__new(0);
HXLINE( 120)				{
HXLINE( 120)					HX_VARI( Int,_g) = (int)32;
HXDLIN( 120)					while((_g < (int)256)){
HXLINE( 120)						HX_VARI( Int,i) = _g++;
HXLINE( 121)						glyphs->push(i);
            					}
            				}
            			}
HXLINE( 125)			HX_VARI( Int,width) = (int)64;
HXLINE( 126)			HX_VARI( Int,height) = (int)32;
HXLINE( 127)			Int length = glyphs->length;
HXDLIN( 127)			HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 127)			_hx_array_set_size_exact(this1,length);
HXDLIN( 127)			HX_VARI( ::Array< ::Dynamic>,baked) = this1;
HXLINE( 128)			{
HXLINE( 128)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 128)				HX_VARI_NAME( Int,_g2,"_g") = baked->length;
HXDLIN( 128)				while((_g1 < _g2)){
HXLINE( 128)					HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 129)					baked->__unsafe_set(i1, ::kha::graphics2::truetype::Stbtt_bakedchar_obj::__new());
            				}
            			}
HXLINE( 132)			HX_VARI(  ::kha::Blob,pixels) = null();
HXLINE( 134)			HX_VARI( Int,status) = (int)-1;
HXLINE( 135)			while((status < (int)0)){
HXLINE( 136)				Bool _hx_tmp2 = (height < width);
HXDLIN( 136)				if (_hx_tmp2) {
HXLINE( 136)					hx::MultEq(height,(int)2);
            				}
            				else {
HXLINE( 137)					hx::MultEq(width,(int)2);
            				}
HXLINE( 138)				pixels = ::kha::Blob_obj::alloc((width * height));
HXLINE( 139)				status = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_BakeFontBitmap(this->blob,(int)0,fontSize,pixels,width,height,glyphs,baked);
            			}
HXLINE( 144)			HX_VARI(  ::kha::graphics2::truetype::Stbtt_fontinfo,info) =  ::kha::graphics2::truetype::Stbtt_fontinfo_obj::__new();
HXLINE( 145)			::kha::graphics2::truetype::StbTruetype_obj::stbtt_InitFont(info,this->blob,(int)0);
HXLINE( 147)			HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics,metrics) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetFontVMetrics(info);
HXLINE( 148)			HX_VARI( Float,scale) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_ScaleForPixelHeight(info,fontSize);
HXLINE( 149)			Float _hx_tmp3 = (metrics->ascent * scale);
HXDLIN( 149)			HX_VARI( Int,ascent) = ::Math_obj::round(_hx_tmp3);
HXLINE( 150)			Float _hx_tmp4 = (metrics->descent * scale);
HXDLIN( 150)			HX_VARI( Int,descent) = ::Math_obj::round(_hx_tmp4);
HXLINE( 151)			Float _hx_tmp5 = (metrics->lineGap * scale);
HXDLIN( 151)			HX_VARI( Int,lineGap) = ::Math_obj::round(_hx_tmp5);
HXLINE( 153)			Int _hx_tmp6 = ::Std_obj::_hx_int(fontSize);
HXDLIN( 153)			HX_VARI(  ::kha::KravurImage,image) =  ::kha::KravurImage_obj::__new(_hx_tmp6,ascent,descent,lineGap,width,height,baked,pixels);
HXLINE( 154)			this->images->set(fontSize,image);
HXLINE( 155)			return image;
            		}
HXLINE( 157)		return this->images->get(fontSize).StaticCast<  ::kha::KravurImage >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Kravur_obj,_get,return )

Float Kravur_obj::height(Int fontSize){
            	HX_STACK_FRAME("kha.Kravur","height",0x9f26a612,"kha.Kravur.height","kha/Kravur.hx",161,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fontSize,"fontSize")
HXLINE( 161)		return this->_get(fontSize,null())->getHeight();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Kravur_obj,height,return )

Float Kravur_obj::width(Int fontSize,::String str){
            	HX_STACK_FRAME("kha.Kravur","width",0xa8a6463b,"kha.Kravur.width","kha/Kravur.hx",165,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fontSize,"fontSize")
            	HX_STACK_ARG(str,"str")
HXLINE( 165)		return this->_get(fontSize,null())->stringWidth(str);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Kravur_obj,width,return )

Float Kravur_obj::baseline(Int fontSize){
            	HX_STACK_FRAME("kha.Kravur","baseline",0x90869b70,"kha.Kravur.baseline","kha/Kravur.hx",169,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fontSize,"fontSize")
HXLINE( 169)		return this->_get(fontSize,null())->getBaselinePosition();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Kravur_obj,baseline,return )

void Kravur_obj::unload(){
            	HX_STACK_FRAME("kha.Kravur","unload",0x02673f2a,"kha.Kravur.unload","kha/Kravur.hx",172,0xdd7a3f9a)
            	HX_STACK_THIS(this)
HXLINE( 173)		this->blob = null();
HXLINE( 174)		this->images = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Kravur_obj,unload,(void))


Kravur_obj::Kravur_obj()
{
}

void Kravur_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Kravur);
	HX_MARK_MEMBER_NAME(blob,"blob");
	HX_MARK_MEMBER_NAME(images,"images");
	HX_MARK_END_CLASS();
}

void Kravur_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(blob,"blob");
	HX_VISIT_MEMBER_NAME(images,"images");
}

hx::Val Kravur_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"blob") ) { return hx::Val( blob); }
		if (HX_FIELD_EQ(inName,"_get") ) { return hx::Val( _get_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"images") ) { return hx::Val( images); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height_dyn()); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { return hx::Val( baseline_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Kravur_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"blob") ) { blob=inValue.Cast<  ::kha::Blob >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"images") ) { images=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Kravur_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("blob","\x5d","\x3d","\x19","\x41"));
	outFields->push(HX_HCSTRING("images","\xb8","\x50","\x92","\xfe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Kravur_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::Blob*/ ,(int)offsetof(Kravur_obj,blob),HX_HCSTRING("blob","\x5d","\x3d","\x19","\x41")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Kravur_obj,images),HX_HCSTRING("images","\xb8","\x50","\x92","\xfe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Kravur_obj_sStaticStorageInfo = 0;
#endif

static ::String Kravur_obj_sMemberFields[] = {
	HX_HCSTRING("blob","\x5d","\x3d","\x19","\x41"),
	HX_HCSTRING("images","\xb8","\x50","\x92","\xfe"),
	HX_HCSTRING("_get","\x97","\xc5","\x19","\x3f"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	::String(null()) };

static void Kravur_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Kravur_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Kravur_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Kravur_obj::__mClass,"__mClass");
};

#endif

hx::Class Kravur_obj::__mClass;

void Kravur_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Kravur","\xe3","\x2a","\x15","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Kravur_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Kravur_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Kravur_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Kravur_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Kravur_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Kravur_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
