// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_kha_math_Matrix4
#include <kha/math/Matrix4.h>
#endif
#ifndef INCLUDED_kha_math_Quaternion
#include <kha/math/Quaternion.h>
#endif
#ifndef INCLUDED_kha_math_Vector3
#include <kha/math/Vector3.h>
#endif

namespace kha{
namespace math{

void Quaternion_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float z = __o_z.Default(0);
Float w = __o_w.Default(1);
            	HX_STACK_FRAME("kha.math.Quaternion","new",0xc02c67cc,"kha.math.Quaternion.new","kha/math/Quaternion.hx",13,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
HXLINE(  14)		this->values = ::Array_obj< Float >::__new();
HXLINE(  15)		this->values->push(x);
HXLINE(  16)		this->values->push(y);
HXLINE(  17)		this->values->push(z);
HXLINE(  18)		this->values->push(w);
            	}

Dynamic Quaternion_obj::__CreateEmpty() { return new Quaternion_obj; }

hx::ObjectPtr< Quaternion_obj > Quaternion_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w)
{
	hx::ObjectPtr< Quaternion_obj > _hx_result = new Quaternion_obj();
	_hx_result->__construct(__o_x,__o_y,__o_z,__o_w);
	return _hx_result;
}

Dynamic Quaternion_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Quaternion_obj > _hx_result = new Quaternion_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

 ::kha::math::Quaternion Quaternion_obj::slerp(Float t, ::kha::math::Quaternion q){
            	HX_STACK_FRAME("kha.math.Quaternion","slerp",0x578312d6,"kha.math.Quaternion.slerp","kha/math/Quaternion.hx",32,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(q,"q")
HXLINE(  35)		HX_VARI( Float,dot) = this->dot(q);
HXLINE(  37)		if ((dot > ((Float)0.9995))) {
HXLINE(  38)			 ::kha::math::Quaternion _hx_tmp = this->sub(q)->scaled(t);
HXDLIN(  38)			HX_VARI(  ::kha::math::Quaternion,result) = q->add(_hx_tmp);
HXLINE(  39)			result->normalize();
HXLINE(  40)			return result;
            		}
HXLINE(  42)		Bool _hx_tmp1 = (dot < (int)0);
HXDLIN(  42)		if (_hx_tmp1) {
HXLINE(  42)			dot = (int)0;
            		}
HXLINE(  43)		Bool _hx_tmp2 = (dot > (int)1);
HXDLIN(  43)		if (_hx_tmp2) {
HXLINE(  43)			dot = (int)1;
            		}
HXLINE(  45)		HX_VARI( Float,theta0) = ::Math_obj::acos(dot);
HXLINE(  46)		HX_VARI( Float,theta) = (theta0 * t);
HXLINE(  48)		 ::kha::math::Quaternion _hx_tmp3 = this->scaled(dot);
HXDLIN(  48)		HX_VARI(  ::kha::math::Quaternion,q2) = q->sub(_hx_tmp3);
HXLINE(  49)		q2->normalize();
HXLINE(  51)		Float _hx_tmp4 = ::Math_obj::cos(theta);
HXDLIN(  51)		 ::kha::math::Quaternion _hx_tmp5 = this->scaled(_hx_tmp4);
HXDLIN(  51)		Float _hx_tmp6 = ::Math_obj::sin(theta);
HXDLIN(  51)		 ::kha::math::Quaternion _hx_tmp7 = q2->scaled(_hx_tmp6);
HXDLIN(  51)		HX_VARI_NAME(  ::kha::math::Quaternion,result1,"result") = _hx_tmp5->add(_hx_tmp7);
HXLINE(  53)		result1->normalize();
HXLINE(  55)		return result1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,slerp,return )

 ::kha::math::Quaternion Quaternion_obj::rotated( ::kha::math::Quaternion b){
            	HX_STACK_FRAME("kha.math.Quaternion","rotated",0x2dd40715,"kha.math.Quaternion.rotated","kha/math/Quaternion.hx",59,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  60)		HX_VARI(  ::kha::math::Quaternion,q) =  ::kha::math::Quaternion_obj::__new(null(),null(),null(),null());
HXLINE(  61)		Float _hx_tmp = this->get_w();
HXDLIN(  61)		Float _hx_tmp1 = b->get_w();
HXDLIN(  61)		Float _hx_tmp2 = (_hx_tmp * _hx_tmp1);
HXDLIN(  61)		Float _hx_tmp3 = this->get_x();
HXDLIN(  61)		Float _hx_tmp4 = b->get_x();
HXDLIN(  61)		Float _hx_tmp5 = (_hx_tmp2 - (_hx_tmp3 * _hx_tmp4));
HXDLIN(  61)		Float _hx_tmp6 = this->get_y();
HXDLIN(  61)		Float _hx_tmp7 = b->get_y();
HXDLIN(  61)		Float _hx_tmp8 = (_hx_tmp5 - (_hx_tmp6 * _hx_tmp7));
HXDLIN(  61)		Float _hx_tmp9 = this->get_z();
HXDLIN(  61)		Float _hx_tmp10 = b->get_z();
HXDLIN(  61)		q->set_w((_hx_tmp8 - (_hx_tmp9 * _hx_tmp10)));
HXLINE(  62)		Float _hx_tmp11 = this->get_w();
HXDLIN(  62)		Float _hx_tmp12 = b->get_x();
HXDLIN(  62)		Float _hx_tmp13 = (_hx_tmp11 * _hx_tmp12);
HXDLIN(  62)		Float _hx_tmp14 = this->get_x();
HXDLIN(  62)		Float _hx_tmp15 = b->get_w();
HXDLIN(  62)		Float _hx_tmp16 = (_hx_tmp13 + (_hx_tmp14 * _hx_tmp15));
HXDLIN(  62)		Float _hx_tmp17 = this->get_y();
HXDLIN(  62)		Float _hx_tmp18 = b->get_z();
HXDLIN(  62)		Float _hx_tmp19 = (_hx_tmp16 + (_hx_tmp17 * _hx_tmp18));
HXDLIN(  62)		Float _hx_tmp20 = this->get_z();
HXDLIN(  62)		Float _hx_tmp21 = b->get_y();
HXDLIN(  62)		q->set_x((_hx_tmp19 - (_hx_tmp20 * _hx_tmp21)));
HXLINE(  63)		Float _hx_tmp22 = this->get_w();
HXDLIN(  63)		Float _hx_tmp23 = b->get_y();
HXDLIN(  63)		Float _hx_tmp24 = (_hx_tmp22 * _hx_tmp23);
HXDLIN(  63)		Float _hx_tmp25 = this->get_y();
HXDLIN(  63)		Float _hx_tmp26 = b->get_w();
HXDLIN(  63)		Float _hx_tmp27 = (_hx_tmp24 + (_hx_tmp25 * _hx_tmp26));
HXDLIN(  63)		Float _hx_tmp28 = this->get_z();
HXDLIN(  63)		Float _hx_tmp29 = b->get_x();
HXDLIN(  63)		Float _hx_tmp30 = (_hx_tmp27 + (_hx_tmp28 * _hx_tmp29));
HXDLIN(  63)		Float _hx_tmp31 = this->get_x();
HXDLIN(  63)		Float _hx_tmp32 = b->get_z();
HXDLIN(  63)		q->set_y((_hx_tmp30 - (_hx_tmp31 * _hx_tmp32)));
HXLINE(  64)		Float _hx_tmp33 = this->get_w();
HXDLIN(  64)		Float _hx_tmp34 = b->get_z();
HXDLIN(  64)		Float _hx_tmp35 = (_hx_tmp33 * _hx_tmp34);
HXDLIN(  64)		Float _hx_tmp36 = this->get_z();
HXDLIN(  64)		Float _hx_tmp37 = b->get_w();
HXDLIN(  64)		Float _hx_tmp38 = (_hx_tmp35 + (_hx_tmp36 * _hx_tmp37));
HXDLIN(  64)		Float _hx_tmp39 = this->get_x();
HXDLIN(  64)		Float _hx_tmp40 = b->get_y();
HXDLIN(  64)		Float _hx_tmp41 = (_hx_tmp38 + (_hx_tmp39 * _hx_tmp40));
HXDLIN(  64)		Float _hx_tmp42 = this->get_y();
HXDLIN(  64)		Float _hx_tmp43 = b->get_x();
HXDLIN(  64)		q->set_z((_hx_tmp41 - (_hx_tmp42 * _hx_tmp43)));
HXLINE(  65)		q->normalize();
HXLINE(  66)		return q;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,rotated,return )

 ::kha::math::Quaternion Quaternion_obj::scaled(Float scale){
            	HX_STACK_FRAME("kha.math.Quaternion","scaled",0x09e8beae,"kha.math.Quaternion.scaled","kha/math/Quaternion.hx",70,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scale,"scale")
HXLINE(  70)		Float _hx_tmp = this->get_x();
HXDLIN(  70)		Float _hx_tmp1 = (_hx_tmp * scale);
HXDLIN(  70)		Float _hx_tmp2 = this->get_y();
HXDLIN(  70)		Float _hx_tmp3 = (_hx_tmp2 * scale);
HXDLIN(  70)		Float _hx_tmp4 = this->get_z();
HXDLIN(  70)		Float _hx_tmp5 = (_hx_tmp4 * scale);
HXDLIN(  70)		Float _hx_tmp6 = this->get_w();
HXDLIN(  70)		return  ::kha::math::Quaternion_obj::__new(_hx_tmp1,_hx_tmp3,_hx_tmp5,(_hx_tmp6 * scale));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,scaled,return )

void Quaternion_obj::scale(Float scale){
            	HX_STACK_FRAME("kha.math.Quaternion","scale",0x518d18f6,"kha.math.Quaternion.scale","kha/math/Quaternion.hx",73,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scale,"scale")
HXLINE(  74)		Float _hx_tmp = this->get_x();
HXDLIN(  74)		this->set_x((_hx_tmp * scale));
HXLINE(  75)		Float _hx_tmp1 = this->get_y();
HXDLIN(  75)		this->set_y((_hx_tmp1 * scale));
HXLINE(  76)		Float _hx_tmp2 = this->get_z();
HXDLIN(  76)		this->set_z((_hx_tmp2 * scale));
HXLINE(  77)		Float _hx_tmp3 = this->get_w();
HXDLIN(  77)		this->set_w((_hx_tmp3 * scale));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,scale,(void))

 ::kha::math::Matrix4 Quaternion_obj::matrix(){
            	HX_STACK_FRAME("kha.math.Quaternion","matrix",0x898b0a55,"kha.math.Quaternion.matrix","kha/math/Quaternion.hx",80,0x3ed4fcc4)
            	HX_STACK_THIS(this)
HXLINE(  83)		Float _hx_tmp = this->get_x();
HXDLIN(  83)		HX_VARI( Float,xs) = (_hx_tmp * ((Float)2.0));
HXLINE(  84)		Float _hx_tmp1 = this->get_y();
HXDLIN(  84)		HX_VARI( Float,ys) = (_hx_tmp1 * ((Float)2.0));
HXLINE(  85)		Float _hx_tmp2 = this->get_z();
HXDLIN(  85)		HX_VARI( Float,zs) = (_hx_tmp2 * ((Float)2.0));
HXLINE(  86)		Float _hx_tmp3 = this->get_w();
HXDLIN(  86)		HX_VARI( Float,wx) = (_hx_tmp3 * xs);
HXLINE(  87)		Float _hx_tmp4 = this->get_w();
HXDLIN(  87)		HX_VARI( Float,wy) = (_hx_tmp4 * ys);
HXLINE(  88)		Float _hx_tmp5 = this->get_w();
HXDLIN(  88)		HX_VARI( Float,wz) = (_hx_tmp5 * zs);
HXLINE(  89)		Float _hx_tmp6 = this->get_x();
HXDLIN(  89)		HX_VARI( Float,xx) = (_hx_tmp6 * xs);
HXLINE(  90)		Float _hx_tmp7 = this->get_x();
HXDLIN(  90)		HX_VARI( Float,xy) = (_hx_tmp7 * ys);
HXLINE(  91)		Float _hx_tmp8 = this->get_x();
HXDLIN(  91)		HX_VARI( Float,xz) = (_hx_tmp8 * zs);
HXLINE(  92)		Float _hx_tmp9 = this->get_y();
HXDLIN(  92)		HX_VARI( Float,yy) = (_hx_tmp9 * ys);
HXLINE(  93)		Float _hx_tmp10 = this->get_y();
HXDLIN(  93)		HX_VARI( Float,yz) = (_hx_tmp10 * zs);
HXLINE(  94)		Float _hx_tmp11 = this->get_z();
HXDLIN(  94)		HX_VARI( Float,zz) = (_hx_tmp11 * zs);
HXLINE(  96)		return  ::kha::math::Matrix4_obj::__new(((int)1 - (yy + zz)),(xy - wz),(xz + wy),(int)0,(xy + wz),((int)1 - (xx + zz)),(yz - wx),(int)0,(xz - wy),(yz + wx),((int)1 - (xx + yy)),(int)0,(int)0,(int)0,(int)0,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,matrix,return )

Float Quaternion_obj::get(Int index){
            	HX_STACK_FRAME("kha.math.Quaternion","get",0xc0271802,"kha.math.Quaternion.get","kha/math/Quaternion.hx",106,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 106)		return this->values->__get(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,get,return )

void Quaternion_obj::set(Int index,Float value){
            	HX_STACK_FRAME("kha.math.Quaternion","set",0xc030330e,"kha.math.Quaternion.set","kha/math/Quaternion.hx",110,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(value,"value")
HXLINE( 110)		this->values[index] = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,set,(void))

Float Quaternion_obj::get_x(){
            	HX_STACK_FRAME("kha.math.Quaternion","get_x",0x6a1eefbb,"kha.math.Quaternion.get_x","kha/math/Quaternion.hx",120,0x3ed4fcc4)
            	HX_STACK_THIS(this)
HXLINE( 120)		return this->values->__get((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,get_x,return )

Float Quaternion_obj::set_x(Float value){
            	HX_STACK_FRAME("kha.math.Quaternion","set_x",0x52ede5c7,"kha.math.Quaternion.set_x","kha/math/Quaternion.hx",124,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 124)		return (this->values[(int)0] = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_x,return )

Float Quaternion_obj::get_y(){
            	HX_STACK_FRAME("kha.math.Quaternion","get_y",0x6a1eefbc,"kha.math.Quaternion.get_y","kha/math/Quaternion.hx",128,0x3ed4fcc4)
            	HX_STACK_THIS(this)
HXLINE( 128)		return this->values->__get((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,get_y,return )

Float Quaternion_obj::set_y(Float value){
            	HX_STACK_FRAME("kha.math.Quaternion","set_y",0x52ede5c8,"kha.math.Quaternion.set_y","kha/math/Quaternion.hx",132,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 132)		return (this->values[(int)1] = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_y,return )

Float Quaternion_obj::get_z(){
            	HX_STACK_FRAME("kha.math.Quaternion","get_z",0x6a1eefbd,"kha.math.Quaternion.get_z","kha/math/Quaternion.hx",136,0x3ed4fcc4)
            	HX_STACK_THIS(this)
HXLINE( 136)		return this->values->__get((int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,get_z,return )

Float Quaternion_obj::set_z(Float value){
            	HX_STACK_FRAME("kha.math.Quaternion","set_z",0x52ede5c9,"kha.math.Quaternion.set_z","kha/math/Quaternion.hx",140,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 140)		return (this->values[(int)2] = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_z,return )

Float Quaternion_obj::get_w(){
            	HX_STACK_FRAME("kha.math.Quaternion","get_w",0x6a1eefba,"kha.math.Quaternion.get_w","kha/math/Quaternion.hx",144,0x3ed4fcc4)
            	HX_STACK_THIS(this)
HXLINE( 144)		return this->values->__get((int)3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,get_w,return )

Float Quaternion_obj::set_w(Float value){
            	HX_STACK_FRAME("kha.math.Quaternion","set_w",0x52ede5c6,"kha.math.Quaternion.set_w","kha/math/Quaternion.hx",148,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 148)		return (this->values[(int)3] = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_w,return )

Float Quaternion_obj::get_length(){
            	HX_STACK_FRAME("kha.math.Quaternion","get_length",0xdd4f72c3,"kha.math.Quaternion.get_length","kha/math/Quaternion.hx",153,0x3ed4fcc4)
            	HX_STACK_THIS(this)
HXLINE( 153)		Float _hx_tmp = this->get_x();
HXDLIN( 153)		Float _hx_tmp1 = this->get_x();
HXDLIN( 153)		Float _hx_tmp2 = (_hx_tmp * _hx_tmp1);
HXDLIN( 153)		Float _hx_tmp3 = this->get_y();
HXDLIN( 153)		Float _hx_tmp4 = this->get_y();
HXDLIN( 153)		Float _hx_tmp5 = (_hx_tmp2 + (_hx_tmp3 * _hx_tmp4));
HXDLIN( 153)		Float _hx_tmp6 = this->get_z();
HXDLIN( 153)		Float _hx_tmp7 = this->get_z();
HXDLIN( 153)		Float _hx_tmp8 = (_hx_tmp5 + (_hx_tmp6 * _hx_tmp7));
HXDLIN( 153)		Float _hx_tmp9 = this->get_w();
HXDLIN( 153)		Float _hx_tmp10 = this->get_w();
HXDLIN( 153)		return ::Math_obj::sqrt((_hx_tmp8 + (_hx_tmp9 * _hx_tmp10)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,get_length,return )

Float Quaternion_obj::set_length(Float length){
            	HX_STACK_FRAME("kha.math.Quaternion","set_length",0xe0cd1137,"kha.math.Quaternion.set_length","kha/math/Quaternion.hx",156,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
HXLINE( 157)		Float _hx_tmp = this->get_length();
HXDLIN( 157)		if ((_hx_tmp == (int)0)) {
HXLINE( 157)			return (int)0;
            		}
HXLINE( 158)		Float _hx_tmp1 = this->get_length();
HXDLIN( 158)		HX_VARI( Float,mul) = ((Float)length / (Float)_hx_tmp1);
HXLINE( 159)		{
HXLINE( 159)			HX_VARI(  ::kha::math::Quaternion,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 159)			Float _hx_tmp2 = _g->get_x();
HXDLIN( 159)			_g->set_x((_hx_tmp2 * mul));
            		}
HXLINE( 160)		{
HXLINE( 160)			HX_VARI_NAME(  ::kha::math::Quaternion,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)			Float _hx_tmp3 = _g1->get_y();
HXDLIN( 160)			_g1->set_y((_hx_tmp3 * mul));
            		}
HXLINE( 161)		{
HXLINE( 161)			HX_VARI_NAME(  ::kha::math::Quaternion,_g2,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 161)			Float _hx_tmp4 = _g2->get_z();
HXDLIN( 161)			_g2->set_z((_hx_tmp4 * mul));
            		}
HXLINE( 162)		return length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_length,return )

 ::kha::math::Quaternion Quaternion_obj::addVector( ::kha::math::Vector3 vec){
            	HX_STACK_FRAME("kha.math.Quaternion","addVector",0x3573d630,"kha.math.Quaternion.addVector","kha/math/Quaternion.hx",166,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vec,"vec")
HXLINE( 167)		Float _hx_tmp = this->get_x();
HXDLIN( 167)		Float _hx_tmp1 = this->get_y();
HXDLIN( 167)		Float _hx_tmp2 = this->get_z();
HXDLIN( 167)		Float _hx_tmp3 = this->get_w();
HXDLIN( 167)		HX_VARI(  ::kha::math::Quaternion,result) =  ::kha::math::Quaternion_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
HXLINE( 168)		HX_VARI(  ::kha::math::Quaternion,q1) =  ::kha::math::Quaternion_obj::__new((int)0,vec->x,vec->y,vec->z);
HXLINE( 170)		q1 = q1->mult(result);
HXLINE( 172)		{
HXLINE( 172)			Float _hx_tmp4 = result->get_x();
HXDLIN( 172)			Float _hx_tmp5 = q1->get_x();
HXDLIN( 172)			result->set_x((_hx_tmp4 + (_hx_tmp5 * ((Float)0.5))));
            		}
HXLINE( 173)		{
HXLINE( 173)			Float _hx_tmp6 = result->get_y();
HXDLIN( 173)			Float _hx_tmp7 = q1->get_y();
HXDLIN( 173)			result->set_y((_hx_tmp6 + (_hx_tmp7 * ((Float)0.5))));
            		}
HXLINE( 174)		{
HXLINE( 174)			Float _hx_tmp8 = result->get_z();
HXDLIN( 174)			Float _hx_tmp9 = q1->get_z();
HXDLIN( 174)			result->set_z((_hx_tmp8 + (_hx_tmp9 * ((Float)0.5))));
            		}
HXLINE( 175)		{
HXLINE( 175)			Float _hx_tmp10 = result->get_w();
HXDLIN( 175)			Float _hx_tmp11 = q1->get_w();
HXDLIN( 175)			result->set_w((_hx_tmp10 + (_hx_tmp11 * ((Float)0.5))));
            		}
HXLINE( 176)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,addVector,return )

 ::kha::math::Quaternion Quaternion_obj::add( ::kha::math::Quaternion q){
            	HX_STACK_FRAME("kha.math.Quaternion","add",0xc022898d,"kha.math.Quaternion.add","kha/math/Quaternion.hx",180,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(q,"q")
HXLINE( 180)		Float _hx_tmp = this->get_x();
HXDLIN( 180)		Float _hx_tmp1 = q->get_x();
HXDLIN( 180)		Float _hx_tmp2 = (_hx_tmp + _hx_tmp1);
HXDLIN( 180)		Float _hx_tmp3 = this->get_y();
HXDLIN( 180)		Float _hx_tmp4 = q->get_y();
HXDLIN( 180)		Float _hx_tmp5 = (_hx_tmp3 + _hx_tmp4);
HXDLIN( 180)		Float _hx_tmp6 = this->get_z();
HXDLIN( 180)		Float _hx_tmp7 = q->get_z();
HXDLIN( 180)		Float _hx_tmp8 = (_hx_tmp6 + _hx_tmp7);
HXDLIN( 180)		Float _hx_tmp9 = this->get_w();
HXDLIN( 180)		Float _hx_tmp10 = q->get_w();
HXDLIN( 180)		return  ::kha::math::Quaternion_obj::__new(_hx_tmp2,_hx_tmp5,_hx_tmp8,(_hx_tmp9 + _hx_tmp10));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,add,return )

 ::kha::math::Quaternion Quaternion_obj::sub( ::kha::math::Quaternion q){
            	HX_STACK_FRAME("kha.math.Quaternion","sub",0xc03040ec,"kha.math.Quaternion.sub","kha/math/Quaternion.hx",184,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(q,"q")
HXLINE( 184)		Float _hx_tmp = this->get_x();
HXDLIN( 184)		Float _hx_tmp1 = q->get_x();
HXDLIN( 184)		Float _hx_tmp2 = (_hx_tmp - _hx_tmp1);
HXDLIN( 184)		Float _hx_tmp3 = this->get_y();
HXDLIN( 184)		Float _hx_tmp4 = q->get_y();
HXDLIN( 184)		Float _hx_tmp5 = (_hx_tmp3 - _hx_tmp4);
HXDLIN( 184)		Float _hx_tmp6 = this->get_z();
HXDLIN( 184)		Float _hx_tmp7 = q->get_z();
HXDLIN( 184)		Float _hx_tmp8 = (_hx_tmp6 - _hx_tmp7);
HXDLIN( 184)		Float _hx_tmp9 = this->get_w();
HXDLIN( 184)		Float _hx_tmp10 = q->get_w();
HXDLIN( 184)		return  ::kha::math::Quaternion_obj::__new(_hx_tmp2,_hx_tmp5,_hx_tmp8,(_hx_tmp9 - _hx_tmp10));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,sub,return )

 ::kha::math::Quaternion Quaternion_obj::mult( ::kha::math::Quaternion r){
            	HX_STACK_FRAME("kha.math.Quaternion","mult",0x66114f04,"kha.math.Quaternion.mult","kha/math/Quaternion.hx",188,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 189)		HX_VARI(  ::kha::math::Quaternion,q) =  ::kha::math::Quaternion_obj::__new(null(),null(),null(),null());
HXLINE( 190)		Float _hx_tmp = this->get_w();
HXDLIN( 190)		Float _hx_tmp1 = r->get_x();
HXDLIN( 190)		Float _hx_tmp2 = (_hx_tmp * _hx_tmp1);
HXDLIN( 190)		Float _hx_tmp3 = this->get_x();
HXDLIN( 190)		Float _hx_tmp4 = r->get_w();
HXDLIN( 190)		Float _hx_tmp5 = (_hx_tmp2 + (_hx_tmp3 * _hx_tmp4));
HXDLIN( 190)		Float _hx_tmp6 = this->get_y();
HXDLIN( 190)		Float _hx_tmp7 = r->get_z();
HXDLIN( 190)		Float _hx_tmp8 = (_hx_tmp5 + (_hx_tmp6 * _hx_tmp7));
HXDLIN( 190)		Float _hx_tmp9 = this->get_z();
HXDLIN( 190)		Float _hx_tmp10 = r->get_y();
HXDLIN( 190)		q->set_x((_hx_tmp8 - (_hx_tmp9 * _hx_tmp10)));
HXLINE( 191)		Float _hx_tmp11 = this->get_w();
HXDLIN( 191)		Float _hx_tmp12 = r->get_y();
HXDLIN( 191)		Float _hx_tmp13 = (_hx_tmp11 * _hx_tmp12);
HXDLIN( 191)		Float _hx_tmp14 = this->get_x();
HXDLIN( 191)		Float _hx_tmp15 = r->get_z();
HXDLIN( 191)		Float _hx_tmp16 = (_hx_tmp13 - (_hx_tmp14 * _hx_tmp15));
HXDLIN( 191)		Float _hx_tmp17 = this->get_y();
HXDLIN( 191)		Float _hx_tmp18 = r->get_w();
HXDLIN( 191)		Float _hx_tmp19 = (_hx_tmp16 + (_hx_tmp17 * _hx_tmp18));
HXDLIN( 191)		Float _hx_tmp20 = this->get_z();
HXDLIN( 191)		Float _hx_tmp21 = r->get_x();
HXDLIN( 191)		q->set_y((_hx_tmp19 + (_hx_tmp20 * _hx_tmp21)));
HXLINE( 192)		Float _hx_tmp22 = this->get_w();
HXDLIN( 192)		Float _hx_tmp23 = r->get_z();
HXDLIN( 192)		Float _hx_tmp24 = (_hx_tmp22 * _hx_tmp23);
HXDLIN( 192)		Float _hx_tmp25 = this->get_x();
HXDLIN( 192)		Float _hx_tmp26 = r->get_y();
HXDLIN( 192)		Float _hx_tmp27 = (_hx_tmp24 + (_hx_tmp25 * _hx_tmp26));
HXDLIN( 192)		Float _hx_tmp28 = this->get_y();
HXDLIN( 192)		Float _hx_tmp29 = r->get_x();
HXDLIN( 192)		Float _hx_tmp30 = (_hx_tmp27 - (_hx_tmp28 * _hx_tmp29));
HXDLIN( 192)		Float _hx_tmp31 = this->get_z();
HXDLIN( 192)		Float _hx_tmp32 = r->get_w();
HXDLIN( 192)		q->set_z((_hx_tmp30 + (_hx_tmp31 * _hx_tmp32)));
HXLINE( 193)		Float _hx_tmp33 = this->get_w();
HXDLIN( 193)		Float _hx_tmp34 = r->get_w();
HXDLIN( 193)		Float _hx_tmp35 = (_hx_tmp33 * _hx_tmp34);
HXDLIN( 193)		Float _hx_tmp36 = this->get_x();
HXDLIN( 193)		Float _hx_tmp37 = r->get_x();
HXDLIN( 193)		Float _hx_tmp38 = (_hx_tmp35 - (_hx_tmp36 * _hx_tmp37));
HXDLIN( 193)		Float _hx_tmp39 = this->get_y();
HXDLIN( 193)		Float _hx_tmp40 = r->get_y();
HXDLIN( 193)		Float _hx_tmp41 = (_hx_tmp38 - (_hx_tmp39 * _hx_tmp40));
HXDLIN( 193)		Float _hx_tmp42 = this->get_z();
HXDLIN( 193)		Float _hx_tmp43 = r->get_z();
HXDLIN( 193)		q->set_w((_hx_tmp41 - (_hx_tmp42 * _hx_tmp43)));
HXLINE( 194)		return q;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,mult,return )

void Quaternion_obj::normalize(){
            	HX_STACK_FRAME("kha.math.Quaternion","normalize",0x919327f9,"kha.math.Quaternion.normalize","kha/math/Quaternion.hx",198,0x3ed4fcc4)
            	HX_STACK_THIS(this)
HXLINE( 198)		Float _hx_tmp = this->get_length();
HXDLIN( 198)		this->scale(((Float)((Float)1.0) / (Float)_hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,normalize,(void))

Float Quaternion_obj::dot( ::kha::math::Quaternion q){
            	HX_STACK_FRAME("kha.math.Quaternion","dot",0xc024d9f5,"kha.math.Quaternion.dot","kha/math/Quaternion.hx",202,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(q,"q")
HXLINE( 202)		Float _hx_tmp = this->get_x();
HXDLIN( 202)		Float _hx_tmp1 = q->get_x();
HXDLIN( 202)		Float _hx_tmp2 = (_hx_tmp * _hx_tmp1);
HXDLIN( 202)		Float _hx_tmp3 = this->get_y();
HXDLIN( 202)		Float _hx_tmp4 = q->get_y();
HXDLIN( 202)		Float _hx_tmp5 = (_hx_tmp2 + (_hx_tmp3 * _hx_tmp4));
HXDLIN( 202)		Float _hx_tmp6 = this->get_z();
HXDLIN( 202)		Float _hx_tmp7 = q->get_z();
HXDLIN( 202)		Float _hx_tmp8 = (_hx_tmp5 + (_hx_tmp6 * _hx_tmp7));
HXDLIN( 202)		Float _hx_tmp9 = this->get_w();
HXDLIN( 202)		Float _hx_tmp10 = q->get_w();
HXDLIN( 202)		return (_hx_tmp8 + (_hx_tmp9 * _hx_tmp10));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,dot,return )

 ::kha::math::Vector3 Quaternion_obj::getEulerAngles(Int A1,Int A2,Int A3,hx::Null< Int >  __o_S,hx::Null< Int >  __o_D){
Int S = __o_S.Default(1);
Int D = __o_D.Default(1);
            	HX_STACK_FRAME("kha.math.Quaternion","getEulerAngles",0xb1f632a7,"kha.math.Quaternion.getEulerAngles","kha/math/Quaternion.hx",221,0x3ed4fcc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(A1,"A1")
            	HX_STACK_ARG(A2,"A2")
            	HX_STACK_ARG(A3,"A3")
            	HX_STACK_ARG(S,"S")
            	HX_STACK_ARG(D,"D")
HXLINE( 223)		HX_VARI(  ::kha::math::Vector3,result) =  ::kha::math::Vector3_obj::__new(null(),null(),null());
HXLINE( 226)		HX_VARI( ::Array< Float >,Q) = ::Array_obj< Float >::__new();
HXLINE( 227)		Float _hx_tmp = this->get_x();
HXDLIN( 227)		Q[(int)0] = _hx_tmp;
HXLINE( 228)		Float _hx_tmp1 = this->get_y();
HXDLIN( 228)		Q[(int)1] = _hx_tmp1;
HXLINE( 229)		Float _hx_tmp2 = this->get_z();
HXDLIN( 229)		Q[(int)2] = _hx_tmp2;
HXLINE( 231)		Float _hx_tmp3 = this->get_w();
HXDLIN( 231)		Float _hx_tmp4 = this->get_w();
HXDLIN( 231)		HX_VARI( Float,ww) = (_hx_tmp3 * _hx_tmp4);
HXLINE( 233)		HX_VARI( Float,Q11) = (Q->__get(A1) * Q->__get(A1));
HXLINE( 234)		HX_VARI( Float,Q22) = (Q->__get(A2) * Q->__get(A2));
HXLINE( 235)		HX_VARI( Float,Q33) = (Q->__get(A3) * Q->__get(A3));
HXLINE( 237)		HX_VARI( Float,psign) = (int)-1;
HXLINE( 240)		HX_VARI( Float,PiOver2) = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXLINE( 243)		Bool _hx_tmp5;
HXDLIN( 243)		if ((hx::Mod((A1 + (int)1),(int)3) == A2)) {
HXLINE( 243)			_hx_tmp5 = (hx::Mod((A2 + (int)1),(int)3) == A3);
            		}
            		else {
HXLINE( 243)			_hx_tmp5 = false;
            		}
HXDLIN( 243)		if (_hx_tmp5) {
HXLINE( 244)			psign = (int)1;
            		}
HXLINE( 246)		Float _hx_tmp6 = (psign * ((Float)2.0));
HXDLIN( 246)		Float _hx_tmp7 = this->get_w();
HXDLIN( 246)		HX_VARI( Float,s2) = (_hx_tmp6 * (((psign * _hx_tmp7) * Q->__get(A2)) + (Q->__get(A1) * Q->__get(A3))));
HXLINE( 249)		if ((s2 < ((Float)-0.9999999))) {
HXLINE( 251)			result->x = (int)0;
HXLINE( 252)			result->y = ((-(S) * D) * PiOver2);
HXLINE( 253)			Int _hx_tmp8 = (S * D);
HXDLIN( 253)			Float _hx_tmp9 = ((psign * Q->__get(A1)) * Q->__get(A2));
HXDLIN( 253)			Float _hx_tmp10 = this->get_w();
HXDLIN( 253)			Float _hx_tmp11 = ((int)2 * (_hx_tmp9 + (_hx_tmp10 * Q->__get(A3))));
HXDLIN( 253)			Float _hx_tmp12 = ::Math_obj::atan2(_hx_tmp11,(((ww + Q22) - Q11) - Q33));
HXDLIN( 253)			result->z = (_hx_tmp8 * _hx_tmp12);
            		}
            		else {
HXLINE( 256)			if ((s2 > ((Float)0.9999999))) {
HXLINE( 258)				result->x = (int)0;
HXLINE( 259)				result->y = ((S * D) * PiOver2);
HXLINE( 260)				Int _hx_tmp13 = (S * D);
HXDLIN( 260)				Float _hx_tmp14 = ((psign * Q->__get(A1)) * Q->__get(A2));
HXDLIN( 260)				Float _hx_tmp15 = this->get_w();
HXDLIN( 260)				Float _hx_tmp16 = ((int)2 * (_hx_tmp14 + (_hx_tmp15 * Q->__get(A3))));
HXDLIN( 260)				Float _hx_tmp17 = ::Math_obj::atan2(_hx_tmp16,(((ww + Q22) - Q11) - Q33));
HXDLIN( 260)				result->z = (_hx_tmp13 * _hx_tmp17);
            			}
            			else {
HXLINE( 265)				Int _hx_tmp18 = (-(S) * D);
HXDLIN( 265)				Float _hx_tmp19 = this->get_w();
HXDLIN( 265)				Float _hx_tmp20 = ((int)-2 * ((_hx_tmp19 * Q->__get(A1)) - ((psign * Q->__get(A2)) * Q->__get(A3))));
HXDLIN( 265)				Float _hx_tmp21 = ::Math_obj::atan2(_hx_tmp20,(((ww + Q33) - Q11) - Q22));
HXDLIN( 265)				result->x = (_hx_tmp18 * _hx_tmp21);
HXLINE( 267)				Int _hx_tmp22 = (S * D);
HXDLIN( 267)				Float _hx_tmp23 = ::Math_obj::asin(s2);
HXDLIN( 267)				result->y = (_hx_tmp22 * _hx_tmp23);
HXLINE( 268)				Int _hx_tmp24 = (S * D);
HXDLIN( 268)				Float _hx_tmp25 = this->get_w();
HXDLIN( 268)				Float _hx_tmp26 = ((int)2 * ((_hx_tmp25 * Q->__get(A3)) - ((psign * Q->__get(A1)) * Q->__get(A2))));
HXDLIN( 268)				Float _hx_tmp27 = ::Math_obj::atan2(_hx_tmp26,(((ww + Q11) - Q22) - Q33));
HXDLIN( 268)				result->z = (_hx_tmp24 * _hx_tmp27);
            			}
            		}
HXLINE( 272)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Quaternion_obj,getEulerAngles,return )

 ::kha::math::Quaternion Quaternion_obj::fromAxisAngle( ::kha::math::Vector3 axis,Float radians){
            	HX_STACK_FRAME("kha.math.Quaternion","fromAxisAngle",0x7d600314,"kha.math.Quaternion.fromAxisAngle","kha/math/Quaternion.hx",22,0x3ed4fcc4)
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(radians,"radians")
HXLINE(  23)		HX_VARI(  ::kha::math::Quaternion,q) =  ::kha::math::Quaternion_obj::__new(null(),null(),null(),null());
HXLINE(  24)		Float _hx_tmp = ::Math_obj::cos(((Float)radians / (Float)((Float)2.0)));
HXDLIN(  24)		q->set_w(_hx_tmp);
HXLINE(  25)		Float _hx_tmp1 = ::Math_obj::sin(((Float)radians / (Float)((Float)2.0)));
HXDLIN(  25)		Float _hx_tmp2 = q->set_z(_hx_tmp1);
HXDLIN(  25)		Float _hx_tmp3 = q->set_y(_hx_tmp2);
HXDLIN(  25)		q->set_x(_hx_tmp3);
HXLINE(  26)		{
HXLINE(  26)			Float _hx_tmp4 = q->get_x();
HXDLIN(  26)			Float _hx_tmp5 = (_hx_tmp4 * axis->x);
HXDLIN(  26)			q->set_x(_hx_tmp5);
            		}
HXLINE(  27)		{
HXLINE(  27)			Float _hx_tmp6 = q->get_y();
HXDLIN(  27)			Float _hx_tmp7 = (_hx_tmp6 * axis->y);
HXDLIN(  27)			q->set_y(_hx_tmp7);
            		}
HXLINE(  28)		{
HXLINE(  28)			Float _hx_tmp8 = q->get_z();
HXDLIN(  28)			Float _hx_tmp9 = (_hx_tmp8 * axis->z);
HXDLIN(  28)			q->set_z(_hx_tmp9);
            		}
HXLINE(  29)		return q;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,fromAxisAngle,return )

Int Quaternion_obj::AXIS_X;

Int Quaternion_obj::AXIS_Y;

Int Quaternion_obj::AXIS_Z;


Quaternion_obj::Quaternion_obj()
{
}

void Quaternion_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Quaternion);
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_END_CLASS();
}

void Quaternion_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(values,"values");
}

hx::Val Quaternion_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_x()); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_y()); }
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_z()); }
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_w()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub_dyn()); }
		if (HX_FIELD_EQ(inName,"dot") ) { return hx::Val( dot_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mult") ) { return hx::Val( mult_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slerp") ) { return hx::Val( slerp_dyn()); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn()); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		if (HX_FIELD_EQ(inName,"get_z") ) { return hx::Val( get_z_dyn()); }
		if (HX_FIELD_EQ(inName,"set_z") ) { return hx::Val( set_z_dyn()); }
		if (HX_FIELD_EQ(inName,"get_w") ) { return hx::Val( get_w_dyn()); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return hx::Val( set_w_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values); }
		if (HX_FIELD_EQ(inName,"scaled") ) { return hx::Val( scaled_dyn()); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix_dyn()); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rotated") ) { return hx::Val( rotated_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addVector") ) { return hx::Val( addVector_dyn()); }
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getEulerAngles") ) { return hx::Val( getEulerAngles_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Quaternion_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"fromAxisAngle") ) { outValue = fromAxisAngle_dyn(); return true; }
	}
	return false;
}

hx::Val Quaternion_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) ); }
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_z(inValue) ); }
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_w(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Quaternion_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Quaternion_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Quaternion_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Quaternion_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Quaternion_obj::AXIS_X,HX_HCSTRING("AXIS_X","\xfa","\x61","\xf5","\xd8")},
	{hx::fsInt,(void *) &Quaternion_obj::AXIS_Y,HX_HCSTRING("AXIS_Y","\xfb","\x61","\xf5","\xd8")},
	{hx::fsInt,(void *) &Quaternion_obj::AXIS_Z,HX_HCSTRING("AXIS_Z","\xfc","\x61","\xf5","\xd8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Quaternion_obj_sMemberFields[] = {
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("slerp","\x6a","\xc8","\xc4","\x7e"),
	HX_HCSTRING("rotated","\xa9","\x49","\x1d","\xf1"),
	HX_HCSTRING("scaled","\x9a","\xea","\x25","\x3c"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_z","\x51","\xa5","\x60","\x91"),
	HX_HCSTRING("set_z","\x5d","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_w","\x4e","\xa5","\x60","\x91"),
	HX_HCSTRING("set_w","\x5a","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	HX_HCSTRING("addVector","\xc4","\xe5","\x81","\x4f"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("mult","\xf0","\x67","\x65","\x48"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("dot","\x89","\x42","\x4c","\x00"),
	HX_HCSTRING("getEulerAngles","\x93","\x2a","\x63","\xec"),
	::String(null()) };

static void Quaternion_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Quaternion_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Quaternion_obj::AXIS_X,"AXIS_X");
	HX_MARK_MEMBER_NAME(Quaternion_obj::AXIS_Y,"AXIS_Y");
	HX_MARK_MEMBER_NAME(Quaternion_obj::AXIS_Z,"AXIS_Z");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Quaternion_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Quaternion_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Quaternion_obj::AXIS_X,"AXIS_X");
	HX_VISIT_MEMBER_NAME(Quaternion_obj::AXIS_Y,"AXIS_Y");
	HX_VISIT_MEMBER_NAME(Quaternion_obj::AXIS_Z,"AXIS_Z");
};

#endif

hx::Class Quaternion_obj::__mClass;

static ::String Quaternion_obj_sStaticFields[] = {
	HX_HCSTRING("fromAxisAngle","\xa8","\x6c","\x6f","\xf0"),
	HX_HCSTRING("AXIS_X","\xfa","\x61","\xf5","\xd8"),
	HX_HCSTRING("AXIS_Y","\xfb","\x61","\xf5","\xd8"),
	HX_HCSTRING("AXIS_Z","\xfc","\x61","\xf5","\xd8"),
	::String(null())
};

void Quaternion_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.math.Quaternion","\xda","\xd1","\x59","\xbc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Quaternion_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Quaternion_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Quaternion_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Quaternion_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Quaternion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Quaternion_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Quaternion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Quaternion_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Quaternion_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.math.Quaternion","boot",0x5ec76b46,"kha.math.Quaternion.boot","kha/math/Quaternion.hx",216,0x3ed4fcc4)
HXLINE( 216)		AXIS_X = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.math.Quaternion","boot",0x5ec76b46,"kha.math.Quaternion.boot","kha/math/Quaternion.hx",217,0x3ed4fcc4)
HXLINE( 217)		AXIS_Y = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.math.Quaternion","boot",0x5ec76b46,"kha.math.Quaternion.boot","kha/math/Quaternion.hx",218,0x3ed4fcc4)
HXLINE( 218)		AXIS_Z = (int)2;
            	}
}

} // end namespace kha
} // end namespace math
