// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_kha_Blob
#include <kha/Blob.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_StbTruetype
#include <kha/graphics2/truetype/StbTruetype.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__active_edge
#include <kha/graphics2/truetype/Stbtt__active_edge.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__bitmap
#include <kha/graphics2/truetype/Stbtt__bitmap.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__edge
#include <kha/graphics2/truetype/Stbtt__edge.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__point
#include <kha/graphics2/truetype/Stbtt__point.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_aligned_quad
#include <kha/graphics2/truetype/Stbtt_aligned_quad.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_bakedchar
#include <kha/graphics2/truetype/Stbtt_bakedchar.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_fontinfo
#include <kha/graphics2/truetype/Stbtt_fontinfo.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_font_v_metrics
#include <kha/graphics2/truetype/Stbtt_temp_font_v_metrics.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_glyph_h_metrics
#include <kha/graphics2/truetype/Stbtt_temp_glyph_h_metrics.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_rect
#include <kha/graphics2/truetype/Stbtt_temp_rect.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_region
#include <kha/graphics2/truetype/Stbtt_temp_region.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_vertex
#include <kha/graphics2/truetype/Stbtt_vertex.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_VectorOfIntPointer
#include <kha/graphics2/truetype/VectorOfIntPointer.h>
#endif

namespace kha{
namespace graphics2{
namespace truetype{

void StbTruetype_obj::__construct() { }

Dynamic StbTruetype_obj::__CreateEmpty() { return new StbTruetype_obj; }

hx::ObjectPtr< StbTruetype_obj > StbTruetype_obj::__new()
{
	hx::ObjectPtr< StbTruetype_obj > _hx_result = new StbTruetype_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic StbTruetype_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StbTruetype_obj > _hx_result = new StbTruetype_obj();
	_hx_result->__construct();
	return _hx_result;
}

void StbTruetype_obj::STBTT_assert(Bool value){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","STBTT_assert",0x69bc9cde,"kha.graphics2.truetype.StbTruetype.STBTT_assert","kha/graphics2/truetype/StbTruetype.hx",182,0x5d9e0de9)
            	HX_STACK_ARG(value,"value")
HXLINE( 182)		if (!(value)) {
HXLINE( 182)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,STBTT_assert,(void))

Float StbTruetype_obj::STBTT_POINT_SIZE(Float x){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","STBTT_POINT_SIZE",0xe08bac88,"kha.graphics2.truetype.StbTruetype.STBTT_POINT_SIZE","kha/graphics2/truetype/StbTruetype.hx",183,0x5d9e0de9)
            	HX_STACK_ARG(x,"x")
HXLINE( 183)		return -(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,STBTT_POINT_SIZE,return )

Int StbTruetype_obj::STBTT_vmove;

Int StbTruetype_obj::STBTT_vline;

Int StbTruetype_obj::STBTT_vcurve;

Int StbTruetype_obj::STBTT_MACSTYLE_DONTCARE;

Int StbTruetype_obj::STBTT_MACSTYLE_BOLD;

Int StbTruetype_obj::STBTT_MACSTYLE_ITALIC;

Int StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE;

Int StbTruetype_obj::STBTT_MACSTYLE_NONE;

Int StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE;

Int StbTruetype_obj::STBTT_PLATFORM_ID_MAC;

Int StbTruetype_obj::STBTT_PLATFORM_ID_ISO;

Int StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT;

Int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0;

Int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1;

Int StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646;

Int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP;

Int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL;

Int StbTruetype_obj::STBTT_MS_EID_SYMBOL;

Int StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP;

Int StbTruetype_obj::STBTT_MS_EID_SHIFTJIS;

Int StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL;

Int StbTruetype_obj::STBTT_MAC_EID_ROMAN;

Int StbTruetype_obj::STBTT_MAC_EID_ARABIC;

Int StbTruetype_obj::STBTT_MAC_EID_JAPANESE;

Int StbTruetype_obj::STBTT_MAC_EID_HEBREW;

Int StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD;

Int StbTruetype_obj::STBTT_MAC_EID_GREEK;

Int StbTruetype_obj::STBTT_MAC_EID_KOREAN;

Int StbTruetype_obj::STBTT_MAC_EID_RUSSIAN;

Int StbTruetype_obj::STBTT_MS_LANG_ENGLISH;

Int StbTruetype_obj::STBTT_MS_LANG_ITALIAN;

Int StbTruetype_obj::STBTT_MS_LANG_CHINESE;

Int StbTruetype_obj::STBTT_MS_LANG_JAPANESE;

Int StbTruetype_obj::STBTT_MS_LANG_DUTCH;

Int StbTruetype_obj::STBTT_MS_LANG_KOREAN;

Int StbTruetype_obj::STBTT_MS_LANG_FRENCH;

Int StbTruetype_obj::STBTT_MS_LANG_RUSSIAN;

Int StbTruetype_obj::STBTT_MS_LANG_GERMAN;

Int StbTruetype_obj::STBTT_MS_LANG_SPANISH;

Int StbTruetype_obj::STBTT_MS_LANG_HEBREW;

Int StbTruetype_obj::STBTT_MS_LANG_SWEDISH;

Int StbTruetype_obj::STBTT_MAC_LANG_ENGLISH;

Int StbTruetype_obj::STBTT_MAC_LANG_JAPANESE;

Int StbTruetype_obj::STBTT_MAC_LANG_ARABIC;

Int StbTruetype_obj::STBTT_MAC_LANG_KOREAN;

Int StbTruetype_obj::STBTT_MAC_LANG_DUTCH;

Int StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN;

Int StbTruetype_obj::STBTT_MAC_LANG_FRENCH;

Int StbTruetype_obj::STBTT_MAC_LANG_SPANISH;

Int StbTruetype_obj::STBTT_MAC_LANG_GERMAN;

Int StbTruetype_obj::STBTT_MAC_LANG_SWEDISH;

Int StbTruetype_obj::STBTT_MAC_LANG_HEBREW;

Int StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED;

Int StbTruetype_obj::STBTT_MAC_LANG_ITALIAN;

Int StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD;

Int StbTruetype_obj::STBTT_MAX_OVERSAMPLE;

Int StbTruetype_obj::STBTT_RASTERIZER_VERSION;

Int StbTruetype_obj::ttBYTE( ::kha::Blob p,hx::Null< Int >  __o_pos){
Int pos = __o_pos.Default(0);
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","ttBYTE",0x1ef477a2,"kha.graphics2.truetype.StbTruetype.ttBYTE","kha/graphics2/truetype/StbTruetype.hx",260,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 260)		return p->readU8(pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttBYTE,return )

Int StbTruetype_obj::ttCHAR( ::kha::Blob p,hx::Null< Int >  __o_pos){
Int pos = __o_pos.Default(0);
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","ttCHAR",0x1f90b770,"kha.graphics2.truetype.StbTruetype.ttCHAR","kha/graphics2/truetype/StbTruetype.hx",263,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 264)		HX_VARI( Int,n) = p->readU8(pos);
HXLINE( 265)		if ((n >= (int)128)) {
HXLINE( 266)			return (n - (int)256);
            		}
HXLINE( 267)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttCHAR,return )

Int StbTruetype_obj::ttUSHORT( ::kha::Blob p,hx::Null< Int >  __o_pos){
Int pos = __o_pos.Default(0);
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","ttUSHORT",0x3b34d301,"kha.graphics2.truetype.StbTruetype.ttUSHORT","kha/graphics2/truetype/StbTruetype.hx",270,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 271)		HX_VARI( Int,ch1) = p->readU8(pos);
HXLINE( 272)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXLINE( 273)		return ((int)ch2 | (int)((int)ch1 << (int)(int)8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttUSHORT,return )

Int StbTruetype_obj::ttSHORT( ::kha::Blob p,hx::Null< Int >  __o_pos){
Int pos = __o_pos.Default(0);
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","ttSHORT",0xb583b282,"kha.graphics2.truetype.StbTruetype.ttSHORT","kha/graphics2/truetype/StbTruetype.hx",276,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 277)		HX_VARI( Int,ch1) = p->readU8(pos);
HXLINE( 278)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXLINE( 279)		HX_VARI( Int,n) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXLINE( 280)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 281)			return (n - (int)65536);
            		}
HXLINE( 282)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttSHORT,return )

Int StbTruetype_obj::ttULONG( ::kha::Blob p,hx::Null< Int >  __o_pos){
Int pos = __o_pos.Default(0);
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","ttULONG",0xdef5b277,"kha.graphics2.truetype.StbTruetype.ttULONG","kha/graphics2/truetype/StbTruetype.hx",285,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 285)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 285)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 285)		HX_VARI( Int,ch3) = p->readU8((pos + (int)2));
HXDLIN( 285)		HX_VARI( Int,ch4) = p->readU8((pos + (int)3));
HXDLIN( 285)		return ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch1 << (int)(int)24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttULONG,return )

Int StbTruetype_obj::ttLONG( ::kha::Blob p,hx::Null< Int >  __o_pos){
Int pos = __o_pos.Default(0);
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","ttLONG",0x2588fe16,"kha.graphics2.truetype.StbTruetype.ttLONG","kha/graphics2/truetype/StbTruetype.hx",287,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 288)		HX_VARI( Int,ch1) = p->readU8(pos);
HXLINE( 289)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXLINE( 290)		HX_VARI( Int,ch3) = p->readU8((pos + (int)2));
HXLINE( 291)		HX_VARI( Int,ch4) = p->readU8((pos + (int)3));
HXLINE( 292)		return ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch1 << (int)(int)24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttLONG,return )

Int StbTruetype_obj::ttFixed( ::kha::Blob p,hx::Null< Int >  __o_pos){
Int pos = __o_pos.Default(0);
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","ttFixed",0x4f3d5f7a,"kha.graphics2.truetype.StbTruetype.ttFixed","kha/graphics2/truetype/StbTruetype.hx",295,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 295)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 295)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 295)		HX_VARI( Int,ch3) = p->readU8((pos + (int)2));
HXDLIN( 295)		HX_VARI( Int,ch4) = p->readU8((pos + (int)3));
HXDLIN( 295)		return ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch1 << (int)(int)24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttFixed,return )

Bool StbTruetype_obj::stbtt_tag4( ::kha::Blob p,Int pos,Int c0,Int c1,Int c2,Int c3){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_tag4",0x787a9892,"kha.graphics2.truetype.StbTruetype.stbtt_tag4","kha/graphics2/truetype/StbTruetype.hx",297,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(c0,"c0")
            	HX_STACK_ARG(c1,"c1")
            	HX_STACK_ARG(c2,"c2")
            	HX_STACK_ARG(c3,"c3")
HXLINE( 297)		Bool _hx_tmp;
HXDLIN( 297)		Bool _hx_tmp1;
HXDLIN( 297)		Int _hx_tmp2 = p->readU8(pos);
HXDLIN( 297)		if ((_hx_tmp2 == c0)) {
HXLINE( 297)			Int _hx_tmp3 = p->readU8((pos + (int)1));
HXDLIN( 297)			_hx_tmp1 = (_hx_tmp3 == c1);
            		}
            		else {
HXLINE( 297)			_hx_tmp1 = false;
            		}
HXDLIN( 297)		if (_hx_tmp1) {
HXLINE( 297)			Int _hx_tmp4 = p->readU8((pos + (int)2));
HXDLIN( 297)			_hx_tmp = (_hx_tmp4 == c2);
            		}
            		else {
HXLINE( 297)			_hx_tmp = false;
            		}
HXDLIN( 297)		if (_hx_tmp) {
HXLINE( 297)			Int _hx_tmp5 = p->readU8((pos + (int)3));
HXDLIN( 297)			return (_hx_tmp5 == c3);
            		}
            		else {
HXLINE( 297)			return false;
            		}
HXDLIN( 297)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_tag4,return )

Bool StbTruetype_obj::stbtt_tag( ::kha::Blob p,Int pos,::String str){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_tag",0x6ebf1d62,"kha.graphics2.truetype.StbTruetype.stbtt_tag","kha/graphics2/truetype/StbTruetype.hx",298,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(str,"str")
HXLINE( 298)		Int c0 = str.charCodeAt((int)0);
HXDLIN( 298)		Int c1 = str.charCodeAt((int)1);
HXDLIN( 298)		Int c2 = str.charCodeAt((int)2);
HXDLIN( 298)		Int c3 = str.charCodeAt((int)3);
HXDLIN( 298)		Bool _hx_tmp;
HXDLIN( 298)		Bool _hx_tmp1;
HXDLIN( 298)		Int _hx_tmp2 = p->readU8(pos);
HXDLIN( 298)		if ((_hx_tmp2 == c0)) {
HXLINE( 298)			Int _hx_tmp3 = p->readU8((pos + (int)1));
HXDLIN( 298)			_hx_tmp1 = (_hx_tmp3 == c1);
            		}
            		else {
HXLINE( 298)			_hx_tmp1 = false;
            		}
HXDLIN( 298)		if (_hx_tmp1) {
HXLINE( 298)			Int _hx_tmp4 = p->readU8((pos + (int)2));
HXDLIN( 298)			_hx_tmp = (_hx_tmp4 == c2);
            		}
            		else {
HXLINE( 298)			_hx_tmp = false;
            		}
HXDLIN( 298)		if (_hx_tmp) {
HXLINE( 298)			Int _hx_tmp5 = p->readU8((pos + (int)3));
HXDLIN( 298)			return (_hx_tmp5 == c3);
            		}
            		else {
HXLINE( 298)			return false;
            		}
HXDLIN( 298)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_tag,return )

Bool StbTruetype_obj::stbtt__isfont( ::kha::Blob font){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__isfont",0x3c7def60,"kha.graphics2.truetype.StbTruetype.stbtt__isfont","kha/graphics2/truetype/StbTruetype.hx",300,0x5d9e0de9)
            	HX_STACK_ARG(font,"font")
HXLINE( 302)		Int c0 = HX_("1",31,00,00,00).charCodeAt((int)0);
HXDLIN( 302)		Bool _hx_tmp;
HXDLIN( 302)		Bool _hx_tmp1;
HXDLIN( 302)		Bool _hx_tmp2;
HXDLIN( 302)		Int _hx_tmp3 = font->readU8((int)0);
HXDLIN( 302)		if ((_hx_tmp3 == c0)) {
HXLINE( 302)			Int _hx_tmp4 = font->readU8((int)1);
HXDLIN( 302)			_hx_tmp2 = (_hx_tmp4 == (int)0);
            		}
            		else {
HXLINE( 302)			_hx_tmp2 = false;
            		}
HXDLIN( 302)		if (_hx_tmp2) {
HXLINE( 302)			Int _hx_tmp5 = font->readU8((int)2);
HXDLIN( 302)			_hx_tmp1 = (_hx_tmp5 == (int)0);
            		}
            		else {
HXLINE( 302)			_hx_tmp1 = false;
            		}
HXDLIN( 302)		if (_hx_tmp1) {
HXLINE( 302)			Int _hx_tmp6 = font->readU8((int)3);
HXDLIN( 302)			_hx_tmp = (_hx_tmp6 == (int)0);
            		}
            		else {
HXLINE( 302)			_hx_tmp = false;
            		}
HXDLIN( 302)		if (_hx_tmp) {
HXLINE( 302)			return true;
            		}
HXLINE( 303)		Int c01 = HX_("typ1",86,f2,08,4d).charCodeAt((int)0);
HXDLIN( 303)		Int c1 = HX_("typ1",86,f2,08,4d).charCodeAt((int)1);
HXDLIN( 303)		Int c2 = HX_("typ1",86,f2,08,4d).charCodeAt((int)2);
HXDLIN( 303)		Int c3 = HX_("typ1",86,f2,08,4d).charCodeAt((int)3);
HXDLIN( 303)		Bool _hx_tmp7;
HXDLIN( 303)		Bool _hx_tmp8;
HXDLIN( 303)		Bool _hx_tmp9;
HXDLIN( 303)		Int _hx_tmp10 = font->readU8((int)0);
HXDLIN( 303)		if ((_hx_tmp10 == c01)) {
HXLINE( 303)			Int _hx_tmp11 = font->readU8((int)1);
HXDLIN( 303)			_hx_tmp9 = (_hx_tmp11 == c1);
            		}
            		else {
HXLINE( 303)			_hx_tmp9 = false;
            		}
HXDLIN( 303)		if (_hx_tmp9) {
HXLINE( 303)			Int _hx_tmp12 = font->readU8((int)2);
HXDLIN( 303)			_hx_tmp8 = (_hx_tmp12 == c2);
            		}
            		else {
HXLINE( 303)			_hx_tmp8 = false;
            		}
HXDLIN( 303)		if (_hx_tmp8) {
HXLINE( 303)			Int _hx_tmp13 = font->readU8((int)3);
HXDLIN( 303)			_hx_tmp7 = (_hx_tmp13 == c3);
            		}
            		else {
HXLINE( 303)			_hx_tmp7 = false;
            		}
HXDLIN( 303)		if (_hx_tmp7) {
HXLINE( 303)			return true;
            		}
HXLINE( 304)		Int c02 = HX_("OTTO",e0,e1,77,34).charCodeAt((int)0);
HXDLIN( 304)		Int c11 = HX_("OTTO",e0,e1,77,34).charCodeAt((int)1);
HXDLIN( 304)		Int c21 = HX_("OTTO",e0,e1,77,34).charCodeAt((int)2);
HXDLIN( 304)		Int c31 = HX_("OTTO",e0,e1,77,34).charCodeAt((int)3);
HXDLIN( 304)		Bool _hx_tmp14;
HXDLIN( 304)		Bool _hx_tmp15;
HXDLIN( 304)		Bool _hx_tmp16;
HXDLIN( 304)		Int _hx_tmp17 = font->readU8((int)0);
HXDLIN( 304)		if ((_hx_tmp17 == c02)) {
HXLINE( 304)			Int _hx_tmp18 = font->readU8((int)1);
HXDLIN( 304)			_hx_tmp16 = (_hx_tmp18 == c11);
            		}
            		else {
HXLINE( 304)			_hx_tmp16 = false;
            		}
HXDLIN( 304)		if (_hx_tmp16) {
HXLINE( 304)			Int _hx_tmp19 = font->readU8((int)2);
HXDLIN( 304)			_hx_tmp15 = (_hx_tmp19 == c21);
            		}
            		else {
HXLINE( 304)			_hx_tmp15 = false;
            		}
HXDLIN( 304)		if (_hx_tmp15) {
HXLINE( 304)			Int _hx_tmp20 = font->readU8((int)3);
HXDLIN( 304)			_hx_tmp14 = (_hx_tmp20 == c31);
            		}
            		else {
HXLINE( 304)			_hx_tmp14 = false;
            		}
HXDLIN( 304)		if (_hx_tmp14) {
HXLINE( 304)			return true;
            		}
HXLINE( 305)		Bool _hx_tmp21;
HXDLIN( 305)		Bool _hx_tmp22;
HXDLIN( 305)		Bool _hx_tmp23;
HXDLIN( 305)		Int _hx_tmp24 = font->readU8((int)0);
HXDLIN( 305)		if ((_hx_tmp24 == (int)0)) {
HXLINE( 305)			Int _hx_tmp25 = font->readU8((int)1);
HXDLIN( 305)			_hx_tmp23 = (_hx_tmp25 == (int)1);
            		}
            		else {
HXLINE( 305)			_hx_tmp23 = false;
            		}
HXDLIN( 305)		if (_hx_tmp23) {
HXLINE( 305)			Int _hx_tmp26 = font->readU8((int)2);
HXDLIN( 305)			_hx_tmp22 = (_hx_tmp26 == (int)0);
            		}
            		else {
HXLINE( 305)			_hx_tmp22 = false;
            		}
HXDLIN( 305)		if (_hx_tmp22) {
HXLINE( 305)			Int _hx_tmp27 = font->readU8((int)3);
HXDLIN( 305)			_hx_tmp21 = (_hx_tmp27 == (int)0);
            		}
            		else {
HXLINE( 305)			_hx_tmp21 = false;
            		}
HXDLIN( 305)		if (_hx_tmp21) {
HXLINE( 305)			return true;
            		}
HXLINE( 306)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,stbtt__isfont,return )

Int StbTruetype_obj::stbtt__find_table( ::kha::Blob data,Int fontstart,::String tag){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__find_table",0x8d01186f,"kha.graphics2.truetype.StbTruetype.stbtt__find_table","kha/graphics2/truetype/StbTruetype.hx",310,0x5d9e0de9)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(fontstart,"fontstart")
            	HX_STACK_ARG(tag,"tag")
HXLINE( 311)		HX_VARI( Int,pos) = (fontstart + (int)4);
HXDLIN( 311)		HX_VARI( Int,ch1) = data->readU8(pos);
HXDLIN( 311)		HX_VARI( Int,ch2) = data->readU8((pos + (int)1));
HXDLIN( 311)		HX_VARI( Int,num_tables) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXLINE( 312)		HX_VARI( Int,tabledir) = (fontstart + (int)12);
HXLINE( 313)		{
HXLINE( 313)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 313)			while((_g1 < num_tables)){
HXLINE( 313)				HX_VARI( Int,i) = _g1++;
HXLINE( 314)				HX_VARI( Int,loc) = (tabledir + ((int)16 * i));
HXLINE( 315)				Int c0 = tag.charCodeAt((int)0);
HXDLIN( 315)				Int c1 = tag.charCodeAt((int)1);
HXDLIN( 315)				Int c2 = tag.charCodeAt((int)2);
HXDLIN( 315)				Int c3 = tag.charCodeAt((int)3);
HXDLIN( 315)				Bool _hx_tmp;
HXDLIN( 315)				Bool _hx_tmp1;
HXDLIN( 315)				Bool _hx_tmp2;
HXDLIN( 315)				Int _hx_tmp3 = data->readU8(loc);
HXDLIN( 315)				if ((_hx_tmp3 == c0)) {
HXLINE( 315)					Int _hx_tmp4 = data->readU8((loc + (int)1));
HXDLIN( 315)					_hx_tmp2 = (_hx_tmp4 == c1);
            				}
            				else {
HXLINE( 315)					_hx_tmp2 = false;
            				}
HXDLIN( 315)				if (_hx_tmp2) {
HXLINE( 315)					Int _hx_tmp5 = data->readU8((loc + (int)2));
HXDLIN( 315)					_hx_tmp1 = (_hx_tmp5 == c2);
            				}
            				else {
HXLINE( 315)					_hx_tmp1 = false;
            				}
HXDLIN( 315)				if (_hx_tmp1) {
HXLINE( 315)					Int _hx_tmp6 = data->readU8((loc + (int)3));
HXDLIN( 315)					_hx_tmp = (_hx_tmp6 == c3);
            				}
            				else {
HXLINE( 315)					_hx_tmp = false;
            				}
HXDLIN( 315)				if (_hx_tmp) {
HXLINE( 316)					HX_VARI_NAME( Int,pos1,"pos") = (loc + (int)8);
HXDLIN( 316)					HX_VARI_NAME( Int,ch11,"ch1") = data->readU8(pos1);
HXDLIN( 316)					HX_VARI_NAME( Int,ch21,"ch2") = data->readU8((pos1 + (int)1));
HXDLIN( 316)					HX_VARI( Int,ch3) = data->readU8((pos1 + (int)2));
HXDLIN( 316)					HX_VARI( Int,ch4) = data->readU8((pos1 + (int)3));
HXDLIN( 316)					return ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch21 << (int)(int)16)) | (int)((int)ch11 << (int)(int)24));
            				}
            			}
            		}
HXLINE( 318)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt__find_table,return )

Int StbTruetype_obj::stbtt_GetFontOffsetForIndex( ::kha::Blob font_collection,Int index){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetFontOffsetForIndex",0x75577749,"kha.graphics2.truetype.StbTruetype.stbtt_GetFontOffsetForIndex","kha/graphics2/truetype/StbTruetype.hx",321,0x5d9e0de9)
            	HX_STACK_ARG(font_collection,"font_collection")
            	HX_STACK_ARG(index,"index")
HXLINE( 323)		Bool _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__isfont(font_collection);
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 324)			if ((index == (int)0)) {
HXLINE( 324)				return (int)0;
            			}
            			else {
HXLINE( 324)				return (int)-1;
            			}
            		}
HXLINE( 327)		Int c0 = HX_("ttcf",23,1c,05,4d).charCodeAt((int)0);
HXDLIN( 327)		Int c1 = HX_("ttcf",23,1c,05,4d).charCodeAt((int)1);
HXDLIN( 327)		Int c2 = HX_("ttcf",23,1c,05,4d).charCodeAt((int)2);
HXDLIN( 327)		Int c3 = HX_("ttcf",23,1c,05,4d).charCodeAt((int)3);
HXDLIN( 327)		Bool _hx_tmp1;
HXDLIN( 327)		Bool _hx_tmp2;
HXDLIN( 327)		Bool _hx_tmp3;
HXDLIN( 327)		Int _hx_tmp4 = font_collection->readU8((int)0);
HXDLIN( 327)		if ((_hx_tmp4 == c0)) {
HXLINE( 327)			Int _hx_tmp5 = font_collection->readU8((int)1);
HXDLIN( 327)			_hx_tmp3 = (_hx_tmp5 == c1);
            		}
            		else {
HXLINE( 327)			_hx_tmp3 = false;
            		}
HXDLIN( 327)		if (_hx_tmp3) {
HXLINE( 327)			Int _hx_tmp6 = font_collection->readU8((int)2);
HXDLIN( 327)			_hx_tmp2 = (_hx_tmp6 == c2);
            		}
            		else {
HXLINE( 327)			_hx_tmp2 = false;
            		}
HXDLIN( 327)		if (_hx_tmp2) {
HXLINE( 327)			Int _hx_tmp7 = font_collection->readU8((int)3);
HXDLIN( 327)			_hx_tmp1 = (_hx_tmp7 == c3);
            		}
            		else {
HXLINE( 327)			_hx_tmp1 = false;
            		}
HXDLIN( 327)		if (_hx_tmp1) {
HXLINE( 329)			Bool _hx_tmp8;
HXDLIN( 329)			HX_VARI( Int,ch1) = font_collection->readU8((int)4);
HXDLIN( 329)			HX_VARI( Int,ch2) = font_collection->readU8((int)5);
HXDLIN( 329)			HX_VARI( Int,ch3) = font_collection->readU8((int)6);
HXDLIN( 329)			HX_VARI( Int,ch4) = font_collection->readU8((int)7);
HXDLIN( 329)			if ((((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch1 << (int)(int)24)) != (int)65536)) {
HXLINE( 329)				HX_VARI_NAME( Int,ch11,"ch1") = font_collection->readU8((int)4);
HXDLIN( 329)				HX_VARI_NAME( Int,ch21,"ch2") = font_collection->readU8((int)5);
HXDLIN( 329)				HX_VARI_NAME( Int,ch31,"ch3") = font_collection->readU8((int)6);
HXDLIN( 329)				HX_VARI_NAME( Int,ch41,"ch4") = font_collection->readU8((int)7);
HXDLIN( 329)				_hx_tmp8 = (((int)((int)((int)ch41 | (int)((int)ch31 << (int)(int)8)) | (int)((int)ch21 << (int)(int)16)) | (int)((int)ch11 << (int)(int)24)) == (int)131072);
            			}
            			else {
HXLINE( 329)				_hx_tmp8 = true;
            			}
HXDLIN( 329)			if (_hx_tmp8) {
HXLINE( 330)				HX_VARI_NAME( Int,ch12,"ch1") = font_collection->readU8((int)8);
HXDLIN( 330)				HX_VARI_NAME( Int,ch22,"ch2") = font_collection->readU8((int)9);
HXDLIN( 330)				HX_VARI_NAME( Int,ch32,"ch3") = font_collection->readU8((int)10);
HXDLIN( 330)				HX_VARI_NAME( Int,ch42,"ch4") = font_collection->readU8((int)11);
HXLINE( 331)				if ((index >= ((int)((int)((int)ch42 | (int)((int)ch32 << (int)(int)8)) | (int)((int)ch22 << (int)(int)16)) | (int)((int)ch12 << (int)(int)24)))) {
HXLINE( 332)					return (int)-1;
            				}
HXLINE( 333)				HX_VARI( Int,pos) = ((int)12 + (index * (int)4));
HXDLIN( 333)				HX_VARI_NAME( Int,ch13,"ch1") = font_collection->readU8(pos);
HXDLIN( 333)				HX_VARI_NAME( Int,ch23,"ch2") = font_collection->readU8((pos + (int)1));
HXDLIN( 333)				HX_VARI_NAME( Int,ch33,"ch3") = font_collection->readU8((pos + (int)2));
HXDLIN( 333)				HX_VARI_NAME( Int,ch43,"ch4") = font_collection->readU8((pos + (int)3));
HXDLIN( 333)				return ((int)((int)((int)ch43 | (int)((int)ch33 << (int)(int)8)) | (int)((int)ch23 << (int)(int)16)) | (int)((int)ch13 << (int)(int)24));
            			}
            		}
HXLINE( 336)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetFontOffsetForIndex,return )

Bool StbTruetype_obj::stbtt_InitFont( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::Blob data,Int fontstart){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_InitFont",0x8c3a8917,"kha.graphics2.truetype.StbTruetype.stbtt_InitFont","kha/graphics2/truetype/StbTruetype.hx",339,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(fontstart,"fontstart")
HXLINE( 340)		HX_VAR( Int,cmap);
HXDLIN( 340)		HX_VAR( Int,t);
HXLINE( 341)		HX_VAR( Int,numTables);
HXLINE( 343)		info->data = data;
HXLINE( 344)		info->fontstart = fontstart;
HXLINE( 346)		cmap = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("cmap",19,2a,c3,41));
HXLINE( 347)		info->loca = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("loca",e1,9b,b7,47));
HXLINE( 348)		info->head = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("head",20,29,0b,45));
HXLINE( 349)		info->glyf = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("glyf",32,57,67,44));
HXLINE( 350)		info->hhea = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("hhea",5c,73,0d,45));
HXLINE( 351)		info->hmtx = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("hmtx",c9,4b,11,45));
HXLINE( 352)		info->kern = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("kern",d6,db,06,47));
HXLINE( 353)		Bool _hx_tmp;
HXDLIN( 353)		Bool _hx_tmp1;
HXDLIN( 353)		Bool _hx_tmp2;
HXDLIN( 353)		Bool _hx_tmp3;
HXDLIN( 353)		Bool _hx_tmp4;
HXDLIN( 353)		if ((cmap != (int)0)) {
HXLINE( 353)			_hx_tmp4 = (info->loca == (int)0);
            		}
            		else {
HXLINE( 353)			_hx_tmp4 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp4)) {
HXLINE( 353)			_hx_tmp3 = (info->head == (int)0);
            		}
            		else {
HXLINE( 353)			_hx_tmp3 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp3)) {
HXLINE( 353)			_hx_tmp2 = (info->glyf == (int)0);
            		}
            		else {
HXLINE( 353)			_hx_tmp2 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp2)) {
HXLINE( 353)			_hx_tmp1 = (info->hhea == (int)0);
            		}
            		else {
HXLINE( 353)			_hx_tmp1 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp1)) {
HXLINE( 353)			_hx_tmp = (info->hmtx == (int)0);
            		}
            		else {
HXLINE( 353)			_hx_tmp = true;
            		}
HXDLIN( 353)		if (_hx_tmp) {
HXLINE( 354)			return false;
            		}
HXLINE( 356)		t = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("maxp",4c,45,56,48));
HXLINE( 357)		if ((t != (int)0)) {
HXLINE( 358)			HX_VARI( Int,pos) = (t + (int)4);
HXDLIN( 358)			HX_VARI( Int,ch1) = data->readU8(pos);
HXDLIN( 358)			HX_VARI( Int,ch2) = data->readU8((pos + (int)1));
HXDLIN( 358)			info->numGlyphs = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
            		}
            		else {
HXLINE( 360)			info->numGlyphs = (int)65535;
            		}
HXLINE( 365)		HX_VARI_NAME( Int,pos1,"pos") = (cmap + (int)2);
HXDLIN( 365)		HX_VARI_NAME( Int,ch11,"ch1") = data->readU8(pos1);
HXDLIN( 365)		HX_VARI_NAME( Int,ch21,"ch2") = data->readU8((pos1 + (int)1));
HXDLIN( 365)		numTables = ((int)ch21 | (int)((int)ch11 << (int)(int)8));
HXLINE( 366)		info->index_map = (int)0;
HXLINE( 368)		{
HXLINE( 368)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 368)			while((_g1 < numTables)){
HXLINE( 368)				HX_VARI( Int,i) = _g1++;
HXLINE( 369)				HX_VARI( Int,encoding_record) = ((cmap + (int)4) + ((int)8 * i));
HXLINE( 371)				{
HXLINE( 371)					HX_VARI_NAME( Int,ch12,"ch1") = data->readU8(encoding_record);
HXDLIN( 371)					HX_VARI_NAME( Int,ch22,"ch2") = data->readU8((encoding_record + (int)1));
HXDLIN( 371)					switch((int)(((int)ch22 | (int)((int)ch12 << (int)(int)8)))){
            						case (int)0: {
HXLINE( 381)							HX_VARI_NAME( Int,pos2,"pos") = (encoding_record + (int)4);
HXDLIN( 381)							HX_VARI_NAME( Int,ch13,"ch1") = data->readU8(pos2);
HXDLIN( 381)							HX_VARI_NAME( Int,ch23,"ch2") = data->readU8((pos2 + (int)1));
HXDLIN( 381)							HX_VARI( Int,ch3) = data->readU8((pos2 + (int)2));
HXDLIN( 381)							HX_VARI( Int,ch4) = data->readU8((pos2 + (int)3));
HXDLIN( 381)							info->index_map = (cmap + ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch23 << (int)(int)16)) | (int)((int)ch13 << (int)(int)24)));
            						}
            						break;
            						case (int)3: {
HXLINE( 373)							HX_VARI_NAME( Int,pos3,"pos") = (encoding_record + (int)2);
HXDLIN( 373)							HX_VARI_NAME( Int,ch14,"ch1") = data->readU8(pos3);
HXDLIN( 373)							HX_VARI_NAME( Int,ch24,"ch2") = data->readU8((pos3 + (int)1));
HXDLIN( 373)							switch((int)(((int)ch24 | (int)((int)ch14 << (int)(int)8)))){
            								case (int)1: case (int)10: {
HXLINE( 376)									HX_VARI_NAME( Int,pos4,"pos") = (encoding_record + (int)4);
HXDLIN( 376)									HX_VARI_NAME( Int,ch15,"ch1") = data->readU8(pos4);
HXDLIN( 376)									HX_VARI_NAME( Int,ch25,"ch2") = data->readU8((pos4 + (int)1));
HXDLIN( 376)									HX_VARI_NAME( Int,ch31,"ch3") = data->readU8((pos4 + (int)2));
HXDLIN( 376)									HX_VARI_NAME( Int,ch41,"ch4") = data->readU8((pos4 + (int)3));
HXDLIN( 376)									info->index_map = (cmap + ((int)((int)((int)ch41 | (int)((int)ch31 << (int)(int)8)) | (int)((int)ch25 << (int)(int)16)) | (int)((int)ch15 << (int)(int)24)));
            								}
            								break;
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 384)		if ((info->index_map == (int)0)) {
HXLINE( 385)			return false;
            		}
HXLINE( 387)		HX_VARI_NAME( Int,pos5,"pos") = (info->head + (int)50);
HXDLIN( 387)		HX_VARI_NAME( Int,ch16,"ch1") = data->readU8(pos5);
HXDLIN( 387)		HX_VARI_NAME( Int,ch26,"ch2") = data->readU8((pos5 + (int)1));
HXDLIN( 387)		info->indexToLocFormat = ((int)ch26 | (int)((int)ch16 << (int)(int)8));
HXLINE( 388)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_InitFont,return )

Int StbTruetype_obj::stbtt_FindGlyphIndex( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int unicode_codepoint){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_FindGlyphIndex",0xbf6bd177,"kha.graphics2.truetype.StbTruetype.stbtt_FindGlyphIndex","kha/graphics2/truetype/StbTruetype.hx",391,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(unicode_codepoint,"unicode_codepoint")
HXLINE( 392)		HX_VARI(  ::kha::Blob,data) = info->data;
HXLINE( 393)		HX_VARI( Int,index_map) = info->index_map;
HXLINE( 395)		HX_VARI( Int,ch1) = data->readU8(index_map);
HXDLIN( 395)		HX_VARI( Int,ch2) = data->readU8((index_map + (int)1));
HXDLIN( 395)		HX_VARI( Int,format) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXLINE( 396)		if ((format == (int)0)) {
HXLINE( 397)			HX_VARI( Int,pos) = (index_map + (int)2);
HXDLIN( 397)			HX_VARI_NAME( Int,ch11,"ch1") = data->readU8(pos);
HXDLIN( 397)			HX_VARI_NAME( Int,ch21,"ch2") = data->readU8((pos + (int)1));
HXLINE( 398)			if ((unicode_codepoint < (((int)ch21 | (int)((int)ch11 << (int)(int)8)) - (int)6))) {
HXLINE( 399)				return data->readU8(((index_map + (int)6) + unicode_codepoint));
            			}
HXLINE( 400)			return (int)0;
            		}
            		else {
HXLINE( 401)			if ((format == (int)6)) {
HXLINE( 402)				HX_VARI_NAME( Int,pos1,"pos") = (index_map + (int)6);
HXDLIN( 402)				HX_VARI_NAME( Int,ch12,"ch1") = data->readU8(pos1);
HXDLIN( 402)				HX_VARI_NAME( Int,ch22,"ch2") = data->readU8((pos1 + (int)1));
HXDLIN( 402)				HX_VARI( Int,first) = ((int)ch22 | (int)((int)ch12 << (int)(int)8));
HXLINE( 403)				HX_VARI_NAME( Int,pos2,"pos") = (index_map + (int)8);
HXDLIN( 403)				HX_VARI_NAME( Int,ch13,"ch1") = data->readU8(pos2);
HXDLIN( 403)				HX_VARI_NAME( Int,ch23,"ch2") = data->readU8((pos2 + (int)1));
HXDLIN( 403)				HX_VARI( Int,count) = ((int)ch23 | (int)((int)ch13 << (int)(int)8));
HXLINE( 404)				Bool _hx_tmp;
HXDLIN( 404)				if ((unicode_codepoint >= first)) {
HXLINE( 404)					_hx_tmp = (unicode_codepoint < (first + count));
            				}
            				else {
HXLINE( 404)					_hx_tmp = false;
            				}
HXDLIN( 404)				if (_hx_tmp) {
HXLINE( 405)					HX_VARI_NAME( Int,pos3,"pos") = ((index_map + (int)10) + ((unicode_codepoint - first) * (int)2));
HXDLIN( 405)					HX_VARI_NAME( Int,ch14,"ch1") = data->readU8(pos3);
HXDLIN( 405)					HX_VARI_NAME( Int,ch24,"ch2") = data->readU8((pos3 + (int)1));
HXDLIN( 405)					return ((int)ch24 | (int)((int)ch14 << (int)(int)8));
            				}
HXLINE( 406)				return (int)0;
            			}
            			else {
HXLINE( 407)				if ((format == (int)2)) {
HXLINE( 408)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
            				else {
HXLINE( 410)					if ((format == (int)4)) {
HXLINE( 411)						HX_VARI_NAME( Int,pos4,"pos") = (index_map + (int)6);
HXDLIN( 411)						HX_VARI_NAME( Int,ch15,"ch1") = data->readU8(pos4);
HXDLIN( 411)						HX_VARI_NAME( Int,ch25,"ch2") = data->readU8((pos4 + (int)1));
HXDLIN( 411)						HX_VARI( Int,segcount) = ((int)((int)ch25 | (int)((int)ch15 << (int)(int)8)) >> (int)(int)1);
HXLINE( 412)						HX_VARI_NAME( Int,pos5,"pos") = (index_map + (int)8);
HXDLIN( 412)						HX_VARI_NAME( Int,ch16,"ch1") = data->readU8(pos5);
HXDLIN( 412)						HX_VARI_NAME( Int,ch26,"ch2") = data->readU8((pos5 + (int)1));
HXDLIN( 412)						HX_VARI( Int,searchRange) = ((int)((int)ch26 | (int)((int)ch16 << (int)(int)8)) >> (int)(int)1);
HXLINE( 413)						HX_VARI_NAME( Int,pos6,"pos") = (index_map + (int)10);
HXDLIN( 413)						HX_VARI_NAME( Int,ch17,"ch1") = data->readU8(pos6);
HXDLIN( 413)						HX_VARI_NAME( Int,ch27,"ch2") = data->readU8((pos6 + (int)1));
HXDLIN( 413)						HX_VARI( Int,entrySelector) = ((int)ch27 | (int)((int)ch17 << (int)(int)8));
HXLINE( 414)						HX_VARI_NAME( Int,pos7,"pos") = (index_map + (int)12);
HXDLIN( 414)						HX_VARI_NAME( Int,ch18,"ch1") = data->readU8(pos7);
HXDLIN( 414)						HX_VARI_NAME( Int,ch28,"ch2") = data->readU8((pos7 + (int)1));
HXDLIN( 414)						HX_VARI( Int,rangeShift) = ((int)((int)ch28 | (int)((int)ch18 << (int)(int)8)) >> (int)(int)1);
HXLINE( 417)						HX_VARI( Int,endCount) = (index_map + (int)14);
HXLINE( 418)						HX_VARI( Int,search) = endCount;
HXLINE( 420)						if ((unicode_codepoint > (int)65535)) {
HXLINE( 421)							return (int)0;
            						}
HXLINE( 425)						HX_VARI_NAME( Int,pos8,"pos") = (endCount + (rangeShift * (int)2));
HXDLIN( 425)						HX_VARI_NAME( Int,ch19,"ch1") = data->readU8(pos8);
HXDLIN( 425)						HX_VARI_NAME( Int,ch29,"ch2") = data->readU8((pos8 + (int)1));
HXDLIN( 425)						if ((unicode_codepoint >= ((int)ch29 | (int)((int)ch19 << (int)(int)8)))) {
HXLINE( 426)							search = (endCount + (rangeShift * (int)2));
            						}
HXLINE( 429)						hx::SubEq(search,(int)2);
HXLINE( 430)						while((entrySelector != (int)0)){
HXLINE( 431)							HX_VAR( Int,end);
HXLINE( 432)							hx::ShrEq(searchRange,(int)1);
HXLINE( 433)							HX_VARI_NAME( Int,pos9,"pos") = (search + (searchRange * (int)2));
HXDLIN( 433)							HX_VARI_NAME( Int,ch110,"ch1") = data->readU8(pos9);
HXDLIN( 433)							HX_VARI_NAME( Int,ch210,"ch2") = data->readU8((pos9 + (int)1));
HXDLIN( 433)							end = ((int)ch210 | (int)((int)ch110 << (int)(int)8));
HXLINE( 434)							if ((unicode_codepoint > end)) {
HXLINE( 435)								hx::AddEq(search,(searchRange * (int)2));
            							}
HXLINE( 436)							--entrySelector;
            						}
HXLINE( 438)						hx::AddEq(search,(int)2);
HXLINE( 441)						HX_VAR( Int,offset);
HXDLIN( 441)						HX_VAR( Int,start);
HXLINE( 442)						HX_VARI( Int,item) = ((int)(search - endCount) >> (int)(int)1);
HXLINE( 444)						{
HXLINE( 444)							HX_VARI_NAME( Int,pos10,"pos") = (endCount + ((int)2 * item));
HXDLIN( 444)							HX_VARI_NAME( Int,ch111,"ch1") = data->readU8(pos10);
HXDLIN( 444)							HX_VARI_NAME( Int,ch211,"ch2") = data->readU8((pos10 + (int)1));
HXDLIN( 444)							if ((unicode_codepoint > ((int)ch211 | (int)((int)ch111 << (int)(int)8)))) {
HXLINE( 444)								HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            							}
            						}
HXLINE( 445)						HX_VARI_NAME( Int,pos11,"pos") = ((((index_map + (int)14) + (segcount * (int)2)) + (int)2) + ((int)2 * item));
HXDLIN( 445)						HX_VARI_NAME( Int,ch112,"ch1") = data->readU8(pos11);
HXDLIN( 445)						HX_VARI_NAME( Int,ch212,"ch2") = data->readU8((pos11 + (int)1));
HXDLIN( 445)						start = ((int)ch212 | (int)((int)ch112 << (int)(int)8));
HXLINE( 446)						if ((unicode_codepoint < start)) {
HXLINE( 447)							return (int)0;
            						}
HXLINE( 449)						HX_VARI_NAME( Int,pos12,"pos") = ((((index_map + (int)14) + (segcount * (int)6)) + (int)2) + ((int)2 * item));
HXDLIN( 449)						HX_VARI_NAME( Int,ch113,"ch1") = data->readU8(pos12);
HXDLIN( 449)						HX_VARI_NAME( Int,ch213,"ch2") = data->readU8((pos12 + (int)1));
HXDLIN( 449)						offset = ((int)ch213 | (int)((int)ch113 << (int)(int)8));
HXLINE( 450)						if ((offset == (int)0)) {
HXLINE( 451)							HX_VARI_NAME( Int,pos13,"pos") = ((((index_map + (int)14) + (segcount * (int)4)) + (int)2) + ((int)2 * item));
HXDLIN( 451)							HX_VARI_NAME( Int,ch114,"ch1") = data->readU8(pos13);
HXDLIN( 451)							HX_VARI_NAME( Int,ch214,"ch2") = data->readU8((pos13 + (int)1));
HXDLIN( 451)							HX_VARI( Int,n) = ((int)ch214 | (int)((int)ch114 << (int)(int)8));
HXDLIN( 451)							Int _hx_tmp1;
HXDLIN( 451)							if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 451)								_hx_tmp1 = (n - (int)65536);
            							}
            							else {
HXLINE( 451)								_hx_tmp1 = n;
            							}
HXDLIN( 451)							return (unicode_codepoint + _hx_tmp1);
            						}
HXLINE( 453)						HX_VARI_NAME( Int,pos14,"pos") = ((((((offset + ((unicode_codepoint - start) * (int)2)) + index_map) + (int)14) + (segcount * (int)6)) + (int)2) + ((int)2 * item));
HXDLIN( 453)						HX_VARI_NAME( Int,ch115,"ch1") = data->readU8(pos14);
HXDLIN( 453)						HX_VARI_NAME( Int,ch215,"ch2") = data->readU8((pos14 + (int)1));
HXDLIN( 453)						return ((int)ch215 | (int)((int)ch115 << (int)(int)8));
            					}
            					else {
HXLINE( 455)						Bool _hx_tmp2;
HXDLIN( 455)						if ((format != (int)12)) {
HXLINE( 455)							_hx_tmp2 = (format == (int)13);
            						}
            						else {
HXLINE( 455)							_hx_tmp2 = true;
            						}
HXDLIN( 455)						if (_hx_tmp2) {
HXLINE( 456)							HX_VARI_NAME( Int,pos15,"pos") = (index_map + (int)12);
HXDLIN( 456)							HX_VARI_NAME( Int,ch116,"ch1") = data->readU8(pos15);
HXDLIN( 456)							HX_VARI_NAME( Int,ch216,"ch2") = data->readU8((pos15 + (int)1));
HXDLIN( 456)							HX_VARI( Int,ch3) = data->readU8((pos15 + (int)2));
HXDLIN( 456)							HX_VARI( Int,ch4) = data->readU8((pos15 + (int)3));
HXDLIN( 456)							HX_VARI( Int,ngroups) = ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch216 << (int)(int)16)) | (int)((int)ch116 << (int)(int)24));
HXLINE( 457)							HX_VAR( Int,low);
HXDLIN( 457)							HX_VAR( Int,high);
HXLINE( 458)							low = (int)0;
HXDLIN( 458)							high = ngroups;
HXLINE( 460)							while((low < high)){
HXLINE( 461)								HX_VARI( Int,mid) = (low + ((int)(high - low) >> (int)(int)1));
HXLINE( 462)								HX_VARI_NAME( Int,pos16,"pos") = ((index_map + (int)16) + (mid * (int)12));
HXDLIN( 462)								HX_VARI_NAME( Int,ch117,"ch1") = data->readU8(pos16);
HXDLIN( 462)								HX_VARI_NAME( Int,ch217,"ch2") = data->readU8((pos16 + (int)1));
HXDLIN( 462)								HX_VARI_NAME( Int,ch31,"ch3") = data->readU8((pos16 + (int)2));
HXDLIN( 462)								HX_VARI_NAME( Int,ch41,"ch4") = data->readU8((pos16 + (int)3));
HXDLIN( 462)								HX_VARI( Int,start_char) = ((int)((int)((int)ch41 | (int)((int)ch31 << (int)(int)8)) | (int)((int)ch217 << (int)(int)16)) | (int)((int)ch117 << (int)(int)24));
HXLINE( 463)								HX_VARI_NAME( Int,pos17,"pos") = (((index_map + (int)16) + (mid * (int)12)) + (int)4);
HXDLIN( 463)								HX_VARI_NAME( Int,ch118,"ch1") = data->readU8(pos17);
HXDLIN( 463)								HX_VARI_NAME( Int,ch218,"ch2") = data->readU8((pos17 + (int)1));
HXDLIN( 463)								HX_VARI_NAME( Int,ch32,"ch3") = data->readU8((pos17 + (int)2));
HXDLIN( 463)								HX_VARI_NAME( Int,ch42,"ch4") = data->readU8((pos17 + (int)3));
HXDLIN( 463)								HX_VARI( Int,end_char) = ((int)((int)((int)ch42 | (int)((int)ch32 << (int)(int)8)) | (int)((int)ch218 << (int)(int)16)) | (int)((int)ch118 << (int)(int)24));
HXLINE( 464)								if ((unicode_codepoint < start_char)) {
HXLINE( 465)									high = mid;
            								}
            								else {
HXLINE( 466)									if ((unicode_codepoint > end_char)) {
HXLINE( 467)										low = (mid + (int)1);
            									}
            									else {
HXLINE( 469)										HX_VARI_NAME( Int,pos18,"pos") = (((index_map + (int)16) + (mid * (int)12)) + (int)8);
HXDLIN( 469)										HX_VARI_NAME( Int,ch119,"ch1") = data->readU8(pos18);
HXDLIN( 469)										HX_VARI_NAME( Int,ch219,"ch2") = data->readU8((pos18 + (int)1));
HXDLIN( 469)										HX_VARI_NAME( Int,ch33,"ch3") = data->readU8((pos18 + (int)2));
HXDLIN( 469)										HX_VARI_NAME( Int,ch43,"ch4") = data->readU8((pos18 + (int)3));
HXDLIN( 469)										HX_VARI( Int,start_glyph) = ((int)((int)((int)ch43 | (int)((int)ch33 << (int)(int)8)) | (int)((int)ch219 << (int)(int)16)) | (int)((int)ch119 << (int)(int)24));
HXLINE( 470)										if ((format == (int)12)) {
HXLINE( 471)											return ((start_glyph + unicode_codepoint) - start_char);
            										}
            										else {
HXLINE( 473)											return start_glyph;
            										}
            									}
            								}
            							}
HXLINE( 476)							return (int)0;
            						}
            					}
            				}
            			}
            		}
HXLINE( 479)		HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
HXDLIN( 479)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_FindGlyphIndex,return )

::Array< ::Dynamic> StbTruetype_obj::stbtt_GetCodepointShape( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int unicode_codepoint){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointShape",0x654c383c,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointShape","kha/graphics2/truetype/StbTruetype.hx",484,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(unicode_codepoint,"unicode_codepoint")
HXLINE( 484)		Int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,unicode_codepoint);
HXDLIN( 484)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetCodepointShape,return )

void StbTruetype_obj::stbtt_setvertex( ::kha::graphics2::truetype::Stbtt_vertex v,Int type,Int x,Int y,Int cx,Int cy){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_setvertex",0x3161958e,"kha.graphics2.truetype.StbTruetype.stbtt_setvertex","kha/graphics2/truetype/StbTruetype.hx",487,0x5d9e0de9)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
HXLINE( 488)		v->type = type;
HXLINE( 489)		v->x = x;
HXLINE( 490)		v->y = y;
HXLINE( 491)		v->cx = cx;
HXLINE( 492)		v->cy = cy;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_setvertex,(void))

Int StbTruetype_obj::stbtt__GetGlyfOffset( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int glyph_index){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__GetGlyfOffset",0x4b91fab4,"kha.graphics2.truetype.StbTruetype.stbtt__GetGlyfOffset","kha/graphics2/truetype/StbTruetype.hx",495,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(glyph_index,"glyph_index")
HXLINE( 496)		HX_VAR( Int,g1);
HXDLIN( 496)		HX_VAR( Int,g2);
HXLINE( 498)		if ((glyph_index >= info->numGlyphs)) {
HXLINE( 498)			return (int)-1;
            		}
HXLINE( 499)		if ((info->indexToLocFormat >= (int)2)) {
HXLINE( 499)			return (int)-1;
            		}
HXLINE( 501)		Bool _hx_tmp = (info->indexToLocFormat == (int)0);
HXDLIN( 501)		if (_hx_tmp) {
HXLINE( 502)			Int _hx_tmp1 = info->glyf;
HXDLIN( 502)			HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 502)			HX_VARI( Int,pos) = (info->loca + (glyph_index * (int)2));
HXDLIN( 502)			HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 502)			HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 502)			g1 = (_hx_tmp1 + (((int)ch2 | (int)((int)ch1 << (int)(int)8)) * (int)2));
HXLINE( 503)			Int _hx_tmp2 = info->glyf;
HXDLIN( 503)			HX_VARI_NAME(  ::kha::Blob,p1,"p") = info->data;
HXDLIN( 503)			HX_VARI_NAME( Int,pos1,"pos") = ((info->loca + (glyph_index * (int)2)) + (int)2);
HXDLIN( 503)			HX_VARI_NAME( Int,ch11,"ch1") = p1->readU8(pos1);
HXDLIN( 503)			HX_VARI_NAME( Int,ch21,"ch2") = p1->readU8((pos1 + (int)1));
HXDLIN( 503)			g2 = (_hx_tmp2 + (((int)ch21 | (int)((int)ch11 << (int)(int)8)) * (int)2));
            		}
            		else {
HXLINE( 505)			HX_VARI_NAME(  ::kha::Blob,p2,"p") = info->data;
HXDLIN( 505)			HX_VARI_NAME( Int,pos2,"pos") = (info->loca + (glyph_index * (int)4));
HXDLIN( 505)			HX_VARI_NAME( Int,ch12,"ch1") = p2->readU8(pos2);
HXDLIN( 505)			HX_VARI_NAME( Int,ch22,"ch2") = p2->readU8((pos2 + (int)1));
HXDLIN( 505)			HX_VARI( Int,ch3) = p2->readU8((pos2 + (int)2));
HXDLIN( 505)			HX_VARI( Int,ch4) = p2->readU8((pos2 + (int)3));
HXDLIN( 505)			g1 = (info->glyf + ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch22 << (int)(int)16)) | (int)((int)ch12 << (int)(int)24)));
HXLINE( 506)			HX_VARI_NAME(  ::kha::Blob,p3,"p") = info->data;
HXDLIN( 506)			HX_VARI_NAME( Int,pos3,"pos") = ((info->loca + (glyph_index * (int)4)) + (int)4);
HXDLIN( 506)			HX_VARI_NAME( Int,ch13,"ch1") = p3->readU8(pos3);
HXDLIN( 506)			HX_VARI_NAME( Int,ch23,"ch2") = p3->readU8((pos3 + (int)1));
HXDLIN( 506)			HX_VARI_NAME( Int,ch31,"ch3") = p3->readU8((pos3 + (int)2));
HXDLIN( 506)			HX_VARI_NAME( Int,ch41,"ch4") = p3->readU8((pos3 + (int)3));
HXDLIN( 506)			g2 = (info->glyf + ((int)((int)((int)ch41 | (int)((int)ch31 << (int)(int)8)) | (int)((int)ch23 << (int)(int)16)) | (int)((int)ch13 << (int)(int)24)));
            		}
HXLINE( 509)		if ((g1 == g2)) {
HXLINE( 509)			return (int)-1;
            		}
            		else {
HXLINE( 509)			return g1;
            		}
HXDLIN( 509)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt__GetGlyfOffset,return )

Bool StbTruetype_obj::stbtt_GetGlyphBox( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int glyph_index, ::kha::graphics2::truetype::Stbtt_temp_rect rect){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBox",0x7a6db15d,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBox","kha/graphics2/truetype/StbTruetype.hx",512,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(glyph_index,"glyph_index")
            	HX_STACK_ARG(rect,"rect")
HXLINE( 513)		HX_VARI( Int,g) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__GetGlyfOffset(info,glyph_index);
HXLINE( 514)		if ((g < (int)0)) {
HXLINE( 514)			return false;
            		}
HXLINE( 516)		HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 516)		HX_VARI( Int,pos) = (g + (int)2);
HXDLIN( 516)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 516)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 516)		HX_VARI( Int,n) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXDLIN( 516)		Int _hx_tmp;
HXDLIN( 516)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 516)			_hx_tmp = (n - (int)65536);
            		}
            		else {
HXLINE( 516)			_hx_tmp = n;
            		}
HXDLIN( 516)		rect->x0 = _hx_tmp;
HXLINE( 517)		HX_VARI_NAME(  ::kha::Blob,p1,"p") = info->data;
HXDLIN( 517)		HX_VARI_NAME( Int,pos1,"pos") = (g + (int)4);
HXDLIN( 517)		HX_VARI_NAME( Int,ch11,"ch1") = p1->readU8(pos1);
HXDLIN( 517)		HX_VARI_NAME( Int,ch21,"ch2") = p1->readU8((pos1 + (int)1));
HXDLIN( 517)		HX_VARI_NAME( Int,n1,"n") = ((int)ch21 | (int)((int)ch11 << (int)(int)8));
HXDLIN( 517)		Int _hx_tmp1;
HXDLIN( 517)		if ((((int)n1 & (int)(int)32768) != (int)0)) {
HXLINE( 517)			_hx_tmp1 = (n1 - (int)65536);
            		}
            		else {
HXLINE( 517)			_hx_tmp1 = n1;
            		}
HXDLIN( 517)		rect->y0 = _hx_tmp1;
HXLINE( 518)		HX_VARI_NAME(  ::kha::Blob,p2,"p") = info->data;
HXDLIN( 518)		HX_VARI_NAME( Int,pos2,"pos") = (g + (int)6);
HXDLIN( 518)		HX_VARI_NAME( Int,ch12,"ch1") = p2->readU8(pos2);
HXDLIN( 518)		HX_VARI_NAME( Int,ch22,"ch2") = p2->readU8((pos2 + (int)1));
HXDLIN( 518)		HX_VARI_NAME( Int,n2,"n") = ((int)ch22 | (int)((int)ch12 << (int)(int)8));
HXDLIN( 518)		Int _hx_tmp2;
HXDLIN( 518)		if ((((int)n2 & (int)(int)32768) != (int)0)) {
HXLINE( 518)			_hx_tmp2 = (n2 - (int)65536);
            		}
            		else {
HXLINE( 518)			_hx_tmp2 = n2;
            		}
HXDLIN( 518)		rect->x1 = _hx_tmp2;
HXLINE( 519)		HX_VARI_NAME(  ::kha::Blob,p3,"p") = info->data;
HXDLIN( 519)		HX_VARI_NAME( Int,pos3,"pos") = (g + (int)8);
HXDLIN( 519)		HX_VARI_NAME( Int,ch13,"ch1") = p3->readU8(pos3);
HXDLIN( 519)		HX_VARI_NAME( Int,ch23,"ch2") = p3->readU8((pos3 + (int)1));
HXDLIN( 519)		HX_VARI_NAME( Int,n3,"n") = ((int)ch23 | (int)((int)ch13 << (int)(int)8));
HXDLIN( 519)		Int _hx_tmp3;
HXDLIN( 519)		if ((((int)n3 & (int)(int)32768) != (int)0)) {
HXLINE( 519)			_hx_tmp3 = (n3 - (int)65536);
            		}
            		else {
HXLINE( 519)			_hx_tmp3 = n3;
            		}
HXDLIN( 519)		rect->y1 = _hx_tmp3;
HXLINE( 520)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetGlyphBox,return )

Bool StbTruetype_obj::stbtt_GetCodepointBox( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int codepoint, ::kha::graphics2::truetype::Stbtt_temp_rect rect){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBox",0x10930666,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBox","kha/graphics2/truetype/StbTruetype.hx",524,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(codepoint,"codepoint")
            	HX_STACK_ARG(rect,"rect")
HXLINE( 524)		Int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint);
HXDLIN( 524)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBox(info,_hx_tmp,rect);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetCodepointBox,return )

Bool StbTruetype_obj::stbtt_IsGlyphEmpty( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int glyph_index){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_IsGlyphEmpty",0x18ddade3,"kha.graphics2.truetype.StbTruetype.stbtt_IsGlyphEmpty","kha/graphics2/truetype/StbTruetype.hx",527,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(glyph_index,"glyph_index")
HXLINE( 528)		HX_VAR( Int,numberOfContours);
HXLINE( 529)		HX_VARI( Int,g) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__GetGlyfOffset(info,glyph_index);
HXLINE( 530)		if ((g < (int)0)) {
HXLINE( 530)			return true;
            		}
HXLINE( 531)		HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 531)		HX_VARI( Int,ch1) = p->readU8(g);
HXDLIN( 531)		HX_VARI( Int,ch2) = p->readU8((g + (int)1));
HXDLIN( 531)		HX_VARI( Int,n) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXDLIN( 531)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 531)			numberOfContours = (n - (int)65536);
            		}
            		else {
HXLINE( 531)			numberOfContours = n;
            		}
HXLINE( 532)		return (numberOfContours == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_IsGlyphEmpty,return )

Int StbTruetype_obj::stbtt__close_shape(::Array< ::Dynamic> vertices,Int num_vertices,Bool was_off,Bool start_off,Int sx,Int sy,Int scx,Int scy,Int cx,Int cy){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__close_shape",0xb4462613,"kha.graphics2.truetype.StbTruetype.stbtt__close_shape","kha/graphics2/truetype/StbTruetype.hx",536,0x5d9e0de9)
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(num_vertices,"num_vertices")
            	HX_STACK_ARG(was_off,"was_off")
            	HX_STACK_ARG(start_off,"start_off")
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
            	HX_STACK_ARG(scx,"scx")
            	HX_STACK_ARG(scy,"scy")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
HXLINE( 537)		if (start_off) {
HXLINE( 538)			if (was_off) {
HXLINE( 539)				Int index = num_vertices++;
HXDLIN( 539)				 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index)) );
HXDLIN( 539)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp,(int)3,((int)(cx + scx) >> (int)(int)1),((int)(cy + scy) >> (int)(int)1),cx,cy);
            			}
HXLINE( 540)			Int index1 = num_vertices++;
HXDLIN( 540)			 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp1 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index1)) );
HXDLIN( 540)			::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp1,(int)3,sx,sy,scx,scy);
            		}
            		else {
HXLINE( 542)			if (was_off) {
HXLINE( 543)				Int index2 = num_vertices++;
HXDLIN( 543)				 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp2 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index2)) );
HXDLIN( 543)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp2,(int)3,sx,sy,cx,cy);
            			}
            			else {
HXLINE( 545)				Int index3 = num_vertices++;
HXDLIN( 545)				 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp3 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index3)) );
HXDLIN( 545)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp3,(int)2,sx,sy,(int)0,(int)0);
            			}
            		}
HXLINE( 547)		return num_vertices;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(StbTruetype_obj,stbtt__close_shape,return )

void StbTruetype_obj::copyVertices(::Array< ::Dynamic> from,::Array< ::Dynamic> to,Int offset,Int count){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","copyVertices",0xec2e2f68,"kha.graphics2.truetype.StbTruetype.copyVertices","kha/graphics2/truetype/StbTruetype.hx",551,0x5d9e0de9)
            	HX_STACK_ARG(from,"from")
            	HX_STACK_ARG(to,"to")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(count,"count")
HXLINE( 551)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 551)		while((_g1 < count)){
HXLINE( 551)			HX_VARI( Int,i) = _g1++;
HXLINE( 552)			{
HXLINE( 552)				 ::kha::graphics2::truetype::Stbtt_vertex val = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(from,i)) );
HXDLIN( 552)				to->__unsafe_set((offset + i),val);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,copyVertices,(void))

::Array< ::Dynamic> StbTruetype_obj::stbtt_GetGlyphShape( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int glyph_index){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphShape",0xfb60cef3,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphShape","kha/graphics2/truetype/StbTruetype.hx",556,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(glyph_index,"glyph_index")
HXLINE( 557)		HX_VAR( Int,numberOfContours);
HXLINE( 558)		HX_VAR(  ::kha::Blob,endPtsOfContours);
HXLINE( 559)		HX_VARI(  ::kha::Blob,data) = info->data;
HXLINE( 560)		HX_VARI( ::Array< ::Dynamic>,vertices) = null();
HXLINE( 561)		HX_VARI( Int,num_vertices) = (int)0;
HXLINE( 562)		HX_VARI( Int,g) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__GetGlyfOffset(info,glyph_index);
HXLINE( 564)		if ((g < (int)0)) {
HXLINE( 564)			return null();
            		}
HXLINE( 566)		HX_VARI( Int,ch1) = data->readU8(g);
HXDLIN( 566)		HX_VARI( Int,ch2) = data->readU8((g + (int)1));
HXDLIN( 566)		HX_VARI( Int,n) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXDLIN( 566)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 566)			numberOfContours = (n - (int)65536);
            		}
            		else {
HXLINE( 566)			numberOfContours = n;
            		}
HXLINE( 568)		if ((numberOfContours > (int)0)) {
HXLINE( 569)			HX_VARI( Int,flags) = (int)0;
HXDLIN( 569)			HX_VAR( Int,flagcount);
HXLINE( 570)			HX_VAR( Int,ins);
HXDLIN( 570)			HX_VARI( Int,j) = (int)0;
HXDLIN( 570)			HX_VAR( Int,m);
HXDLIN( 570)			HX_VAR_NAME( Int,n1,"n");
HXDLIN( 570)			HX_VARI( Int,next_move) = (int)0;
HXDLIN( 570)			HX_VARI( Int,off) = (int)0;
HXLINE( 571)			HX_VARI( Bool,was_off) = false;
HXLINE( 572)			HX_VARI( Bool,start_off) = false;
HXLINE( 573)			HX_VAR( Int,x);
HXDLIN( 573)			HX_VAR( Int,y);
HXDLIN( 573)			HX_VAR( Int,cx);
HXDLIN( 573)			HX_VAR( Int,cy);
HXDLIN( 573)			HX_VAR( Int,sx);
HXDLIN( 573)			HX_VAR( Int,sy);
HXDLIN( 573)			HX_VAR( Int,scx);
HXDLIN( 573)			HX_VAR( Int,scy);
HXLINE( 574)			HX_VAR(  ::kha::Blob,points);
HXLINE( 575)			HX_VARI( Int,pointsIndex) = (int)0;
HXLINE( 576)			Int _hx_tmp = (g + (int)10);
HXDLIN( 576)			Int _hx_tmp1 = data->get_length();
HXDLIN( 576)			endPtsOfContours = data->sub(_hx_tmp,(_hx_tmp1 - (g + (int)10)));
HXLINE( 577)			HX_VARI( Int,pos) = ((g + (int)10) + (numberOfContours * (int)2));
HXDLIN( 577)			HX_VARI_NAME( Int,ch11,"ch1") = data->readU8(pos);
HXDLIN( 577)			HX_VARI_NAME( Int,ch21,"ch2") = data->readU8((pos + (int)1));
HXDLIN( 577)			ins = ((int)ch21 | (int)((int)ch11 << (int)(int)8));
HXLINE( 578)			Int _hx_tmp2 = ((((g + (int)10) + (numberOfContours * (int)2)) + (int)2) + ins);
HXDLIN( 578)			Int _hx_tmp3 = data->get_length();
HXDLIN( 578)			points = data->sub(_hx_tmp2,(_hx_tmp3 - ((((g + (int)10) + (numberOfContours * (int)2)) + (int)2) + ins)));
HXLINE( 580)			HX_VARI_NAME( Int,pos1,"pos") = ((numberOfContours * (int)2) - (int)2);
HXDLIN( 580)			HX_VARI_NAME( Int,ch12,"ch1") = endPtsOfContours->readU8(pos1);
HXDLIN( 580)			HX_VARI_NAME( Int,ch22,"ch2") = endPtsOfContours->readU8((pos1 + (int)1));
HXDLIN( 580)			n1 = ((int)1 + ((int)ch22 | (int)((int)ch12 << (int)(int)8)));
HXLINE( 582)			m = (n1 + ((int)2 * numberOfContours));
HXLINE( 583)			HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 583)			_hx_array_set_size_exact(this1,m);
HXDLIN( 583)			vertices = this1;
HXLINE( 584)			Bool _hx_tmp4 = hx::IsNull( vertices );
HXDLIN( 584)			if (_hx_tmp4) {
HXLINE( 585)				return null();
            			}
            			else {
HXLINE( 587)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 587)				HX_VARI( Int,_g) = vertices->length;
HXDLIN( 587)				while((_g1 < _g)){
HXLINE( 587)					HX_VARI( Int,i) = _g1++;
HXLINE( 588)					vertices->__unsafe_set(i, ::kha::graphics2::truetype::Stbtt_vertex_obj::__new());
            				}
            			}
HXLINE( 592)			next_move = (int)0;
HXLINE( 593)			flagcount = (int)0;
HXLINE( 599)			off = (m - n1);
HXLINE( 603)			{
HXLINE( 603)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 603)				while((_g11 < n1)){
HXLINE( 603)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 604)					if ((flagcount == (int)0)) {
HXLINE( 605)						Int _hx_tmp5 = pointsIndex++;
HXDLIN( 605)						flags = points->readU8(_hx_tmp5);
HXLINE( 606)						if ((((int)flags & (int)(int)8) != (int)0)) {
HXLINE( 607)							Int _hx_tmp6 = pointsIndex++;
HXDLIN( 607)							flagcount = points->readU8(_hx_tmp6);
            						}
            					}
            					else {
HXLINE( 609)						--flagcount;
            					}
HXLINE( 610)					( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i1))) )->type = flags;
            				}
            			}
HXLINE( 614)			x = (int)0;
HXLINE( 615)			{
HXLINE( 615)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 615)				while((_g12 < n1)){
HXLINE( 615)					HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 616)					flags = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i2))) )->type;
HXLINE( 617)					if ((((int)flags & (int)(int)2) != (int)0)) {
HXLINE( 618)						Int _hx_tmp7 = pointsIndex++;
HXDLIN( 618)						HX_VARI( Int,dx) = points->readU8(_hx_tmp7);
HXLINE( 619)						Int _hx_tmp8;
HXDLIN( 619)						if ((((int)flags & (int)(int)16) != (int)0)) {
HXLINE( 619)							_hx_tmp8 = dx;
            						}
            						else {
HXLINE( 619)							_hx_tmp8 = -(dx);
            						}
HXDLIN( 619)						hx::AddEq(x,_hx_tmp8);
            					}
            					else {
HXLINE( 621)						if ((((int)flags & (int)(int)16) == (int)0)) {
HXLINE( 622)							HX_VAR( Int,value);
HXLINE( 623)							HX_VARI_NAME( Int,ch13,"ch1") = points->readU8(pointsIndex);
HXLINE( 624)							HX_VARI_NAME( Int,ch23,"ch2") = points->readU8((pointsIndex + (int)1));
HXLINE( 625)							HX_VARI_NAME( Int,n2,"n") = ((int)ch23 | (int)((int)ch13 << (int)(int)8));
HXLINE( 626)							if ((((int)n2 & (int)(int)32768) != (int)0)) {
HXLINE( 627)								value = (n2 - (int)65536);
            							}
            							else {
HXLINE( 629)								value = n2;
            							}
HXLINE( 630)							hx::AddEq(x,value);
HXLINE( 631)							hx::AddEq(pointsIndex,(int)2);
            						}
            					}
HXLINE( 634)					( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i2))) )->x = x;
            				}
            			}
HXLINE( 638)			y = (int)0;
HXLINE( 639)			{
HXLINE( 639)				HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 639)				while((_g13 < n1)){
HXLINE( 639)					HX_VARI_NAME( Int,i3,"i") = _g13++;
HXLINE( 640)					flags = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i3))) )->type;
HXLINE( 641)					if ((((int)flags & (int)(int)4) != (int)0)) {
HXLINE( 642)						Int _hx_tmp9 = pointsIndex++;
HXDLIN( 642)						HX_VARI( Int,dy) = points->readU8(_hx_tmp9);
HXLINE( 643)						Int _hx_tmp10;
HXDLIN( 643)						if ((((int)flags & (int)(int)32) != (int)0)) {
HXLINE( 643)							_hx_tmp10 = dy;
            						}
            						else {
HXLINE( 643)							_hx_tmp10 = -(dy);
            						}
HXDLIN( 643)						hx::AddEq(y,_hx_tmp10);
            					}
            					else {
HXLINE( 645)						if ((((int)flags & (int)(int)32) == (int)0)) {
HXLINE( 646)							HX_VAR_NAME( Int,value1,"value");
HXLINE( 647)							HX_VARI_NAME( Int,ch14,"ch1") = points->readU8(pointsIndex);
HXLINE( 648)							HX_VARI_NAME( Int,ch24,"ch2") = points->readU8((pointsIndex + (int)1));
HXLINE( 649)							HX_VARI_NAME( Int,n3,"n") = ((int)ch24 | (int)((int)ch14 << (int)(int)8));
HXLINE( 650)							if ((((int)n3 & (int)(int)32768) != (int)0)) {
HXLINE( 651)								value1 = (n3 - (int)65536);
            							}
            							else {
HXLINE( 653)								value1 = n3;
            							}
HXLINE( 654)							hx::AddEq(y,value1);
HXLINE( 655)							hx::AddEq(pointsIndex,(int)2);
            						}
            					}
HXLINE( 658)					( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i3))) )->y = y;
            				}
            			}
HXLINE( 662)			num_vertices = (int)0;
HXLINE( 663)			scy = (int)0;
HXDLIN( 663)			scx = (int)0;
HXDLIN( 663)			cy = (int)0;
HXDLIN( 663)			cx = (int)0;
HXDLIN( 663)			sy = (int)0;
HXDLIN( 663)			sx = (int)0;
HXLINE( 664)			HX_VARI_NAME( Int,i4,"i") = (int)0;
HXLINE( 665)			while((i4 < n1)){
HXLINE( 666)				flags = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i4))) )->type;
HXLINE( 667)				x = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i4))) )->x;
HXLINE( 668)				y = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i4))) )->y;
HXLINE( 670)				if ((next_move == i4)) {
HXLINE( 671)					if ((i4 != (int)0)) {
HXLINE( 672)						num_vertices = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
            					}
HXLINE( 675)					start_off = (((int)flags & (int)(int)1) == (int)0);
HXLINE( 676)					if (start_off) {
HXLINE( 679)						scx = x;
HXLINE( 680)						scy = y;
HXLINE( 681)						Int _hx_tmp11 = ((int)( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + (int)1))) )->type & (int)(int)1);
HXDLIN( 681)						if ((_hx_tmp11 == (int)0)) {
HXLINE( 683)							Int _hx_tmp12 = (x + ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + (int)1))) )->x);
HXDLIN( 683)							sx = ((int)_hx_tmp12 >> (int)(int)1);
HXLINE( 684)							Int _hx_tmp13 = (y + ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + (int)1))) )->y);
HXDLIN( 684)							sy = ((int)_hx_tmp13 >> (int)(int)1);
            						}
            						else {
HXLINE( 687)							sx = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + (int)1))) )->x;
HXLINE( 688)							sy = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + (int)1))) )->y;
HXLINE( 689)							++i4;
            						}
            					}
            					else {
HXLINE( 692)						sx = x;
HXLINE( 693)						sy = y;
            					}
HXLINE( 695)					Int index = num_vertices++;
HXDLIN( 695)					 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp14 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index)) );
HXDLIN( 695)					::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp14,(int)1,sx,sy,(int)0,(int)0);
HXLINE( 696)					was_off = false;
HXLINE( 697)					HX_VARI_NAME( Int,pos2,"pos") = (j * (int)2);
HXDLIN( 697)					HX_VARI_NAME( Int,ch15,"ch1") = endPtsOfContours->readU8(pos2);
HXDLIN( 697)					HX_VARI_NAME( Int,ch25,"ch2") = endPtsOfContours->readU8((pos2 + (int)1));
HXDLIN( 697)					next_move = ((int)1 + ((int)ch25 | (int)((int)ch15 << (int)(int)8)));
HXLINE( 698)					++j;
            				}
            				else {
HXLINE( 700)					if ((((int)flags & (int)(int)1) == (int)0)) {
HXLINE( 701)						if (was_off) {
HXLINE( 702)							Int index1 = num_vertices++;
HXDLIN( 702)							 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp15 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index1)) );
HXDLIN( 702)							::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp15,(int)3,((int)(cx + x) >> (int)(int)1),((int)(cy + y) >> (int)(int)1),cx,cy);
            						}
HXLINE( 703)						cx = x;
HXLINE( 704)						cy = y;
HXLINE( 705)						was_off = true;
            					}
            					else {
HXLINE( 707)						if (was_off) {
HXLINE( 708)							Int index2 = num_vertices++;
HXDLIN( 708)							 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp16 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index2)) );
HXDLIN( 708)							::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp16,(int)3,x,y,cx,cy);
            						}
            						else {
HXLINE( 710)							Int index3 = num_vertices++;
HXDLIN( 710)							 ::kha::graphics2::truetype::Stbtt_vertex _hx_tmp17 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,index3)) );
HXDLIN( 710)							::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(_hx_tmp17,(int)2,x,y,(int)0,(int)0);
            						}
HXLINE( 711)						was_off = false;
            					}
            				}
HXLINE( 714)				++i4;
            			}
HXLINE( 716)			num_vertices = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
            		}
            		else {
HXLINE( 717)			if ((numberOfContours == (int)-1)) {
HXLINE( 719)				HX_VARI( Int,more) = (int)1;
HXLINE( 720)				Int _hx_tmp18 = (g + (int)10);
HXDLIN( 720)				Int _hx_tmp19 = data->get_length();
HXDLIN( 720)				HX_VARI(  ::kha::Blob,comp) = data->sub(_hx_tmp18,(_hx_tmp19 - (g + (int)10)));
HXLINE( 721)				HX_VARI( Int,compIndex) = (int)0;
HXLINE( 722)				num_vertices = (int)0;
HXLINE( 723)				vertices = null();
HXLINE( 724)				while((more != (int)0)){
HXLINE( 725)					HX_VAR_NAME( Int,flags1,"flags");
HXDLIN( 725)					HX_VAR( Int,gidx);
HXLINE( 726)					HX_VARI( Int,comp_num_verts) = (int)0;
HXLINE( 727)					HX_VARI( ::Array< ::Dynamic>,comp_verts) = null();
HXLINE( 728)					HX_VARI( ::Array< ::Dynamic>,tmp) = null();
HXLINE( 729)					HX_VARI( Float,mtx0) = (int)1;
HXLINE( 730)					HX_VARI( Float,mtx1) = (int)0;
HXLINE( 731)					HX_VARI( Float,mtx2) = (int)0;
HXLINE( 732)					HX_VARI( Float,mtx3) = (int)1;
HXLINE( 733)					HX_VARI( Float,mtx4) = (int)0;
HXLINE( 734)					HX_VARI( Float,mtx5) = (int)0;
HXLINE( 735)					HX_VAR_NAME( Float,m1,"m");
HXDLIN( 735)					HX_VAR_NAME( Float,n4,"n");
HXLINE( 737)					HX_VARI_NAME( Int,ch16,"ch1") = comp->readU8(compIndex);
HXDLIN( 737)					HX_VARI_NAME( Int,ch26,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 737)					HX_VARI_NAME( Int,n5,"n") = ((int)ch26 | (int)((int)ch16 << (int)(int)8));
HXDLIN( 737)					if ((((int)n5 & (int)(int)32768) != (int)0)) {
HXLINE( 737)						flags1 = (n5 - (int)65536);
            					}
            					else {
HXLINE( 737)						flags1 = n5;
            					}
HXDLIN( 737)					hx::AddEq(compIndex,(int)2);
HXLINE( 738)					HX_VARI_NAME( Int,ch17,"ch1") = comp->readU8(compIndex);
HXDLIN( 738)					HX_VARI_NAME( Int,ch27,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 738)					HX_VARI_NAME( Int,n6,"n") = ((int)ch27 | (int)((int)ch17 << (int)(int)8));
HXDLIN( 738)					if ((((int)n6 & (int)(int)32768) != (int)0)) {
HXLINE( 738)						gidx = (n6 - (int)65536);
            					}
            					else {
HXLINE( 738)						gidx = n6;
            					}
HXDLIN( 738)					hx::AddEq(compIndex,(int)2);
HXLINE( 740)					if ((((int)flags1 & (int)(int)2) != (int)0)) {
HXLINE( 741)						if ((((int)flags1 & (int)(int)1) != (int)0)) {
HXLINE( 742)							HX_VARI_NAME( Int,ch18,"ch1") = comp->readU8(compIndex);
HXDLIN( 742)							HX_VARI_NAME( Int,ch28,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 742)							HX_VARI_NAME( Int,n7,"n") = ((int)ch28 | (int)((int)ch18 << (int)(int)8));
HXDLIN( 742)							if ((((int)n7 & (int)(int)32768) != (int)0)) {
HXLINE( 742)								mtx4 = (n7 - (int)65536);
            							}
            							else {
HXLINE( 742)								mtx4 = n7;
            							}
HXDLIN( 742)							hx::AddEq(compIndex,(int)2);
HXLINE( 743)							HX_VARI_NAME( Int,ch19,"ch1") = comp->readU8(compIndex);
HXDLIN( 743)							HX_VARI_NAME( Int,ch29,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 743)							HX_VARI_NAME( Int,n8,"n") = ((int)ch29 | (int)((int)ch19 << (int)(int)8));
HXDLIN( 743)							if ((((int)n8 & (int)(int)32768) != (int)0)) {
HXLINE( 743)								mtx5 = (n8 - (int)65536);
            							}
            							else {
HXLINE( 743)								mtx5 = n8;
            							}
HXDLIN( 743)							hx::AddEq(compIndex,(int)2);
            						}
            						else {
HXLINE( 745)							HX_VARI_NAME( Int,n9,"n") = comp->readU8(compIndex);
HXDLIN( 745)							if ((n9 >= (int)128)) {
HXLINE( 745)								mtx4 = (n9 - (int)256);
            							}
            							else {
HXLINE( 745)								mtx4 = n9;
            							}
HXDLIN( 745)							++compIndex;
HXLINE( 746)							HX_VARI_NAME( Int,n10,"n") = comp->readU8(compIndex);
HXDLIN( 746)							if ((n10 >= (int)128)) {
HXLINE( 746)								mtx5 = (n10 - (int)256);
            							}
            							else {
HXLINE( 746)								mtx5 = n10;
            							}
HXDLIN( 746)							++compIndex;
            						}
            					}
            					else {
HXLINE( 751)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
HXLINE( 753)					if ((((int)flags1 & (int)(int)8) != (int)0)) {
HXLINE( 754)						HX_VARI_NAME( Int,ch110,"ch1") = comp->readU8(compIndex);
HXDLIN( 754)						HX_VARI_NAME( Int,ch210,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 754)						HX_VARI_NAME( Int,n11,"n") = ((int)ch210 | (int)((int)ch110 << (int)(int)8));
HXDLIN( 754)						Int _hx_tmp20;
HXDLIN( 754)						if ((((int)n11 & (int)(int)32768) != (int)0)) {
HXLINE( 754)							_hx_tmp20 = (n11 - (int)65536);
            						}
            						else {
HXLINE( 754)							_hx_tmp20 = n11;
            						}
HXDLIN( 754)						mtx3 = ((Float)_hx_tmp20 / (Float)((Float)16384.0));
HXDLIN( 754)						mtx0 = mtx3;
HXDLIN( 754)						hx::AddEq(compIndex,(int)2);
HXLINE( 755)						mtx2 = (int)0;
HXDLIN( 755)						mtx1 = mtx2;
            					}
            					else {
HXLINE( 756)						if ((((int)flags1 & (int)(int)64) != (int)0)) {
HXLINE( 757)							HX_VARI_NAME( Int,ch111,"ch1") = comp->readU8(compIndex);
HXDLIN( 757)							HX_VARI_NAME( Int,ch211,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 757)							HX_VARI_NAME( Int,n12,"n") = ((int)ch211 | (int)((int)ch111 << (int)(int)8));
HXDLIN( 757)							Int _hx_tmp21;
HXDLIN( 757)							if ((((int)n12 & (int)(int)32768) != (int)0)) {
HXLINE( 757)								_hx_tmp21 = (n12 - (int)65536);
            							}
            							else {
HXLINE( 757)								_hx_tmp21 = n12;
            							}
HXDLIN( 757)							mtx0 = ((Float)_hx_tmp21 / (Float)((Float)16384.0));
HXDLIN( 757)							hx::AddEq(compIndex,(int)2);
HXLINE( 758)							mtx2 = (int)0;
HXDLIN( 758)							mtx1 = mtx2;
HXLINE( 759)							HX_VARI_NAME( Int,ch112,"ch1") = comp->readU8(compIndex);
HXDLIN( 759)							HX_VARI_NAME( Int,ch212,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 759)							HX_VARI_NAME( Int,n13,"n") = ((int)ch212 | (int)((int)ch112 << (int)(int)8));
HXDLIN( 759)							Int _hx_tmp22;
HXDLIN( 759)							if ((((int)n13 & (int)(int)32768) != (int)0)) {
HXLINE( 759)								_hx_tmp22 = (n13 - (int)65536);
            							}
            							else {
HXLINE( 759)								_hx_tmp22 = n13;
            							}
HXDLIN( 759)							mtx3 = ((Float)_hx_tmp22 / (Float)((Float)16384.0));
HXDLIN( 759)							hx::AddEq(compIndex,(int)2);
            						}
            						else {
HXLINE( 760)							if ((((int)flags1 & (int)(int)128) != (int)0)) {
HXLINE( 761)								HX_VARI_NAME( Int,ch113,"ch1") = comp->readU8(compIndex);
HXDLIN( 761)								HX_VARI_NAME( Int,ch213,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 761)								HX_VARI_NAME( Int,n14,"n") = ((int)ch213 | (int)((int)ch113 << (int)(int)8));
HXDLIN( 761)								Int _hx_tmp23;
HXDLIN( 761)								if ((((int)n14 & (int)(int)32768) != (int)0)) {
HXLINE( 761)									_hx_tmp23 = (n14 - (int)65536);
            								}
            								else {
HXLINE( 761)									_hx_tmp23 = n14;
            								}
HXDLIN( 761)								mtx0 = ((Float)_hx_tmp23 / (Float)((Float)16384.0));
HXDLIN( 761)								hx::AddEq(compIndex,(int)2);
HXLINE( 762)								HX_VARI_NAME( Int,ch114,"ch1") = comp->readU8(compIndex);
HXDLIN( 762)								HX_VARI_NAME( Int,ch214,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 762)								HX_VARI_NAME( Int,n15,"n") = ((int)ch214 | (int)((int)ch114 << (int)(int)8));
HXDLIN( 762)								Int _hx_tmp24;
HXDLIN( 762)								if ((((int)n15 & (int)(int)32768) != (int)0)) {
HXLINE( 762)									_hx_tmp24 = (n15 - (int)65536);
            								}
            								else {
HXLINE( 762)									_hx_tmp24 = n15;
            								}
HXDLIN( 762)								mtx1 = ((Float)_hx_tmp24 / (Float)((Float)16384.0));
HXDLIN( 762)								hx::AddEq(compIndex,(int)2);
HXLINE( 763)								HX_VARI_NAME( Int,ch115,"ch1") = comp->readU8(compIndex);
HXDLIN( 763)								HX_VARI_NAME( Int,ch215,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 763)								HX_VARI_NAME( Int,n16,"n") = ((int)ch215 | (int)((int)ch115 << (int)(int)8));
HXDLIN( 763)								Int _hx_tmp25;
HXDLIN( 763)								if ((((int)n16 & (int)(int)32768) != (int)0)) {
HXLINE( 763)									_hx_tmp25 = (n16 - (int)65536);
            								}
            								else {
HXLINE( 763)									_hx_tmp25 = n16;
            								}
HXDLIN( 763)								mtx2 = ((Float)_hx_tmp25 / (Float)((Float)16384.0));
HXDLIN( 763)								hx::AddEq(compIndex,(int)2);
HXLINE( 764)								HX_VARI_NAME( Int,ch116,"ch1") = comp->readU8(compIndex);
HXDLIN( 764)								HX_VARI_NAME( Int,ch216,"ch2") = comp->readU8((compIndex + (int)1));
HXDLIN( 764)								HX_VARI_NAME( Int,n17,"n") = ((int)ch216 | (int)((int)ch116 << (int)(int)8));
HXDLIN( 764)								Int _hx_tmp26;
HXDLIN( 764)								if ((((int)n17 & (int)(int)32768) != (int)0)) {
HXLINE( 764)									_hx_tmp26 = (n17 - (int)65536);
            								}
            								else {
HXLINE( 764)									_hx_tmp26 = n17;
            								}
HXDLIN( 764)								mtx3 = ((Float)_hx_tmp26 / (Float)((Float)16384.0));
HXDLIN( 764)								hx::AddEq(compIndex,(int)2);
            							}
            						}
            					}
HXLINE( 768)					m1 = ::Math_obj::sqrt(((mtx0 * mtx0) + (mtx1 * mtx1)));
HXLINE( 769)					n4 = ::Math_obj::sqrt(((mtx2 * mtx2) + (mtx3 * mtx3)));
HXLINE( 772)					comp_verts = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,gidx);
HXLINE( 773)					Bool _hx_tmp27 = hx::IsNull( comp_verts );
HXDLIN( 773)					if (_hx_tmp27) {
HXLINE( 773)						comp_num_verts = (int)0;
            					}
            					else {
HXLINE( 773)						comp_num_verts = comp_verts->length;
            					}
HXLINE( 774)					if ((comp_num_verts > (int)0)) {
HXLINE( 776)						{
HXLINE( 776)							HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN( 776)							HX_VARI_NAME( Int,_g2,"_g") = comp_num_verts;
HXDLIN( 776)							while((_g14 < _g2)){
HXLINE( 776)								HX_VARI_NAME( Int,i5,"i") = _g14++;
HXLINE( 777)								HX_VARI(  ::kha::graphics2::truetype::Stbtt_vertex,v) = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(comp_verts,i5)) );
HXLINE( 778)								HX_VAR_NAME( Int,x1,"x");
HXDLIN( 778)								HX_VAR_NAME( Int,y1,"y");
HXLINE( 779)								x1 = v->x;
HXDLIN( 779)								y1 = v->y;
HXLINE( 780)								v->x = ::Std_obj::_hx_int((m1 * (((mtx0 * x1) + (mtx2 * y1)) + mtx4)));
HXLINE( 781)								v->y = ::Std_obj::_hx_int((n4 * (((mtx1 * x1) + (mtx3 * y1)) + mtx5)));
HXLINE( 782)								x1 = v->cx;
HXDLIN( 782)								y1 = v->cy;
HXLINE( 783)								v->cx = ::Std_obj::_hx_int((m1 * (((mtx0 * x1) + (mtx2 * y1)) + mtx4)));
HXLINE( 784)								v->cy = ::Std_obj::_hx_int((n4 * (((mtx1 * x1) + (mtx3 * y1)) + mtx5)));
            							}
            						}
HXLINE( 787)						HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 787)						_hx_array_set_size_exact(this2,(num_vertices + comp_num_verts));
HXDLIN( 787)						tmp = this2;
HXLINE( 788)						Bool _hx_tmp28 = hx::IsNull( tmp );
HXDLIN( 788)						if (_hx_tmp28) {
HXLINE( 789)							return null();
            						}
HXLINE( 791)						if ((num_vertices > (int)0)) {
HXLINE( 791)							::kha::graphics2::truetype::StbTruetype_obj::copyVertices(vertices,tmp,(int)0,num_vertices);
            						}
HXLINE( 792)						::kha::graphics2::truetype::StbTruetype_obj::copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
HXLINE( 793)						vertices = tmp;
HXLINE( 794)						hx::AddEq(num_vertices,comp_num_verts);
            					}
HXLINE( 797)					more = ((int)flags1 & (int)(int)32);
            				}
            			}
            			else {
HXLINE( 799)				if ((numberOfContours < (int)0)) {
HXLINE( 801)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
            			}
            		}
HXLINE( 806)		Bool _hx_tmp29 = hx::IsNull( vertices );
HXDLIN( 806)		if (_hx_tmp29) {
HXLINE( 806)			return null();
            		}
HXLINE( 807)		if ((vertices->length < num_vertices)) {
HXLINE( 807)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
HXLINE( 808)		Bool _hx_tmp30 = (num_vertices < vertices->length);
HXDLIN( 808)		if (_hx_tmp30) {
HXLINE( 809)			HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 809)			_hx_array_set_size_exact(this3,num_vertices);
HXDLIN( 809)			HX_VARI_NAME( ::Array< ::Dynamic>,tmp1,"tmp") = this3;
HXLINE( 810)			::kha::graphics2::truetype::StbTruetype_obj::copyVertices(vertices,tmp1,(int)0,num_vertices);
HXLINE( 811)			return tmp1;
            		}
            		else {
HXLINE( 814)			return vertices;
            		}
HXLINE( 808)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetGlyphShape,return )

 ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics StbTruetype_obj::stbtt_GetGlyphHMetrics( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int glyph_index){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphHMetrics",0x4333ea29,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphHMetrics","kha/graphics2/truetype/StbTruetype.hx",818,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(glyph_index,"glyph_index")
HXLINE( 819)		HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 819)		HX_VARI( Int,pos) = (info->hhea + (int)34);
HXDLIN( 819)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 819)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 819)		HX_VARI( Int,numOfLongHorMetrics) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXLINE( 820)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics,metrics) =  ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics_obj::__new();
HXLINE( 821)		if ((glyph_index < numOfLongHorMetrics)) {
HXLINE( 822)			HX_VARI_NAME(  ::kha::Blob,p1,"p") = info->data;
HXDLIN( 822)			HX_VARI_NAME( Int,pos1,"pos") = (info->hmtx + ((int)4 * glyph_index));
HXDLIN( 822)			HX_VARI_NAME( Int,ch11,"ch1") = p1->readU8(pos1);
HXDLIN( 822)			HX_VARI_NAME( Int,ch21,"ch2") = p1->readU8((pos1 + (int)1));
HXDLIN( 822)			HX_VARI( Int,n) = ((int)ch21 | (int)((int)ch11 << (int)(int)8));
HXDLIN( 822)			Int _hx_tmp;
HXDLIN( 822)			if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 822)				_hx_tmp = (n - (int)65536);
            			}
            			else {
HXLINE( 822)				_hx_tmp = n;
            			}
HXDLIN( 822)			metrics->advanceWidth = _hx_tmp;
HXLINE( 823)			HX_VARI_NAME(  ::kha::Blob,p2,"p") = info->data;
HXDLIN( 823)			HX_VARI_NAME( Int,pos2,"pos") = ((info->hmtx + ((int)4 * glyph_index)) + (int)2);
HXDLIN( 823)			HX_VARI_NAME( Int,ch12,"ch1") = p2->readU8(pos2);
HXDLIN( 823)			HX_VARI_NAME( Int,ch22,"ch2") = p2->readU8((pos2 + (int)1));
HXDLIN( 823)			HX_VARI_NAME( Int,n1,"n") = ((int)ch22 | (int)((int)ch12 << (int)(int)8));
HXDLIN( 823)			Int _hx_tmp1;
HXDLIN( 823)			if ((((int)n1 & (int)(int)32768) != (int)0)) {
HXLINE( 823)				_hx_tmp1 = (n1 - (int)65536);
            			}
            			else {
HXLINE( 823)				_hx_tmp1 = n1;
            			}
HXDLIN( 823)			metrics->leftSideBearing = _hx_tmp1;
            		}
            		else {
HXLINE( 825)			HX_VARI_NAME(  ::kha::Blob,p3,"p") = info->data;
HXDLIN( 825)			HX_VARI_NAME( Int,pos3,"pos") = (info->hmtx + ((int)4 * (numOfLongHorMetrics - (int)1)));
HXDLIN( 825)			HX_VARI_NAME( Int,ch13,"ch1") = p3->readU8(pos3);
HXDLIN( 825)			HX_VARI_NAME( Int,ch23,"ch2") = p3->readU8((pos3 + (int)1));
HXDLIN( 825)			HX_VARI_NAME( Int,n2,"n") = ((int)ch23 | (int)((int)ch13 << (int)(int)8));
HXDLIN( 825)			Int _hx_tmp2;
HXDLIN( 825)			if ((((int)n2 & (int)(int)32768) != (int)0)) {
HXLINE( 825)				_hx_tmp2 = (n2 - (int)65536);
            			}
            			else {
HXLINE( 825)				_hx_tmp2 = n2;
            			}
HXDLIN( 825)			metrics->advanceWidth = _hx_tmp2;
HXLINE( 826)			HX_VARI_NAME(  ::kha::Blob,p4,"p") = info->data;
HXDLIN( 826)			HX_VARI_NAME( Int,pos4,"pos") = ((info->hmtx + ((int)4 * numOfLongHorMetrics)) + ((int)2 * (glyph_index - numOfLongHorMetrics)));
HXDLIN( 826)			HX_VARI_NAME( Int,ch14,"ch1") = p4->readU8(pos4);
HXDLIN( 826)			HX_VARI_NAME( Int,ch24,"ch2") = p4->readU8((pos4 + (int)1));
HXDLIN( 826)			HX_VARI_NAME( Int,n3,"n") = ((int)ch24 | (int)((int)ch14 << (int)(int)8));
HXDLIN( 826)			Int _hx_tmp3;
HXDLIN( 826)			if ((((int)n3 & (int)(int)32768) != (int)0)) {
HXLINE( 826)				_hx_tmp3 = (n3 - (int)65536);
            			}
            			else {
HXLINE( 826)				_hx_tmp3 = n3;
            			}
HXDLIN( 826)			metrics->leftSideBearing = _hx_tmp3;
            		}
HXLINE( 828)		return metrics;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetGlyphHMetrics,return )

Int StbTruetype_obj::stbtt_GetGlyphKernAdvance( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int glyph1,Int glyph2){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphKernAdvance",0x1e04b09e,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphKernAdvance","kha/graphics2/truetype/StbTruetype.hx",831,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(glyph1,"glyph1")
            	HX_STACK_ARG(glyph2,"glyph2")
HXLINE( 832)		Int _hx_tmp = info->kern;
HXDLIN( 832)		Int _hx_tmp1 = info->data->get_length();
HXDLIN( 832)		Int _hx_tmp2 = (_hx_tmp1 - info->kern);
HXDLIN( 832)		HX_VARI(  ::kha::Blob,data) = info->data->sub(_hx_tmp,_hx_tmp2);
HXLINE( 833)		HX_VAR( Int,needle);
HXDLIN( 833)		HX_VAR( Int,straw);
HXLINE( 834)		HX_VAR( Int,l);
HXDLIN( 834)		HX_VAR( Int,r);
HXDLIN( 834)		HX_VAR( Int,m);
HXLINE( 837)		if ((info->kern == (int)0)) {
HXLINE( 838)			return (int)0;
            		}
HXLINE( 839)		HX_VARI( Int,ch1) = data->readU8((int)2);
HXDLIN( 839)		HX_VARI( Int,ch2) = data->readU8((int)3);
HXDLIN( 839)		if ((((int)ch2 | (int)((int)ch1 << (int)(int)8)) < (int)1)) {
HXLINE( 840)			return (int)0;
            		}
HXLINE( 841)		HX_VARI_NAME( Int,ch11,"ch1") = data->readU8((int)8);
HXDLIN( 841)		HX_VARI_NAME( Int,ch21,"ch2") = data->readU8((int)9);
HXDLIN( 841)		if ((((int)ch21 | (int)((int)ch11 << (int)(int)8)) != (int)1)) {
HXLINE( 842)			return (int)0;
            		}
HXLINE( 844)		l = (int)0;
HXLINE( 845)		HX_VARI_NAME( Int,ch12,"ch1") = data->readU8((int)10);
HXDLIN( 845)		HX_VARI_NAME( Int,ch22,"ch2") = data->readU8((int)11);
HXDLIN( 845)		r = (((int)ch22 | (int)((int)ch12 << (int)(int)8)) - (int)1);
HXLINE( 846)		needle = ((int)((int)glyph1 << (int)(int)16) | (int)glyph2);
HXLINE( 847)		while((l <= r)){
HXLINE( 848)			m = ((int)(l + r) >> (int)(int)1);
HXLINE( 849)			HX_VARI( Int,pos) = ((int)18 + (m * (int)6));
HXDLIN( 849)			HX_VARI_NAME( Int,ch13,"ch1") = data->readU8(pos);
HXDLIN( 849)			HX_VARI_NAME( Int,ch23,"ch2") = data->readU8((pos + (int)1));
HXDLIN( 849)			HX_VARI( Int,ch3) = data->readU8((pos + (int)2));
HXDLIN( 849)			HX_VARI( Int,ch4) = data->readU8((pos + (int)3));
HXDLIN( 849)			straw = ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch23 << (int)(int)16)) | (int)((int)ch13 << (int)(int)24));
HXLINE( 850)			if ((needle < straw)) {
HXLINE( 851)				r = (m - (int)1);
            			}
            			else {
HXLINE( 852)				if ((needle > straw)) {
HXLINE( 853)					l = (m + (int)1);
            				}
            				else {
HXLINE( 855)					HX_VARI_NAME( Int,pos1,"pos") = ((int)22 + (m * (int)6));
HXDLIN( 855)					HX_VARI_NAME( Int,ch14,"ch1") = data->readU8(pos1);
HXDLIN( 855)					HX_VARI_NAME( Int,ch24,"ch2") = data->readU8((pos1 + (int)1));
HXDLIN( 855)					HX_VARI( Int,n) = ((int)ch24 | (int)((int)ch14 << (int)(int)8));
HXDLIN( 855)					if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 855)						return (n - (int)65536);
            					}
            					else {
HXLINE( 855)						return n;
            					}
            				}
            			}
            		}
HXLINE( 857)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetGlyphKernAdvance,return )

Int StbTruetype_obj::stbtt_GetCodepointKernAdvance( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int ch1,Int ch2){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointKernAdvance",0x7383b6a7,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointKernAdvance","kha/graphics2/truetype/StbTruetype.hx",860,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(ch1,"ch1")
            	HX_STACK_ARG(ch2,"ch2")
HXLINE( 861)		if ((info->kern == (int)0)) {
HXLINE( 862)			return (int)0;
            		}
HXLINE( 863)		Int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,ch1);
HXDLIN( 863)		Int _hx_tmp1 = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,ch2);
HXDLIN( 863)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphKernAdvance(info,_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetCodepointKernAdvance,return )

 ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics StbTruetype_obj::stbtt_GetCodepointHMetrics( ::kha::graphics2::truetype::Stbtt_fontinfo info,Int codepoint){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointHMetrics",0x35d0b480,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointHMetrics","kha/graphics2/truetype/StbTruetype.hx",867,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(codepoint,"codepoint")
HXLINE( 867)		Int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint);
HXDLIN( 867)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphHMetrics(info,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetCodepointHMetrics,return )

 ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics StbTruetype_obj::stbtt_GetFontVMetrics( ::kha::graphics2::truetype::Stbtt_fontinfo info){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetFontVMetrics",0x39aaf1fa,"kha.graphics2.truetype.StbTruetype.stbtt_GetFontVMetrics","kha/graphics2/truetype/StbTruetype.hx",870,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
HXLINE( 871)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics,metrics) =  ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics_obj::__new();
HXLINE( 872)		HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 872)		HX_VARI( Int,pos) = (info->hhea + (int)4);
HXDLIN( 872)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 872)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 872)		HX_VARI( Int,n) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXDLIN( 872)		Int _hx_tmp;
HXDLIN( 872)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 872)			_hx_tmp = (n - (int)65536);
            		}
            		else {
HXLINE( 872)			_hx_tmp = n;
            		}
HXDLIN( 872)		metrics->ascent = _hx_tmp;
HXLINE( 873)		HX_VARI_NAME(  ::kha::Blob,p1,"p") = info->data;
HXDLIN( 873)		HX_VARI_NAME( Int,pos1,"pos") = (info->hhea + (int)6);
HXDLIN( 873)		HX_VARI_NAME( Int,ch11,"ch1") = p1->readU8(pos1);
HXDLIN( 873)		HX_VARI_NAME( Int,ch21,"ch2") = p1->readU8((pos1 + (int)1));
HXDLIN( 873)		HX_VARI_NAME( Int,n1,"n") = ((int)ch21 | (int)((int)ch11 << (int)(int)8));
HXDLIN( 873)		Int _hx_tmp1;
HXDLIN( 873)		if ((((int)n1 & (int)(int)32768) != (int)0)) {
HXLINE( 873)			_hx_tmp1 = (n1 - (int)65536);
            		}
            		else {
HXLINE( 873)			_hx_tmp1 = n1;
            		}
HXDLIN( 873)		metrics->descent = _hx_tmp1;
HXLINE( 874)		HX_VARI_NAME(  ::kha::Blob,p2,"p") = info->data;
HXDLIN( 874)		HX_VARI_NAME( Int,pos2,"pos") = (info->hhea + (int)8);
HXDLIN( 874)		HX_VARI_NAME( Int,ch12,"ch1") = p2->readU8(pos2);
HXDLIN( 874)		HX_VARI_NAME( Int,ch22,"ch2") = p2->readU8((pos2 + (int)1));
HXDLIN( 874)		HX_VARI_NAME( Int,n2,"n") = ((int)ch22 | (int)((int)ch12 << (int)(int)8));
HXDLIN( 874)		Int _hx_tmp2;
HXDLIN( 874)		if ((((int)n2 & (int)(int)32768) != (int)0)) {
HXLINE( 874)			_hx_tmp2 = (n2 - (int)65536);
            		}
            		else {
HXLINE( 874)			_hx_tmp2 = n2;
            		}
HXDLIN( 874)		metrics->lineGap = _hx_tmp2;
HXLINE( 875)		return metrics;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,stbtt_GetFontVMetrics,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetFontBoundingBox( ::kha::graphics2::truetype::Stbtt_fontinfo info){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetFontBoundingBox",0xf62c3d9a,"kha.graphics2.truetype.StbTruetype.stbtt_GetFontBoundingBox","kha/graphics2/truetype/StbTruetype.hx",878,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
HXLINE( 879)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_rect,rect) =  ::kha::graphics2::truetype::Stbtt_temp_rect_obj::__new();
HXLINE( 880)		HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 880)		HX_VARI( Int,pos) = (info->head + (int)36);
HXDLIN( 880)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 880)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 880)		HX_VARI( Int,n) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXDLIN( 880)		Int _hx_tmp;
HXDLIN( 880)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 880)			_hx_tmp = (n - (int)65536);
            		}
            		else {
HXLINE( 880)			_hx_tmp = n;
            		}
HXDLIN( 880)		rect->x0 = _hx_tmp;
HXLINE( 881)		HX_VARI_NAME(  ::kha::Blob,p1,"p") = info->data;
HXDLIN( 881)		HX_VARI_NAME( Int,pos1,"pos") = (info->head + (int)38);
HXDLIN( 881)		HX_VARI_NAME( Int,ch11,"ch1") = p1->readU8(pos1);
HXDLIN( 881)		HX_VARI_NAME( Int,ch21,"ch2") = p1->readU8((pos1 + (int)1));
HXDLIN( 881)		HX_VARI_NAME( Int,n1,"n") = ((int)ch21 | (int)((int)ch11 << (int)(int)8));
HXDLIN( 881)		Int _hx_tmp1;
HXDLIN( 881)		if ((((int)n1 & (int)(int)32768) != (int)0)) {
HXLINE( 881)			_hx_tmp1 = (n1 - (int)65536);
            		}
            		else {
HXLINE( 881)			_hx_tmp1 = n1;
            		}
HXDLIN( 881)		rect->y0 = _hx_tmp1;
HXLINE( 882)		HX_VARI_NAME(  ::kha::Blob,p2,"p") = info->data;
HXDLIN( 882)		HX_VARI_NAME( Int,pos2,"pos") = (info->head + (int)40);
HXDLIN( 882)		HX_VARI_NAME( Int,ch12,"ch1") = p2->readU8(pos2);
HXDLIN( 882)		HX_VARI_NAME( Int,ch22,"ch2") = p2->readU8((pos2 + (int)1));
HXDLIN( 882)		HX_VARI_NAME( Int,n2,"n") = ((int)ch22 | (int)((int)ch12 << (int)(int)8));
HXDLIN( 882)		Int _hx_tmp2;
HXDLIN( 882)		if ((((int)n2 & (int)(int)32768) != (int)0)) {
HXLINE( 882)			_hx_tmp2 = (n2 - (int)65536);
            		}
            		else {
HXLINE( 882)			_hx_tmp2 = n2;
            		}
HXDLIN( 882)		rect->x1 = _hx_tmp2;
HXLINE( 883)		HX_VARI_NAME(  ::kha::Blob,p3,"p") = info->data;
HXDLIN( 883)		HX_VARI_NAME( Int,pos3,"pos") = (info->head + (int)42);
HXDLIN( 883)		HX_VARI_NAME( Int,ch13,"ch1") = p3->readU8(pos3);
HXDLIN( 883)		HX_VARI_NAME( Int,ch23,"ch2") = p3->readU8((pos3 + (int)1));
HXDLIN( 883)		HX_VARI_NAME( Int,n3,"n") = ((int)ch23 | (int)((int)ch13 << (int)(int)8));
HXDLIN( 883)		Int _hx_tmp3;
HXDLIN( 883)		if ((((int)n3 & (int)(int)32768) != (int)0)) {
HXLINE( 883)			_hx_tmp3 = (n3 - (int)65536);
            		}
            		else {
HXLINE( 883)			_hx_tmp3 = n3;
            		}
HXDLIN( 883)		rect->y1 = _hx_tmp3;
HXLINE( 884)		return rect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,stbtt_GetFontBoundingBox,return )

Float StbTruetype_obj::stbtt_ScaleForPixelHeight( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float height){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_ScaleForPixelHeight",0x31fdc196,"kha.graphics2.truetype.StbTruetype.stbtt_ScaleForPixelHeight","kha/graphics2/truetype/StbTruetype.hx",887,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(height,"height")
HXLINE( 888)		HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 888)		HX_VARI( Int,pos) = (info->hhea + (int)4);
HXDLIN( 888)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 888)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXDLIN( 888)		HX_VARI( Int,n) = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
HXDLIN( 888)		Int _hx_tmp;
HXDLIN( 888)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 888)			_hx_tmp = (n - (int)65536);
            		}
            		else {
HXLINE( 888)			_hx_tmp = n;
            		}
HXDLIN( 888)		HX_VARI_NAME(  ::kha::Blob,p1,"p") = info->data;
HXDLIN( 888)		HX_VARI_NAME( Int,pos1,"pos") = (info->hhea + (int)6);
HXDLIN( 888)		HX_VARI_NAME( Int,ch11,"ch1") = p1->readU8(pos1);
HXDLIN( 888)		HX_VARI_NAME( Int,ch21,"ch2") = p1->readU8((pos1 + (int)1));
HXDLIN( 888)		HX_VARI_NAME( Int,n1,"n") = ((int)ch21 | (int)((int)ch11 << (int)(int)8));
HXDLIN( 888)		Int _hx_tmp1;
HXDLIN( 888)		if ((((int)n1 & (int)(int)32768) != (int)0)) {
HXLINE( 888)			_hx_tmp1 = (n1 - (int)65536);
            		}
            		else {
HXLINE( 888)			_hx_tmp1 = n1;
            		}
HXLINE( 889)		return ((Float)height / (Float)(_hx_tmp - _hx_tmp1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_ScaleForPixelHeight,return )

Float StbTruetype_obj::stbtt_ScaleForMappingEmToPixels( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float pixels){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_ScaleForMappingEmToPixels",0xa0885387,"kha.graphics2.truetype.StbTruetype.stbtt_ScaleForMappingEmToPixels","kha/graphics2/truetype/StbTruetype.hx",892,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(pixels,"pixels")
HXLINE( 893)		HX_VARI(  ::kha::Blob,p) = info->data;
HXDLIN( 893)		HX_VARI( Int,pos) = (info->head + (int)18);
HXDLIN( 893)		HX_VARI( Int,ch1) = p->readU8(pos);
HXDLIN( 893)		HX_VARI( Int,ch2) = p->readU8((pos + (int)1));
HXLINE( 894)		return ((Float)pixels / (Float)((int)ch2 | (int)((int)ch1 << (int)(int)8)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_ScaleForMappingEmToPixels,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo font,Int glyph,Float scale_x,Float scale_y,Float shift_x,Float shift_y){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmapBoxSubpixel",0x27894954,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel","kha/graphics2/truetype/StbTruetype.hx",902,0x5d9e0de9)
            	HX_STACK_ARG(font,"font")
            	HX_STACK_ARG(glyph,"glyph")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
HXLINE( 903)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_rect,rect) =  ::kha::graphics2::truetype::Stbtt_temp_rect_obj::__new();
HXLINE( 904)		Bool _hx_tmp = !(::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBox(font,glyph,rect));
HXDLIN( 904)		if (_hx_tmp) {
HXLINE( 906)			rect->x0 = (int)0;
HXLINE( 907)			rect->y0 = (int)0;
HXLINE( 908)			rect->x1 = (int)0;
HXLINE( 909)			rect->y1 = (int)0;
            		}
            		else {
HXLINE( 912)			HX_VARI( Int,x0) = rect->x0;
HXLINE( 913)			HX_VARI( Int,x1) = rect->x1;
HXLINE( 914)			HX_VARI( Int,y0) = rect->y0;
HXLINE( 915)			HX_VARI( Int,y1) = rect->y1;
HXLINE( 916)			rect->x0 = ::Math_obj::floor(((x0 * scale_x) + shift_x));
HXLINE( 917)			rect->y0 = ::Math_obj::floor(((-(y1) * scale_y) + shift_y));
HXLINE( 918)			rect->x1 = ::Math_obj::ceil(((x1 * scale_x) + shift_x));
HXLINE( 919)			rect->y1 = ::Math_obj::ceil(((-(y0) * scale_y) + shift_y));
            		}
HXLINE( 921)		return rect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_GetGlyphBitmapBoxSubpixel,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetGlyphBitmapBox( ::kha::graphics2::truetype::Stbtt_fontinfo font,Int glyph,Float scale_x,Float scale_y){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmapBox",0xb80f022e,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmapBox","kha/graphics2/truetype/StbTruetype.hx",925,0x5d9e0de9)
            	HX_STACK_ARG(font,"font")
            	HX_STACK_ARG(glyph,"glyph")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
HXLINE( 925)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt_GetGlyphBitmapBox,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetCodepointBitmapBoxSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo font,Int codepoint,Float scale_x,Float scale_y,Float shift_x,Float shift_y){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmapBoxSubpixel",0x1d51fc1d,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel","kha/graphics2/truetype/StbTruetype.hx",929,0x5d9e0de9)
            	HX_STACK_ARG(font,"font")
            	HX_STACK_ARG(codepoint,"codepoint")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
HXLINE( 929)		Int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(font,codepoint);
HXDLIN( 929)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(font,_hx_tmp,scale_x,scale_y,shift_x,shift_y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_GetCodepointBitmapBoxSubpixel,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetCodepointBitmapBox( ::kha::graphics2::truetype::Stbtt_fontinfo font,Int codepoint,Float scale_x,Float scale_y){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmapBox",0x0ea343f7,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmapBox","kha/graphics2/truetype/StbTruetype.hx",933,0x5d9e0de9)
            	HX_STACK_ARG(font,"font")
            	HX_STACK_ARG(codepoint,"codepoint")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
HXLINE( 933)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt_GetCodepointBitmapBox,return )

 ::kha::graphics2::truetype::Stbtt__active_edge StbTruetype_obj::stbtt__new_active(::Array< ::Dynamic> e,Int eIndex,Int off_x,Float start_point){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__new_active",0x85e5272c,"kha.graphics2.truetype.StbTruetype.stbtt__new_active","kha/graphics2/truetype/StbTruetype.hx",940,0x5d9e0de9)
            	HX_STACK_ARG(e,"e")
            	HX_STACK_ARG(eIndex,"eIndex")
            	HX_STACK_ARG(off_x,"off_x")
            	HX_STACK_ARG(start_point,"start_point")
HXLINE( 941)		HX_VARI(  ::kha::graphics2::truetype::Stbtt__active_edge,z) =  ::kha::graphics2::truetype::Stbtt__active_edge_obj::__new();
HXLINE( 942)		Float _hx_tmp = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->x1;
HXDLIN( 942)		Float _hx_tmp1 = (_hx_tmp - ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->x0);
HXDLIN( 942)		Float _hx_tmp2 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y1;
HXDLIN( 942)		Float _hx_tmp3 = (_hx_tmp2 - ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0);
HXDLIN( 942)		HX_VARI( Float,dxdy) = ((Float)_hx_tmp1 / (Float)_hx_tmp3);
HXLINE( 944)		Bool _hx_tmp4 = hx::IsNull( z );
HXDLIN( 944)		if (_hx_tmp4) {
HXLINE( 944)			return z;
            		}
HXLINE( 945)		z->fdx = dxdy;
HXLINE( 946)		Float _hx_tmp5;
HXDLIN( 946)		if ((dxdy != ((Float)0.0))) {
HXLINE( 946)			_hx_tmp5 = ((Float)((Float)1.0) / (Float)dxdy);
            		}
            		else {
HXLINE( 946)			_hx_tmp5 = ((Float)0.0);
            		}
HXDLIN( 946)		z->fdy = _hx_tmp5;
HXLINE( 947)		Float _hx_tmp6 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->x0;
HXDLIN( 947)		Float _hx_tmp7 = (start_point - ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0);
HXDLIN( 947)		z->fx = (_hx_tmp6 + (dxdy * _hx_tmp7));
HXLINE( 948)		hx::SubEq(z->fx,off_x);
HXLINE( 949)		Float _hx_tmp8;
HXDLIN( 949)		Bool _hx_tmp9 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->invert;
HXDLIN( 949)		if (_hx_tmp9) {
HXLINE( 949)			_hx_tmp8 = ((Float)1.0);
            		}
            		else {
HXLINE( 949)			_hx_tmp8 = ((Float)-1.0);
            		}
HXDLIN( 949)		z->direction = _hx_tmp8;
HXLINE( 950)		z->sy = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0;
HXLINE( 951)		z->ey = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y1;
HXLINE( 952)		z->next = null();
HXLINE( 953)		return z;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt__new_active,return )

void StbTruetype_obj::stbtt__handle_clipped_edge(::Array< Float > scanline,Int scanlineIndex,Int x, ::kha::graphics2::truetype::Stbtt__active_edge e,Float x0,Float y0,Float x1,Float y1){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__handle_clipped_edge",0xa6dfd0ed,"kha.graphics2.truetype.StbTruetype.stbtt__handle_clipped_edge","kha/graphics2/truetype/StbTruetype.hx",958,0x5d9e0de9)
            	HX_STACK_ARG(scanline,"scanline")
            	HX_STACK_ARG(scanlineIndex,"scanlineIndex")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(e,"e")
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
HXLINE( 959)		if ((y0 == y1)) {
HXLINE( 959)			return;
            		}
HXLINE( 960)		if (!((y0 < y1))) {
HXLINE( 960)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
HXLINE( 961)		if (!((e->sy <= e->ey))) {
HXLINE( 961)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
HXLINE( 962)		if ((y0 > e->ey)) {
HXLINE( 962)			return;
            		}
HXLINE( 963)		if ((y1 < e->sy)) {
HXLINE( 963)			return;
            		}
HXLINE( 964)		Bool _hx_tmp = (y0 < e->sy);
HXDLIN( 964)		if (_hx_tmp) {
HXLINE( 965)			Float _hx_tmp1 = ((x1 - x0) * (e->sy - y0));
HXDLIN( 965)			hx::AddEq(x0,((Float)_hx_tmp1 / (Float)(y1 - y0)));
HXLINE( 966)			y0 = e->sy;
            		}
HXLINE( 968)		Bool _hx_tmp2 = (y1 > e->ey);
HXDLIN( 968)		if (_hx_tmp2) {
HXLINE( 969)			Float _hx_tmp3 = ((x1 - x0) * (e->ey - y1));
HXDLIN( 969)			hx::AddEq(x1,((Float)_hx_tmp3 / (Float)(y1 - y0)));
HXLINE( 970)			y1 = e->ey;
            		}
HXLINE( 973)		if ((x0 == x)) {
HXLINE( 974)			if (!((x1 <= (x + (int)1)))) {
HXLINE( 974)				HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            			}
            		}
            		else {
HXLINE( 975)			if ((x0 == (x + (int)1))) {
HXLINE( 976)				if (!((x1 >= x))) {
HXLINE( 976)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
            			}
            			else {
HXLINE( 977)				if ((x0 <= x)) {
HXLINE( 978)					if (!((x1 <= x))) {
HXLINE( 978)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
            				}
            				else {
HXLINE( 979)					if ((x0 >= (x + (int)1))) {
HXLINE( 980)						if (!((x1 >= (x + (int)1)))) {
HXLINE( 980)							HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            						}
            					}
            					else {
HXLINE( 982)						Bool _hx_tmp4;
HXDLIN( 982)						if ((x1 >= x)) {
HXLINE( 982)							_hx_tmp4 = (x1 <= (x + (int)1));
            						}
            						else {
HXLINE( 982)							_hx_tmp4 = false;
            						}
HXDLIN( 982)						if (!(_hx_tmp4)) {
HXLINE( 982)							HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            						}
            					}
            				}
            			}
            		}
HXLINE( 984)		Bool _hx_tmp5;
HXDLIN( 984)		if ((x0 <= x)) {
HXLINE( 984)			_hx_tmp5 = (x1 <= x);
            		}
            		else {
HXLINE( 984)			_hx_tmp5 = false;
            		}
HXDLIN( 984)		if (_hx_tmp5) {
HXLINE( 985)			HX_VARI( Int,_g) = (scanlineIndex + x);
HXDLIN( 985)			{
HXLINE( 985)				Float _hx_tmp6 = ( (Float)(_hx_array_unsafe_get(scanline,_g)) );
HXDLIN( 985)				Float _hx_tmp7 = (e->direction * (y1 - y0));
HXDLIN( 985)				scanline->__unsafe_set(_g,(_hx_tmp6 + _hx_tmp7));
            			}
            		}
            		else {
HXLINE( 986)			Bool _hx_tmp8;
HXDLIN( 986)			if ((x0 >= (x + (int)1))) {
HXLINE( 986)				_hx_tmp8 = (x1 >= (x + (int)1));
            			}
            			else {
HXLINE( 986)				_hx_tmp8 = false;
            			}
HXDLIN( 986)			if (!(_hx_tmp8)) {
HXLINE( 989)				Bool _hx_tmp9;
HXDLIN( 989)				Bool _hx_tmp10;
HXDLIN( 989)				Bool _hx_tmp11;
HXDLIN( 989)				if ((x0 >= x)) {
HXLINE( 989)					_hx_tmp11 = (x0 <= (x + (int)1));
            				}
            				else {
HXLINE( 989)					_hx_tmp11 = false;
            				}
HXDLIN( 989)				if (_hx_tmp11) {
HXLINE( 989)					_hx_tmp10 = (x1 >= x);
            				}
            				else {
HXLINE( 989)					_hx_tmp10 = false;
            				}
HXDLIN( 989)				if (_hx_tmp10) {
HXLINE( 989)					_hx_tmp9 = (x1 <= (x + (int)1));
            				}
            				else {
HXLINE( 989)					_hx_tmp9 = false;
            				}
HXDLIN( 989)				if (!(_hx_tmp9)) {
HXLINE( 989)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
HXLINE( 990)				{
HXLINE( 990)					HX_VARI_NAME( Int,_g1,"_g") = (scanlineIndex + x);
HXDLIN( 990)					{
HXLINE( 990)						Float _hx_tmp12 = ( (Float)(_hx_array_unsafe_get(scanline,_g1)) );
HXDLIN( 990)						Float val = (_hx_tmp12 + ((e->direction * (y1 - y0)) * ((int)1 - ((Float)((x0 - x) + (x1 - x)) / (Float)(int)2))));
HXDLIN( 990)						scanline->__unsafe_set(_g1,val);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(StbTruetype_obj,stbtt__handle_clipped_edge,(void))

void StbTruetype_obj::stbtt__fill_active_edges_new(::Array< Float > scanline,::Array< Float > scanline_fill,Int scanline_fillIndex,Int len, ::kha::graphics2::truetype::Stbtt__active_edge e,Float y_top){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__fill_active_edges_new",0xf3ac6eb3,"kha.graphics2.truetype.StbTruetype.stbtt__fill_active_edges_new","kha/graphics2/truetype/StbTruetype.hx",994,0x5d9e0de9)
            	HX_STACK_ARG(scanline,"scanline")
            	HX_STACK_ARG(scanline_fill,"scanline_fill")
            	HX_STACK_ARG(scanline_fillIndex,"scanline_fillIndex")
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(e,"e")
            	HX_STACK_ARG(y_top,"y_top")
HXLINE( 995)		HX_VARI( Float,y_bottom) = (y_top + (int)1);
HXLINE( 997)		while(true){
HXLINE( 997)			Bool _hx_tmp = !(hx::IsNotNull( e ));
HXDLIN( 997)			if (_hx_tmp) {
HXLINE( 997)				goto _hx_goto_13;
            			}
HXLINE(1001)			if (!((e->ey >= y_top))) {
HXLINE(1001)				HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            			}
HXLINE(1003)			Bool _hx_tmp1 = (e->fdx == (int)0);
HXDLIN(1003)			if (_hx_tmp1) {
HXLINE(1004)				HX_VARI( Float,x0) = e->fx;
HXLINE(1005)				if ((x0 < len)) {
HXLINE(1006)					if ((x0 >= (int)0)) {
HXLINE(1007)						Int _hx_tmp2 = ::Std_obj::_hx_int(x0);
HXDLIN(1007)						::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,_hx_tmp2,e,x0,y_top,x0,y_bottom);
HXLINE(1008)						Int _hx_tmp3 = (scanline_fillIndex - (int)1);
HXDLIN(1008)						Int _hx_tmp4 = ::Std_obj::_hx_int((x0 + (int)1));
HXDLIN(1008)						::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline_fill,_hx_tmp3,_hx_tmp4,e,x0,y_top,x0,y_bottom);
            					}
            					else {
HXLINE(1010)						::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline_fill,(scanline_fillIndex - (int)1),(int)0,e,x0,y_top,x0,y_bottom);
            					}
            				}
            			}
            			else {
HXLINE(1014)				HX_VARI_NAME( Float,x01,"x0") = e->fx;
HXLINE(1015)				HX_VARI( Float,dx) = e->fdx;
HXLINE(1016)				HX_VARI( Float,xb) = (x01 + dx);
HXLINE(1017)				HX_VAR( Float,x_top);
HXDLIN(1017)				HX_VAR( Float,x_bottom);
HXLINE(1018)				HX_VAR( Float,sy0);
HXDLIN(1018)				HX_VAR( Float,sy1);
HXLINE(1019)				HX_VARI( Float,dy) = e->fdy;
HXLINE(1020)				{
HXLINE(1020)					Bool value;
HXDLIN(1020)					if ((e->sy <= y_bottom)) {
HXLINE(1020)						value = (e->ey >= y_top);
            					}
            					else {
HXLINE(1020)						value = false;
            					}
HXDLIN(1020)					if (!(value)) {
HXLINE(1020)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
            				}
HXLINE(1025)				if ((e->sy > y_top)) {
HXLINE(1026)					x_top = (x01 + (dx * (e->sy - y_top)));
HXLINE(1027)					sy0 = e->sy;
            				}
            				else {
HXLINE(1029)					x_top = x01;
HXLINE(1030)					sy0 = y_top;
            				}
HXLINE(1032)				if ((e->ey < y_bottom)) {
HXLINE(1033)					x_bottom = (x01 + (dx * (e->ey - y_top)));
HXLINE(1034)					sy1 = e->ey;
            				}
            				else {
HXLINE(1036)					x_bottom = xb;
HXLINE(1037)					sy1 = y_bottom;
            				}
HXLINE(1040)				Bool _hx_tmp5;
HXDLIN(1040)				Bool _hx_tmp6;
HXDLIN(1040)				Bool _hx_tmp7;
HXDLIN(1040)				if ((x_top >= (int)0)) {
HXLINE(1040)					_hx_tmp7 = (x_bottom >= (int)0);
            				}
            				else {
HXLINE(1040)					_hx_tmp7 = false;
            				}
HXDLIN(1040)				if (_hx_tmp7) {
HXLINE(1040)					_hx_tmp6 = (x_top < len);
            				}
            				else {
HXLINE(1040)					_hx_tmp6 = false;
            				}
HXDLIN(1040)				if (_hx_tmp6) {
HXLINE(1040)					_hx_tmp5 = (x_bottom < len);
            				}
            				else {
HXLINE(1040)					_hx_tmp5 = false;
            				}
HXDLIN(1040)				if (_hx_tmp5) {
HXLINE(1043)					Int _hx_tmp8 = ::Std_obj::_hx_int(x_top);
HXDLIN(1043)					Int _hx_tmp9 = ::Std_obj::_hx_int(x_bottom);
HXDLIN(1043)					if ((_hx_tmp8 == _hx_tmp9)) {
HXLINE(1044)						HX_VAR( Float,height);
HXLINE(1046)						HX_VARI( Int,x) = ::Std_obj::_hx_int(x_top);
HXLINE(1047)						height = (sy1 - sy0);
HXLINE(1048)						Bool _hx_tmp10;
HXDLIN(1048)						if ((x >= (int)0)) {
HXLINE(1048)							_hx_tmp10 = (x < len);
            						}
            						else {
HXLINE(1048)							_hx_tmp10 = false;
            						}
HXDLIN(1048)						if (!(_hx_tmp10)) {
HXLINE(1048)							HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            						}
HXLINE(1049)						{
HXLINE(1049)							Float _hx_tmp11 = ( (Float)(_hx_array_unsafe_get(scanline,x)) );
HXDLIN(1049)							Float _hx_tmp12 = ((e->direction * ((int)1 - ((Float)((x_top - x) + (x_bottom - x)) / (Float)(int)2))) * height);
HXDLIN(1049)							scanline->__unsafe_set(x,(_hx_tmp11 + _hx_tmp12));
            						}
HXLINE(1050)						{
HXLINE(1050)							HX_VARI( Int,_g) = (scanline_fillIndex + x);
HXDLIN(1050)							{
HXLINE(1050)								Float _hx_tmp13 = ( (Float)(_hx_array_unsafe_get(scanline_fill,_g)) );
HXDLIN(1050)								Float val = (_hx_tmp13 + (e->direction * height));
HXDLIN(1050)								scanline_fill->__unsafe_set(_g,val);
            							}
            						}
            					}
            					else {
HXLINE(1052)						HX_VAR( Int,x1);
HXDLIN(1052)						HX_VAR( Int,x2);
HXLINE(1053)						HX_VAR( Float,y_crossing);
HXDLIN(1053)						HX_VAR( Float,step);
HXDLIN(1053)						HX_VAR( Float,sign);
HXDLIN(1053)						HX_VAR( Float,area);
HXLINE(1055)						Bool _hx_tmp14 = (x_top > x_bottom);
HXDLIN(1055)						if (_hx_tmp14) {
HXLINE(1057)							HX_VAR( Float,t);
HXLINE(1058)							Float _hx_tmp15 = (sy0 - y_top);
HXDLIN(1058)							sy0 = (y_bottom - _hx_tmp15);
HXLINE(1059)							Float _hx_tmp16 = (sy1 - y_top);
HXDLIN(1059)							sy1 = (y_bottom - _hx_tmp16);
HXLINE(1060)							t = sy0;
HXDLIN(1060)							sy0 = sy1;
HXDLIN(1060)							sy1 = t;
HXLINE(1061)							t = x_bottom;
HXDLIN(1061)							x_bottom = x_top;
HXDLIN(1061)							x_top = t;
HXLINE(1062)							dx = -(dx);
HXLINE(1063)							dy = -(dy);
HXLINE(1064)							t = x01;
HXDLIN(1064)							x01 = xb;
HXDLIN(1064)							xb = t;
            						}
HXLINE(1067)						x1 = ::Std_obj::_hx_int(x_top);
HXLINE(1068)						x2 = ::Std_obj::_hx_int(x_bottom);
HXLINE(1070)						y_crossing = ((((x1 + (int)1) - x01) * dy) + y_top);
HXLINE(1072)						sign = e->direction;
HXLINE(1074)						area = (sign * (y_crossing - sy0));
HXLINE(1076)						{
HXLINE(1076)							Float _hx_tmp17 = ( (Float)(_hx_array_unsafe_get(scanline,x1)) );
HXDLIN(1076)							scanline->__unsafe_set(x1,(_hx_tmp17 + (area * ((int)1 - ((Float)((x_top - x1) + ((x1 + (int)1) - x1)) / (Float)(int)2)))));
            						}
HXLINE(1078)						step = (sign * dy);
HXLINE(1079)						{
HXLINE(1079)							HX_VARI( Int,_g1) = (x1 + (int)1);
HXDLIN(1079)							while((_g1 < x2)){
HXLINE(1079)								HX_VARI_NAME( Int,x3,"x") = _g1++;
HXLINE(1080)								{
HXLINE(1080)									Float _hx_tmp18 = ( (Float)(_hx_array_unsafe_get(scanline,x3)) );
HXDLIN(1080)									scanline->__unsafe_set(x3,(_hx_tmp18 + (area + ((Float)step / (Float)(int)2))));
            								}
HXLINE(1081)								hx::AddEq(area,step);
            							}
            						}
HXLINE(1083)						hx::AddEq(y_crossing,(dy * (x2 - (x1 + (int)1))));
HXLINE(1085)						{
HXLINE(1085)							Float _hx_tmp19 = ::Math_obj::abs(area);
HXDLIN(1085)							if (!((_hx_tmp19 <= ((Float)1.01)))) {
HXLINE(1085)								HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            							}
            						}
HXLINE(1087)						{
HXLINE(1087)							Float _hx_tmp20 = ( (Float)(_hx_array_unsafe_get(scanline,x2)) );
HXDLIN(1087)							scanline->__unsafe_set(x2,(_hx_tmp20 + (area + ((sign * ((int)1 - ((Float)((x2 - x2) + (x_bottom - x2)) / (Float)(int)2))) * (sy1 - y_crossing)))));
            						}
HXLINE(1089)						{
HXLINE(1089)							HX_VARI_NAME( Int,_g2,"_g") = (scanline_fillIndex + x2);
HXDLIN(1089)							{
HXLINE(1089)								Float _hx_tmp21 = ( (Float)(_hx_array_unsafe_get(scanline_fill,_g2)) );
HXDLIN(1089)								scanline_fill->__unsafe_set(_g2,(_hx_tmp21 + (sign * (sy1 - sy0))));
            							}
            						}
            					}
            				}
            				else {
HXLINE(1096)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(1096)					while((_g11 < len)){
HXLINE(1096)						HX_VARI_NAME( Int,x4,"x") = _g11++;
HXLINE(1112)						HX_VARI_NAME( Float,x11,"x1") = x4;
HXLINE(1113)						HX_VARI_NAME( Float,x21,"x2") = (x4 + (int)1);
HXLINE(1114)						HX_VARI_NAME( Float,x31,"x3") = xb;
HXLINE(1116)						HX_VAR( Float,y1);
HXDLIN(1116)						HX_VAR( Float,y2);
HXLINE(1121)						y1 = (((Float)(x4 - x01) / (Float)dx) + y_top);
HXLINE(1122)						y2 = (((Float)((x4 + (int)1) - x01) / (Float)dx) + y_top);
HXLINE(1124)						Bool _hx_tmp22;
HXDLIN(1124)						if ((x01 < x11)) {
HXLINE(1124)							_hx_tmp22 = (x31 > x21);
            						}
            						else {
HXLINE(1124)							_hx_tmp22 = false;
            						}
HXDLIN(1124)						if (_hx_tmp22) {
HXLINE(1125)							::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x01,y_top,x11,y1);
HXLINE(1126)							::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x11,y1,x21,y2);
HXLINE(1127)							::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x21,y2,x31,y_bottom);
            						}
            						else {
HXLINE(1128)							Bool _hx_tmp23;
HXDLIN(1128)							if ((x31 < x11)) {
HXLINE(1128)								_hx_tmp23 = (x01 > x21);
            							}
            							else {
HXLINE(1128)								_hx_tmp23 = false;
            							}
HXDLIN(1128)							if (_hx_tmp23) {
HXLINE(1129)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x01,y_top,x21,y2);
HXLINE(1130)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x21,y2,x11,y1);
HXLINE(1131)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x11,y1,x31,y_bottom);
            							}
            							else {
HXLINE(1132)								Bool _hx_tmp24;
HXDLIN(1132)								if ((x01 < x11)) {
HXLINE(1132)									_hx_tmp24 = (x31 > x11);
            								}
            								else {
HXLINE(1132)									_hx_tmp24 = false;
            								}
HXDLIN(1132)								if (_hx_tmp24) {
HXLINE(1133)									::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x01,y_top,x11,y1);
HXLINE(1134)									::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x11,y1,x31,y_bottom);
            								}
            								else {
HXLINE(1135)									Bool _hx_tmp25;
HXDLIN(1135)									if ((x31 < x11)) {
HXLINE(1135)										_hx_tmp25 = (x01 > x11);
            									}
            									else {
HXLINE(1135)										_hx_tmp25 = false;
            									}
HXDLIN(1135)									if (_hx_tmp25) {
HXLINE(1136)										::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x01,y_top,x11,y1);
HXLINE(1137)										::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x11,y1,x31,y_bottom);
            									}
            									else {
HXLINE(1138)										Bool _hx_tmp26;
HXDLIN(1138)										if ((x01 < x21)) {
HXLINE(1138)											_hx_tmp26 = (x31 > x21);
            										}
            										else {
HXLINE(1138)											_hx_tmp26 = false;
            										}
HXDLIN(1138)										if (_hx_tmp26) {
HXLINE(1139)											::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x01,y_top,x21,y2);
HXLINE(1140)											::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x21,y2,x31,y_bottom);
            										}
            										else {
HXLINE(1141)											Bool _hx_tmp27;
HXDLIN(1141)											if ((x31 < x21)) {
HXLINE(1141)												_hx_tmp27 = (x01 > x21);
            											}
            											else {
HXLINE(1141)												_hx_tmp27 = false;
            											}
HXDLIN(1141)											if (_hx_tmp27) {
HXLINE(1142)												::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x01,y_top,x21,y2);
HXLINE(1143)												::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x21,y2,x31,y_bottom);
            											}
            											else {
HXLINE(1145)												::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,(int)0,x4,e,x01,y_top,x31,y_bottom);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1150)			e = e->next;
            		}
            		_hx_goto_13:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt__fill_active_edges_new,(void))

void StbTruetype_obj::stbtt__rasterize_sorted_edges( ::kha::graphics2::truetype::Stbtt__bitmap result,::Array< ::Dynamic> e,Int n,Int vsubsample,Int off_x,Int off_y){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__rasterize_sorted_edges",0x45291a03,"kha.graphics2.truetype.StbTruetype.stbtt__rasterize_sorted_edges","kha/graphics2/truetype/StbTruetype.hx",1155,0x5d9e0de9)
            	HX_STACK_ARG(result,"result")
            	HX_STACK_ARG(e,"e")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(vsubsample,"vsubsample")
            	HX_STACK_ARG(off_x,"off_x")
            	HX_STACK_ARG(off_y,"off_y")
HXLINE(1156)		HX_VARI(  ::kha::graphics2::truetype::Stbtt__active_edge,active) = null();
HXLINE(1157)		HX_VAR( Int,y);
HXDLIN(1157)		HX_VARI( Int,j) = (int)0;
HXLINE(1158)		HX_VAR( ::Array< Float >,scanline);
HXDLIN(1158)		HX_VAR( ::Array< Float >,scanline2);
HXLINE(1159)		HX_VARI( Int,scanline2Index) = (int)0;
HXLINE(1160)		HX_VARI( Int,eIndex) = (int)0;
HXLINE(1162)		Bool _hx_tmp = (result->w > (int)64);
HXDLIN(1162)		if (_hx_tmp) {
HXLINE(1163)			Int length = ((result->w * (int)2) + (int)1);
HXDLIN(1163)			HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN(1163)			_hx_array_set_size_exact(this1,length);
HXDLIN(1163)			scanline = this1;
            		}
            		else {
HXLINE(1165)			HX_VARI_NAME( ::Array< Float >,this2,"this") = ::Array_obj< Float >::__new();
HXDLIN(1165)			_hx_array_set_size_exact(this2,(int)129);
HXDLIN(1165)			scanline = this2;
            		}
HXLINE(1167)		scanline2 = scanline;
HXLINE(1168)		scanline2Index = result->w;
HXLINE(1170)		y = off_y;
HXLINE(1171)		Int _hx_tmp1 = n;
HXDLIN(1171)		Int _hx_tmp2 = (off_y + result->h);
HXDLIN(1171)		( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,_hx_tmp1)) )->y0 = (_hx_tmp2 + (int)1);
HXLINE(1173)		while((j < result->h)){
HXLINE(1175)			HX_VARI( Float,scan_y_top) = (y + ((Float)0.0));
HXLINE(1176)			HX_VARI( Float,scan_y_bottom) = (y + ((Float)1.0));
HXLINE(1177)			HX_VAR(  ::kha::graphics2::truetype::Stbtt__active_edge,step_value);
HXDLIN(1177)			HX_VAR(  ::Dynamic,step_parent);
HXLINE(1155)			step_value = active;
HXDLIN(1155)			step_parent = null();
HXLINE(1179)			{
HXLINE(1179)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(1179)				HX_VARI( Int,_g) = result->w;
HXDLIN(1179)				while((_g1 < _g)){
HXLINE(1179)					HX_VARI( Int,i) = _g1++;
HXDLIN(1179)					scanline->__unsafe_set(i,(int)0);
            				}
            			}
HXLINE(1180)			{
HXLINE(1180)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(1180)				HX_VARI_NAME( Int,_g2,"_g") = (result->w + (int)1);
HXDLIN(1180)				while((_g11 < _g2)){
HXLINE(1180)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXDLIN(1180)					scanline2->__unsafe_set((scanline2Index + i1),(int)0);
            				}
            			}
HXLINE(1184)			while(true){
HXLINE(1184)				Bool _hx_tmp3 = !(hx::IsNotNull( step_value ));
HXDLIN(1184)				if (_hx_tmp3) {
HXLINE(1184)					goto _hx_goto_19;
            				}
HXLINE(1185)				HX_VARI(  ::kha::graphics2::truetype::Stbtt__active_edge,z) = step_value;
HXLINE(1186)				Bool _hx_tmp4 = (z->ey <= scan_y_top);
HXDLIN(1186)				if (_hx_tmp4) {
HXLINE(1188)					Bool _hx_tmp5 = hx::IsNull( step_parent );
HXDLIN(1188)					if (_hx_tmp5) {
HXLINE(1189)						active = z->next;
HXLINE(1155)						step_value = z->next;
            					}
            					else {
HXLINE(1193)						step_parent->__SetField(HX_("next",f3,84,02,49),z->next,hx::paccDynamic);
HXLINE(1155)						step_value = z->next;
            					}
HXLINE(1197)					if ((z->direction == (int)0)) {
HXLINE(1197)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
HXLINE(1198)					z->direction = (int)0;
            				}
            				else {
HXLINE(1155)					step_parent = step_value;
HXDLIN(1155)					step_value = step_value->next;
            				}
            			}
            			_hx_goto_19:;
HXLINE(1207)			while(true){
HXLINE(1207)				Bool _hx_tmp6 = !((( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0 <= scan_y_bottom));
HXDLIN(1207)				if (_hx_tmp6) {
HXLINE(1207)					goto _hx_goto_20;
            				}
HXLINE(1208)				Float _hx_tmp7 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0;
HXDLIN(1208)				Bool _hx_tmp8 = (_hx_tmp7 != ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y1);
HXDLIN(1208)				if (_hx_tmp8) {
HXLINE(1209)					HX_VARI_NAME(  ::kha::graphics2::truetype::Stbtt__active_edge,z1,"z") = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__new_active(e,eIndex,off_x,scan_y_top);
HXLINE(1210)					if (!((z1->ey >= scan_y_top))) {
HXLINE(1210)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
HXLINE(1212)					z1->next = active;
HXLINE(1213)					active = z1;
            				}
HXLINE(1215)				++eIndex;
            			}
            			_hx_goto_20:;
HXLINE(1219)			Bool _hx_tmp9 = hx::IsNotNull( active );
HXDLIN(1219)			if (_hx_tmp9) {
HXLINE(1220)				::kha::graphics2::truetype::StbTruetype_obj::stbtt__fill_active_edges_new(scanline,scanline2,(scanline2Index + (int)1),result->w,active,scan_y_top);
            			}
HXLINE(1222)			{
HXLINE(1223)				HX_VARI( Float,sum) = (int)0;
HXLINE(1224)				{
HXLINE(1224)					HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(1224)					HX_VARI_NAME( Int,_g3,"_g") = result->w;
HXDLIN(1224)					while((_g12 < _g3)){
HXLINE(1224)						HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE(1225)						HX_VAR( Float,k);
HXLINE(1226)						HX_VAR( Int,m);
HXLINE(1227)						hx::AddEq(sum,( (Float)(_hx_array_unsafe_get(scanline2,(scanline2Index + i2))) ));
HXLINE(1228)						k = (( (Float)(_hx_array_unsafe_get(scanline,i2)) ) + sum);
HXLINE(1229)						Float _hx_tmp10 = ::Math_obj::abs(k);
HXDLIN(1229)						k = ((_hx_tmp10 * ((Float)255.0)) + ((Float)0.5));
HXLINE(1230)						m = ::Std_obj::_hx_int(k);
HXLINE(1231)						Bool _hx_tmp11 = (m > (int)255);
HXDLIN(1231)						if (_hx_tmp11) {
HXLINE(1231)							m = (int)255;
            						}
HXLINE(1232)						Int _hx_tmp12 = (result->pixels_offset + (j * result->stride));
HXDLIN(1232)						result->pixels->writeU8((_hx_tmp12 + i2),m);
            					}
            				}
            			}
HXLINE(1155)			step_parent = null();
HXDLIN(1155)			step_value = active;
HXLINE(1238)			while(true){
HXLINE(1238)				Bool _hx_tmp13 = !(hx::IsNotNull( step_value ));
HXDLIN(1238)				if (_hx_tmp13) {
HXLINE(1238)					goto _hx_goto_22;
            				}
HXLINE(1239)				HX_VARI_NAME(  ::kha::graphics2::truetype::Stbtt__active_edge,z2,"z") = step_value;
HXLINE(1240)				hx::AddEq(z2->fx,z2->fdx);
HXLINE(1155)				step_parent = step_value;
HXDLIN(1155)				step_value = step_value->next;
            			}
            			_hx_goto_22:;
HXLINE(1246)			++y;
HXLINE(1247)			++j;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt__rasterize_sorted_edges,(void))

Bool StbTruetype_obj::STBTT__COMPARE( ::kha::graphics2::truetype::Stbtt__edge a, ::kha::graphics2::truetype::Stbtt__edge b){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","STBTT__COMPARE",0x3c42521e,"kha.graphics2.truetype.StbTruetype.STBTT__COMPARE","kha/graphics2/truetype/StbTruetype.hx",1251,0x5d9e0de9)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(1251)		return (a->y0 < b->y0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,STBTT__COMPARE,return )

void StbTruetype_obj::stbtt__sort_edges_ins_sort(::Array< ::Dynamic> p,Int n){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__sort_edges_ins_sort",0x1b014492,"kha.graphics2.truetype.StbTruetype.stbtt__sort_edges_ins_sort","kha/graphics2/truetype/StbTruetype.hx",1253,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(n,"n")
HXLINE(1254)		HX_VAR( Int,j);
HXLINE(1255)		{
HXLINE(1255)			HX_VARI( Int,_g1) = (int)1;
HXDLIN(1255)			while((_g1 < n)){
HXLINE(1255)				HX_VARI( Int,i) = _g1++;
HXLINE(1256)				HX_VARI(  ::kha::graphics2::truetype::Stbtt__edge,t) = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,i)) );
HXLINE(1258)				j = i;
HXLINE(1259)				while((j > (int)0)){
HXLINE(1260)					HX_VARI(  ::kha::graphics2::truetype::Stbtt__edge,b) = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(j - (int)1))) );
HXLINE(1262)					if (!(::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(t,b))) {
HXLINE(1262)						goto _hx_goto_24;
            					}
HXLINE(1263)					{
HXLINE(1263)						 ::kha::graphics2::truetype::Stbtt__edge val = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(j - (int)1))) );
HXDLIN(1263)						p->__unsafe_set(j,val);
            					}
HXLINE(1264)					--j;
            				}
            				_hx_goto_24:;
HXLINE(1266)				if ((i != j)) {
HXLINE(1267)					p->__unsafe_set(j,t);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt__sort_edges_ins_sort,(void))

void StbTruetype_obj::stbtt__sort_edges_quicksort(::Array< ::Dynamic> p,Int pIndex,Int n){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__sort_edges_quicksort",0x0f0bde68,"kha.graphics2.truetype.StbTruetype.stbtt__sort_edges_quicksort","kha/graphics2/truetype/StbTruetype.hx",1273,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pIndex,"pIndex")
            	HX_STACK_ARG(n,"n")
HXLINE(1273)		while((n > (int)12)){
HXLINE(1274)			HX_VAR(  ::kha::graphics2::truetype::Stbtt__edge,t);
HXLINE(1275)			HX_VAR( Bool,c01);
HXDLIN(1275)			HX_VAR( Bool,c12);
HXDLIN(1275)			HX_VAR( Bool,c);
HXLINE(1276)			HX_VAR( Int,m);
HXDLIN(1276)			HX_VAR( Int,i);
HXDLIN(1276)			HX_VAR( Int,j);
HXLINE(1279)			m = ((int)n >> (int)(int)1);
HXLINE(1280)			 ::kha::graphics2::truetype::Stbtt__edge _hx_tmp = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXDLIN(1280)			c01 = ::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(_hx_tmp,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) ));
HXLINE(1281)			 ::kha::graphics2::truetype::Stbtt__edge _hx_tmp1 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) );
HXDLIN(1281)			c12 = ::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(_hx_tmp1,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,((pIndex + n) - (int)1))) ));
HXLINE(1283)			if ((c01 != c12)) {
HXLINE(1285)				HX_VAR( Int,z);
HXLINE(1286)				 ::kha::graphics2::truetype::Stbtt__edge _hx_tmp2 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXDLIN(1286)				c = ::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(_hx_tmp2,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,((pIndex + n) - (int)1))) ));
HXLINE(1289)				if ((c == c12)) {
HXLINE(1289)					z = (int)0;
            				}
            				else {
HXLINE(1289)					z = (n - (int)1);
            				}
HXLINE(1290)				t = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + z))) );
HXLINE(1291)				{
HXLINE(1291)					 ::kha::graphics2::truetype::Stbtt__edge val = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) );
HXDLIN(1291)					p->__unsafe_set((pIndex + z),val);
            				}
HXLINE(1292)				p->__unsafe_set((pIndex + m),t);
            			}
HXLINE(1296)			t = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXLINE(1297)			{
HXLINE(1297)				 ::kha::graphics2::truetype::Stbtt__edge val1 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) );
HXDLIN(1297)				p->__unsafe_set(pIndex,val1);
            			}
HXLINE(1298)			p->__unsafe_set((pIndex + m),t);
HXLINE(1301)			i = (int)1;
HXLINE(1302)			j = (n - (int)1);
HXLINE(1303)			while(true){
HXLINE(1306)				while(true){
HXLINE(1307)					 ::kha::graphics2::truetype::Stbtt__edge _hx_tmp3 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + i))) );
HXDLIN(1307)					Bool _hx_tmp4 = !(::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(_hx_tmp3,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) )));
HXDLIN(1307)					if (_hx_tmp4) {
HXLINE(1307)						goto _hx_goto_27;
            					}
HXLINE(1308)					++i;
            				}
            				_hx_goto_27:;
HXLINE(1310)				while(true){
HXLINE(1311)					 ::kha::graphics2::truetype::Stbtt__edge _hx_tmp5 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXDLIN(1311)					Bool _hx_tmp6 = !(::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(_hx_tmp5,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + j))) )));
HXDLIN(1311)					if (_hx_tmp6) {
HXLINE(1311)						goto _hx_goto_28;
            					}
HXLINE(1312)					--j;
            				}
            				_hx_goto_28:;
HXLINE(1315)				if ((i >= j)) {
HXLINE(1315)					goto _hx_goto_26;
            				}
HXLINE(1316)				t = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + i))) );
HXLINE(1317)				{
HXLINE(1317)					 ::kha::graphics2::truetype::Stbtt__edge val2 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + j))) );
HXDLIN(1317)					p->__unsafe_set((pIndex + i),val2);
            				}
HXLINE(1318)				p->__unsafe_set((pIndex + j),t);
HXLINE(1320)				++i;
HXLINE(1321)				--j;
            			}
            			_hx_goto_26:;
HXLINE(1324)			if ((j < (n - i))) {
HXLINE(1325)				::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_quicksort(p,pIndex,j);
HXLINE(1326)				hx::AddEq(pIndex,i);
HXLINE(1327)				hx::SubEq(n,i);
            			}
            			else {
HXLINE(1329)				::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_quicksort(p,(pIndex + i),(n - i));
HXLINE(1330)				n = j;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt__sort_edges_quicksort,(void))

void StbTruetype_obj::stbtt__sort_edges(::Array< ::Dynamic> p,Int n){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__sort_edges",0x1f8f8edc,"kha.graphics2.truetype.StbTruetype.stbtt__sort_edges","kha/graphics2/truetype/StbTruetype.hx",1335,0x5d9e0de9)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(n,"n")
HXLINE(1336)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_quicksort(p,(int)0,n);
HXLINE(1337)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_ins_sort(p,n);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt__sort_edges,(void))

void StbTruetype_obj::stbtt__rasterize( ::kha::graphics2::truetype::Stbtt__bitmap result,::Array< ::Dynamic> pts,::Array< Int > wcount,Int windings,Float scale_x,Float scale_y,Float shift_x,Float shift_y,Int off_x,Int off_y,Bool invert){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__rasterize",0x7ac8deb0,"kha.graphics2.truetype.StbTruetype.stbtt__rasterize","kha/graphics2/truetype/StbTruetype.hx",1340,0x5d9e0de9)
            	HX_STACK_ARG(result,"result")
            	HX_STACK_ARG(pts,"pts")
            	HX_STACK_ARG(wcount,"wcount")
            	HX_STACK_ARG(windings,"windings")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
            	HX_STACK_ARG(off_x,"off_x")
            	HX_STACK_ARG(off_y,"off_y")
            	HX_STACK_ARG(invert,"invert")
HXLINE(1341)		HX_VAR( Float,y_scale_inv);
HXDLIN(1341)		if (invert) {
HXLINE(1341)			y_scale_inv = -(scale_y);
            		}
            		else {
HXLINE(1341)			y_scale_inv = scale_y;
            		}
HXLINE(1342)		HX_VAR( ::Array< ::Dynamic>,e);
HXLINE(1343)		HX_VAR( Int,n);
HXDLIN(1343)		HX_VAR( Int,j);
HXDLIN(1343)		HX_VAR( Int,m);
HXLINE(1350)		n = (int)0;
HXLINE(1351)		{
HXLINE(1351)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1351)			while((_g1 < windings)){
HXLINE(1351)				HX_VARI( Int,i) = _g1++;
HXLINE(1352)				hx::AddEq(n,( (Int)(_hx_array_unsafe_get(wcount,i)) ));
            			}
            		}
HXLINE(1354)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(1354)		_hx_array_set_size_exact(this1,(n + (int)1));
HXDLIN(1354)		e = this1;
HXLINE(1355)		Bool _hx_tmp = hx::IsNull( e );
HXDLIN(1355)		if (_hx_tmp) {
HXLINE(1355)			return;
            		}
            		else {
HXLINE(1357)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(1357)			HX_VARI( Int,_g) = e->length;
HXDLIN(1357)			while((_g11 < _g)){
HXLINE(1357)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE(1358)				e->__unsafe_set(i1, ::kha::graphics2::truetype::Stbtt__edge_obj::__new());
            			}
            		}
HXLINE(1361)		n = (int)0;
HXLINE(1363)		m = (int)0;
HXLINE(1364)		{
HXLINE(1364)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(1364)			while((_g12 < windings)){
HXLINE(1364)				HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE(1366)				HX_VARI( Int,pIndex) = m;
HXLINE(1367)				hx::AddEq(m,( (Int)(_hx_array_unsafe_get(wcount,i2)) ));
HXLINE(1368)				j = (( (Int)(_hx_array_unsafe_get(wcount,i2)) ) - (int)1);
HXLINE(1369)				{
HXLINE(1369)					HX_VARI( Int,_g3) = (int)0;
HXDLIN(1369)					HX_VARI( Int,_g2) = ( (Int)(_hx_array_unsafe_get(wcount,i2)) );
HXDLIN(1369)					while((_g3 < _g2)){
HXLINE(1369)						HX_VARI( Int,k) = _g3++;
HXLINE(1370)						HX_VARI( Int,a) = k;
HXDLIN(1370)						HX_VARI( Int,b) = j;
HXLINE(1372)						Float _hx_tmp1 = ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + j))) )->y;
HXDLIN(1372)						Bool _hx_tmp2 = (_hx_tmp1 == ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + k))) )->y);
HXDLIN(1372)						if (_hx_tmp2) {
HXLINE(1373)							j = k;
HXLINE(1374)							continue;
            						}
HXLINE(1377)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->invert = false;
HXLINE(1378)						Bool _hx_tmp3;
HXDLIN(1378)						if (invert) {
HXLINE(1378)							Float _hx_tmp4 = ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + j))) )->y;
HXDLIN(1378)							_hx_tmp3 = (_hx_tmp4 > ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + k))) )->y);
            						}
            						else {
HXLINE(1378)							Float _hx_tmp5 = ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + j))) )->y;
HXDLIN(1378)							_hx_tmp3 = (_hx_tmp5 < ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + k))) )->y);
            						}
HXDLIN(1378)						if (_hx_tmp3) {
HXLINE(1379)							( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->invert = true;
HXLINE(1380)							a = j;
HXDLIN(1380)							b = k;
            						}
HXLINE(1382)						Float _hx_tmp6 = (( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + a))) )->x * scale_x);
HXDLIN(1382)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->x0 = (_hx_tmp6 + shift_x);
HXLINE(1383)						Float _hx_tmp7 = (( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + a))) )->y * y_scale_inv);
HXDLIN(1383)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->y0 = (_hx_tmp7 + shift_y);
HXLINE(1384)						Float _hx_tmp8 = (( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + b))) )->x * scale_x);
HXDLIN(1384)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->x1 = (_hx_tmp8 + shift_x);
HXLINE(1385)						Float _hx_tmp9 = (( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(pts,(pIndex + b))) )->y * y_scale_inv);
HXDLIN(1385)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->y1 = (_hx_tmp9 + shift_y);
HXLINE(1386)						++n;
HXLINE(1387)						j = k;
            					}
            				}
            			}
            		}
HXLINE(1393)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges(e,n);
HXLINE(1396)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__rasterize_sorted_edges(result,e,n,(int)1,off_x,off_y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt__rasterize,(void))

void StbTruetype_obj::stbtt__add_point(::Array< ::Dynamic> points,Int n,Float x,Float y){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__add_point",0xa284662b,"kha.graphics2.truetype.StbTruetype.stbtt__add_point","kha/graphics2/truetype/StbTruetype.hx",1399,0x5d9e0de9)
            	HX_STACK_ARG(points,"points")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1400)		Bool _hx_tmp = hx::IsNull( points );
HXDLIN(1400)		if (_hx_tmp) {
HXLINE(1400)			return;
            		}
HXLINE(1401)		( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(points,n)) )->x = x;
HXLINE(1402)		( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(points,n)) )->y = y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt__add_point,(void))

Int StbTruetype_obj::stbtt__tesselate_curve(::Array< ::Dynamic> points, ::Dynamic num_points,Float x0,Float y0,Float x1,Float y1,Float x2,Float y2,Float objspace_flatness_squared,Int n){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt__tesselate_curve",0xc138f203,"kha.graphics2.truetype.StbTruetype.stbtt__tesselate_curve","kha/graphics2/truetype/StbTruetype.hx",1406,0x5d9e0de9)
            	HX_STACK_ARG(points,"points")
            	HX_STACK_ARG(num_points,"num_points")
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(objspace_flatness_squared,"objspace_flatness_squared")
            	HX_STACK_ARG(n,"n")
HXLINE(1408)		HX_VARI( Float,mx) = ((Float)((x0 + ((int)2 * x1)) + x2) / (Float)(int)4);
HXLINE(1409)		HX_VARI( Float,my) = ((Float)((y0 + ((int)2 * y1)) + y2) / (Float)(int)4);
HXLINE(1411)		HX_VARI( Float,dx) = (((Float)(x0 + x2) / (Float)(int)2) - mx);
HXLINE(1412)		HX_VARI( Float,dy) = (((Float)(y0 + y2) / (Float)(int)2) - my);
HXLINE(1413)		if ((n > (int)16)) {
HXLINE(1414)			return (int)1;
            		}
HXLINE(1415)		if ((((dx * dx) + (dy * dy)) > objspace_flatness_squared)) {
HXLINE(1416)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__tesselate_curve(points,num_points,x0,y0,((Float)(x0 + x1) / (Float)((Float)2.0)),((Float)(y0 + y1) / (Float)((Float)2.0)),mx,my,objspace_flatness_squared,(n + (int)1));
HXLINE(1417)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__tesselate_curve(points,num_points,mx,my,((Float)(x1 + x2) / (Float)((Float)2.0)),((Float)(y1 + y2) / (Float)((Float)2.0)),x2,y2,objspace_flatness_squared,(n + (int)1));
            		}
            		else {
HXLINE(1419)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__add_point(points, ::Dynamic(num_points->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)),x2,y2);
HXLINE(1420)			num_points->__SetField(HX_("value",71,7f,b8,31),(( (Int)(num_points->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ) + (int)1),hx::paccDynamic);
            		}
HXLINE(1422)		return (int)1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(StbTruetype_obj,stbtt__tesselate_curve,return )

::Array< ::Dynamic> StbTruetype_obj::stbtt_FlattenCurves(::Array< ::Dynamic> vertices,Int num_verts,Float objspace_flatness, ::kha::graphics2::truetype::VectorOfIntPointer contour_lengths, ::Dynamic num_contours){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_FlattenCurves",0x59f844b0,"kha.graphics2.truetype.StbTruetype.stbtt_FlattenCurves","kha/graphics2/truetype/StbTruetype.hx",1426,0x5d9e0de9)
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(num_verts,"num_verts")
            	HX_STACK_ARG(objspace_flatness,"objspace_flatness")
            	HX_STACK_ARG(contour_lengths,"contour_lengths")
            	HX_STACK_ARG(num_contours,"num_contours")
HXLINE(1427)		HX_VARI( ::Array< ::Dynamic>,points) = null();
HXLINE(1428)		HX_VARI( Int,num_points) = (int)0;
HXLINE(1430)		HX_VARI( Float,objspace_flatness_squared) = (objspace_flatness * objspace_flatness);
HXLINE(1431)		HX_VARI( Int,n) = (int)0;
HXDLIN(1431)		HX_VARI( Int,start) = (int)0;
HXLINE(1434)		{
HXLINE(1434)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1434)			while((_g1 < num_verts)){
HXLINE(1434)				HX_VARI( Int,i) = _g1++;
HXLINE(1435)				Bool _hx_tmp = (( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i)) )->type == (int)1);
HXDLIN(1435)				if (_hx_tmp) {
HXLINE(1436)					++n;
            				}
            			}
            		}
HXLINE(1438)		num_contours->__SetField(HX_("value",71,7f,b8,31),n,hx::paccDynamic);
HXLINE(1439)		if ((n == (int)0)) {
HXLINE(1439)			return null();
            		}
HXLINE(1441)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN(1441)		_hx_array_set_size_exact(this1,n);
HXDLIN(1441)		contour_lengths->value = this1;
HXLINE(1443)		Bool _hx_tmp1 = hx::IsNull( contour_lengths->value );
HXDLIN(1443)		if (_hx_tmp1) {
HXLINE(1444)			num_contours->__SetField(HX_("value",71,7f,b8,31),(int)0,hx::paccDynamic);
HXLINE(1445)			return null();
            		}
HXLINE(1449)		{
HXLINE(1449)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1449)			while((_g < (int)2)){
HXLINE(1449)				HX_VARI( Int,pass) = _g++;
HXLINE(1450)				HX_VARI( Float,x) = (int)0;
HXDLIN(1450)				HX_VARI( Float,y) = (int)0;
HXLINE(1451)				if ((pass == (int)1)) {
HXLINE(1452)					HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(1452)					_hx_array_set_size_exact(this2,num_points);
HXDLIN(1452)					points = this2;
HXLINE(1453)					Bool _hx_tmp2 = hx::IsNull( points );
HXDLIN(1453)					if (_hx_tmp2) {
HXLINE(1454)						contour_lengths->value = null();
HXLINE(1455)						num_contours->__SetField(HX_("value",71,7f,b8,31),(int)0,hx::paccDynamic);
HXLINE(1456)						return null();
            					}
            					else {
HXLINE(1459)						HX_VARI( Int,_g2) = (int)0;
HXDLIN(1459)						HX_VARI_NAME( Int,_g11,"_g1") = points->length;
HXDLIN(1459)						while((_g2 < _g11)){
HXLINE(1459)							HX_VARI_NAME( Int,i1,"i") = _g2++;
HXLINE(1460)							points->__unsafe_set(i1, ::kha::graphics2::truetype::Stbtt__point_obj::__new());
            						}
            					}
            				}
HXLINE(1464)				num_points = (int)0;
HXLINE(1465)				n = (int)-1;
HXLINE(1466)				{
HXLINE(1466)					HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN(1466)					while((_g21 < num_verts)){
HXLINE(1466)						HX_VARI_NAME( Int,i2,"i") = _g21++;
HXLINE(1467)						{
HXLINE(1467)							HX_VARI( Int,_g3) = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->type;
HXDLIN(1467)							switch((int)(_g3)){
            								case (int)1: {
HXLINE(1470)									if ((n >= (int)0)) {
HXLINE(1471)										contour_lengths->value->__unsafe_set(n,(num_points - start));
            									}
HXLINE(1472)									++n;
HXLINE(1473)									start = num_points;
HXLINE(1475)									x = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->x;
HXDLIN(1475)									y = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->y;
HXLINE(1476)									Int _hx_tmp3 = num_points++;
HXDLIN(1476)									::kha::graphics2::truetype::StbTruetype_obj::stbtt__add_point(points,_hx_tmp3,x,y);
            								}
            								break;
            								case (int)2: {
HXLINE(1478)									x = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->x;
HXDLIN(1478)									y = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->y;
HXLINE(1479)									Int _hx_tmp4 = num_points++;
HXDLIN(1479)									::kha::graphics2::truetype::StbTruetype_obj::stbtt__add_point(points,_hx_tmp4,x,y);
            								}
            								break;
            								case (int)3: {
HXLINE(1481)									HX_VARI(  ::Dynamic,num_points_reference) =  ::Dynamic(hx::Anon_obj::Create(1)
            										->setFixed(0,HX_("value",71,7f,b8,31),num_points));
HXLINE(1483)									Int _hx_tmp5 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->cx;
HXDLIN(1483)									Int _hx_tmp6 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->cy;
HXLINE(1484)									Int _hx_tmp7 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->x;
HXLINE(1482)									::kha::graphics2::truetype::StbTruetype_obj::stbtt__tesselate_curve(points,num_points_reference,x,y,_hx_tmp5,_hx_tmp6,_hx_tmp7,( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->y,objspace_flatness_squared,(int)0);
HXLINE(1486)									num_points = ( (Int)(num_points_reference->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE(1487)									x = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->x;
HXDLIN(1487)									y = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i2)) )->y;
            								}
            								break;
            							}
            						}
            					}
            				}
HXLINE(1490)				contour_lengths->value->__unsafe_set(n,(num_points - start));
            			}
            		}
HXLINE(1493)		return points;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(StbTruetype_obj,stbtt_FlattenCurves,return )

void StbTruetype_obj::stbtt_Rasterize( ::kha::graphics2::truetype::Stbtt__bitmap result,Float flatness_in_pixels,::Array< ::Dynamic> vertices,Int num_verts,Float scale_x,Float scale_y,Float shift_x,Float shift_y,Int x_off,Int y_off,Bool invert){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_Rasterize",0x2524cddf,"kha.graphics2.truetype.StbTruetype.stbtt_Rasterize","kha/graphics2/truetype/StbTruetype.hx",1496,0x5d9e0de9)
            	HX_STACK_ARG(result,"result")
            	HX_STACK_ARG(flatness_in_pixels,"flatness_in_pixels")
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(num_verts,"num_verts")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
            	HX_STACK_ARG(x_off,"x_off")
            	HX_STACK_ARG(y_off,"y_off")
            	HX_STACK_ARG(invert,"invert")
HXLINE(1497)		HX_VAR( Float,scale);
HXDLIN(1497)		if ((scale_x > scale_y)) {
HXLINE(1497)			scale = scale_y;
            		}
            		else {
HXLINE(1497)			scale = scale_x;
            		}
HXLINE(1498)		HX_VARI( Int,winding_count) = (int)0;
HXLINE(1499)		HX_VARI( ::Array< Int >,winding_lengths) = null();
HXLINE(1500)		HX_VARI(  ::Dynamic,winding_count_reference) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("value",71,7f,b8,31),(int)0));
HXLINE(1501)		HX_VARI(  ::kha::graphics2::truetype::VectorOfIntPointer,winding_lengths_reference) =  ::kha::graphics2::truetype::VectorOfIntPointer_obj::__new();
HXLINE(1502)		HX_VARI( ::Array< ::Dynamic>,windings) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FlattenCurves(vertices,num_verts,((Float)flatness_in_pixels / (Float)scale),winding_lengths_reference,winding_count_reference);
HXLINE(1503)		winding_count = ( (Int)(winding_count_reference->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE(1504)		winding_lengths = winding_lengths_reference->value;
HXLINE(1505)		Bool _hx_tmp = hx::IsNotNull( windings );
HXDLIN(1505)		if (_hx_tmp) {
HXLINE(1506)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt_Rasterize,(void))

 ::kha::Blob StbTruetype_obj::stbtt_GetGlyphBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,Float shift_x,Float shift_y,Int glyph, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmapSubpixel",0x89588a03,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1510,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
            	HX_STACK_ARG(glyph,"glyph")
            	HX_STACK_ARG(region,"region")
HXLINE(1511)		HX_VAR( Int,ix0);
HXDLIN(1511)		HX_VAR( Int,iy0);
HXDLIN(1511)		HX_VAR( Int,ix1);
HXDLIN(1511)		HX_VAR( Int,iy1);
HXLINE(1512)		HX_VARI(  ::kha::graphics2::truetype::Stbtt__bitmap,gbm) =  ::kha::graphics2::truetype::Stbtt__bitmap_obj::__new();
HXLINE(1513)		HX_VARI( ::Array< ::Dynamic>,vertices) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,glyph);
HXLINE(1514)		HX_VARI( Int,num_verts) = vertices->length;
HXLINE(1516)		Bool _hx_tmp = (scale_x == (int)0);
HXDLIN(1516)		if (_hx_tmp) {
HXLINE(1516)			scale_x = scale_y;
            		}
HXLINE(1517)		Bool _hx_tmp1 = (scale_y == (int)0);
HXDLIN(1517)		if (_hx_tmp1) {
HXLINE(1518)			if ((scale_x == (int)0)) {
HXLINE(1518)				return null();
            			}
HXLINE(1519)			scale_y = scale_x;
            		}
HXLINE(1522)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_rect,rect) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
HXLINE(1523)		ix0 = rect->x0;
HXLINE(1524)		iy0 = rect->y0;
HXLINE(1525)		ix1 = rect->x1;
HXLINE(1526)		iy1 = rect->y1;
HXLINE(1529)		gbm->w = (ix1 - ix0);
HXLINE(1530)		gbm->h = (iy1 - iy0);
HXLINE(1531)		gbm->pixels = null();
HXLINE(1533)		region->width = gbm->w;
HXLINE(1534)		region->height = gbm->h;
HXLINE(1535)		region->xoff = ix0;
HXLINE(1536)		region->yoff = iy0;
HXLINE(1538)		Bool _hx_tmp2;
HXDLIN(1538)		if ((gbm->w != (int)0)) {
HXLINE(1538)			_hx_tmp2 = (gbm->h != (int)0);
            		}
            		else {
HXLINE(1538)			_hx_tmp2 = false;
            		}
HXDLIN(1538)		if (_hx_tmp2) {
HXLINE(1539)			Int _hx_tmp3 = (gbm->w * gbm->h);
HXDLIN(1539)			gbm->pixels = ::kha::Blob_obj::alloc(_hx_tmp3);
HXLINE(1540)			Bool _hx_tmp4 = hx::IsNotNull( gbm->pixels );
HXDLIN(1540)			if (_hx_tmp4) {
HXLINE(1541)				gbm->stride = gbm->w;
HXLINE(1543)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_Rasterize(gbm,((Float)0.35),vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
            			}
            		}
HXLINE(1546)		return gbm->pixels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(StbTruetype_obj,stbtt_GetGlyphBitmapSubpixel,return )

 ::kha::Blob StbTruetype_obj::stbtt_GetGlyphBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,Int glyph, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmap",0xcd367bdd,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmap","kha/graphics2/truetype/StbTruetype.hx",1550,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(glyph,"glyph")
            	HX_STACK_ARG(region,"region")
HXLINE(1550)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,((Float)0.0),((Float)0.0),glyph,region);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(StbTruetype_obj,stbtt_GetGlyphBitmap,return )

void StbTruetype_obj::stbtt_MakeGlyphBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::Blob output,Int output_offset,Int out_w,Int out_h,Int out_stride,Float scale_x,Float scale_y,Float shift_x,Float shift_y,Int glyph){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_MakeGlyphBitmapSubpixel",0xcea2707b,"kha.graphics2.truetype.StbTruetype.stbtt_MakeGlyphBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1553,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(output_offset,"output_offset")
            	HX_STACK_ARG(out_w,"out_w")
            	HX_STACK_ARG(out_h,"out_h")
            	HX_STACK_ARG(out_stride,"out_stride")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
            	HX_STACK_ARG(glyph,"glyph")
HXLINE(1554)		HX_VARI( Int,ix0) = (int)0;
HXDLIN(1554)		HX_VARI( Int,iy0) = (int)0;
HXLINE(1555)		HX_VARI( ::Array< ::Dynamic>,vertices) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,glyph);
HXLINE(1556)		HX_VAR( Int,num_verts);
HXDLIN(1556)		Bool _hx_tmp = hx::IsNull( vertices );
HXDLIN(1556)		if (_hx_tmp) {
HXLINE(1556)			num_verts = (int)0;
            		}
            		else {
HXLINE(1556)			num_verts = vertices->length;
            		}
HXLINE(1557)		HX_VARI(  ::kha::graphics2::truetype::Stbtt__bitmap,gbm) =  ::kha::graphics2::truetype::Stbtt__bitmap_obj::__new();
HXLINE(1559)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_rect,rect) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
HXLINE(1560)		ix0 = rect->x0;
HXLINE(1561)		iy0 = rect->y0;
HXLINE(1562)		gbm->pixels = output;
HXLINE(1563)		gbm->pixels_offset = output_offset;
HXLINE(1564)		gbm->w = out_w;
HXLINE(1565)		gbm->h = out_h;
HXLINE(1566)		gbm->stride = out_stride;
HXLINE(1568)		Bool _hx_tmp1;
HXDLIN(1568)		if ((gbm->w != (int)0)) {
HXLINE(1568)			_hx_tmp1 = (gbm->h != (int)0);
            		}
            		else {
HXLINE(1568)			_hx_tmp1 = false;
            		}
HXDLIN(1568)		if (_hx_tmp1) {
HXLINE(1569)			::kha::graphics2::truetype::StbTruetype_obj::stbtt_Rasterize(gbm,((Float)0.35),vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt_MakeGlyphBitmapSubpixel,(void))

void StbTruetype_obj::stbtt_MakeGlyphBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::Blob output,Int output_offset,Int out_w,Int out_h,Int out_stride,Float scale_x,Float scale_y,Int glyph){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_MakeGlyphBitmap",0x89f92a55,"kha.graphics2.truetype.StbTruetype.stbtt_MakeGlyphBitmap","kha/graphics2/truetype/StbTruetype.hx",1573,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(output_offset,"output_offset")
            	HX_STACK_ARG(out_w,"out_w")
            	HX_STACK_ARG(out_h,"out_h")
            	HX_STACK_ARG(out_stride,"out_stride")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(glyph,"glyph")
HXLINE(1573)		::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,((Float)0.0),((Float)0.0),glyph);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(StbTruetype_obj,stbtt_MakeGlyphBitmap,(void))

 ::kha::Blob StbTruetype_obj::stbtt_GetCodepointBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,Float shift_x,Float shift_y,Int codepoint, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmapSubpixel",0x6a742f9a,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1577,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
            	HX_STACK_ARG(codepoint,"codepoint")
            	HX_STACK_ARG(region,"region")
HXLINE(1577)		Int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint);
HXDLIN(1577)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,_hx_tmp,region);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(StbTruetype_obj,stbtt_GetCodepointBitmapSubpixel,return )

void StbTruetype_obj::stbtt_MakeCodepointBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::Blob output,Int output_offset,Int out_w,Int out_h,Int out_stride,Float scale_x,Float scale_y,Float shift_x,Float shift_y,Int codepoint){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_MakeCodepointBitmapSubpixel",0xc9beb212,"kha.graphics2.truetype.StbTruetype.stbtt_MakeCodepointBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1581,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(output_offset,"output_offset")
            	HX_STACK_ARG(out_w,"out_w")
            	HX_STACK_ARG(out_h,"out_h")
            	HX_STACK_ARG(out_stride,"out_stride")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(shift_x,"shift_x")
            	HX_STACK_ARG(shift_y,"shift_y")
            	HX_STACK_ARG(codepoint,"codepoint")
HXLINE(1581)		Int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint);
HXDLIN(1581)		::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt_MakeCodepointBitmapSubpixel,(void))

 ::kha::Blob StbTruetype_obj::stbtt_GetCodepointBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,Int codepoint, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmap",0x11473274,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmap","kha/graphics2/truetype/StbTruetype.hx",1585,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(codepoint,"codepoint")
            	HX_STACK_ARG(region,"region")
HXLINE(1585)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,((Float)0.0),((Float)0.0),codepoint,region);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(StbTruetype_obj,stbtt_GetCodepointBitmap,return )

void StbTruetype_obj::stbtt_MakeCodepointBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::Blob output,Int output_offset,Int out_w,Int out_h,Int out_stride,Float scale_x,Float scale_y,Int codepoint){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_MakeCodepointBitmap",0x280e7cec,"kha.graphics2.truetype.StbTruetype.stbtt_MakeCodepointBitmap","kha/graphics2/truetype/StbTruetype.hx",1589,0x5d9e0de9)
            	HX_STACK_ARG(info,"info")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(output_offset,"output_offset")
            	HX_STACK_ARG(out_w,"out_w")
            	HX_STACK_ARG(out_h,"out_h")
            	HX_STACK_ARG(out_stride,"out_stride")
            	HX_STACK_ARG(scale_x,"scale_x")
            	HX_STACK_ARG(scale_y,"scale_y")
            	HX_STACK_ARG(codepoint,"codepoint")
HXLINE(1589)		::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,((Float)0.0),((Float)0.0),codepoint);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(StbTruetype_obj,stbtt_MakeCodepointBitmap,(void))

Int StbTruetype_obj::stbtt_BakeFontBitmap( ::kha::Blob data,Int offset,Float pixel_height, ::kha::Blob pixels,Int pw,Int ph,::Array< Int > chars,::Array< ::Dynamic> chardata){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_BakeFontBitmap",0x6b4863af,"kha.graphics2.truetype.StbTruetype.stbtt_BakeFontBitmap","kha/graphics2/truetype/StbTruetype.hx",1602,0x5d9e0de9)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(pixel_height,"pixel_height")
            	HX_STACK_ARG(pixels,"pixels")
            	HX_STACK_ARG(pw,"pw")
            	HX_STACK_ARG(ph,"ph")
            	HX_STACK_ARG(chars,"chars")
            	HX_STACK_ARG(chardata,"chardata")
HXLINE(1603)		HX_VAR( Float,scale);
HXLINE(1604)		HX_VAR( Int,x);
HXDLIN(1604)		HX_VAR( Int,y);
HXDLIN(1604)		HX_VAR( Int,bottom_y);
HXLINE(1605)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_fontinfo,f) =  ::kha::graphics2::truetype::Stbtt_fontinfo_obj::__new();
HXLINE(1606)		Bool _hx_tmp = !(::kha::graphics2::truetype::StbTruetype_obj::stbtt_InitFont(f,data,offset));
HXDLIN(1606)		if (_hx_tmp) {
HXLINE(1607)			return (int)-1;
            		}
HXLINE(1608)		{
HXLINE(1608)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1608)			HX_VARI( Int,_g) = (pw * ph);
HXDLIN(1608)			while((_g1 < _g)){
HXLINE(1608)				HX_VARI( Int,i) = _g1++;
HXLINE(1609)				pixels->writeU8(i,(int)0);
            			}
            		}
HXLINE(1610)		y = (int)1;
HXDLIN(1610)		x = (int)1;
HXLINE(1611)		bottom_y = (int)1;
HXLINE(1613)		scale = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_ScaleForPixelHeight(f,pixel_height);
HXLINE(1615)		HX_VARI_NAME( Int,i1,"i") = (int)0;
HXLINE(1616)		{
HXLINE(1616)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1616)			while((_g2 < chars->length)){
HXLINE(1616)				HX_VARI( Int,index) = chars->__get(_g2);
HXDLIN(1616)				++_g2;
HXLINE(1617)				HX_VAR( Int,advance);
HXDLIN(1617)				HX_VAR( Int,x0);
HXDLIN(1617)				HX_VAR( Int,y0);
HXDLIN(1617)				HX_VAR( Int,x1);
HXDLIN(1617)				HX_VAR( Int,y1);
HXDLIN(1617)				HX_VAR( Int,gw);
HXDLIN(1617)				HX_VAR( Int,gh);
HXLINE(1618)				HX_VARI( Int,g) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(f,index);
HXLINE(1619)				HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics,metrics) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphHMetrics(f,g);
HXLINE(1620)				advance = metrics->advanceWidth;
HXLINE(1622)				HX_VARI(  ::kha::graphics2::truetype::Stbtt_temp_rect,rect) = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBox(f,g,scale,scale);
HXLINE(1623)				x0 = rect->x0;
HXLINE(1624)				y0 = rect->y0;
HXLINE(1625)				x1 = rect->x1;
HXLINE(1626)				y1 = rect->y1;
HXLINE(1627)				gw = (x1 - x0);
HXLINE(1628)				gh = (y1 - y0);
HXLINE(1629)				Int _hx_tmp1 = ((x + gw) + (int)1);
HXDLIN(1629)				if ((_hx_tmp1 >= pw)) {
HXLINE(1630)					y = bottom_y;
HXDLIN(1630)					x = (int)1;
            				}
HXLINE(1632)				if ((((y + gh) + (int)1) >= ph)) {
HXLINE(1633)					return -(i1);
            				}
HXLINE(1634)				if (((x + gw) >= pw)) {
HXLINE(1634)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
HXLINE(1635)				if (((y + gh) >= ph)) {
HXLINE(1635)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
HXLINE(1636)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeGlyphBitmap(f,pixels,(x + (y * pw)),gw,gh,pw,scale,scale,g);
HXLINE(1637)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i1)) )->x0 = x;
HXLINE(1638)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i1)) )->y0 = y;
HXLINE(1639)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i1)) )->x1 = (x + gw);
HXLINE(1640)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i1)) )->y1 = (y + gh);
HXLINE(1641)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i1)) )->xadvance = (scale * advance);
HXLINE(1642)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i1)) )->xoff = x0;
HXLINE(1643)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i1)) )->yoff = y0;
HXLINE(1644)				Int _hx_tmp2 = (x + gw);
HXDLIN(1644)				x = (_hx_tmp2 + (int)1);
HXLINE(1645)				Bool _hx_tmp3 = (((y + gh) + (int)1) > bottom_y);
HXDLIN(1645)				if (_hx_tmp3) {
HXLINE(1646)					bottom_y = ((y + gh) + (int)1);
            				}
HXLINE(1647)				++i1;
            			}
            		}
HXLINE(1649)		return bottom_y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(StbTruetype_obj,stbtt_BakeFontBitmap,return )

void StbTruetype_obj::stbtt_GetBakedQuad(::Array< ::Dynamic> chardata,Int pw,Int ph,Int char_index, ::Dynamic xpos, ::Dynamic ypos, ::kha::graphics2::truetype::Stbtt_aligned_quad q,Bool opengl_fillrule){
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","stbtt_GetBakedQuad",0x21e67034,"kha.graphics2.truetype.StbTruetype.stbtt_GetBakedQuad","kha/graphics2/truetype/StbTruetype.hx",1652,0x5d9e0de9)
            	HX_STACK_ARG(chardata,"chardata")
            	HX_STACK_ARG(pw,"pw")
            	HX_STACK_ARG(ph,"ph")
            	HX_STACK_ARG(char_index,"char_index")
            	HX_STACK_ARG(xpos,"xpos")
            	HX_STACK_ARG(ypos,"ypos")
            	HX_STACK_ARG(q,"q")
            	HX_STACK_ARG(opengl_fillrule,"opengl_fillrule")
HXLINE(1653)		HX_VAR( Float,d3d_bias);
HXDLIN(1653)		if (opengl_fillrule) {
HXLINE(1653)			d3d_bias = (int)0;
            		}
            		else {
HXLINE(1653)			d3d_bias = ((Float)-0.5);
            		}
HXLINE(1654)		HX_VARI( Float,ipw) = ((Float)((Float)1.0) / (Float)pw);
HXDLIN(1654)		HX_VARI( Float,iph) = ((Float)((Float)1.0) / (Float)ph);
HXLINE(1655)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_bakedchar,b) = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,char_index)) );
HXLINE(1656)		Float _hx_tmp = ((( (Float)(xpos->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ) + b->xoff) + ((Float)0.5));
HXDLIN(1656)		HX_VARI( Int,round_x) = ::Math_obj::floor(_hx_tmp);
HXLINE(1657)		Float _hx_tmp1 = ((( (Float)(ypos->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ) + b->yoff) + ((Float)0.5));
HXDLIN(1657)		HX_VARI( Int,round_y) = ::Math_obj::floor(_hx_tmp1);
HXLINE(1659)		q->x0 = (round_x + d3d_bias);
HXLINE(1660)		q->y0 = (round_y + d3d_bias);
HXLINE(1661)		Int _hx_tmp2 = ((round_x + b->x1) - b->x0);
HXDLIN(1661)		q->x1 = (_hx_tmp2 + d3d_bias);
HXLINE(1662)		Int _hx_tmp3 = ((round_y + b->y1) - b->y0);
HXDLIN(1662)		q->y1 = (_hx_tmp3 + d3d_bias);
HXLINE(1664)		q->s0 = (b->x0 * ipw);
HXLINE(1665)		q->t0 = (b->y0 * iph);
HXLINE(1666)		q->s1 = (b->x1 * ipw);
HXLINE(1667)		q->t1 = (b->y1 * iph);
HXLINE(1669)		hx::AddEq(hx::FieldRef((xpos).mPtr,HX_("value",71,7f,b8,31)),b->xadvance);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(StbTruetype_obj,stbtt_GetBakedQuad,(void))


StbTruetype_obj::StbTruetype_obj()
{
}

bool StbTruetype_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"ttBYTE") ) { outValue = ttBYTE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttCHAR") ) { outValue = ttCHAR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttLONG") ) { outValue = ttLONG_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ttSHORT") ) { outValue = ttSHORT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttULONG") ) { outValue = ttULONG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttFixed") ) { outValue = ttFixed_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ttUSHORT") ) { outValue = ttUSHORT_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stbtt_tag") ) { outValue = stbtt_tag_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stbtt_tag4") ) { outValue = stbtt_tag4_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"STBTT_assert") ) { outValue = STBTT_assert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyVertices") ) { outValue = copyVertices_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stbtt__isfont") ) { outValue = stbtt__isfont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stbtt_InitFont") ) { outValue = stbtt_InitFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"STBTT__COMPARE") ) { outValue = STBTT__COMPARE_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"stbtt_setvertex") ) { outValue = stbtt_setvertex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_Rasterize") ) { outValue = stbtt_Rasterize_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"STBTT_POINT_SIZE") ) { outValue = STBTT_POINT_SIZE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__rasterize") ) { outValue = stbtt__rasterize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__add_point") ) { outValue = stbtt__add_point_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stbtt__find_table") ) { outValue = stbtt__find_table_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBox") ) { outValue = stbtt_GetGlyphBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__new_active") ) { outValue = stbtt__new_active_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__sort_edges") ) { outValue = stbtt__sort_edges_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stbtt_IsGlyphEmpty") ) { outValue = stbtt_IsGlyphEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__close_shape") ) { outValue = stbtt__close_shape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetBakedQuad") ) { outValue = stbtt_GetBakedQuad_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphShape") ) { outValue = stbtt_GetGlyphShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_FlattenCurves") ) { outValue = stbtt_FlattenCurves_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"stbtt_FindGlyphIndex") ) { outValue = stbtt_FindGlyphIndex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__GetGlyfOffset") ) { outValue = stbtt__GetGlyfOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmap") ) { outValue = stbtt_GetGlyphBitmap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_BakeFontBitmap") ) { outValue = stbtt_BakeFontBitmap_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBox") ) { outValue = stbtt_GetCodepointBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetFontVMetrics") ) { outValue = stbtt_GetFontVMetrics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_MakeGlyphBitmap") ) { outValue = stbtt_MakeGlyphBitmap_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphHMetrics") ) { outValue = stbtt_GetGlyphHMetrics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__tesselate_curve") ) { outValue = stbtt__tesselate_curve_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointShape") ) { outValue = stbtt_GetCodepointShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmapBox") ) { outValue = stbtt_GetGlyphBitmapBox_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"stbtt_GetFontBoundingBox") ) { outValue = stbtt_GetFontBoundingBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmap") ) { outValue = stbtt_GetCodepointBitmap_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphKernAdvance") ) { outValue = stbtt_GetGlyphKernAdvance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_ScaleForPixelHeight") ) { outValue = stbtt_ScaleForPixelHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_MakeCodepointBitmap") ) { outValue = stbtt_MakeCodepointBitmap_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointHMetrics") ) { outValue = stbtt_GetCodepointHMetrics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__handle_clipped_edge") ) { outValue = stbtt__handle_clipped_edge_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__sort_edges_ins_sort") ) { outValue = stbtt__sort_edges_ins_sort_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"stbtt_GetFontOffsetForIndex") ) { outValue = stbtt_GetFontOffsetForIndex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmapBox") ) { outValue = stbtt_GetCodepointBitmapBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__sort_edges_quicksort") ) { outValue = stbtt__sort_edges_quicksort_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"stbtt__fill_active_edges_new") ) { outValue = stbtt__fill_active_edges_new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmapSubpixel") ) { outValue = stbtt_GetGlyphBitmapSubpixel_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointKernAdvance") ) { outValue = stbtt_GetCodepointKernAdvance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__rasterize_sorted_edges") ) { outValue = stbtt__rasterize_sorted_edges_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_MakeGlyphBitmapSubpixel") ) { outValue = stbtt_MakeGlyphBitmapSubpixel_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"stbtt_ScaleForMappingEmToPixels") ) { outValue = stbtt_ScaleForMappingEmToPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmapBoxSubpixel") ) { outValue = stbtt_GetGlyphBitmapBoxSubpixel_dyn(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmapSubpixel") ) { outValue = stbtt_GetCodepointBitmapSubpixel_dyn(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"stbtt_MakeCodepointBitmapSubpixel") ) { outValue = stbtt_MakeCodepointBitmapSubpixel_dyn(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmapBoxSubpixel") ) { outValue = stbtt_GetCodepointBitmapBoxSubpixel_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *StbTruetype_obj_sMemberStorageInfo = 0;
static hx::StaticInfo StbTruetype_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_vmove,HX_HCSTRING("STBTT_vmove","\xc9","\x34","\xf2","\xe1")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_vline,HX_HCSTRING("STBTT_vline","\xac","\x69","\x44","\xe1")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_vcurve,HX_HCSTRING("STBTT_vcurve","\xf7","\x7b","\xee","\x13")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_DONTCARE,HX_HCSTRING("STBTT_MACSTYLE_DONTCARE","\x01","\xcf","\x41","\xcc")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_BOLD,HX_HCSTRING("STBTT_MACSTYLE_BOLD","\x24","\x22","\x1c","\x92")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_ITALIC,HX_HCSTRING("STBTT_MACSTYLE_ITALIC","\x4f","\x59","\x45","\x11")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE,HX_HCSTRING("STBTT_MACSTYLE_UNDERSCORE","\x19","\xf9","\x88","\x54")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_NONE,HX_HCSTRING("STBTT_MACSTYLE_NONE","\x57","\xb3","\x0a","\x9a")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE,HX_HCSTRING("STBTT_PLATFORM_ID_UNICODE","\x67","\xd0","\x88","\xe4")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_MAC,HX_HCSTRING("STBTT_PLATFORM_ID_MAC","\xd9","\x94","\x7e","\xed")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_ISO,HX_HCSTRING("STBTT_PLATFORM_ID_ISO","\x8f","\x9b","\x7b","\xed")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT,HX_HCSTRING("STBTT_PLATFORM_ID_MICROSOFT","\xb8","\x1d","\xef","\x0e")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0,HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_1_0","\x81","\x8f","\x4b","\x15")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1,HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_1_1","\x82","\x8f","\x4b","\x15")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646,HX_HCSTRING("STBTT_UNICODE_EID_ISO_10646","\x40","\xf7","\xd0","\x91")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP,HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_2_0_BMP","\xe8","\xf7","\x02","\x13")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL,HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_2_0_FULL","\x6c","\xdc","\x40","\x92")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_SYMBOL,HX_HCSTRING("STBTT_MS_EID_SYMBOL","\x52","\x05","\x3b","\x46")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP,HX_HCSTRING("STBTT_MS_EID_UNICODE_BMP","\x69","\xb0","\xb5","\x48")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_SHIFTJIS,HX_HCSTRING("STBTT_MS_EID_SHIFTJIS","\x0c","\x48","\x91","\x83")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL,HX_HCSTRING("STBTT_MS_EID_UNICODE_FULL","\xcb","\x94","\xef","\x58")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_ROMAN,HX_HCSTRING("STBTT_MAC_EID_ROMAN","\xb0","\xd0","\x49","\x4b")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_ARABIC,HX_HCSTRING("STBTT_MAC_EID_ARABIC","\x39","\x93","\x81","\x7b")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_JAPANESE,HX_HCSTRING("STBTT_MAC_EID_JAPANESE","\xfe","\x66","\x94","\x3c")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_HEBREW,HX_HCSTRING("STBTT_MAC_EID_HEBREW","\x8c","\xe6","\x80","\xcc")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD,HX_HCSTRING("STBTT_MAC_EID_CHINESE_TRAD","\xa0","\x9c","\x2f","\x3e")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_GREEK,HX_HCSTRING("STBTT_MAC_EID_GREEK","\x73","\x04","\xd7","\xf7")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_KOREAN,HX_HCSTRING("STBTT_MAC_EID_KOREAN","\xd1","\x51","\x1e","\xcc")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_RUSSIAN,HX_HCSTRING("STBTT_MAC_EID_RUSSIAN","\xc6","\x46","\x51","\xf4")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_ENGLISH,HX_HCSTRING("STBTT_MS_LANG_ENGLISH","\xfa","\xac","\xa2","\xc4")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_ITALIAN,HX_HCSTRING("STBTT_MS_LANG_ITALIAN","\x8a","\x27","\xb5","\x5c")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_CHINESE,HX_HCSTRING("STBTT_MS_LANG_CHINESE","\x77","\x22","\x70","\x33")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_JAPANESE,HX_HCSTRING("STBTT_MS_LANG_JAPANESE","\xc7","\x39","\x2b","\x92")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_DUTCH,HX_HCSTRING("STBTT_MS_LANG_DUTCH","\x72","\xd0","\xe3","\x00")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_KOREAN,HX_HCSTRING("STBTT_MS_LANG_KOREAN","\x5a","\xb0","\x39","\x1d")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_FRENCH,HX_HCSTRING("STBTT_MS_LANG_FRENCH","\xf0","\xaf","\x13","\xcf")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_RUSSIAN,HX_HCSTRING("STBTT_MS_LANG_RUSSIAN","\x1d","\xa0","\x28","\x9b")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_GERMAN,HX_HCSTRING("STBTT_MS_LANG_GERMAN","\xdc","\x83","\xd0","\xc1")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_SPANISH,HX_HCSTRING("STBTT_MS_LANG_SPANISH","\x7e","\xd6","\x70","\x64")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_HEBREW,HX_HCSTRING("STBTT_MS_LANG_HEBREW","\x15","\x45","\x9c","\x1d")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_SWEDISH,HX_HCSTRING("STBTT_MS_LANG_SWEDISH","\xe5","\x8c","\xee","\x77")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_ENGLISH,HX_HCSTRING("STBTT_MAC_LANG_ENGLISH","\x8d","\x78","\xfe","\xbb")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_JAPANESE,HX_HCSTRING("STBTT_MAC_LANG_JAPANESE","\xd4","\x8e","\x21","\x0b")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_ARABIC,HX_HCSTRING("STBTT_MAC_LANG_ARABIC","\x8f","\xf9","\xe7","\xd6")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_KOREAN,HX_HCSTRING("STBTT_MAC_LANG_KOREAN","\x27","\xb8","\x84","\x27")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_DUTCH,HX_HCSTRING("STBTT_MAC_LANG_DUTCH","\x45","\x81","\x53","\x78")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN,HX_HCSTRING("STBTT_MAC_LANG_RUSSIAN","\xb0","\x6b","\x84","\x92")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_FRENCH,HX_HCSTRING("STBTT_MAC_LANG_FRENCH","\xbd","\xb7","\x5e","\xd9")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_SPANISH,HX_HCSTRING("STBTT_MAC_LANG_SPANISH","\x11","\xa2","\xcc","\x5b")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_GERMAN,HX_HCSTRING("STBTT_MAC_LANG_GERMAN","\xa9","\x8b","\x1b","\xcc")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_SWEDISH,HX_HCSTRING("STBTT_MAC_LANG_SWEDISH","\x78","\x58","\x4a","\x6f")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_HEBREW,HX_HCSTRING("STBTT_MAC_LANG_HEBREW","\xe2","\x4c","\xe7","\x27")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED,HX_HCSTRING("STBTT_MAC_LANG_CHINESE_SIMPLIFIED","\xed","\x7a","\xbc","\xaa")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_ITALIAN,HX_HCSTRING("STBTT_MAC_LANG_ITALIAN","\x1d","\xf3","\x10","\x54")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD,HX_HCSTRING("STBTT_MAC_LANG_CHINESE_TRAD","\x76","\x67","\x9c","\xaf")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAX_OVERSAMPLE,HX_HCSTRING("STBTT_MAX_OVERSAMPLE","\x17","\xd3","\x91","\xa6")},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_RASTERIZER_VERSION,HX_HCSTRING("STBTT_RASTERIZER_VERSION","\x92","\x1f","\xd8","\x5e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void StbTruetype_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StbTruetype_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_vmove,"STBTT_vmove");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_vline,"STBTT_vline");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_vcurve,"STBTT_vcurve");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_DONTCARE,"STBTT_MACSTYLE_DONTCARE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_BOLD,"STBTT_MACSTYLE_BOLD");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_ITALIC,"STBTT_MACSTYLE_ITALIC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE,"STBTT_MACSTYLE_UNDERSCORE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_NONE,"STBTT_MACSTYLE_NONE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE,"STBTT_PLATFORM_ID_UNICODE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MAC,"STBTT_PLATFORM_ID_MAC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_ISO,"STBTT_PLATFORM_ID_ISO");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT,"STBTT_PLATFORM_ID_MICROSOFT");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0,"STBTT_UNICODE_EID_UNICODE_1_0");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1,"STBTT_UNICODE_EID_UNICODE_1_1");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646,"STBTT_UNICODE_EID_ISO_10646");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP,"STBTT_UNICODE_EID_UNICODE_2_0_BMP");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL,"STBTT_UNICODE_EID_UNICODE_2_0_FULL");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SYMBOL,"STBTT_MS_EID_SYMBOL");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP,"STBTT_MS_EID_UNICODE_BMP");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SHIFTJIS,"STBTT_MS_EID_SHIFTJIS");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL,"STBTT_MS_EID_UNICODE_FULL");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ROMAN,"STBTT_MAC_EID_ROMAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ARABIC,"STBTT_MAC_EID_ARABIC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_JAPANESE,"STBTT_MAC_EID_JAPANESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_HEBREW,"STBTT_MAC_EID_HEBREW");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD,"STBTT_MAC_EID_CHINESE_TRAD");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_GREEK,"STBTT_MAC_EID_GREEK");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_KOREAN,"STBTT_MAC_EID_KOREAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_RUSSIAN,"STBTT_MAC_EID_RUSSIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ENGLISH,"STBTT_MS_LANG_ENGLISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ITALIAN,"STBTT_MS_LANG_ITALIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_CHINESE,"STBTT_MS_LANG_CHINESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_JAPANESE,"STBTT_MS_LANG_JAPANESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_DUTCH,"STBTT_MS_LANG_DUTCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_KOREAN,"STBTT_MS_LANG_KOREAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_FRENCH,"STBTT_MS_LANG_FRENCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_RUSSIAN,"STBTT_MS_LANG_RUSSIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_GERMAN,"STBTT_MS_LANG_GERMAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SPANISH,"STBTT_MS_LANG_SPANISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_HEBREW,"STBTT_MS_LANG_HEBREW");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SWEDISH,"STBTT_MS_LANG_SWEDISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ENGLISH,"STBTT_MAC_LANG_ENGLISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_JAPANESE,"STBTT_MAC_LANG_JAPANESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ARABIC,"STBTT_MAC_LANG_ARABIC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_KOREAN,"STBTT_MAC_LANG_KOREAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_DUTCH,"STBTT_MAC_LANG_DUTCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN,"STBTT_MAC_LANG_RUSSIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_FRENCH,"STBTT_MAC_LANG_FRENCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SPANISH,"STBTT_MAC_LANG_SPANISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_GERMAN,"STBTT_MAC_LANG_GERMAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SWEDISH,"STBTT_MAC_LANG_SWEDISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_HEBREW,"STBTT_MAC_LANG_HEBREW");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED,"STBTT_MAC_LANG_CHINESE_SIMPLIFIED");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ITALIAN,"STBTT_MAC_LANG_ITALIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD,"STBTT_MAC_LANG_CHINESE_TRAD");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAX_OVERSAMPLE,"STBTT_MAX_OVERSAMPLE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_RASTERIZER_VERSION,"STBTT_RASTERIZER_VERSION");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StbTruetype_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_vmove,"STBTT_vmove");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_vline,"STBTT_vline");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_vcurve,"STBTT_vcurve");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_DONTCARE,"STBTT_MACSTYLE_DONTCARE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_BOLD,"STBTT_MACSTYLE_BOLD");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_ITALIC,"STBTT_MACSTYLE_ITALIC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE,"STBTT_MACSTYLE_UNDERSCORE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_NONE,"STBTT_MACSTYLE_NONE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE,"STBTT_PLATFORM_ID_UNICODE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MAC,"STBTT_PLATFORM_ID_MAC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_ISO,"STBTT_PLATFORM_ID_ISO");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT,"STBTT_PLATFORM_ID_MICROSOFT");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0,"STBTT_UNICODE_EID_UNICODE_1_0");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1,"STBTT_UNICODE_EID_UNICODE_1_1");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646,"STBTT_UNICODE_EID_ISO_10646");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP,"STBTT_UNICODE_EID_UNICODE_2_0_BMP");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL,"STBTT_UNICODE_EID_UNICODE_2_0_FULL");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SYMBOL,"STBTT_MS_EID_SYMBOL");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP,"STBTT_MS_EID_UNICODE_BMP");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SHIFTJIS,"STBTT_MS_EID_SHIFTJIS");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL,"STBTT_MS_EID_UNICODE_FULL");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ROMAN,"STBTT_MAC_EID_ROMAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ARABIC,"STBTT_MAC_EID_ARABIC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_JAPANESE,"STBTT_MAC_EID_JAPANESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_HEBREW,"STBTT_MAC_EID_HEBREW");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD,"STBTT_MAC_EID_CHINESE_TRAD");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_GREEK,"STBTT_MAC_EID_GREEK");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_KOREAN,"STBTT_MAC_EID_KOREAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_RUSSIAN,"STBTT_MAC_EID_RUSSIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ENGLISH,"STBTT_MS_LANG_ENGLISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ITALIAN,"STBTT_MS_LANG_ITALIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_CHINESE,"STBTT_MS_LANG_CHINESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_JAPANESE,"STBTT_MS_LANG_JAPANESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_DUTCH,"STBTT_MS_LANG_DUTCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_KOREAN,"STBTT_MS_LANG_KOREAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_FRENCH,"STBTT_MS_LANG_FRENCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_RUSSIAN,"STBTT_MS_LANG_RUSSIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_GERMAN,"STBTT_MS_LANG_GERMAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SPANISH,"STBTT_MS_LANG_SPANISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_HEBREW,"STBTT_MS_LANG_HEBREW");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SWEDISH,"STBTT_MS_LANG_SWEDISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ENGLISH,"STBTT_MAC_LANG_ENGLISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_JAPANESE,"STBTT_MAC_LANG_JAPANESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ARABIC,"STBTT_MAC_LANG_ARABIC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_KOREAN,"STBTT_MAC_LANG_KOREAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_DUTCH,"STBTT_MAC_LANG_DUTCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN,"STBTT_MAC_LANG_RUSSIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_FRENCH,"STBTT_MAC_LANG_FRENCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SPANISH,"STBTT_MAC_LANG_SPANISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_GERMAN,"STBTT_MAC_LANG_GERMAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SWEDISH,"STBTT_MAC_LANG_SWEDISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_HEBREW,"STBTT_MAC_LANG_HEBREW");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED,"STBTT_MAC_LANG_CHINESE_SIMPLIFIED");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ITALIAN,"STBTT_MAC_LANG_ITALIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD,"STBTT_MAC_LANG_CHINESE_TRAD");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAX_OVERSAMPLE,"STBTT_MAX_OVERSAMPLE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_RASTERIZER_VERSION,"STBTT_RASTERIZER_VERSION");
};

#endif

hx::Class StbTruetype_obj::__mClass;

static ::String StbTruetype_obj_sStaticFields[] = {
	HX_HCSTRING("STBTT_assert","\x44","\xe2","\x7c","\xe3"),
	HX_HCSTRING("STBTT_POINT_SIZE","\xee","\x9c","\x31","\x9b"),
	HX_HCSTRING("STBTT_vmove","\xc9","\x34","\xf2","\xe1"),
	HX_HCSTRING("STBTT_vline","\xac","\x69","\x44","\xe1"),
	HX_HCSTRING("STBTT_vcurve","\xf7","\x7b","\xee","\x13"),
	HX_HCSTRING("STBTT_MACSTYLE_DONTCARE","\x01","\xcf","\x41","\xcc"),
	HX_HCSTRING("STBTT_MACSTYLE_BOLD","\x24","\x22","\x1c","\x92"),
	HX_HCSTRING("STBTT_MACSTYLE_ITALIC","\x4f","\x59","\x45","\x11"),
	HX_HCSTRING("STBTT_MACSTYLE_UNDERSCORE","\x19","\xf9","\x88","\x54"),
	HX_HCSTRING("STBTT_MACSTYLE_NONE","\x57","\xb3","\x0a","\x9a"),
	HX_HCSTRING("STBTT_PLATFORM_ID_UNICODE","\x67","\xd0","\x88","\xe4"),
	HX_HCSTRING("STBTT_PLATFORM_ID_MAC","\xd9","\x94","\x7e","\xed"),
	HX_HCSTRING("STBTT_PLATFORM_ID_ISO","\x8f","\x9b","\x7b","\xed"),
	HX_HCSTRING("STBTT_PLATFORM_ID_MICROSOFT","\xb8","\x1d","\xef","\x0e"),
	HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_1_0","\x81","\x8f","\x4b","\x15"),
	HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_1_1","\x82","\x8f","\x4b","\x15"),
	HX_HCSTRING("STBTT_UNICODE_EID_ISO_10646","\x40","\xf7","\xd0","\x91"),
	HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_2_0_BMP","\xe8","\xf7","\x02","\x13"),
	HX_HCSTRING("STBTT_UNICODE_EID_UNICODE_2_0_FULL","\x6c","\xdc","\x40","\x92"),
	HX_HCSTRING("STBTT_MS_EID_SYMBOL","\x52","\x05","\x3b","\x46"),
	HX_HCSTRING("STBTT_MS_EID_UNICODE_BMP","\x69","\xb0","\xb5","\x48"),
	HX_HCSTRING("STBTT_MS_EID_SHIFTJIS","\x0c","\x48","\x91","\x83"),
	HX_HCSTRING("STBTT_MS_EID_UNICODE_FULL","\xcb","\x94","\xef","\x58"),
	HX_HCSTRING("STBTT_MAC_EID_ROMAN","\xb0","\xd0","\x49","\x4b"),
	HX_HCSTRING("STBTT_MAC_EID_ARABIC","\x39","\x93","\x81","\x7b"),
	HX_HCSTRING("STBTT_MAC_EID_JAPANESE","\xfe","\x66","\x94","\x3c"),
	HX_HCSTRING("STBTT_MAC_EID_HEBREW","\x8c","\xe6","\x80","\xcc"),
	HX_HCSTRING("STBTT_MAC_EID_CHINESE_TRAD","\xa0","\x9c","\x2f","\x3e"),
	HX_HCSTRING("STBTT_MAC_EID_GREEK","\x73","\x04","\xd7","\xf7"),
	HX_HCSTRING("STBTT_MAC_EID_KOREAN","\xd1","\x51","\x1e","\xcc"),
	HX_HCSTRING("STBTT_MAC_EID_RUSSIAN","\xc6","\x46","\x51","\xf4"),
	HX_HCSTRING("STBTT_MS_LANG_ENGLISH","\xfa","\xac","\xa2","\xc4"),
	HX_HCSTRING("STBTT_MS_LANG_ITALIAN","\x8a","\x27","\xb5","\x5c"),
	HX_HCSTRING("STBTT_MS_LANG_CHINESE","\x77","\x22","\x70","\x33"),
	HX_HCSTRING("STBTT_MS_LANG_JAPANESE","\xc7","\x39","\x2b","\x92"),
	HX_HCSTRING("STBTT_MS_LANG_DUTCH","\x72","\xd0","\xe3","\x00"),
	HX_HCSTRING("STBTT_MS_LANG_KOREAN","\x5a","\xb0","\x39","\x1d"),
	HX_HCSTRING("STBTT_MS_LANG_FRENCH","\xf0","\xaf","\x13","\xcf"),
	HX_HCSTRING("STBTT_MS_LANG_RUSSIAN","\x1d","\xa0","\x28","\x9b"),
	HX_HCSTRING("STBTT_MS_LANG_GERMAN","\xdc","\x83","\xd0","\xc1"),
	HX_HCSTRING("STBTT_MS_LANG_SPANISH","\x7e","\xd6","\x70","\x64"),
	HX_HCSTRING("STBTT_MS_LANG_HEBREW","\x15","\x45","\x9c","\x1d"),
	HX_HCSTRING("STBTT_MS_LANG_SWEDISH","\xe5","\x8c","\xee","\x77"),
	HX_HCSTRING("STBTT_MAC_LANG_ENGLISH","\x8d","\x78","\xfe","\xbb"),
	HX_HCSTRING("STBTT_MAC_LANG_JAPANESE","\xd4","\x8e","\x21","\x0b"),
	HX_HCSTRING("STBTT_MAC_LANG_ARABIC","\x8f","\xf9","\xe7","\xd6"),
	HX_HCSTRING("STBTT_MAC_LANG_KOREAN","\x27","\xb8","\x84","\x27"),
	HX_HCSTRING("STBTT_MAC_LANG_DUTCH","\x45","\x81","\x53","\x78"),
	HX_HCSTRING("STBTT_MAC_LANG_RUSSIAN","\xb0","\x6b","\x84","\x92"),
	HX_HCSTRING("STBTT_MAC_LANG_FRENCH","\xbd","\xb7","\x5e","\xd9"),
	HX_HCSTRING("STBTT_MAC_LANG_SPANISH","\x11","\xa2","\xcc","\x5b"),
	HX_HCSTRING("STBTT_MAC_LANG_GERMAN","\xa9","\x8b","\x1b","\xcc"),
	HX_HCSTRING("STBTT_MAC_LANG_SWEDISH","\x78","\x58","\x4a","\x6f"),
	HX_HCSTRING("STBTT_MAC_LANG_HEBREW","\xe2","\x4c","\xe7","\x27"),
	HX_HCSTRING("STBTT_MAC_LANG_CHINESE_SIMPLIFIED","\xed","\x7a","\xbc","\xaa"),
	HX_HCSTRING("STBTT_MAC_LANG_ITALIAN","\x1d","\xf3","\x10","\x54"),
	HX_HCSTRING("STBTT_MAC_LANG_CHINESE_TRAD","\x76","\x67","\x9c","\xaf"),
	HX_HCSTRING("STBTT_MAX_OVERSAMPLE","\x17","\xd3","\x91","\xa6"),
	HX_HCSTRING("STBTT_RASTERIZER_VERSION","\x92","\x1f","\xd8","\x5e"),
	HX_HCSTRING("ttBYTE","\x88","\x0c","\xc5","\x57"),
	HX_HCSTRING("ttCHAR","\x56","\x4c","\x61","\x58"),
	HX_HCSTRING("ttUSHORT","\x67","\xed","\x00","\xb9"),
	HX_HCSTRING("ttSHORT","\xdc","\x66","\x35","\x33"),
	HX_HCSTRING("ttULONG","\xd1","\x66","\xa7","\x5c"),
	HX_HCSTRING("ttLONG","\xfc","\x92","\x59","\x5e"),
	HX_HCSTRING("ttFixed","\xd4","\x13","\xef","\xcc"),
	HX_HCSTRING("stbtt_tag4","\x78","\x98","\x4e","\x15"),
	HX_HCSTRING("stbtt_tag","\x3c","\x1c","\x8a","\x03"),
	HX_HCSTRING("stbtt__isfont","\x3a","\x63","\xfa","\x4a"),
	HX_HCSTRING("stbtt__find_table","\x49","\x81","\x8d","\x23"),
	HX_HCSTRING("stbtt_GetFontOffsetForIndex","\xa3","\x34","\xdd","\x4b"),
	HX_HCSTRING("stbtt_InitFont","\xfd","\x73","\xa3","\x2a"),
	HX_HCSTRING("stbtt_FindGlyphIndex","\xdd","\xec","\xa8","\x16"),
	HX_HCSTRING("stbtt_GetCodepointShape","\x96","\xc0","\x5d","\x8e"),
	HX_HCSTRING("stbtt_setvertex","\xe8","\x33","\xc6","\x2e"),
	HX_HCSTRING("stbtt__GetGlyfOffset","\x1a","\x16","\xcf","\xa2"),
	HX_HCSTRING("stbtt_GetGlyphBox","\x37","\x1a","\xfa","\x10"),
	HX_HCSTRING("stbtt_GetCodepointBox","\x40","\xe4","\xcd","\x0e"),
	HX_HCSTRING("stbtt_IsGlyphEmpty","\xc9","\x03","\x2d","\x3d"),
	HX_HCSTRING("stbtt__close_shape","\xf9","\x7b","\x95","\xd8"),
	HX_HCSTRING("copyVertices","\xce","\x74","\xee","\x65"),
	HX_HCSTRING("stbtt_GetGlyphShape","\x4d","\xa2","\x7c","\x9c"),
	HX_HCSTRING("stbtt_GetGlyphHMetrics","\x0f","\x2b","\x7b","\xb8"),
	HX_HCSTRING("stbtt_GetGlyphKernAdvance","\x78","\x83","\xcc","\xd4"),
	HX_HCSTRING("stbtt_GetCodepointKernAdvance","\x81","\xfe","\xf6","\x44"),
	HX_HCSTRING("stbtt_GetCodepointHMetrics","\x66","\x60","\xe1","\x6d"),
	HX_HCSTRING("stbtt_GetFontVMetrics","\xd4","\xcf","\xe5","\x37"),
	HX_HCSTRING("stbtt_GetFontBoundingBox","\x00","\x04","\x72","\xbc"),
	HX_HCSTRING("stbtt_ScaleForPixelHeight","\x70","\x94","\xc5","\xe8"),
	HX_HCSTRING("stbtt_ScaleForMappingEmToPixels","\xe1","\xc5","\x40","\x2b"),
	HX_HCSTRING("stbtt_GetGlyphBitmapBoxSubpixel","\xae","\xbb","\x41","\xb2"),
	HX_HCSTRING("stbtt_GetGlyphBitmapBox","\x88","\x8a","\x20","\xe1"),
	HX_HCSTRING("stbtt_GetCodepointBitmapBoxSubpixel","\x77","\xa3","\x3b","\xe4"),
	HX_HCSTRING("stbtt_GetCodepointBitmapBox","\x51","\x01","\x29","\xe5"),
	HX_HCSTRING("stbtt__new_active","\x06","\x90","\x71","\x1c"),
	HX_HCSTRING("stbtt__handle_clipped_edge","\xd3","\x7c","\xf0","\xde"),
	HX_HCSTRING("stbtt__fill_active_edges_new","\x19","\x60","\x2c","\xd2"),
	HX_HCSTRING("stbtt__rasterize_sorted_edges","\xdd","\x61","\x9c","\x16"),
	HX_HCSTRING("STBTT__COMPARE","\x04","\x3d","\xab","\xda"),
	HX_HCSTRING("stbtt__sort_edges_ins_sort","\x78","\xf0","\x11","\x53"),
	HX_HCSTRING("stbtt__sort_edges_quicksort","\xc2","\x9b","\x91","\xe5"),
	HX_HCSTRING("stbtt__sort_edges","\xb6","\xf7","\x1b","\xb6"),
	HX_HCSTRING("stbtt__rasterize","\x16","\xcf","\x6e","\x35"),
	HX_HCSTRING("stbtt__add_point","\x91","\x56","\x2a","\x5d"),
	HX_HCSTRING("stbtt__tesselate_curve","\xe9","\x32","\x80","\x36"),
	HX_HCSTRING("stbtt_FlattenCurves","\x0a","\x18","\x14","\xfb"),
	HX_HCSTRING("stbtt_Rasterize","\x39","\x6c","\x89","\x22"),
	HX_HCSTRING("stbtt_GetGlyphBitmapSubpixel","\x69","\x7b","\xd8","\x67"),
	HX_HCSTRING("stbtt_GetGlyphBitmap","\x43","\x97","\x73","\x24"),
	HX_HCSTRING("stbtt_MakeGlyphBitmapSubpixel","\x55","\xb8","\x15","\xa0"),
	HX_HCSTRING("stbtt_MakeGlyphBitmap","\x2f","\x08","\x34","\x88"),
	HX_HCSTRING("stbtt_GetCodepointBitmapSubpixel","\x00","\xcc","\x1f","\x41"),
	HX_HCSTRING("stbtt_MakeCodepointBitmapSubpixel","\xec","\xee","\x3b","\xc9"),
	HX_HCSTRING("stbtt_GetCodepointBitmap","\xda","\xf8","\x8c","\xd7"),
	HX_HCSTRING("stbtt_MakeCodepointBitmap","\xc6","\x4f","\xd6","\xde"),
	HX_HCSTRING("stbtt_BakeFontBitmap","\x15","\x7f","\x85","\xc2"),
	HX_HCSTRING("stbtt_GetBakedQuad","\x1a","\xc6","\x35","\x46"),
	::String(null())
};

void StbTruetype_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics2.truetype.StbTruetype","\x14","\x96","\xdb","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StbTruetype_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StbTruetype_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StbTruetype_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< StbTruetype_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StbTruetype_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StbTruetype_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StbTruetype_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StbTruetype_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",185,0x5d9e0de9)
HXLINE( 185)		STBTT_vmove = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",186,0x5d9e0de9)
HXLINE( 186)		STBTT_vline = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",187,0x5d9e0de9)
HXLINE( 187)		STBTT_vcurve = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",189,0x5d9e0de9)
HXLINE( 189)		STBTT_MACSTYLE_DONTCARE = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",190,0x5d9e0de9)
HXLINE( 190)		STBTT_MACSTYLE_BOLD = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",191,0x5d9e0de9)
HXLINE( 191)		STBTT_MACSTYLE_ITALIC = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",192,0x5d9e0de9)
HXLINE( 192)		STBTT_MACSTYLE_UNDERSCORE = (int)4;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",193,0x5d9e0de9)
HXLINE( 193)		STBTT_MACSTYLE_NONE = (int)8;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",196,0x5d9e0de9)
HXLINE( 196)		STBTT_PLATFORM_ID_UNICODE = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",197,0x5d9e0de9)
HXLINE( 197)		STBTT_PLATFORM_ID_MAC = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",198,0x5d9e0de9)
HXLINE( 198)		STBTT_PLATFORM_ID_ISO = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",199,0x5d9e0de9)
HXLINE( 199)		STBTT_PLATFORM_ID_MICROSOFT = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",202,0x5d9e0de9)
HXLINE( 202)		STBTT_UNICODE_EID_UNICODE_1_0 = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",203,0x5d9e0de9)
HXLINE( 203)		STBTT_UNICODE_EID_UNICODE_1_1 = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",204,0x5d9e0de9)
HXLINE( 204)		STBTT_UNICODE_EID_ISO_10646 = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",205,0x5d9e0de9)
HXLINE( 205)		STBTT_UNICODE_EID_UNICODE_2_0_BMP = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",206,0x5d9e0de9)
HXLINE( 206)		STBTT_UNICODE_EID_UNICODE_2_0_FULL = (int)4;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",209,0x5d9e0de9)
HXLINE( 209)		STBTT_MS_EID_SYMBOL = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",210,0x5d9e0de9)
HXLINE( 210)		STBTT_MS_EID_UNICODE_BMP = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",211,0x5d9e0de9)
HXLINE( 211)		STBTT_MS_EID_SHIFTJIS = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",212,0x5d9e0de9)
HXLINE( 212)		STBTT_MS_EID_UNICODE_FULL = (int)10;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",215,0x5d9e0de9)
HXLINE( 215)		STBTT_MAC_EID_ROMAN = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",216,0x5d9e0de9)
HXLINE( 216)		STBTT_MAC_EID_ARABIC = (int)4;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",217,0x5d9e0de9)
HXLINE( 217)		STBTT_MAC_EID_JAPANESE = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",218,0x5d9e0de9)
HXLINE( 218)		STBTT_MAC_EID_HEBREW = (int)5;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",219,0x5d9e0de9)
HXLINE( 219)		STBTT_MAC_EID_CHINESE_TRAD = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",220,0x5d9e0de9)
HXLINE( 220)		STBTT_MAC_EID_GREEK = (int)6;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",221,0x5d9e0de9)
HXLINE( 221)		STBTT_MAC_EID_KOREAN = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",222,0x5d9e0de9)
HXLINE( 222)		STBTT_MAC_EID_RUSSIAN = (int)7;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",226,0x5d9e0de9)
HXLINE( 226)		STBTT_MS_LANG_ENGLISH = (int)1033;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",227,0x5d9e0de9)
HXLINE( 227)		STBTT_MS_LANG_ITALIAN = (int)1040;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",228,0x5d9e0de9)
HXLINE( 228)		STBTT_MS_LANG_CHINESE = (int)2052;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",229,0x5d9e0de9)
HXLINE( 229)		STBTT_MS_LANG_JAPANESE = (int)1041;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",230,0x5d9e0de9)
HXLINE( 230)		STBTT_MS_LANG_DUTCH = (int)1043;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",231,0x5d9e0de9)
HXLINE( 231)		STBTT_MS_LANG_KOREAN = (int)1042;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",232,0x5d9e0de9)
HXLINE( 232)		STBTT_MS_LANG_FRENCH = (int)1036;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",233,0x5d9e0de9)
HXLINE( 233)		STBTT_MS_LANG_RUSSIAN = (int)1049;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",234,0x5d9e0de9)
HXLINE( 234)		STBTT_MS_LANG_GERMAN = (int)1031;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",235,0x5d9e0de9)
HXLINE( 235)		STBTT_MS_LANG_SPANISH = (int)1033;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",236,0x5d9e0de9)
HXLINE( 236)		STBTT_MS_LANG_HEBREW = (int)1037;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",237,0x5d9e0de9)
HXLINE( 237)		STBTT_MS_LANG_SWEDISH = (int)1053;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",240,0x5d9e0de9)
HXLINE( 240)		STBTT_MAC_LANG_ENGLISH = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",241,0x5d9e0de9)
HXLINE( 241)		STBTT_MAC_LANG_JAPANESE = (int)11;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",242,0x5d9e0de9)
HXLINE( 242)		STBTT_MAC_LANG_ARABIC = (int)12;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",243,0x5d9e0de9)
HXLINE( 243)		STBTT_MAC_LANG_KOREAN = (int)23;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",244,0x5d9e0de9)
HXLINE( 244)		STBTT_MAC_LANG_DUTCH = (int)4;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",245,0x5d9e0de9)
HXLINE( 245)		STBTT_MAC_LANG_RUSSIAN = (int)32;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",246,0x5d9e0de9)
HXLINE( 246)		STBTT_MAC_LANG_FRENCH = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",247,0x5d9e0de9)
HXLINE( 247)		STBTT_MAC_LANG_SPANISH = (int)6;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",248,0x5d9e0de9)
HXLINE( 248)		STBTT_MAC_LANG_GERMAN = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",249,0x5d9e0de9)
HXLINE( 249)		STBTT_MAC_LANG_SWEDISH = (int)5;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",250,0x5d9e0de9)
HXLINE( 250)		STBTT_MAC_LANG_HEBREW = (int)10;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",251,0x5d9e0de9)
HXLINE( 251)		STBTT_MAC_LANG_CHINESE_SIMPLIFIED = (int)33;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",252,0x5d9e0de9)
HXLINE( 252)		STBTT_MAC_LANG_ITALIAN = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",253,0x5d9e0de9)
HXLINE( 253)		STBTT_MAC_LANG_CHINESE_TRAD = (int)19;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",255,0x5d9e0de9)
HXLINE( 255)		STBTT_MAX_OVERSAMPLE = (int)8;
            	}
{
            	HX_STACK_FRAME("kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",257,0x5d9e0de9)
HXLINE( 257)		STBTT_RASTERIZER_VERSION = (int)2;
            	}
}

} // end namespace kha
} // end namespace graphics2
} // end namespace truetype
