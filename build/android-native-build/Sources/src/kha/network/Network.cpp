// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_network_Network
#include <kha/network/Network.h>
#endif

namespace kha{
namespace network{

void Network_obj::__construct(::String url,Int port, ::Dynamic errorCallback, ::Dynamic closeCallback){
            	HX_STACK_FRAME("kha.network.Network","new",0xce333b76,"kha.network.Network.new","kha/network/Network.hx",20,0x7ff4e43c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(url,"url")
            	HX_STACK_ARG(port,"port")
            	HX_STACK_ARG(errorCallback,"errorCallback")
            	HX_STACK_ARG(closeCallback,"closeCallback")
HXLINE(  21)		this->url = url;
HXLINE(  22)		this->port = (port + (int)1);
HXLINE(  23)		this->bufferPos = (int)0;
HXLINE(  24)		this->buffer = ::haxe::io::Bytes_obj::alloc((int)256);
HXLINE(  25)		this->tempBuffer = ::haxe::io::Bytes_obj::alloc((int)256);
HXLINE(  26)		this->init(url,port);
HXLINE(  27)		::kha::Scheduler_obj::addFrameTask(this->update_dyn(),(int)0);
            	}

Dynamic Network_obj::__CreateEmpty() { return new Network_obj; }

hx::ObjectPtr< Network_obj > Network_obj::__new(::String url,Int port, ::Dynamic errorCallback, ::Dynamic closeCallback)
{
	hx::ObjectPtr< Network_obj > _hx_result = new Network_obj();
	_hx_result->__construct(url,port,errorCallback,closeCallback);
	return _hx_result;
}

Dynamic Network_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Network_obj > _hx_result = new Network_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

void Network_obj::init(::String url,Int port){
            	HX_STACK_FRAME("kha.network.Network","init",0x9b59833a,"kha.network.Network.init","kha/network/Network.hx",35,0x7ff4e43c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(url,"url")
            	HX_STACK_ARG(port,"port")
            	
		socket = new Kore::Socket();
		socket->open(port);
	

HXLINE(  35)		this->send(::haxe::io::Bytes_obj::ofString(HX_("JOIN",ea,fb,25,31)),true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Network_obj,init,(void))

void Network_obj::send( ::haxe::io::Bytes bytes,Bool mandatory){
            	HX_STACK_FRAME("kha.network.Network","send",0xa1eed572,"kha.network.Network.send","kha/network/Network.hx",42,0x7ff4e43c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(mandatory,"mandatory")
            	
		// TODO: mandatory
		socket->send(url, port, (const unsigned char*)bytes->b->getBase(), bytes->length);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Network_obj,send,(void))

void Network_obj::listen( ::Dynamic listener){
            	HX_STACK_FRAME("kha.network.Network","listen",0x9fd9eef1,"kha.network.Network.listen","kha/network/Network.hx",47,0x7ff4e43c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(listener,"listener")
HXLINE(  47)		this->listener = listener;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Network_obj,listen,(void))

void Network_obj::update(){
            	HX_STACK_FRAME("kha.network.Network","update",0x36e5acb3,"kha.network.Network.update","kha/network/Network.hx",50,0x7ff4e43c)
            	HX_STACK_THIS(this)
HXLINE(  51)		HX_VARI( Int,received) = this->getBytesFromSocket(this->tempBuffer);
HXLINE(  52)		this->buffer->blit(this->bufferPos,this->tempBuffer,(int)0,received);
HXLINE(  53)		hx::AddEq(this->bufferPos,received);
HXLINE(  54)		if ((received > (int)0)) {
HXLINE(  54)			::haxe::Log_obj::trace(((HX_("received ",df,37,9f,ba) + received) + HX_(" bytes",4b,94,03,89)),hx::SourceInfo(HX_("Network.hx",f0,22,6d,5b),54,HX_("kha.network.Network",84,08,6f,16),HX_("update",09,86,05,87)));
            		}
HXLINE(  57)		Bool _hx_tmp;
HXDLIN(  57)		Bool _hx_tmp1 = hx::IsNotNull( this->listener );
HXDLIN(  57)		if (_hx_tmp1) {
HXLINE(  57)			_hx_tmp = (this->bufferPos > (int)0);
            		}
            		else {
HXLINE(  57)			_hx_tmp = false;
            		}
HXDLIN(  57)		if (_hx_tmp) {
HXLINE(  58)			this->listener(this->buffer);
HXLINE(  59)			this->bufferPos = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Network_obj,update,(void))

Int Network_obj::getBytesFromSocket( ::haxe::io::Bytes inBuffer){
            	HX_STACK_FRAME("kha.network.Network","getBytesFromSocket",0x733e8ebc,"kha.network.Network.getBytesFromSocket","kha/network/Network.hx",75,0x7ff4e43c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(inBuffer,"inBuffer")
            	
		unsigned int recAddr;
		unsigned int recPort;
		int size = socket->receive((unsigned char*)inBuffer->b->getBase(), inBuffer->length, recAddr, recPort);
		if (size >= 0) {
			return size;
		}
		else {
			return 0;
		}
	

HXLINE(  75)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Network_obj,getBytesFromSocket,return )


Network_obj::Network_obj()
{
}

void Network_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Network);
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(port,"port");
	HX_MARK_MEMBER_NAME(bufferPos,"bufferPos");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(tempBuffer,"tempBuffer");
	HX_MARK_MEMBER_NAME(listener,"listener");
	HX_MARK_END_CLASS();
}

void Network_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(port,"port");
	HX_VISIT_MEMBER_NAME(bufferPos,"bufferPos");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(tempBuffer,"tempBuffer");
	HX_VISIT_MEMBER_NAME(listener,"listener");
}

hx::Val Network_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return hx::Val( url); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"port") ) { return hx::Val( port); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"send") ) { return hx::Val( send_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"listen") ) { return hx::Val( listen_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return hx::Val( listener); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bufferPos") ) { return hx::Val( bufferPos); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tempBuffer") ) { return hx::Val( tempBuffer); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getBytesFromSocket") ) { return hx::Val( getBytesFromSocket_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Network_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"port") ) { port=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { listener=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bufferPos") ) { bufferPos=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tempBuffer") ) { tempBuffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Network_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"));
	outFields->push(HX_HCSTRING("port","\x81","\x83","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("bufferPos","\x74","\x78","\x7c","\xb1"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("tempBuffer","\x34","\x7b","\x04","\xec"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Network_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Network_obj,url),HX_HCSTRING("url","\x6f","\x2b","\x59","\x00")},
	{hx::fsInt,(int)offsetof(Network_obj,port),HX_HCSTRING("port","\x81","\x83","\x5c","\x4a")},
	{hx::fsInt,(int)offsetof(Network_obj,bufferPos),HX_HCSTRING("bufferPos","\x74","\x78","\x7c","\xb1")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Network_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Network_obj,tempBuffer),HX_HCSTRING("tempBuffer","\x34","\x7b","\x04","\xec")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Network_obj,listener),HX_HCSTRING("listener","\x74","\x00","\x32","\x38")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Network_obj_sStaticStorageInfo = 0;
#endif

static ::String Network_obj_sMemberFields[] = {
	HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"),
	HX_HCSTRING("port","\x81","\x83","\x5c","\x4a"),
	HX_HCSTRING("bufferPos","\x74","\x78","\x7c","\xb1"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("tempBuffer","\x34","\x7b","\x04","\xec"),
	HX_HCSTRING("listener","\x74","\x00","\x32","\x38"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("send","\x48","\x8d","\x50","\x4c"),
	HX_HCSTRING("listen","\x47","\xc8","\xf9","\xef"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("getBytesFromSocket","\x12","\x11","\xea","\x8e"),
	::String(null()) };

static void Network_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Network_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Network_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Network_obj::__mClass,"__mClass");
};

#endif

hx::Class Network_obj::__mClass;

void Network_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.network.Network","\x84","\x08","\x6f","\x16");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Network_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Network_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Network_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Network_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Network_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Network_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace network
