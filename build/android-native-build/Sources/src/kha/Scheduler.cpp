// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_kha_FrameTask
#include <kha/FrameTask.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_TimeTask
#include <kha/TimeTask.h>
#endif

namespace kha{

void Scheduler_obj::__construct() { }

Dynamic Scheduler_obj::__CreateEmpty() { return new Scheduler_obj; }

hx::ObjectPtr< Scheduler_obj > Scheduler_obj::__new()
{
	hx::ObjectPtr< Scheduler_obj > _hx_result = new Scheduler_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Scheduler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Scheduler_obj > _hx_result = new Scheduler_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::Dynamic> Scheduler_obj::timeTasks;

::Array< ::Dynamic> Scheduler_obj::pausedTimeTasks;

::Array< ::Dynamic> Scheduler_obj::outdatedTimeTasks;

::Array< ::Dynamic> Scheduler_obj::timeTasksScratchpad;

Float Scheduler_obj::timeWarpSaveTime;

::Array< ::Dynamic> Scheduler_obj::frameTasks;

::Array< ::Dynamic> Scheduler_obj::toDeleteFrame;

Float Scheduler_obj::current;

Float Scheduler_obj::lastTime;

Bool Scheduler_obj::frame_tasks_sorted;

Bool Scheduler_obj::stopped;

Bool Scheduler_obj::vsync;

Float Scheduler_obj::onedifhz;

Int Scheduler_obj::currentFrameTaskId;

Int Scheduler_obj::currentTimeTaskId;

Int Scheduler_obj::currentGroupId;

Int Scheduler_obj::DIF_COUNT;

Float Scheduler_obj::maxframetime;

::Array< Float > Scheduler_obj::deltas;

Float Scheduler_obj::startTime;

 ::kha::TimeTask Scheduler_obj::activeTimeTask;

void Scheduler_obj::init(){
            	HX_STACK_FRAME("kha.Scheduler","init",0x2bf4b74d,"kha.Scheduler.init","kha/Scheduler.hx",69,0xd275db8e)
HXLINE(  70)		::kha::Scheduler_obj::deltas = ::Array_obj< Float >::__new();
HXLINE(  71)		{
HXLINE(  71)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  71)			HX_VARI( Int,_g) = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN(  71)			while((_g1 < _g)){
HXLINE(  71)				HX_VARI( Int,i) = _g1++;
HXDLIN(  71)				::kha::Scheduler_obj::deltas[i] = (int)0;
            			}
            		}
HXLINE(  73)		::kha::Scheduler_obj::stopped = true;
HXLINE(  74)		::kha::Scheduler_obj::frame_tasks_sorted = true;
HXLINE(  75)		::kha::Scheduler_obj::current = ::kha::Scheduler_obj::realTime();
HXLINE(  76)		::kha::Scheduler_obj::lastTime = ::kha::Scheduler_obj::realTime();
HXLINE(  78)		::kha::Scheduler_obj::currentFrameTaskId = (int)0;
HXLINE(  79)		::kha::Scheduler_obj::currentTimeTaskId = (int)0;
HXLINE(  80)		::kha::Scheduler_obj::currentGroupId = (int)0;
HXLINE(  82)		::kha::Scheduler_obj::timeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  83)		::kha::Scheduler_obj::pausedTimeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  84)		::kha::Scheduler_obj::outdatedTimeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  85)		::kha::Scheduler_obj::timeTasksScratchpad = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  86)		::kha::Scheduler_obj::frameTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  87)		::kha::Scheduler_obj::toDeleteFrame = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,init,(void))

void Scheduler_obj::start(hx::Null< Bool >  __o_restartTimers){
Bool restartTimers = __o_restartTimers.Default(false);
            	HX_STACK_FRAME("kha.Scheduler","start",0x101ead85,"kha.Scheduler.start","kha/Scheduler.hx",90,0xd275db8e)
            	HX_STACK_ARG(restartTimers,"restartTimers")
HXLINE(  91)		::kha::Scheduler_obj::vsync = ::kha::System_obj::get_vsync();
HXLINE(  92)		HX_VARI( Int,hz) = ::kha::System_obj::get_refreshRate();
HXLINE(  93)		Bool _hx_tmp;
HXDLIN(  93)		if ((hz >= (int)57)) {
HXLINE(  93)			_hx_tmp = (hz <= (int)63);
            		}
            		else {
HXLINE(  93)			_hx_tmp = false;
            		}
HXDLIN(  93)		if (_hx_tmp) {
HXLINE(  93)			hz = (int)60;
            		}
HXLINE(  94)		::kha::Scheduler_obj::onedifhz = ((Float)((Float)1.0) / (Float)hz);
HXLINE(  96)		::kha::Scheduler_obj::stopped = false;
HXLINE(  97)		::kha::Scheduler_obj::resetTime();
HXLINE(  98)		::kha::Scheduler_obj::lastTime = ::kha::Scheduler_obj::realTime();
HXLINE(  99)		{
HXLINE(  99)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  99)			HX_VARI( Int,_g) = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN(  99)			while((_g1 < _g)){
HXLINE(  99)				HX_VARI( Int,i) = _g1++;
HXDLIN(  99)				::kha::Scheduler_obj::deltas[i] = (int)0;
            			}
            		}
HXLINE( 101)		if (restartTimers) {
HXLINE( 102)			{
HXLINE( 102)				HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 102)				HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 102)				while((_g2 < _g11->length)){
HXLINE( 102)					HX_VARI(  ::kha::TimeTask,timeTask) = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 102)					++_g2;
HXLINE( 103)					timeTask->paused = false;
            				}
            			}
HXLINE( 106)			{
HXLINE( 106)				HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 106)				HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 106)				while((_g3 < _g12->length)){
HXLINE( 106)					HX_VARI(  ::kha::FrameTask,frameTask) = _g12->__get(_g3).StaticCast<  ::kha::FrameTask >();
HXDLIN( 106)					++_g3;
HXLINE( 107)					frameTask->paused = false;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,start,(void))

void Scheduler_obj::stop(){
            	HX_STACK_FRAME("kha.Scheduler","stop",0x32956c3f,"kha.Scheduler.stop","kha/Scheduler.hx",113,0xd275db8e)
HXLINE( 113)		::kha::Scheduler_obj::stopped = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,stop,(void))

Bool Scheduler_obj::isStopped(){
            	HX_STACK_FRAME("kha.Scheduler","isStopped",0xd70a55e6,"kha.Scheduler.isStopped","kha/Scheduler.hx",117,0xd275db8e)
HXLINE( 117)		return ::kha::Scheduler_obj::stopped;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,isStopped,return )

void Scheduler_obj::warpTimeTasks(Float time,::Array< ::Dynamic> tasks){
            	HX_STACK_FRAME("kha.Scheduler","warpTimeTasks",0x29ccfafc,"kha.Scheduler.warpTimeTasks","kha/Scheduler.hx",121,0xd275db8e)
            	HX_STACK_ARG(time,"time")
            	HX_STACK_ARG(tasks,"tasks")
HXLINE( 121)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 121)		while((_g < tasks->length)){
HXLINE( 121)			HX_VARI(  ::kha::TimeTask,timeTask) = tasks->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 121)			++_g;
HXLINE( 122)			Bool _hx_tmp = (timeTask->start >= time);
HXDLIN( 122)			if (_hx_tmp) {
HXLINE( 123)				timeTask->next = timeTask->start;
            			}
            			else {
HXLINE( 125)				Bool _hx_tmp1 = (timeTask->period > (int)0);
HXDLIN( 125)				if (_hx_tmp1) {
HXLINE( 127)					Float _hx_tmp2 = ((Float)(time - timeTask->start) / (Float)timeTask->period);
HXDLIN( 127)					HX_VARI( Int,times) = ::Math_obj::ceil(_hx_tmp2);
HXLINE( 128)					Float _hx_tmp3 = timeTask->start;
HXDLIN( 128)					Float _hx_tmp4 = (times * timeTask->period);
HXDLIN( 128)					timeTask->next = (_hx_tmp3 + _hx_tmp4);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,warpTimeTasks,(void))

void Scheduler_obj::back(Float time){
            	HX_STACK_FRAME("kha.Scheduler","back",0x274a5664,"kha.Scheduler.back","kha/Scheduler.hx",133,0xd275db8e)
            	HX_STACK_ARG(time,"time")
HXLINE( 134)		if ((time >= ::kha::Scheduler_obj::lastTime)) {
HXLINE( 134)			return;
            		}
HXLINE( 136)		::kha::Scheduler_obj::current = time;
HXLINE( 137)		::kha::Scheduler_obj::lastTime = time;
HXLINE( 138)		::kha::Scheduler_obj::warpTimeTasks(time,::kha::Scheduler_obj::outdatedTimeTasks);
HXLINE( 139)		::kha::Scheduler_obj::warpTimeTasks(time,::kha::Scheduler_obj::timeTasks);
HXLINE( 141)		{
HXLINE( 141)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 141)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::Scheduler_obj::outdatedTimeTasks;
HXDLIN( 141)			while((_g < _g1->length)){
HXLINE( 141)				HX_VARI(  ::kha::TimeTask,task) = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 141)				++_g;
HXLINE( 142)				Bool _hx_tmp = (task->next >= time);
HXDLIN( 142)				if (_hx_tmp) {
HXLINE( 143)					::kha::Scheduler_obj::timeTasksScratchpad->push(task);
            				}
            			}
            		}
HXLINE( 146)		{
HXLINE( 146)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 146)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 146)			while((_g2 < _g11->length)){
HXLINE( 146)				HX_VARI_NAME(  ::kha::TimeTask,task1,"task") = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 146)				++_g2;
HXLINE( 147)				::kha::Scheduler_obj::outdatedTimeTasks->remove(task1);
            			}
            		}
HXLINE( 149)		{
HXLINE( 149)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 149)			HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 149)			while((_g3 < _g12->length)){
HXLINE( 149)				HX_VARI_NAME(  ::kha::TimeTask,task2,"task") = _g12->__get(_g3).StaticCast<  ::kha::TimeTask >();
HXDLIN( 149)				++_g3;
HXLINE( 150)				::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,task2);
            			}
            		}
HXLINE( 152)		while((::kha::Scheduler_obj::timeTasksScratchpad->length > (int)0)){
HXLINE( 153)			 ::kha::TimeTask _hx_tmp1 = ::kha::Scheduler_obj::timeTasksScratchpad->__get((int)0).StaticCast<  ::kha::TimeTask >();
HXDLIN( 153)			::kha::Scheduler_obj::timeTasksScratchpad->remove(_hx_tmp1);
            		}
HXLINE( 156)		{
HXLINE( 156)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 156)			HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = ::kha::Scheduler_obj::outdatedTimeTasks;
HXDLIN( 156)			while((_g4 < _g13->length)){
HXLINE( 156)				HX_VARI_NAME(  ::kha::TimeTask,task3,"task") = _g13->__get(_g4).StaticCast<  ::kha::TimeTask >();
HXDLIN( 156)				++_g4;
HXLINE( 157)				Bool _hx_tmp2 = (task3->next < (time - ((Float)1.0)));
HXDLIN( 157)				if (_hx_tmp2) {
HXLINE( 158)					::kha::Scheduler_obj::timeTasksScratchpad->push(task3);
            				}
            			}
            		}
HXLINE( 161)		{
HXLINE( 161)			HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN( 161)			HX_VARI_NAME( ::Array< ::Dynamic>,_g14,"_g1") = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 161)			while((_g5 < _g14->length)){
HXLINE( 161)				HX_VARI_NAME(  ::kha::TimeTask,task4,"task") = _g14->__get(_g5).StaticCast<  ::kha::TimeTask >();
HXDLIN( 161)				++_g5;
HXLINE( 162)				::kha::Scheduler_obj::outdatedTimeTasks->remove(task4);
            			}
            		}
HXLINE( 164)		while((::kha::Scheduler_obj::timeTasksScratchpad->length > (int)0)){
HXLINE( 165)			 ::kha::TimeTask _hx_tmp3 = ::kha::Scheduler_obj::timeTasksScratchpad->__get((int)0).StaticCast<  ::kha::TimeTask >();
HXDLIN( 165)			::kha::Scheduler_obj::timeTasksScratchpad->remove(_hx_tmp3);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,back,(void))

void Scheduler_obj::executeFrame(){
            	HX_STACK_FRAME("kha.Scheduler","executeFrame",0x3aa53ef5,"kha.Scheduler.executeFrame","kha/Scheduler.hx",169,0xd275db8e)
HXLINE( 171)		HX_VARI( Float,delta) = (::kha::Scheduler_obj::realTime() - ::kha::Scheduler_obj::lastTime);
HXLINE( 173)		HX_VARI( Float,frameEnd) = ::kha::Scheduler_obj::current;
HXLINE( 175)		if ((delta < (int)0)) {
HXLINE( 176)			return;
            		}
HXLINE( 181)		Bool _hx_tmp = (delta > ::kha::Scheduler_obj::maxframetime);
HXDLIN( 181)		if (_hx_tmp) {
HXLINE( 182)			hx::AddEq(::kha::Scheduler_obj::startTime,(delta - ::kha::Scheduler_obj::maxframetime));
HXLINE( 183)			delta = ::kha::Scheduler_obj::maxframetime;
HXLINE( 184)			hx::AddEq(frameEnd,delta);
            		}
            		else {
HXLINE( 187)			Bool _hx_tmp1 = ::kha::Scheduler_obj::vsync;
HXDLIN( 187)			if (_hx_tmp1) {
HXLINE( 190)				HX_VARI( Float,realdif) = ::kha::Scheduler_obj::onedifhz;
HXLINE( 191)				while((realdif < (delta - ::kha::Scheduler_obj::onedifhz))){
HXLINE( 192)					hx::AddEq(realdif,::kha::Scheduler_obj::onedifhz);
            				}
HXLINE( 195)				delta = realdif;
HXLINE( 196)				{
HXLINE( 196)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 196)					HX_VARI( Int,_g) = (::kha::Scheduler_obj::DIF_COUNT - (int)2);
HXDLIN( 196)					while((_g1 < _g)){
HXLINE( 196)						HX_VARI( Int,i) = _g1++;
HXLINE( 197)						hx::AddEq(delta,::kha::Scheduler_obj::deltas->__get(i));
HXLINE( 198)						Float _hx_tmp2 = ::kha::Scheduler_obj::deltas->__get((i + (int)1));
HXDLIN( 198)						::kha::Scheduler_obj::deltas[i] = _hx_tmp2;
            					}
            				}
HXLINE( 200)				hx::AddEq(delta,::kha::Scheduler_obj::deltas->__get((::kha::Scheduler_obj::DIF_COUNT - (int)2)));
HXLINE( 201)				hx::DivEq(delta,::kha::Scheduler_obj::DIF_COUNT);
HXLINE( 202)				Int _hx_tmp3 = (::kha::Scheduler_obj::DIF_COUNT - (int)2);
HXDLIN( 202)				::kha::Scheduler_obj::deltas[_hx_tmp3] = realdif;
HXLINE( 204)				hx::AddEq(frameEnd,delta);
            			}
            			else {
HXLINE( 207)				{
HXLINE( 207)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 207)					HX_VARI_NAME( Int,_g2,"_g") = (::kha::Scheduler_obj::DIF_COUNT - (int)1);
HXDLIN( 207)					while((_g11 < _g2)){
HXLINE( 207)						HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 208)						Float _hx_tmp4 = ::kha::Scheduler_obj::deltas->__get((i1 + (int)1));
HXDLIN( 208)						::kha::Scheduler_obj::deltas[i1] = _hx_tmp4;
            					}
            				}
HXLINE( 210)				Int _hx_tmp5 = (::kha::Scheduler_obj::DIF_COUNT - (int)1);
HXDLIN( 210)				::kha::Scheduler_obj::deltas[_hx_tmp5] = delta;
HXLINE( 212)				HX_VARI( Float,next) = (int)0;
HXLINE( 213)				{
HXLINE( 213)					HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 213)					HX_VARI_NAME( Int,_g3,"_g") = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN( 213)					while((_g12 < _g3)){
HXLINE( 213)						HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 214)						hx::AddEq(next,::kha::Scheduler_obj::deltas->__get(i2));
            					}
            				}
HXLINE( 216)				hx::DivEq(next,::kha::Scheduler_obj::DIF_COUNT);
HXLINE( 221)				hx::AddEq(frameEnd,next);
            			}
            		}
HXLINE( 225)		::kha::Scheduler_obj::lastTime = frameEnd;
HXLINE( 226)		Bool _hx_tmp6 = !(::kha::Scheduler_obj::stopped);
HXDLIN( 226)		if (_hx_tmp6) {
HXLINE( 227)			::kha::Scheduler_obj::current = frameEnd;
            		}
HXLINE( 231)		{
HXLINE( 231)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 231)			HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = ::kha::Scheduler_obj::pausedTimeTasks;
HXDLIN( 231)			while((_g4 < _g13->length)){
HXLINE( 231)				HX_VARI(  ::kha::TimeTask,pausedTask) = _g13->__get(_g4).StaticCast<  ::kha::TimeTask >();
HXDLIN( 231)				++_g4;
HXLINE( 232)				hx::AddEq(pausedTask->next,delta);
            			}
            		}
HXLINE( 235)		Bool _hx_tmp7 = ::kha::Scheduler_obj::stopped;
HXDLIN( 235)		if (_hx_tmp7) {
HXLINE( 237)			HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN( 237)			HX_VARI_NAME( ::Array< ::Dynamic>,_g14,"_g1") = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 237)			while((_g5 < _g14->length)){
HXLINE( 237)				HX_VARI(  ::kha::TimeTask,timeTask) = _g14->__get(_g5).StaticCast<  ::kha::TimeTask >();
HXDLIN( 237)				++_g5;
HXLINE( 238)				hx::AddEq(timeTask->next,delta);
            			}
            		}
HXLINE( 242)		while((::kha::Scheduler_obj::timeTasks->length > (int)0)){
HXLINE( 243)			::kha::Scheduler_obj::activeTimeTask = ::kha::Scheduler_obj::timeTasks->__get((int)0).StaticCast<  ::kha::TimeTask >();
HXLINE( 245)			Bool _hx_tmp8 = (::kha::Scheduler_obj::activeTimeTask->next <= frameEnd);
HXDLIN( 245)			if (_hx_tmp8) {
HXLINE( 246)				hx::AddEq(::kha::Scheduler_obj::activeTimeTask->next,::kha::Scheduler_obj::activeTimeTask->period);
HXLINE( 247)				::kha::Scheduler_obj::timeTasks->remove(::kha::Scheduler_obj::activeTimeTask);
HXLINE( 249)				Bool _hx_tmp9;
HXDLIN( 249)				Bool _hx_tmp10 = ::kha::Scheduler_obj::activeTimeTask->active;
HXDLIN( 249)				if (_hx_tmp10) {
HXLINE( 249)					_hx_tmp9 = ( (Bool)(::kha::Scheduler_obj::activeTimeTask->task()) );
            				}
            				else {
HXLINE( 249)					_hx_tmp9 = false;
            				}
HXDLIN( 249)				if (_hx_tmp9) {
HXLINE( 250)					Bool _hx_tmp11;
HXDLIN( 250)					if ((::kha::Scheduler_obj::activeTimeTask->period > (int)0)) {
HXLINE( 250)						if ((::kha::Scheduler_obj::activeTimeTask->duration != (int)0)) {
HXLINE( 250)							_hx_tmp11 = (::kha::Scheduler_obj::activeTimeTask->duration >= (::kha::Scheduler_obj::activeTimeTask->start + ::kha::Scheduler_obj::activeTimeTask->next));
            						}
            						else {
HXLINE( 250)							_hx_tmp11 = true;
            						}
            					}
            					else {
HXLINE( 250)						_hx_tmp11 = false;
            					}
HXDLIN( 250)					if (_hx_tmp11) {
HXLINE( 251)						::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,::kha::Scheduler_obj::activeTimeTask);
            					}
            					else {
HXLINE( 254)						::kha::Scheduler_obj::archiveTimeTask(::kha::Scheduler_obj::activeTimeTask,frameEnd);
            					}
            				}
            				else {
HXLINE( 258)					::kha::Scheduler_obj::activeTimeTask->active = false;
HXLINE( 259)					::kha::Scheduler_obj::archiveTimeTask(::kha::Scheduler_obj::activeTimeTask,frameEnd);
            				}
            			}
            			else {
HXLINE( 263)				goto _hx_goto_18;
            			}
            		}
            		_hx_goto_18:;
HXLINE( 266)		::kha::Scheduler_obj::activeTimeTask = null();
HXLINE( 268)		::kha::Scheduler_obj::sortFrameTasks();
HXLINE( 269)		{
HXLINE( 269)			HX_VARI_NAME( Int,_g6,"_g") = (int)0;
HXDLIN( 269)			HX_VARI_NAME( ::Array< ::Dynamic>,_g15,"_g1") = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 269)			while((_g6 < _g15->length)){
HXLINE( 269)				HX_VARI(  ::kha::FrameTask,frameTask) = _g15->__get(_g6).StaticCast<  ::kha::FrameTask >();
HXDLIN( 269)				++_g6;
HXLINE( 270)				Bool _hx_tmp12;
HXDLIN( 270)				Bool _hx_tmp13;
HXDLIN( 270)				if (!(::kha::Scheduler_obj::stopped)) {
HXLINE( 270)					_hx_tmp13 = !(frameTask->paused);
            				}
            				else {
HXLINE( 270)					_hx_tmp13 = false;
            				}
HXDLIN( 270)				if (_hx_tmp13) {
HXLINE( 270)					_hx_tmp12 = frameTask->active;
            				}
            				else {
HXLINE( 270)					_hx_tmp12 = false;
            				}
HXDLIN( 270)				if (_hx_tmp12) {
HXLINE( 271)					Bool _hx_tmp14 = !(( (Bool)(frameTask->task()) ));
HXDLIN( 271)					if (_hx_tmp14) {
HXLINE( 271)						frameTask->active = false;
            					}
            				}
            			}
            		}
HXLINE( 275)		{
HXLINE( 275)			HX_VARI_NAME( Int,_g7,"_g") = (int)0;
HXDLIN( 275)			HX_VARI_NAME( ::Array< ::Dynamic>,_g16,"_g1") = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 275)			while((_g7 < _g16->length)){
HXLINE( 275)				HX_VARI_NAME(  ::kha::FrameTask,frameTask1,"frameTask") = _g16->__get(_g7).StaticCast<  ::kha::FrameTask >();
HXDLIN( 275)				++_g7;
HXLINE( 276)				Bool _hx_tmp15 = !(frameTask1->active);
HXDLIN( 276)				if (_hx_tmp15) {
HXLINE( 277)					::kha::Scheduler_obj::toDeleteFrame->push(frameTask1);
            				}
            			}
            		}
HXLINE( 281)		while((::kha::Scheduler_obj::toDeleteFrame->length > (int)0)){
HXLINE( 282)			 ::kha::FrameTask _hx_tmp16 = ::kha::Scheduler_obj::toDeleteFrame->pop().StaticCast<  ::kha::FrameTask >();
HXDLIN( 282)			::kha::Scheduler_obj::frameTasks->remove(_hx_tmp16);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,executeFrame,(void))

void Scheduler_obj::archiveTimeTask( ::kha::TimeTask timeTask,Float frameEnd){
            	HX_STACK_FRAME("kha.Scheduler","archiveTimeTask",0xf7ae86b7,"kha.Scheduler.archiveTimeTask","kha/Scheduler.hx",286,0xd275db8e)
            	HX_STACK_ARG(timeTask,"timeTask")
            	HX_STACK_ARG(frameEnd,"frameEnd")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,archiveTimeTask,(void))

Float Scheduler_obj::time(){
            	HX_STACK_FRAME("kha.Scheduler","time",0x3336484a,"kha.Scheduler.time","kha/Scheduler.hx",295,0xd275db8e)
HXLINE( 295)		return ::kha::Scheduler_obj::current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,time,return )

Float Scheduler_obj::realTime(){
            	HX_STACK_FRAME("kha.Scheduler","realTime",0xd6422948,"kha.Scheduler.realTime","kha/Scheduler.hx",299,0xd275db8e)
HXLINE( 299)		return (::kha::System_obj::get_time() - ::kha::Scheduler_obj::startTime);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,realTime,return )

void Scheduler_obj::resetTime(){
            	HX_STACK_FRAME("kha.Scheduler","resetTime",0x2292dc1f,"kha.Scheduler.resetTime","kha/Scheduler.hx",302,0xd275db8e)
HXLINE( 303)		HX_VARI( Float,now) = ::kha::System_obj::get_time();
HXLINE( 304)		HX_VARI( Float,dif) = (now - ::kha::Scheduler_obj::startTime);
HXLINE( 305)		::kha::Scheduler_obj::startTime = now;
HXLINE( 306)		{
HXLINE( 306)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 306)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 306)			while((_g < _g1->length)){
HXLINE( 306)				HX_VARI(  ::kha::TimeTask,timeTask) = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 306)				++_g;
HXLINE( 307)				hx::SubEq(timeTask->start,dif);
HXLINE( 308)				hx::SubEq(timeTask->next,dif);
            			}
            		}
HXLINE( 310)		{
HXLINE( 310)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 310)			HX_VARI_NAME( Int,_g2,"_g") = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN( 310)			while((_g11 < _g2)){
HXLINE( 310)				HX_VARI( Int,i) = _g11++;
HXDLIN( 310)				::kha::Scheduler_obj::deltas[i] = (int)0;
            			}
            		}
HXLINE( 311)		::kha::Scheduler_obj::current = (int)0;
HXLINE( 312)		::kha::Scheduler_obj::lastTime = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,resetTime,(void))

Int Scheduler_obj::addBreakableFrameTask( ::Dynamic task,Int priority){
            	HX_STACK_FRAME("kha.Scheduler","addBreakableFrameTask",0x44621e9d,"kha.Scheduler.addBreakableFrameTask","kha/Scheduler.hx",315,0xd275db8e)
            	HX_STACK_ARG(task,"task")
            	HX_STACK_ARG(priority,"priority")
HXLINE( 316)		::kha::Scheduler_obj::frameTasks->push( ::kha::FrameTask_obj::__new(task,priority,++::kha::Scheduler_obj::currentFrameTaskId));
HXLINE( 317)		::kha::Scheduler_obj::frame_tasks_sorted = false;
HXLINE( 318)		return ::kha::Scheduler_obj::currentFrameTaskId;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,addBreakableFrameTask,return )

Int Scheduler_obj::addFrameTask( ::Dynamic task,Int priority){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,task) HXARGC(0)
            		Bool _hx_run(){
            			HX_STACK_FRAME("kha.Scheduler","addFrameTask",0xb36720ee,"kha.Scheduler.addFrameTask","kha/Scheduler.hx",322,0xd275db8e)
HXLINE( 322)			task();
HXDLIN( 322)			return true;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACK_FRAME("kha.Scheduler","addFrameTask",0xb36720ee,"kha.Scheduler.addFrameTask","kha/Scheduler.hx",322,0xd275db8e)
            	HX_STACK_ARG(task,"task")
            	HX_STACK_ARG(priority,"priority")
HXLINE( 322)		return ::kha::Scheduler_obj::addBreakableFrameTask( ::Dynamic(new _hx_Closure_0(task)),priority);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,addFrameTask,return )

void Scheduler_obj::pauseFrameTask(Int id,Bool paused){
            	HX_STACK_FRAME("kha.Scheduler","pauseFrameTask",0xfc4302b9,"kha.Scheduler.pauseFrameTask","kha/Scheduler.hx",326,0xd275db8e)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(paused,"paused")
HXLINE( 326)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 326)		HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 326)		while((_g < _g1->length)){
HXLINE( 326)			HX_VARI(  ::kha::FrameTask,frameTask) = _g1->__get(_g).StaticCast<  ::kha::FrameTask >();
HXDLIN( 326)			++_g;
HXLINE( 327)			Bool _hx_tmp = (frameTask->id == id);
HXDLIN( 327)			if (_hx_tmp) {
HXLINE( 328)				frameTask->paused = paused;
HXLINE( 329)				goto _hx_goto_24;
            			}
            		}
            		_hx_goto_24:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseFrameTask,(void))

void Scheduler_obj::removeFrameTask(Int id){
            	HX_STACK_FRAME("kha.Scheduler","removeFrameTask",0x21b33c11,"kha.Scheduler.removeFrameTask","kha/Scheduler.hx",335,0xd275db8e)
            	HX_STACK_ARG(id,"id")
HXLINE( 335)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 335)		HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 335)		while((_g < _g1->length)){
HXLINE( 335)			HX_VARI(  ::kha::FrameTask,frameTask) = _g1->__get(_g).StaticCast<  ::kha::FrameTask >();
HXDLIN( 335)			++_g;
HXLINE( 336)			Bool _hx_tmp = (frameTask->id == id);
HXDLIN( 336)			if (_hx_tmp) {
HXLINE( 337)				frameTask->active = false;
HXLINE( 338)				goto _hx_goto_25;
            			}
            		}
            		_hx_goto_25:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeFrameTask,(void))

Int Scheduler_obj::generateGroupId(){
            	HX_STACK_FRAME("kha.Scheduler","generateGroupId",0x08ceed28,"kha.Scheduler.generateGroupId","kha/Scheduler.hx",344,0xd275db8e)
HXLINE( 344)		return ++::kha::Scheduler_obj::currentGroupId;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,generateGroupId,return )

Int Scheduler_obj::addBreakableTimeTaskToGroup(Int groupId, ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_STACK_FRAME("kha.Scheduler","addBreakableTimeTaskToGroup",0x55e602bd,"kha.Scheduler.addBreakableTimeTaskToGroup","kha/Scheduler.hx",347,0xd275db8e)
            	HX_STACK_ARG(groupId,"groupId")
            	HX_STACK_ARG(task,"task")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(duration,"duration")
HXLINE( 348)		HX_VARI(  ::kha::TimeTask,t) =  ::kha::TimeTask_obj::__new();
HXLINE( 349)		t->active = true;
HXLINE( 350)		t->task = task;
HXLINE( 351)		t->id = ++::kha::Scheduler_obj::currentTimeTaskId;
HXLINE( 352)		t->groupId = groupId;
HXLINE( 354)		t->start = (::kha::Scheduler_obj::current + start);
HXLINE( 355)		t->period = (int)0;
HXLINE( 356)		if ((period != (int)0)) {
HXLINE( 356)			t->period = period;
            		}
HXLINE( 357)		t->duration = (int)0;
HXLINE( 358)		if ((duration != (int)0)) {
HXLINE( 358)			t->duration = (t->start + duration);
            		}
HXLINE( 360)		t->next = t->start;
HXLINE( 361)		::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,t);
HXLINE( 362)		return t->id;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Scheduler_obj,addBreakableTimeTaskToGroup,return )

Int Scheduler_obj::addTimeTaskToGroup(Int groupId, ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,task) HXARGC(0)
            		Bool _hx_run(){
            			HX_STACK_FRAME("kha.Scheduler","addTimeTaskToGroup",0xa9e317ce,"kha.Scheduler.addTimeTaskToGroup","kha/Scheduler.hx",366,0xd275db8e)
HXLINE( 366)			task();
HXDLIN( 366)			return true;
            		}
            		HX_END_LOCAL_FUNC0(return)

Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_STACK_FRAME("kha.Scheduler","addTimeTaskToGroup",0xa9e317ce,"kha.Scheduler.addTimeTaskToGroup","kha/Scheduler.hx",366,0xd275db8e)
            	HX_STACK_ARG(groupId,"groupId")
            	HX_STACK_ARG(task,"task")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(duration,"duration")
HXLINE( 366)		return ::kha::Scheduler_obj::addBreakableTimeTaskToGroup(groupId, ::Dynamic(new _hx_Closure_0(task)),start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Scheduler_obj,addTimeTaskToGroup,return )

Int Scheduler_obj::addBreakableTimeTask( ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_STACK_FRAME("kha.Scheduler","addBreakableTimeTask",0x71683bc7,"kha.Scheduler.addBreakableTimeTask","kha/Scheduler.hx",370,0xd275db8e)
            	HX_STACK_ARG(task,"task")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(duration,"duration")
HXLINE( 370)		return ::kha::Scheduler_obj::addBreakableTimeTaskToGroup((int)0,task,start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Scheduler_obj,addBreakableTimeTask,return )

Int Scheduler_obj::addTimeTask( ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_STACK_FRAME("kha.Scheduler","addTimeTask",0x71e7ae96,"kha.Scheduler.addTimeTask","kha/Scheduler.hx",374,0xd275db8e)
            	HX_STACK_ARG(task,"task")
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(duration,"duration")
HXLINE( 374)		return ::kha::Scheduler_obj::addTimeTaskToGroup((int)0,task,start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Scheduler_obj,addTimeTask,return )

 ::kha::TimeTask Scheduler_obj::getTimeTask(Int id){
            	HX_STACK_FRAME("kha.Scheduler","getTimeTask",0x667f3a0b,"kha.Scheduler.getTimeTask","kha/Scheduler.hx",377,0xd275db8e)
            	HX_STACK_ARG(id,"id")
HXLINE( 378)		Bool _hx_tmp;
HXDLIN( 378)		Bool _hx_tmp1 = hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask );
HXDLIN( 378)		if (_hx_tmp1) {
HXLINE( 378)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->id == id);
            		}
            		else {
HXLINE( 378)			_hx_tmp = false;
            		}
HXDLIN( 378)		if (_hx_tmp) {
HXLINE( 378)			return ::kha::Scheduler_obj::activeTimeTask;
            		}
HXLINE( 379)		{
HXLINE( 379)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 379)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 379)			while((_g < _g1->length)){
HXLINE( 379)				HX_VARI(  ::kha::TimeTask,timeTask) = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 379)				++_g;
HXLINE( 380)				if ((timeTask->id == id)) {
HXLINE( 381)					return timeTask;
            				}
            			}
            		}
HXLINE( 384)		{
HXLINE( 384)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 384)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::kha::Scheduler_obj::pausedTimeTasks;
HXDLIN( 384)			while((_g2 < _g11->length)){
HXLINE( 384)				HX_VARI_NAME(  ::kha::TimeTask,timeTask1,"timeTask") = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 384)				++_g2;
HXLINE( 385)				if ((timeTask1->id == id)) {
HXLINE( 386)					return timeTask1;
            				}
            			}
            		}
HXLINE( 389)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,getTimeTask,return )

void Scheduler_obj::pauseTimeTask(Int id,Bool paused){
            	HX_STACK_FRAME("kha.Scheduler","pauseTimeTask",0xa3984f2b,"kha.Scheduler.pauseTimeTask","kha/Scheduler.hx",392,0xd275db8e)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(paused,"paused")
HXLINE( 393)		HX_VARI(  ::kha::TimeTask,timeTask) = ::kha::Scheduler_obj::getTimeTask(id);
HXLINE( 394)		Bool _hx_tmp = hx::IsNotNull( timeTask );
HXDLIN( 394)		if (_hx_tmp) {
HXLINE( 395)			::kha::Scheduler_obj::pauseRunningTimeTask(timeTask,paused);
            		}
HXLINE( 397)		Bool _hx_tmp1;
HXDLIN( 397)		Bool _hx_tmp2 = hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask );
HXDLIN( 397)		if (_hx_tmp2) {
HXLINE( 397)			_hx_tmp1 = (::kha::Scheduler_obj::activeTimeTask->id == id);
            		}
            		else {
HXLINE( 397)			_hx_tmp1 = false;
            		}
HXDLIN( 397)		if (_hx_tmp1) {
HXLINE( 398)			::kha::Scheduler_obj::activeTimeTask->paused = paused;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseTimeTask,(void))

void Scheduler_obj::pauseRunningTimeTask( ::kha::TimeTask timeTask,Bool paused){
            	HX_STACK_FRAME("kha.Scheduler","pauseRunningTimeTask",0x8966fef8,"kha.Scheduler.pauseRunningTimeTask","kha/Scheduler.hx",402,0xd275db8e)
            	HX_STACK_ARG(timeTask,"timeTask")
            	HX_STACK_ARG(paused,"paused")
HXLINE( 403)		timeTask->paused = paused;
HXLINE( 404)		if (paused) {
HXLINE( 405)			::kha::Scheduler_obj::timeTasks->remove(timeTask);
HXLINE( 406)			::kha::Scheduler_obj::pausedTimeTasks->push(timeTask);
            		}
            		else {
HXLINE( 409)			::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,timeTask);
HXLINE( 410)			::kha::Scheduler_obj::pausedTimeTasks->remove(timeTask);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseRunningTimeTask,(void))

void Scheduler_obj::pauseTimeTasks(Int groupId,Bool paused){
            	HX_STACK_FRAME("kha.Scheduler","pauseTimeTasks",0x81acf6e8,"kha.Scheduler.pauseTimeTasks","kha/Scheduler.hx",414,0xd275db8e)
            	HX_STACK_ARG(groupId,"groupId")
            	HX_STACK_ARG(paused,"paused")
HXLINE( 415)		{
HXLINE( 415)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 415)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 415)			while((_g < _g1->length)){
HXLINE( 415)				HX_VARI(  ::kha::TimeTask,timeTask) = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 415)				++_g;
HXLINE( 416)				Bool _hx_tmp = (timeTask->groupId == groupId);
HXDLIN( 416)				if (_hx_tmp) {
HXLINE( 417)					::kha::Scheduler_obj::pauseRunningTimeTask(timeTask,paused);
            				}
            			}
            		}
HXLINE( 420)		Bool _hx_tmp1;
HXDLIN( 420)		Bool _hx_tmp2 = hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask );
HXDLIN( 420)		if (_hx_tmp2) {
HXLINE( 420)			_hx_tmp1 = (::kha::Scheduler_obj::activeTimeTask->groupId == groupId);
            		}
            		else {
HXLINE( 420)			_hx_tmp1 = false;
            		}
HXDLIN( 420)		if (_hx_tmp1) {
HXLINE( 421)			::kha::Scheduler_obj::activeTimeTask->paused = paused;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseTimeTasks,(void))

void Scheduler_obj::removeTimeTask(Int id){
            	HX_STACK_FRAME("kha.Scheduler","removeTimeTask",0x701a88d3,"kha.Scheduler.removeTimeTask","kha/Scheduler.hx",425,0xd275db8e)
            	HX_STACK_ARG(id,"id")
HXLINE( 426)		HX_VARI(  ::kha::TimeTask,timeTask) = ::kha::Scheduler_obj::getTimeTask(id);
HXLINE( 427)		Bool _hx_tmp = hx::IsNotNull( timeTask );
HXDLIN( 427)		if (_hx_tmp) {
HXLINE( 428)			timeTask->active = false;
HXLINE( 429)			::kha::Scheduler_obj::timeTasks->remove(timeTask);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeTimeTask,(void))

void Scheduler_obj::removeTimeTasks(Int groupId){
            	HX_STACK_FRAME("kha.Scheduler","removeTimeTasks",0xa71d3040,"kha.Scheduler.removeTimeTasks","kha/Scheduler.hx",433,0xd275db8e)
            	HX_STACK_ARG(groupId,"groupId")
HXLINE( 434)		{
HXLINE( 434)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 434)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 434)			while((_g < _g1->length)){
HXLINE( 434)				HX_VARI(  ::kha::TimeTask,timeTask) = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 434)				++_g;
HXLINE( 435)				Bool _hx_tmp = (timeTask->groupId == groupId);
HXDLIN( 435)				if (_hx_tmp) {
HXLINE( 436)					timeTask->active = false;
HXLINE( 437)					::kha::Scheduler_obj::timeTasksScratchpad->push(timeTask);
            				}
            			}
            		}
HXLINE( 441)		{
HXLINE( 441)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 441)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 441)			while((_g2 < _g11->length)){
HXLINE( 441)				HX_VARI_NAME(  ::kha::TimeTask,timeTask1,"timeTask") = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 441)				++_g2;
HXLINE( 442)				::kha::Scheduler_obj::timeTasks->remove(timeTask1);
            			}
            		}
HXLINE( 444)		while((::kha::Scheduler_obj::timeTasksScratchpad->length > (int)0)){
HXLINE( 445)			 ::kha::TimeTask _hx_tmp1 = ::kha::Scheduler_obj::timeTasksScratchpad->__get((int)0).StaticCast<  ::kha::TimeTask >();
HXDLIN( 445)			::kha::Scheduler_obj::timeTasksScratchpad->remove(_hx_tmp1);
            		}
HXLINE( 448)		Bool _hx_tmp2;
HXDLIN( 448)		Bool _hx_tmp3 = hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask );
HXDLIN( 448)		if (_hx_tmp3) {
HXLINE( 448)			_hx_tmp2 = (::kha::Scheduler_obj::activeTimeTask->groupId == groupId);
            		}
            		else {
HXLINE( 448)			_hx_tmp2 = false;
            		}
HXDLIN( 448)		if (_hx_tmp2) {
HXLINE( 449)			::kha::Scheduler_obj::activeTimeTask->active = false;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeTimeTasks,(void))

Int Scheduler_obj::numTasksInSchedule(){
            	HX_STACK_FRAME("kha.Scheduler","numTasksInSchedule",0x5bfae3e1,"kha.Scheduler.numTasksInSchedule","kha/Scheduler.hx",454,0xd275db8e)
HXLINE( 454)		return (::kha::Scheduler_obj::timeTasks->length + ::kha::Scheduler_obj::frameTasks->length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,numTasksInSchedule,return )

void Scheduler_obj::insertSorted(::Array< ::Dynamic> list, ::kha::TimeTask task){
            	HX_STACK_FRAME("kha.Scheduler","insertSorted",0x20607c93,"kha.Scheduler.insertSorted","kha/Scheduler.hx",457,0xd275db8e)
            	HX_STACK_ARG(list,"list")
            	HX_STACK_ARG(task,"task")
HXLINE( 458)		{
HXLINE( 458)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 458)			HX_VARI( Int,_g) = list->length;
HXDLIN( 458)			while((_g1 < _g)){
HXLINE( 458)				HX_VARI( Int,i) = _g1++;
HXLINE( 459)				Bool _hx_tmp = (list->__get(i).StaticCast<  ::kha::TimeTask >()->next > task->next);
HXDLIN( 459)				if (_hx_tmp) {
HXLINE( 460)					list->insert(i,task);
HXLINE( 461)					return;
            				}
            			}
            		}
HXLINE( 464)		list->push(task);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,insertSorted,(void))

void Scheduler_obj::sortFrameTasks(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run( ::kha::FrameTask a, ::kha::FrameTask b){
            			HX_STACK_FRAME("kha.Scheduler","sortFrameTasks",0xfb8e299c,"kha.Scheduler.sortFrameTasks","kha/Scheduler.hx",469,0xd275db8e)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 469)			if ((a->priority > b->priority)) {
HXLINE( 469)				return (int)1;
            			}
            			else {
HXLINE( 469)				if ((a->priority < b->priority)) {
HXLINE( 469)					return (int)-1;
            				}
            				else {
HXLINE( 469)					return (int)0;
            				}
            			}
HXDLIN( 469)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("kha.Scheduler","sortFrameTasks",0xfb8e299c,"kha.Scheduler.sortFrameTasks","kha/Scheduler.hx",467,0xd275db8e)
HXLINE( 468)		if (::kha::Scheduler_obj::frame_tasks_sorted) {
HXLINE( 468)			return;
            		}
HXLINE( 469)		::kha::Scheduler_obj::frameTasks->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 470)		::kha::Scheduler_obj::frame_tasks_sorted = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,sortFrameTasks,(void))


Scheduler_obj::Scheduler_obj()
{
}

bool Scheduler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"back") ) { outValue = back_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"time") ) { outValue = time_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vsync") ) { outValue = vsync; return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltas") ) { outValue = deltas; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { outValue = current; return true; }
		if (HX_FIELD_EQ(inName,"stopped") ) { outValue = stopped; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { outValue = lastTime; return true; }
		if (HX_FIELD_EQ(inName,"onedifhz") ) { outValue = onedifhz; return true; }
		if (HX_FIELD_EQ(inName,"realTime") ) { outValue = realTime_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeTasks") ) { outValue = timeTasks; return true; }
		if (HX_FIELD_EQ(inName,"DIF_COUNT") ) { outValue = DIF_COUNT; return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = startTime; return true; }
		if (HX_FIELD_EQ(inName,"isStopped") ) { outValue = isStopped_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetTime") ) { outValue = resetTime_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTasks") ) { outValue = frameTasks; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addTimeTask") ) { outValue = addTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTimeTask") ) { outValue = getTimeTask_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframetime") ) { outValue = maxframetime; return true; }
		if (HX_FIELD_EQ(inName,"executeFrame") ) { outValue = executeFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addFrameTask") ) { outValue = addFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insertSorted") ) { outValue = insertSorted_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toDeleteFrame") ) { outValue = toDeleteFrame; return true; }
		if (HX_FIELD_EQ(inName,"warpTimeTasks") ) { outValue = warpTimeTasks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseTimeTask") ) { outValue = pauseTimeTask_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentGroupId") ) { outValue = currentGroupId; return true; }
		if (HX_FIELD_EQ(inName,"activeTimeTask") ) { outValue = activeTimeTask; return true; }
		if (HX_FIELD_EQ(inName,"pauseFrameTask") ) { outValue = pauseFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseTimeTasks") ) { outValue = pauseTimeTasks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTimeTask") ) { outValue = removeTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortFrameTasks") ) { outValue = sortFrameTasks_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pausedTimeTasks") ) { outValue = pausedTimeTasks; return true; }
		if (HX_FIELD_EQ(inName,"archiveTimeTask") ) { outValue = archiveTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeFrameTask") ) { outValue = removeFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"generateGroupId") ) { outValue = generateGroupId_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTimeTasks") ) { outValue = removeTimeTasks_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outdatedTimeTasks") ) { outValue = outdatedTimeTasks; return true; }
		if (HX_FIELD_EQ(inName,"currentTimeTaskId") ) { outValue = currentTimeTaskId; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"frame_tasks_sorted") ) { outValue = frame_tasks_sorted; return true; }
		if (HX_FIELD_EQ(inName,"currentFrameTaskId") ) { outValue = currentFrameTaskId; return true; }
		if (HX_FIELD_EQ(inName,"addTimeTaskToGroup") ) { outValue = addTimeTaskToGroup_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numTasksInSchedule") ) { outValue = numTasksInSchedule_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"timeTasksScratchpad") ) { outValue = timeTasksScratchpad; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"addBreakableTimeTask") ) { outValue = addBreakableTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseRunningTimeTask") ) { outValue = pauseRunningTimeTask_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"addBreakableFrameTask") ) { outValue = addBreakableFrameTask_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"addBreakableTimeTaskToGroup") ) { outValue = addBreakableTimeTaskToGroup_dyn(); return true; }
	}
	return false;
}

bool Scheduler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"vsync") ) { vsync=ioValue.Cast< Bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltas") ) { deltas=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"stopped") ) { stopped=ioValue.Cast< Bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { lastTime=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"onedifhz") ) { onedifhz=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeTasks") ) { timeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"DIF_COUNT") ) { DIF_COUNT=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTasks") ) { frameTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframetime") ) { maxframetime=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toDeleteFrame") ) { toDeleteFrame=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentGroupId") ) { currentGroupId=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"activeTimeTask") ) { activeTimeTask=ioValue.Cast<  ::kha::TimeTask >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pausedTimeTasks") ) { pausedTimeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outdatedTimeTasks") ) { outdatedTimeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"currentTimeTaskId") ) { currentTimeTaskId=ioValue.Cast< Int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"frame_tasks_sorted") ) { frame_tasks_sorted=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"currentFrameTaskId") ) { currentFrameTaskId=ioValue.Cast< Int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"timeTasksScratchpad") ) { timeTasksScratchpad=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Scheduler_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Scheduler_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::timeTasks,HX_HCSTRING("timeTasks","\x41","\x72","\xe1","\xbf")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::pausedTimeTasks,HX_HCSTRING("pausedTimeTasks","\xb3","\x8b","\x45","\xb2")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::outdatedTimeTasks,HX_HCSTRING("outdatedTimeTasks","\xf9","\x7d","\xac","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::timeTasksScratchpad,HX_HCSTRING("timeTasksScratchpad","\xfa","\x41","\x1b","\x54")},
	{hx::fsFloat,(void *) &Scheduler_obj::timeWarpSaveTime,HX_HCSTRING("timeWarpSaveTime","\xff","\x83","\x49","\xb7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::frameTasks,HX_HCSTRING("frameTasks","\x21","\xd2","\x16","\xee")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::toDeleteFrame,HX_HCSTRING("toDeleteFrame","\x47","\xaa","\xe4","\x97")},
	{hx::fsFloat,(void *) &Scheduler_obj::current,HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb")},
	{hx::fsFloat,(void *) &Scheduler_obj::lastTime,HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0")},
	{hx::fsBool,(void *) &Scheduler_obj::frame_tasks_sorted,HX_HCSTRING("frame_tasks_sorted","\xa0","\xb7","\x4e","\xb9")},
	{hx::fsBool,(void *) &Scheduler_obj::stopped,HX_HCSTRING("stopped","\x0d","\xd2","\x61","\x43")},
	{hx::fsBool,(void *) &Scheduler_obj::vsync,HX_HCSTRING("vsync","\xd1","\x2d","\xa8","\x3d")},
	{hx::fsFloat,(void *) &Scheduler_obj::onedifhz,HX_HCSTRING("onedifhz","\x6d","\x1e","\xeb","\xe6")},
	{hx::fsInt,(void *) &Scheduler_obj::currentFrameTaskId,HX_HCSTRING("currentFrameTaskId","\xd4","\xca","\x7c","\xdd")},
	{hx::fsInt,(void *) &Scheduler_obj::currentTimeTaskId,HX_HCSTRING("currentTimeTaskId","\x06","\xe4","\x97","\xfc")},
	{hx::fsInt,(void *) &Scheduler_obj::currentGroupId,HX_HCSTRING("currentGroupId","\xc1","\xf5","\x8b","\x94")},
	{hx::fsInt,(void *) &Scheduler_obj::DIF_COUNT,HX_HCSTRING("DIF_COUNT","\xd1","\xab","\x99","\x7a")},
	{hx::fsFloat,(void *) &Scheduler_obj::maxframetime,HX_HCSTRING("maxframetime","\x96","\xdf","\x54","\x45")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &Scheduler_obj::deltas,HX_HCSTRING("deltas","\x7b","\x11","\xe4","\x6a")},
	{hx::fsFloat,(void *) &Scheduler_obj::startTime,HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05")},
	{hx::fsObject /*::kha::TimeTask*/ ,(void *) &Scheduler_obj::activeTimeTask,HX_HCSTRING("activeTimeTask","\xd8","\x75","\xb0","\x05")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Scheduler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scheduler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeTasks,"timeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::pausedTimeTasks,"pausedTimeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::outdatedTimeTasks,"outdatedTimeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeTasksScratchpad,"timeTasksScratchpad");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeWarpSaveTime,"timeWarpSaveTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::frameTasks,"frameTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::toDeleteFrame,"toDeleteFrame");
	HX_MARK_MEMBER_NAME(Scheduler_obj::current,"current");
	HX_MARK_MEMBER_NAME(Scheduler_obj::lastTime,"lastTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::frame_tasks_sorted,"frame_tasks_sorted");
	HX_MARK_MEMBER_NAME(Scheduler_obj::stopped,"stopped");
	HX_MARK_MEMBER_NAME(Scheduler_obj::vsync,"vsync");
	HX_MARK_MEMBER_NAME(Scheduler_obj::onedifhz,"onedifhz");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentFrameTaskId,"currentFrameTaskId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentTimeTaskId,"currentTimeTaskId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentGroupId,"currentGroupId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::DIF_COUNT,"DIF_COUNT");
	HX_MARK_MEMBER_NAME(Scheduler_obj::maxframetime,"maxframetime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::deltas,"deltas");
	HX_MARK_MEMBER_NAME(Scheduler_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::activeTimeTask,"activeTimeTask");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Scheduler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scheduler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeTasks,"timeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::pausedTimeTasks,"pausedTimeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::outdatedTimeTasks,"outdatedTimeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeTasksScratchpad,"timeTasksScratchpad");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeWarpSaveTime,"timeWarpSaveTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::frameTasks,"frameTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::toDeleteFrame,"toDeleteFrame");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::current,"current");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::lastTime,"lastTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::frame_tasks_sorted,"frame_tasks_sorted");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::stopped,"stopped");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::vsync,"vsync");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::onedifhz,"onedifhz");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentFrameTaskId,"currentFrameTaskId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentTimeTaskId,"currentTimeTaskId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentGroupId,"currentGroupId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::DIF_COUNT,"DIF_COUNT");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::maxframetime,"maxframetime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::deltas,"deltas");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::activeTimeTask,"activeTimeTask");
};

#endif

hx::Class Scheduler_obj::__mClass;

static ::String Scheduler_obj_sStaticFields[] = {
	HX_HCSTRING("timeTasks","\x41","\x72","\xe1","\xbf"),
	HX_HCSTRING("pausedTimeTasks","\xb3","\x8b","\x45","\xb2"),
	HX_HCSTRING("outdatedTimeTasks","\xf9","\x7d","\xac","\xed"),
	HX_HCSTRING("timeTasksScratchpad","\xfa","\x41","\x1b","\x54"),
	HX_HCSTRING("timeWarpSaveTime","\xff","\x83","\x49","\xb7"),
	HX_HCSTRING("frameTasks","\x21","\xd2","\x16","\xee"),
	HX_HCSTRING("toDeleteFrame","\x47","\xaa","\xe4","\x97"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0"),
	HX_HCSTRING("frame_tasks_sorted","\xa0","\xb7","\x4e","\xb9"),
	HX_HCSTRING("stopped","\x0d","\xd2","\x61","\x43"),
	HX_HCSTRING("vsync","\xd1","\x2d","\xa8","\x3d"),
	HX_HCSTRING("onedifhz","\x6d","\x1e","\xeb","\xe6"),
	HX_HCSTRING("currentFrameTaskId","\xd4","\xca","\x7c","\xdd"),
	HX_HCSTRING("currentTimeTaskId","\x06","\xe4","\x97","\xfc"),
	HX_HCSTRING("currentGroupId","\xc1","\xf5","\x8b","\x94"),
	HX_HCSTRING("DIF_COUNT","\xd1","\xab","\x99","\x7a"),
	HX_HCSTRING("maxframetime","\x96","\xdf","\x54","\x45"),
	HX_HCSTRING("deltas","\x7b","\x11","\xe4","\x6a"),
	HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"),
	HX_HCSTRING("activeTimeTask","\xd8","\x75","\xb0","\x05"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("isStopped","\x43","\x4f","\x60","\x47"),
	HX_HCSTRING("warpTimeTasks","\xd9","\x66","\x57","\x3b"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("executeFrame","\xb8","\xbd","\x09","\xc1"),
	HX_HCSTRING("archiveTimeTask","\xd4","\x63","\x91","\x51"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("realTime","\x8b","\x4a","\x29","\x10"),
	HX_HCSTRING("resetTime","\x7c","\xd5","\xe8","\x92"),
	HX_HCSTRING("addBreakableFrameTask","\x7a","\x2f","\x37","\xf1"),
	HX_HCSTRING("addFrameTask","\xb1","\x9f","\xcb","\x39"),
	HX_HCSTRING("pauseFrameTask","\x3c","\xf8","\xd6","\x43"),
	HX_HCSTRING("removeFrameTask","\x2e","\x19","\x96","\x7b"),
	HX_HCSTRING("generateGroupId","\x45","\xca","\xb1","\x62"),
	HX_HCSTRING("addBreakableTimeTaskToGroup","\x5a","\x97","\xee","\x0d"),
	HX_HCSTRING("addTimeTaskToGroup","\xd1","\x8a","\x93","\x50"),
	HX_HCSTRING("addBreakableTimeTask","\x8a","\xb5","\x5d","\x7b"),
	HX_HCSTRING("addTimeTask","\x33","\x79","\xb4","\x1e"),
	HX_HCSTRING("getTimeTask","\xa8","\x04","\x4c","\x13"),
	HX_HCSTRING("pauseTimeTask","\x08","\xbb","\x22","\xb5"),
	HX_HCSTRING("pauseRunningTimeTask","\xbb","\x78","\x5c","\x93"),
	HX_HCSTRING("pauseTimeTasks","\x6b","\xec","\x40","\xc9"),
	HX_HCSTRING("removeTimeTask","\x56","\x7e","\xae","\xb7"),
	HX_HCSTRING("removeTimeTasks","\x5d","\x0d","\x00","\x01"),
	HX_HCSTRING("numTasksInSchedule","\xe4","\x56","\xab","\x02"),
	HX_HCSTRING("insertSorted","\x56","\xfb","\xc4","\xa6"),
	HX_HCSTRING("sortFrameTasks","\x1f","\x1f","\x22","\x43"),
	::String(null())
};

void Scheduler_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Scheduler","\x51","\x4d","\x26","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Scheduler_obj::__GetStatic;
	__mClass->mSetStaticField = &Scheduler_obj::__SetStatic;
	__mClass->mMarkFunc = Scheduler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Scheduler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Scheduler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Scheduler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scheduler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scheduler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Scheduler_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",42,0xd275db8e)
HXLINE(  42)		timeWarpSaveTime = ((Float)1.0);
            	}
{
            	HX_STACK_FRAME("kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",60,0xd275db8e)
HXLINE(  60)		DIF_COUNT = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",61,0xd275db8e)
HXLINE(  61)		maxframetime = ((Float)0.5);
            	}
{
            	HX_STACK_FRAME("kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",65,0xd275db8e)
HXLINE(  65)		startTime = ((Float)0);
            	}
{
            	HX_STACK_FRAME("kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",67,0xd275db8e)
HXLINE(  67)		activeTimeTask = null();
            	}
}

} // end namespace kha
