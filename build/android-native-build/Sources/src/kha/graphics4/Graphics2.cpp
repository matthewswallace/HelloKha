// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "Kore/Simd/float32x4.h"
#include "float32array.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Font
#include <kha/Font.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_Video
#include <kha/Video.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32Array
#include <kha/arrays/Float32Array.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_ImageScaleQuality
#include <kha/graphics2/ImageScaleQuality.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextShaderPainter
#include <kha/graphics4/TextShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix3
#include <kha/math/FastMatrix3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector2
#include <kha/math/FastVector2.h>
#endif

namespace kha{
namespace graphics4{

void Graphics2_obj::__construct(::Dynamic canvas){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","new",0x1f2768ea,"kha.graphics4.Graphics2.new","kha/graphics4/Graphics2.hx",792,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(canvas,"canvas")
HXLINE(1023)		this->myMipmapScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE(1011)		this->myImageScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE( 804)		super::__construct();
HXLINE( 805)		this->set_color(::kha::_Color::Color_Impl__obj::White);
HXLINE( 806)		this->canvas = canvas;
HXLINE( 807)		this->g =  ::Dynamic(canvas->__Field(HX_("get_g4",36,f1,2f,a3),hx::paccDynamic))();
HXLINE( 808)		this->imagePainter =  ::kha::graphics4::ImageShaderPainter_obj::__new(this->g);
HXLINE( 809)		this->coloredPainter =  ::kha::graphics4::ColoredShaderPainter_obj::__new(this->g);
HXLINE( 810)		this->textPainter =  ::kha::graphics4::TextShaderPainter_obj::__new(this->g);
HXLINE( 811)		this->textPainter->fontSize = this->get_fontSize();
HXLINE( 812)		this->setProjection();
HXLINE( 814)		Bool _hx_tmp = hx::IsNull( ::kha::graphics4::Graphics2_obj::videoPipeline );
HXDLIN( 814)		if (_hx_tmp) {
HXLINE( 815)			::kha::graphics4::Graphics2_obj::videoPipeline =  ::kha::graphics4::PipelineState_obj::__new();
HXLINE( 816)			::kha::graphics4::Graphics2_obj::videoPipeline->fragmentShader = ::kha::Shaders_obj::painter_video_frag;
HXLINE( 817)			::kha::graphics4::Graphics2_obj::videoPipeline->vertexShader = ::kha::Shaders_obj::painter_video_vert;
HXLINE( 819)			HX_VARI(  ::kha::graphics4::VertexStructure,structure) =  ::kha::graphics4::VertexStructure_obj::__new();
HXLINE( 820)			structure->add(HX_("vertexPosition",2d,3c,14,50),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE( 821)			structure->add(HX_("texPosition",b0,79,ff,c7),::kha::graphics4::VertexData_obj::Float2_dyn());
HXLINE( 822)			structure->add(HX_("vertexColor",5f,3b,98,5e),::kha::graphics4::VertexData_obj::Float4_dyn());
HXLINE( 823)			::kha::graphics4::Graphics2_obj::videoPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE( 825)			::kha::graphics4::Graphics2_obj::videoPipeline->compile();
            		}
            	}

Dynamic Graphics2_obj::__CreateEmpty() { return new Graphics2_obj; }

hx::ObjectPtr< Graphics2_obj > Graphics2_obj::__new(::Dynamic canvas)
{
	hx::ObjectPtr< Graphics2_obj > _hx_result = new Graphics2_obj();
	_hx_result->__construct(canvas);
	return _hx_result;
}

Dynamic Graphics2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics2_obj > _hx_result = new Graphics2_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Graphics2_obj::setProjection(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","setProjection",0xf22b2fdb,"kha.graphics4.Graphics2.setProjection","kha/graphics4/Graphics2.hx",840,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 841)		HX_VARI( Int,width) = ( (Int)( ::Dynamic(this->canvas->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic))()) );
HXLINE( 842)		HX_VARI( Int,height) = ( (Int)( ::Dynamic(this->canvas->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic))()) );
HXLINE( 843)		Bool _hx_tmp = ::Std_obj::is(this->canvas,hx::ClassOf< ::kha::Framebuffer >());
HXDLIN( 843)		if (_hx_tmp) {
HXLINE( 844)			this->projectionMatrix = ::kha::math::FastMatrix4_obj::orthogonalProjection((int)0,width,height,(int)0,((Float)0.1),(int)1000);
            		}
            		else {
HXLINE( 846)			if (!(::kha::Image_obj::get_nonPow2Supported())) {
HXLINE( 847)				width = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(width);
HXLINE( 848)				height = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(height);
            			}
HXLINE( 850)			Bool _hx_tmp1 = ::kha::graphics4::Graphics_obj::renderTargetsInvertedY(this->g);
HXDLIN( 850)			if (_hx_tmp1) {
HXLINE( 851)				this->projectionMatrix = ::kha::math::FastMatrix4_obj::orthogonalProjection((int)0,width,(int)0,height,((Float)0.1),(int)1000);
            			}
            			else {
HXLINE( 853)				this->projectionMatrix = ::kha::math::FastMatrix4_obj::orthogonalProjection((int)0,width,height,(int)0,((Float)0.1),(int)1000);
            			}
            		}
HXLINE( 856)		this->imagePainter->setProjection(this->projectionMatrix);
HXLINE( 857)		this->coloredPainter->setProjection(this->projectionMatrix);
HXLINE( 858)		this->textPainter->setProjection(this->projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,setProjection,(void))

void Graphics2_obj::drawImage( ::kha::Image img,float x,float y){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","drawImage",0x2d9bf0c1,"kha.graphics4.Graphics2.drawImage","kha/graphics4/Graphics2.hx",862,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(img,"img")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 863)		{
HXLINE( 863)			HX_VARI(  ::kha::graphics4::ColoredShaderPainter,_this) = this->coloredPainter;
HXDLIN( 863)			Bool _hx_tmp = (_this->triangleBufferIndex > (int)0);
HXDLIN( 863)			if (_hx_tmp) {
HXLINE( 863)				_this->drawTriBuffer(false);
            			}
HXDLIN( 863)			Bool _hx_tmp1 = (_this->bufferIndex > (int)0);
HXDLIN( 863)			if (_hx_tmp1) {
HXLINE( 863)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 864)		this->textPainter->end();
HXLINE( 865)		Int _hx_tmp2 = img->get_width();
HXDLIN( 865)		HX_VARI( float,xw) = (x + _hx_tmp2);
HXLINE( 866)		Int _hx_tmp3 = img->get_height();
HXDLIN( 866)		HX_VARI( float,yh) = (y + _hx_tmp3);
HXLINE( 868)		 ::Kore::float32x4 xx = Kore::load(x,x,xw,xw);
HXLINE( 869)		 ::Kore::float32x4 yy = Kore::load(yh,y,y,yh);
HXLINE( 871)		Int _hx_tmp4 = (this->transformations->length - (int)1);
HXDLIN( 871)		 ::Kore::float32x4 _00 = Kore::loadAll(this->transformations->__get(_hx_tmp4).StaticCast<  ::kha::math::FastMatrix3 >()->_00);
HXLINE( 872)		Int _hx_tmp5 = (this->transformations->length - (int)1);
HXDLIN( 872)		 ::Kore::float32x4 _01 = Kore::loadAll(this->transformations->__get(_hx_tmp5).StaticCast<  ::kha::math::FastMatrix3 >()->_01);
HXLINE( 873)		Int _hx_tmp6 = (this->transformations->length - (int)1);
HXDLIN( 873)		 ::Kore::float32x4 _02 = Kore::loadAll(this->transformations->__get(_hx_tmp6).StaticCast<  ::kha::math::FastMatrix3 >()->_02);
HXLINE( 874)		Int _hx_tmp7 = (this->transformations->length - (int)1);
HXDLIN( 874)		 ::Kore::float32x4 _10 = Kore::loadAll(this->transformations->__get(_hx_tmp7).StaticCast<  ::kha::math::FastMatrix3 >()->_10);
HXLINE( 875)		Int _hx_tmp8 = (this->transformations->length - (int)1);
HXDLIN( 875)		 ::Kore::float32x4 _11 = Kore::loadAll(this->transformations->__get(_hx_tmp8).StaticCast<  ::kha::math::FastMatrix3 >()->_11);
HXLINE( 876)		Int _hx_tmp9 = (this->transformations->length - (int)1);
HXDLIN( 876)		 ::Kore::float32x4 _12 = Kore::loadAll(this->transformations->__get(_hx_tmp9).StaticCast<  ::kha::math::FastMatrix3 >()->_12);
HXLINE( 877)		Int _hx_tmp10 = (this->transformations->length - (int)1);
HXDLIN( 877)		 ::Kore::float32x4 _20 = Kore::loadAll(this->transformations->__get(_hx_tmp10).StaticCast<  ::kha::math::FastMatrix3 >()->_20);
HXLINE( 878)		Int _hx_tmp11 = (this->transformations->length - (int)1);
HXDLIN( 878)		 ::Kore::float32x4 _21 = Kore::loadAll(this->transformations->__get(_hx_tmp11).StaticCast<  ::kha::math::FastMatrix3 >()->_21);
HXLINE( 879)		Int _hx_tmp12 = (this->transformations->length - (int)1);
HXDLIN( 879)		 ::Kore::float32x4 _22 = Kore::loadAll(this->transformations->__get(_hx_tmp12).StaticCast<  ::kha::math::FastMatrix3 >()->_22);
HXLINE( 882)		 ::Kore::float32x4 _hx_tmp13 = Kore::mul(_02,xx);
HXDLIN( 882)		 ::Kore::float32x4 _hx_tmp14 = Kore::mul(_12,yy);
HXDLIN( 882)		 ::Kore::float32x4 _hx_tmp15 = Kore::add(_hx_tmp13,_hx_tmp14);
HXDLIN( 882)		 ::Kore::float32x4 w = Kore::add(_hx_tmp15,_22);
HXLINE( 883)		 ::Kore::float32x4 _hx_tmp16 = Kore::mul(_00,xx);
HXDLIN( 883)		 ::Kore::float32x4 _hx_tmp17 = Kore::mul(_10,yy);
HXDLIN( 883)		 ::Kore::float32x4 _hx_tmp18 = Kore::add(_hx_tmp16,_hx_tmp17);
HXDLIN( 883)		 ::Kore::float32x4 _hx_tmp19 = Kore::add(_hx_tmp18,_20);
HXDLIN( 883)		 ::Kore::float32x4 px = Kore::div(_hx_tmp19,w);
HXLINE( 884)		 ::Kore::float32x4 _hx_tmp20 = Kore::mul(_01,xx);
HXDLIN( 884)		 ::Kore::float32x4 _hx_tmp21 = Kore::mul(_11,yy);
HXDLIN( 884)		 ::Kore::float32x4 _hx_tmp22 = Kore::add(_hx_tmp20,_hx_tmp21);
HXDLIN( 884)		 ::Kore::float32x4 _hx_tmp23 = Kore::add(_hx_tmp22,_21);
HXDLIN( 884)		 ::Kore::float32x4 py = Kore::div(_hx_tmp23,w);
HXLINE( 886)		{
HXLINE( 886)			HX_VARI_NAME(  ::kha::graphics4::ImageShaderPainter,_this1,"_this") = this->imagePainter;
HXDLIN( 886)			float bottomleftx = Kore::get(px,(int)0);
HXDLIN( 886)			float bottomlefty = Kore::get(py,(int)0);
HXDLIN( 886)			float topleftx = Kore::get(px,(int)1);
HXDLIN( 886)			float toplefty = Kore::get(py,(int)1);
HXDLIN( 886)			float toprightx = Kore::get(px,(int)2);
HXDLIN( 886)			float toprighty = Kore::get(py,(int)2);
HXDLIN( 886)			float bottomrightx = Kore::get(px,(int)3);
HXDLIN( 886)			float bottomrighty = Kore::get(py,(int)3);
HXDLIN( 886)			float opacity = this->get_opacity();
HXDLIN( 886)			HX_VARI( Int,color) = this->get_color();
HXDLIN( 886)			Bool _hx_tmp24;
HXDLIN( 886)			if (((_this1->bufferIndex + (int)1) < ::kha::graphics4::ImageShaderPainter_obj::bufferSize)) {
HXLINE( 886)				Bool _hx_tmp25 = hx::IsNotNull( _this1->lastTexture );
HXDLIN( 886)				if (_hx_tmp25) {
HXLINE( 886)					_hx_tmp24 = hx::IsNotEq( img,_this1->lastTexture );
            				}
            				else {
HXLINE( 886)					_hx_tmp24 = false;
            				}
            			}
            			else {
HXLINE( 886)				_hx_tmp24 = true;
            			}
HXDLIN( 886)			if (_hx_tmp24) {
HXLINE( 886)				_this1->drawBuffer();
            			}
HXDLIN( 886)			{
HXLINE( 886)				HX_VARI( float,r) = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 886)				HX_VARI( float,g) = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 886)				HX_VARI( float,b) = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 886)				HX_VARI( float,a) = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 886)				HX_VARI( Int,baseIndex) = ((_this1->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)5),r);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)6),g);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)7),b);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)8),a);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)14),r);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)15),g);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)16),b);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)17),a);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)23),r);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)24),g);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)25),b);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)26),a);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)32),r);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)33),g);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)34),b);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex + (int)35),a);
            			}
HXDLIN( 886)			{
HXLINE( 886)				Int _hx_tmp26 = img->get_width();
HXDLIN( 886)				Int _hx_tmp27 = img->get_realWidth();
HXDLIN( 886)				HX_VARI( float,right) = ((Float)_hx_tmp26 / (Float)_hx_tmp27);
HXDLIN( 886)				Int _hx_tmp28 = img->get_height();
HXDLIN( 886)				Int _hx_tmp29 = img->get_realHeight();
HXDLIN( 886)				HX_VARI( float,bottom) = ((Float)_hx_tmp28 / (Float)_hx_tmp29);
HXDLIN( 886)				HX_VARI_NAME( Int,baseIndex1,"baseIndex") = ((_this1->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)3),(int)0);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)4),bottom);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)12),(int)0);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)13),(int)0);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)21),right);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)22),(int)0);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)30),right);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex1 + (int)31),bottom);
            			}
HXDLIN( 886)			{
HXLINE( 886)				HX_VARI_NAME( Int,baseIndex2,"baseIndex") = ((_this1->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 886)				_this1->rectVertices->data.set(baseIndex2,bottomleftx);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)1),bottomlefty);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)2),((Float)-5.0));
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)9),topleftx);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)10),toplefty);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)11),((Float)-5.0));
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)18),toprightx);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)19),toprighty);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)20),((Float)-5.0));
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)27),bottomrightx);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)28),bottomrighty);
HXDLIN( 886)				_this1->rectVertices->data.set((baseIndex2 + (int)29),((Float)-5.0));
            			}
HXDLIN( 886)			++_this1->bufferIndex;
HXDLIN( 886)			_this1->lastTexture = img;
            		}
            	}


void Graphics2_obj::drawScaledSubImage( ::kha::Image img,float sx,float sy,float sw,float sh,float dx,float dy,float dw,float dh){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","drawScaledSubImage",0x67aa184f,"kha.graphics4.Graphics2.drawScaledSubImage","kha/graphics4/Graphics2.hx",903,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(img,"img")
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
            	HX_STACK_ARG(sw,"sw")
            	HX_STACK_ARG(sh,"sh")
            	HX_STACK_ARG(dx,"dx")
            	HX_STACK_ARG(dy,"dy")
            	HX_STACK_ARG(dw,"dw")
            	HX_STACK_ARG(dh,"dh")
HXLINE( 904)		{
HXLINE( 904)			HX_VARI(  ::kha::graphics4::ColoredShaderPainter,_this) = this->coloredPainter;
HXDLIN( 904)			Bool _hx_tmp = (_this->triangleBufferIndex > (int)0);
HXDLIN( 904)			if (_hx_tmp) {
HXLINE( 904)				_this->drawTriBuffer(false);
            			}
HXDLIN( 904)			Bool _hx_tmp1 = (_this->bufferIndex > (int)0);
HXDLIN( 904)			if (_hx_tmp1) {
HXLINE( 904)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 905)		this->textPainter->end();
HXLINE( 906)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this1,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 903)		HX_VARI( float,value_y) = (dy + dh);
HXLINE( 906)		HX_VARI( float,w) = (((_this1->_02 * dx) + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN( 906)		HX_VARI( Float,x) = ((Float)(((_this1->_00 * dx) + (_this1->_10 * value_y)) + _this1->_20) / (Float)w);
HXDLIN( 906)		HX_VARI( Float,y) = ((Float)(((_this1->_01 * dx) + (_this1->_11 * value_y)) + _this1->_21) / (Float)w);
HXLINE( 903)		HX_VARI( float,p1_x) = x;
HXDLIN( 903)		HX_VARI( float,p1_y) = y;
HXLINE( 907)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this2,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 907)		HX_VARI_NAME( float,w1,"w") = (((_this2->_02 * dx) + (_this2->_12 * dy)) + _this2->_22);
HXDLIN( 907)		HX_VARI_NAME( Float,x1,"x") = ((Float)(((_this2->_00 * dx) + (_this2->_10 * dy)) + _this2->_20) / (Float)w1);
HXDLIN( 907)		HX_VARI_NAME( Float,y1,"y") = ((Float)(((_this2->_01 * dx) + (_this2->_11 * dy)) + _this2->_21) / (Float)w1);
HXLINE( 903)		HX_VARI( float,p2_x) = x1;
HXDLIN( 903)		HX_VARI( float,p2_y) = y1;
HXLINE( 908)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this3,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 903)		HX_VARI( float,value_x) = (dx + dw);
HXLINE( 908)		HX_VARI_NAME( float,w2,"w") = (((_this3->_02 * value_x) + (_this3->_12 * dy)) + _this3->_22);
HXDLIN( 908)		HX_VARI_NAME( Float,x2,"x") = ((Float)(((_this3->_00 * value_x) + (_this3->_10 * dy)) + _this3->_20) / (Float)w2);
HXDLIN( 908)		HX_VARI_NAME( Float,y2,"y") = ((Float)(((_this3->_01 * value_x) + (_this3->_11 * dy)) + _this3->_21) / (Float)w2);
HXLINE( 903)		HX_VARI( float,p3_x) = x2;
HXDLIN( 903)		HX_VARI( float,p3_y) = y2;
HXLINE( 909)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this4,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 903)		HX_VARI_NAME( float,value_x1,"value_x") = (dx + dw);
HXDLIN( 903)		HX_VARI_NAME( float,value_y1,"value_y") = (dy + dh);
HXLINE( 909)		HX_VARI_NAME( float,w3,"w") = (((_this4->_02 * value_x1) + (_this4->_12 * value_y1)) + _this4->_22);
HXDLIN( 909)		HX_VARI_NAME( Float,x3,"x") = ((Float)(((_this4->_00 * value_x1) + (_this4->_10 * value_y1)) + _this4->_20) / (Float)w3);
HXDLIN( 909)		HX_VARI_NAME( Float,y3,"y") = ((Float)(((_this4->_01 * value_x1) + (_this4->_11 * value_y1)) + _this4->_21) / (Float)w3);
HXLINE( 903)		HX_VARI( float,p4_x) = x3;
HXDLIN( 903)		HX_VARI( float,p4_y) = y3;
HXLINE( 910)		{
HXLINE( 910)			HX_VARI_NAME(  ::kha::graphics4::ImageShaderPainter,_this5,"_this") = this->imagePainter;
HXDLIN( 910)			float opacity = this->get_opacity();
HXDLIN( 910)			HX_VARI( Int,color) = this->get_color();
HXDLIN( 910)			Bool _hx_tmp2;
HXDLIN( 910)			if (((_this5->bufferIndex + (int)1) < ::kha::graphics4::ImageShaderPainter_obj::bufferSize)) {
HXLINE( 910)				Bool _hx_tmp3 = hx::IsNotNull( _this5->lastTexture );
HXDLIN( 910)				if (_hx_tmp3) {
HXLINE( 910)					_hx_tmp2 = hx::IsNotEq( img,_this5->lastTexture );
            				}
            				else {
HXLINE( 910)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 910)				_hx_tmp2 = true;
            			}
HXDLIN( 910)			if (_hx_tmp2) {
HXLINE( 910)				_this5->drawBuffer();
            			}
HXDLIN( 910)			{
HXLINE( 910)				Int _hx_tmp4 = img->get_realWidth();
HXDLIN( 910)				HX_VARI( float,left) = ((Float)sx / (Float)_hx_tmp4);
HXDLIN( 910)				Int _hx_tmp5 = img->get_realHeight();
HXDLIN( 910)				HX_VARI( float,top) = ((Float)sy / (Float)_hx_tmp5);
HXDLIN( 910)				float _hx_tmp6 = (sx + sw);
HXDLIN( 910)				Int _hx_tmp7 = img->get_realWidth();
HXDLIN( 910)				HX_VARI( float,right) = ((Float)_hx_tmp6 / (Float)_hx_tmp7);
HXDLIN( 910)				float _hx_tmp8 = (sy + sh);
HXDLIN( 910)				Int _hx_tmp9 = img->get_realHeight();
HXDLIN( 910)				HX_VARI( float,bottom) = ((Float)_hx_tmp8 / (Float)_hx_tmp9);
HXDLIN( 910)				HX_VARI( Int,baseIndex) = ((_this5->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)3),left);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)4),bottom);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)12),left);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)13),top);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)21),right);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)22),top);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)30),right);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex + (int)31),bottom);
            			}
HXDLIN( 910)			{
HXLINE( 910)				HX_VARI( float,r) = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 910)				HX_VARI( float,g) = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 910)				HX_VARI( float,b) = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 910)				HX_VARI( float,a) = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 910)				HX_VARI_NAME( Int,baseIndex1,"baseIndex") = ((_this5->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)5),r);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)6),g);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)7),b);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)8),a);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)14),r);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)15),g);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)16),b);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)17),a);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)23),r);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)24),g);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)25),b);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)26),a);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)32),r);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)33),g);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)34),b);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex1 + (int)35),a);
            			}
HXDLIN( 910)			{
HXLINE( 910)				HX_VARI_NAME( Int,baseIndex2,"baseIndex") = ((_this5->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 910)				_this5->rectVertices->data.set(baseIndex2,p1_x);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)1),p1_y);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)2),((Float)-5.0));
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)9),p2_x);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)10),p2_y);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)11),((Float)-5.0));
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)18),p3_x);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)19),p3_y);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)20),((Float)-5.0));
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)27),p4_x);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)28),p4_y);
HXDLIN( 910)				_this5->rectVertices->data.set((baseIndex2 + (int)29),((Float)-5.0));
            			}
HXDLIN( 910)			++_this5->bufferIndex;
HXDLIN( 910)			_this5->lastTexture = img;
            		}
            	}


Int Graphics2_obj::get_color(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","get_color",0x362d69c4,"kha.graphics4.Graphics2.get_color","kha/graphics4/Graphics2.hx",914,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 914)		return this->myColor;
            	}


Int Graphics2_obj::set_color(Int color){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","set_color",0x197e55d0,"kha.graphics4.Graphics2.set_color","kha/graphics4/Graphics2.hx",918,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
HXLINE( 918)		return (this->myColor = color);
            	}


void Graphics2_obj::drawRect(Float x,Float y,Float width,Float height,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(((Float)1.0));
            	HX_STACK_FRAME("kha.graphics4.Graphics2","drawRect",0x10762a7e,"kha.graphics4.Graphics2.drawRect","kha/graphics4/Graphics2.hx",921,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(strength,"strength")
HXLINE( 922)		this->imagePainter->end();
HXLINE( 923)		this->textPainter->end();
HXLINE( 925)		HX_VARI(  ::kha::math::FastMatrix3,_this) = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI( float,value_x) = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI( float,value_y) = (y + ((Float)strength / (Float)(int)2));
HXLINE( 925)		HX_VARI( float,w) = (((_this->_02 * value_x) + (_this->_12 * value_y)) + _this->_22);
HXDLIN( 925)		HX_VARI(  ::kha::math::FastVector2,p1) =  ::kha::math::FastVector2_obj::__new(((Float)(((_this->_00 * value_x) + (_this->_10 * value_y)) + _this->_20) / (Float)w),((Float)(((_this->_01 * value_x) + (_this->_11 * value_y)) + _this->_21) / (Float)w));
HXLINE( 926)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this1,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x1,"value_x") = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y1,"value_y") = (y - ((Float)strength / (Float)(int)2));
HXLINE( 926)		HX_VARI_NAME( float,w1,"w") = (((_this1->_02 * value_x1) + (_this1->_12 * value_y1)) + _this1->_22);
HXDLIN( 926)		HX_VARI(  ::kha::math::FastVector2,p2) =  ::kha::math::FastVector2_obj::__new(((Float)(((_this1->_00 * value_x1) + (_this1->_10 * value_y1)) + _this1->_20) / (Float)w1),((Float)(((_this1->_01 * value_x1) + (_this1->_11 * value_y1)) + _this1->_21) / (Float)w1));
HXLINE( 927)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this2,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x2,"value_x") = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y2,"value_y") = (y - ((Float)strength / (Float)(int)2));
HXLINE( 927)		HX_VARI_NAME( float,w2,"w") = (((_this2->_02 * value_x2) + (_this2->_12 * value_y2)) + _this2->_22);
HXDLIN( 927)		HX_VARI(  ::kha::math::FastVector2,p3) =  ::kha::math::FastVector2_obj::__new(((Float)(((_this2->_00 * value_x2) + (_this2->_10 * value_y2)) + _this2->_20) / (Float)w2),((Float)(((_this2->_01 * value_x2) + (_this2->_11 * value_y2)) + _this2->_21) / (Float)w2));
HXLINE( 928)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this3,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x3,"value_x") = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y3,"value_y") = (y + ((Float)strength / (Float)(int)2));
HXLINE( 928)		HX_VARI_NAME( float,w3,"w") = (((_this3->_02 * value_x3) + (_this3->_12 * value_y3)) + _this3->_22);
HXDLIN( 928)		HX_VARI(  ::kha::math::FastVector2,p4) =  ::kha::math::FastVector2_obj::__new(((Float)(((_this3->_00 * value_x3) + (_this3->_10 * value_y3)) + _this3->_20) / (Float)w3),((Float)(((_this3->_01 * value_x3) + (_this3->_11 * value_y3)) + _this3->_21) / (Float)w3));
HXLINE( 929)		Float _hx_tmp = this->get_opacity();
HXDLIN( 929)		Int _hx_tmp1 = this->get_color();
HXDLIN( 929)		this->coloredPainter->fillRect(_hx_tmp,_hx_tmp1,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
HXLINE( 931)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this4,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x4,"value_x") = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y4,"value_y") = ((y + height) + ((Float)strength / (Float)(int)2));
HXLINE( 931)		HX_VARI_NAME( float,w4,"w") = (((_this4->_02 * value_x4) + (_this4->_12 * value_y4)) + _this4->_22);
HXDLIN( 931)		p1 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this4->_00 * value_x4) + (_this4->_10 * value_y4)) + _this4->_20) / (Float)w4),((Float)(((_this4->_01 * value_x4) + (_this4->_11 * value_y4)) + _this4->_21) / (Float)w4));
HXLINE( 932)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this5,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x5,"value_x") = (x + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y5,"value_y") = (y - ((Float)strength / (Float)(int)2));
HXLINE( 932)		HX_VARI_NAME( float,w5,"w") = (((_this5->_02 * value_x5) + (_this5->_12 * value_y5)) + _this5->_22);
HXDLIN( 932)		p3 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this5->_00 * value_x5) + (_this5->_10 * value_y5)) + _this5->_20) / (Float)w5),((Float)(((_this5->_01 * value_x5) + (_this5->_11 * value_y5)) + _this5->_21) / (Float)w5));
HXLINE( 933)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this6,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x6,"value_x") = (x + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y6,"value_y") = ((y + height) + ((Float)strength / (Float)(int)2));
HXLINE( 933)		HX_VARI_NAME( float,w6,"w") = (((_this6->_02 * value_x6) + (_this6->_12 * value_y6)) + _this6->_22);
HXDLIN( 933)		p4 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this6->_00 * value_x6) + (_this6->_10 * value_y6)) + _this6->_20) / (Float)w6),((Float)(((_this6->_01 * value_x6) + (_this6->_11 * value_y6)) + _this6->_21) / (Float)w6));
HXLINE( 934)		Float _hx_tmp2 = this->get_opacity();
HXDLIN( 934)		Int _hx_tmp3 = this->get_color();
HXDLIN( 934)		this->coloredPainter->fillRect(_hx_tmp2,_hx_tmp3,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
HXLINE( 936)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this7,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x7,"value_x") = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y7,"value_y") = ((y + height) - ((Float)strength / (Float)(int)2));
HXLINE( 936)		HX_VARI_NAME( float,w7,"w") = (((_this7->_02 * value_x7) + (_this7->_12 * value_y7)) + _this7->_22);
HXDLIN( 936)		p2 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this7->_00 * value_x7) + (_this7->_10 * value_y7)) + _this7->_20) / (Float)w7),((Float)(((_this7->_01 * value_x7) + (_this7->_11 * value_y7)) + _this7->_21) / (Float)w7));
HXLINE( 937)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this8,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x8,"value_x") = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y8,"value_y") = ((y + height) - ((Float)strength / (Float)(int)2));
HXLINE( 937)		HX_VARI_NAME( float,w8,"w") = (((_this8->_02 * value_x8) + (_this8->_12 * value_y8)) + _this8->_22);
HXDLIN( 937)		p3 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this8->_00 * value_x8) + (_this8->_10 * value_y8)) + _this8->_20) / (Float)w8),((Float)(((_this8->_01 * value_x8) + (_this8->_11 * value_y8)) + _this8->_21) / (Float)w8));
HXLINE( 938)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this9,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x9,"value_x") = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y9,"value_y") = ((y + height) + ((Float)strength / (Float)(int)2));
HXLINE( 938)		HX_VARI_NAME( float,w9,"w") = (((_this9->_02 * value_x9) + (_this9->_12 * value_y9)) + _this9->_22);
HXDLIN( 938)		p4 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this9->_00 * value_x9) + (_this9->_10 * value_y9)) + _this9->_20) / (Float)w9),((Float)(((_this9->_01 * value_x9) + (_this9->_11 * value_y9)) + _this9->_21) / (Float)w9));
HXLINE( 939)		Float _hx_tmp4 = this->get_opacity();
HXDLIN( 939)		Int _hx_tmp5 = this->get_color();
HXDLIN( 939)		this->coloredPainter->fillRect(_hx_tmp4,_hx_tmp5,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
HXLINE( 941)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this10,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x10,"value_x") = ((x + width) - ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y10,"value_y") = ((y + height) + ((Float)strength / (Float)(int)2));
HXLINE( 941)		HX_VARI_NAME( float,w10,"w") = (((_this10->_02 * value_x10) + (_this10->_12 * value_y10)) + _this10->_22);
HXDLIN( 941)		p1 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this10->_00 * value_x10) + (_this10->_10 * value_y10)) + _this10->_20) / (Float)w10),((Float)(((_this10->_01 * value_x10) + (_this10->_11 * value_y10)) + _this10->_21) / (Float)w10));
HXLINE( 942)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this11,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x11,"value_x") = ((x + width) - ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y11,"value_y") = (y - ((Float)strength / (Float)(int)2));
HXLINE( 942)		HX_VARI_NAME( float,w11,"w") = (((_this11->_02 * value_x11) + (_this11->_12 * value_y11)) + _this11->_22);
HXDLIN( 942)		p2 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this11->_00 * value_x11) + (_this11->_10 * value_y11)) + _this11->_20) / (Float)w11),((Float)(((_this11->_01 * value_x11) + (_this11->_11 * value_y11)) + _this11->_21) / (Float)w11));
HXLINE( 943)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this12,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x12,"value_x") = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y12,"value_y") = (y - ((Float)strength / (Float)(int)2));
HXLINE( 943)		HX_VARI_NAME( float,w12,"w") = (((_this12->_02 * value_x12) + (_this12->_12 * value_y12)) + _this12->_22);
HXDLIN( 943)		p3 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this12->_00 * value_x12) + (_this12->_10 * value_y12)) + _this12->_20) / (Float)w12),((Float)(((_this12->_01 * value_x12) + (_this12->_11 * value_y12)) + _this12->_21) / (Float)w12));
HXLINE( 944)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this13,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 921)		HX_VARI_NAME( float,value_x13,"value_x") = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		HX_VARI_NAME( float,value_y13,"value_y") = ((y + height) + ((Float)strength / (Float)(int)2));
HXLINE( 944)		HX_VARI_NAME( float,w13,"w") = (((_this13->_02 * value_x13) + (_this13->_12 * value_y13)) + _this13->_22);
HXDLIN( 944)		p4 =  ::kha::math::FastVector2_obj::__new(((Float)(((_this13->_00 * value_x13) + (_this13->_10 * value_y13)) + _this13->_20) / (Float)w13),((Float)(((_this13->_01 * value_x13) + (_this13->_11 * value_y13)) + _this13->_21) / (Float)w13));
HXLINE( 945)		Float _hx_tmp6 = this->get_opacity();
HXDLIN( 945)		Int _hx_tmp7 = this->get_color();
HXDLIN( 945)		this->coloredPainter->fillRect(_hx_tmp6,_hx_tmp7,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
            	}


void Graphics2_obj::fillRect(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","fillRect",0x1d1e787d,"kha.graphics4.Graphics2.fillRect","kha/graphics4/Graphics2.hx",948,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 949)		this->imagePainter->end();
HXLINE( 950)		this->textPainter->end();
HXLINE( 952)		HX_VARI(  ::kha::math::FastMatrix3,_this) = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 948)		HX_VARI( float,value_x) = x;
HXDLIN( 948)		HX_VARI( float,value_y) = (y + height);
HXLINE( 952)		HX_VARI( float,w) = (((_this->_02 * value_x) + (_this->_12 * value_y)) + _this->_22);
HXDLIN( 952)		HX_VARI_NAME( Float,x1,"x") = ((Float)(((_this->_00 * value_x) + (_this->_10 * value_y)) + _this->_20) / (Float)w);
HXDLIN( 952)		HX_VARI_NAME( Float,y1,"y") = ((Float)(((_this->_01 * value_x) + (_this->_11 * value_y)) + _this->_21) / (Float)w);
HXLINE( 948)		HX_VARI( float,p1_x) = x1;
HXDLIN( 948)		HX_VARI( float,p1_y) = y1;
HXLINE( 953)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this1,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 948)		HX_VARI_NAME( float,value_x1,"value_x") = x;
HXDLIN( 948)		HX_VARI_NAME( float,value_y1,"value_y") = y;
HXLINE( 953)		HX_VARI_NAME( float,w1,"w") = (((_this1->_02 * value_x1) + (_this1->_12 * value_y1)) + _this1->_22);
HXDLIN( 953)		HX_VARI_NAME( Float,x2,"x") = ((Float)(((_this1->_00 * value_x1) + (_this1->_10 * value_y1)) + _this1->_20) / (Float)w1);
HXDLIN( 953)		HX_VARI_NAME( Float,y2,"y") = ((Float)(((_this1->_01 * value_x1) + (_this1->_11 * value_y1)) + _this1->_21) / (Float)w1);
HXLINE( 948)		HX_VARI( float,p2_x) = x2;
HXDLIN( 948)		HX_VARI( float,p2_y) = y2;
HXLINE( 954)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this2,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 948)		HX_VARI_NAME( float,value_x2,"value_x") = (x + width);
HXDLIN( 948)		HX_VARI_NAME( float,value_y2,"value_y") = y;
HXLINE( 954)		HX_VARI_NAME( float,w2,"w") = (((_this2->_02 * value_x2) + (_this2->_12 * value_y2)) + _this2->_22);
HXDLIN( 954)		HX_VARI_NAME( Float,x3,"x") = ((Float)(((_this2->_00 * value_x2) + (_this2->_10 * value_y2)) + _this2->_20) / (Float)w2);
HXDLIN( 954)		HX_VARI_NAME( Float,y3,"y") = ((Float)(((_this2->_01 * value_x2) + (_this2->_11 * value_y2)) + _this2->_21) / (Float)w2);
HXLINE( 948)		HX_VARI( float,p3_x) = x3;
HXDLIN( 948)		HX_VARI( float,p3_y) = y3;
HXLINE( 955)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this3,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE( 948)		HX_VARI_NAME( float,value_x3,"value_x") = (x + width);
HXDLIN( 948)		HX_VARI_NAME( float,value_y3,"value_y") = (y + height);
HXLINE( 955)		HX_VARI_NAME( float,w3,"w") = (((_this3->_02 * value_x3) + (_this3->_12 * value_y3)) + _this3->_22);
HXDLIN( 955)		HX_VARI_NAME( Float,x4,"x") = ((Float)(((_this3->_00 * value_x3) + (_this3->_10 * value_y3)) + _this3->_20) / (Float)w3);
HXDLIN( 955)		HX_VARI_NAME( Float,y4,"y") = ((Float)(((_this3->_01 * value_x3) + (_this3->_11 * value_y3)) + _this3->_21) / (Float)w3);
HXLINE( 948)		HX_VARI( float,p4_x) = x4;
HXDLIN( 948)		HX_VARI( float,p4_y) = y4;
HXLINE( 956)		Float _hx_tmp = this->get_opacity();
HXDLIN( 956)		Int _hx_tmp1 = this->get_color();
HXDLIN( 956)		this->coloredPainter->fillRect(_hx_tmp,_hx_tmp1,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
            	}


void Graphics2_obj::drawString(::String text,Float x,Float y){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","drawString",0xcd7490ab,"kha.graphics4.Graphics2.drawString","kha/graphics4/Graphics2.hx",959,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 960)		this->imagePainter->end();
HXLINE( 961)		{
HXLINE( 961)			HX_VARI(  ::kha::graphics4::ColoredShaderPainter,_this) = this->coloredPainter;
HXDLIN( 961)			Bool _hx_tmp = (_this->triangleBufferIndex > (int)0);
HXDLIN( 961)			if (_hx_tmp) {
HXLINE( 961)				_this->drawTriBuffer(false);
            			}
HXDLIN( 961)			Bool _hx_tmp1 = (_this->bufferIndex > (int)0);
HXDLIN( 961)			if (_hx_tmp1) {
HXLINE( 961)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 963)		Float _hx_tmp2 = this->get_opacity();
HXDLIN( 963)		Int _hx_tmp3 = this->get_color();
HXDLIN( 963)		 ::kha::math::FastMatrix3 _hx_tmp4 = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 963)		::Array< Int > _hx_tmp5 = this->get_fontGlyphs();
HXDLIN( 963)		this->textPainter->drawString(text,_hx_tmp2,_hx_tmp3,x,y,_hx_tmp4,_hx_tmp5);
            	}


::Dynamic Graphics2_obj::get_font(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","get_font",0x73e04c8e,"kha.graphics4.Graphics2.get_font","kha/graphics4/Graphics2.hx",967,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 967)		return this->myFont;
            	}


::Dynamic Graphics2_obj::set_font(::Dynamic font){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","set_font",0x223da602,"kha.graphics4.Graphics2.set_font","kha/graphics4/Graphics2.hx",970,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(font,"font")
HXLINE( 971)		this->textPainter->setFont(font);
HXLINE( 972)		return (this->myFont = font);
            	}


Int Graphics2_obj::set_fontSize(Int value){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","set_fontSize",0x67029be3,"kha.graphics4.Graphics2.set_fontSize","kha/graphics4/Graphics2.hx",976,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 976)		Int _hx_tmp = (this->textPainter->fontSize = value);
HXDLIN( 976)		return this->super::set_fontSize(_hx_tmp);
            	}


void Graphics2_obj::drawLine(Float x1,Float y1,Float x2,Float y2,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(((Float)1.0));
            	HX_STACK_FRAME("kha.graphics4.Graphics2","drawLine",0x0c81f54e,"kha.graphics4.Graphics2.drawLine","kha/graphics4/Graphics2.hx",979,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(strength,"strength")
HXLINE( 980)		this->imagePainter->end();
HXLINE( 981)		this->textPainter->end();
HXLINE( 983)		HX_VAR(  ::kha::math::FastVector2,vec);
HXLINE( 984)		if ((y2 == y1)) {
HXLINE( 984)			vec =  ::kha::math::FastVector2_obj::__new((int)0,(int)-1);
            		}
            		else {
HXLINE( 985)			vec =  ::kha::math::FastVector2_obj::__new((int)1,((Float)-((x2 - x1)) / (Float)(y2 - y1)));
            		}
HXLINE( 986)		vec->set_length(strength);
HXLINE( 987)		HX_VARI(  ::kha::math::FastVector2,p1) =  ::kha::math::FastVector2_obj::__new((x1 + (((Float)0.5) * vec->x)),(y1 + (((Float)0.5) * vec->y)));
HXLINE( 988)		HX_VARI(  ::kha::math::FastVector2,p2) =  ::kha::math::FastVector2_obj::__new((x2 + (((Float)0.5) * vec->x)),(y2 + (((Float)0.5) * vec->y)));
HXLINE( 989)		HX_VARI(  ::kha::math::FastVector2,p3) =  ::kha::math::FastVector2_obj::__new((p1->x - vec->x),(p1->y - vec->y));
HXLINE( 990)		HX_VARI(  ::kha::math::FastVector2,p4) =  ::kha::math::FastVector2_obj::__new((p2->x - vec->x),(p2->y - vec->y));
HXLINE( 992)		HX_VARI(  ::kha::math::FastMatrix3,_this) = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 992)		HX_VARI( float,w) = (((_this->_02 * p1->x) + (_this->_12 * p1->y)) + _this->_22);
HXDLIN( 992)		HX_VARI( Float,x) = ((Float)(((_this->_00 * p1->x) + (_this->_10 * p1->y)) + _this->_20) / (Float)w);
HXDLIN( 992)		float _hx_tmp = ((_this->_01 * p1->x) + (_this->_11 * p1->y));
HXDLIN( 992)		p1 =  ::kha::math::FastVector2_obj::__new(x,((Float)(_hx_tmp + _this->_21) / (Float)w));
HXLINE( 993)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this1,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 993)		HX_VARI_NAME( float,w1,"w") = (((_this1->_02 * p2->x) + (_this1->_12 * p2->y)) + _this1->_22);
HXDLIN( 993)		HX_VARI_NAME( Float,x3,"x") = ((Float)(((_this1->_00 * p2->x) + (_this1->_10 * p2->y)) + _this1->_20) / (Float)w1);
HXDLIN( 993)		float _hx_tmp1 = ((_this1->_01 * p2->x) + (_this1->_11 * p2->y));
HXDLIN( 993)		p2 =  ::kha::math::FastVector2_obj::__new(x3,((Float)(_hx_tmp1 + _this1->_21) / (Float)w1));
HXLINE( 994)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this2,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 994)		HX_VARI_NAME( float,w2,"w") = (((_this2->_02 * p3->x) + (_this2->_12 * p3->y)) + _this2->_22);
HXDLIN( 994)		HX_VARI_NAME( Float,x4,"x") = ((Float)(((_this2->_00 * p3->x) + (_this2->_10 * p3->y)) + _this2->_20) / (Float)w2);
HXDLIN( 994)		float _hx_tmp2 = ((_this2->_01 * p3->x) + (_this2->_11 * p3->y));
HXDLIN( 994)		p3 =  ::kha::math::FastVector2_obj::__new(x4,((Float)(_hx_tmp2 + _this2->_21) / (Float)w2));
HXLINE( 995)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this3,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 995)		HX_VARI_NAME( float,w3,"w") = (((_this3->_02 * p4->x) + (_this3->_12 * p4->y)) + _this3->_22);
HXDLIN( 995)		HX_VARI_NAME( Float,x5,"x") = ((Float)(((_this3->_00 * p4->x) + (_this3->_10 * p4->y)) + _this3->_20) / (Float)w3);
HXDLIN( 995)		float _hx_tmp3 = ((_this3->_01 * p4->x) + (_this3->_11 * p4->y));
HXDLIN( 995)		p4 =  ::kha::math::FastVector2_obj::__new(x5,((Float)(_hx_tmp3 + _this3->_21) / (Float)w3));
HXLINE( 997)		Float _hx_tmp4 = this->get_opacity();
HXDLIN( 997)		Int _hx_tmp5 = this->get_color();
HXDLIN( 997)		this->coloredPainter->fillTriangle(_hx_tmp4,_hx_tmp5,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y);
HXLINE( 998)		Float _hx_tmp6 = this->get_opacity();
HXDLIN( 998)		Int _hx_tmp7 = this->get_color();
HXDLIN( 998)		this->coloredPainter->fillTriangle(_hx_tmp6,_hx_tmp7,p3->x,p3->y,p2->x,p2->y,p4->x,p4->y);
            	}


void Graphics2_obj::fillTriangle(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","fillTriangle",0x60580aa1,"kha.graphics4.Graphics2.fillTriangle","kha/graphics4/Graphics2.hx",1001,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE(1002)		this->imagePainter->end();
HXLINE(1003)		this->textPainter->end();
HXLINE(1005)		HX_VARI(  ::kha::math::FastMatrix3,_this) = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE(1001)		HX_VARI( float,value_x) = x1;
HXDLIN(1001)		HX_VARI( float,value_y) = y1;
HXLINE(1005)		HX_VARI( float,w) = (((_this->_02 * value_x) + (_this->_12 * value_y)) + _this->_22);
HXDLIN(1005)		HX_VARI( Float,x) = ((Float)(((_this->_00 * value_x) + (_this->_10 * value_y)) + _this->_20) / (Float)w);
HXDLIN(1005)		HX_VARI( Float,y) = ((Float)(((_this->_01 * value_x) + (_this->_11 * value_y)) + _this->_21) / (Float)w);
HXLINE(1001)		HX_VARI( float,p1_x) = x;
HXDLIN(1001)		HX_VARI( float,p1_y) = y;
HXLINE(1006)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this1,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE(1001)		HX_VARI_NAME( float,value_x1,"value_x") = x2;
HXDLIN(1001)		HX_VARI_NAME( float,value_y1,"value_y") = y2;
HXLINE(1006)		HX_VARI_NAME( float,w1,"w") = (((_this1->_02 * value_x1) + (_this1->_12 * value_y1)) + _this1->_22);
HXDLIN(1006)		HX_VARI_NAME( Float,x4,"x") = ((Float)(((_this1->_00 * value_x1) + (_this1->_10 * value_y1)) + _this1->_20) / (Float)w1);
HXDLIN(1006)		HX_VARI_NAME( Float,y4,"y") = ((Float)(((_this1->_01 * value_x1) + (_this1->_11 * value_y1)) + _this1->_21) / (Float)w1);
HXLINE(1001)		HX_VARI( float,p2_x) = x4;
HXDLIN(1001)		HX_VARI( float,p2_y) = y4;
HXLINE(1007)		HX_VARI_NAME(  ::kha::math::FastMatrix3,_this2,"_this") = this->transformations->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXLINE(1001)		HX_VARI_NAME( float,value_x2,"value_x") = x3;
HXDLIN(1001)		HX_VARI_NAME( float,value_y2,"value_y") = y3;
HXLINE(1007)		HX_VARI_NAME( float,w2,"w") = (((_this2->_02 * value_x2) + (_this2->_12 * value_y2)) + _this2->_22);
HXDLIN(1007)		HX_VARI_NAME( Float,x5,"x") = ((Float)(((_this2->_00 * value_x2) + (_this2->_10 * value_y2)) + _this2->_20) / (Float)w2);
HXDLIN(1007)		HX_VARI_NAME( Float,y5,"y") = ((Float)(((_this2->_01 * value_x2) + (_this2->_11 * value_y2)) + _this2->_21) / (Float)w2);
HXLINE(1001)		HX_VARI( float,p3_x) = x5;
HXDLIN(1001)		HX_VARI( float,p3_y) = y5;
HXLINE(1008)		Float _hx_tmp = this->get_opacity();
HXDLIN(1008)		Int _hx_tmp1 = this->get_color();
HXDLIN(1008)		this->coloredPainter->fillTriangle(_hx_tmp,_hx_tmp1,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
            	}


::hx::EnumBase Graphics2_obj::get_imageScaleQuality(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","get_imageScaleQuality",0xc084b131,"kha.graphics4.Graphics2.get_imageScaleQuality","kha/graphics4/Graphics2.hx",1014,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE(1014)		return this->myImageScaleQuality;
            	}


::hx::EnumBase Graphics2_obj::set_imageScaleQuality(::hx::EnumBase value){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","set_imageScaleQuality",0x148d7f3d,"kha.graphics4.Graphics2.set_imageScaleQuality","kha/graphics4/Graphics2.hx",1017,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1018)		this->imagePainter->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1019)		this->textPainter->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1020)		return (this->myImageScaleQuality = value);
            	}


::hx::EnumBase Graphics2_obj::get_mipmapScaleQuality(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","get_mipmapScaleQuality",0xa8eee7fc,"kha.graphics4.Graphics2.get_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1026,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE(1026)		return this->myMipmapScaleQuality;
            	}


::hx::EnumBase Graphics2_obj::set_mipmapScaleQuality(::hx::EnumBase value){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","set_mipmapScaleQuality",0xdc9a6470,"kha.graphics4.Graphics2.set_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1029,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1030)		this->imagePainter->setBilinearMipmapFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1032)		return (this->myMipmapScaleQuality = value);
            	}


void Graphics2_obj::setPipeline( ::kha::graphics4::PipelineState pipeline){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","setPipeline",0x3232b76e,"kha.graphics4.Graphics2.setPipeline","kha/graphics4/Graphics2.hx",1035,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pipeline,"pipeline")
HXLINE(1036)		this->flush();
HXLINE(1037)		this->imagePainter->set_pipeline(pipeline);
HXLINE(1038)		this->coloredPainter->set_pipeline(pipeline);
HXLINE(1039)		this->textPainter->set_pipeline(pipeline);
HXLINE(1040)		Bool _hx_tmp = hx::IsNotNull( pipeline );
HXDLIN(1040)		if (_hx_tmp) {
HXLINE(1040)			::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline);
            		}
            	}


void Graphics2_obj::scissor(Int x,Int y,Int width,Int height){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","scissor",0xe6b2cda6,"kha.graphics4.Graphics2.scissor","kha/graphics4/Graphics2.hx",1043,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1044)		this->flush();
HXLINE(1045)		::kha::graphics4::Graphics_obj::scissor(this->g,x,y,width,height);
            	}


void Graphics2_obj::disableScissor(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","disableScissor",0x18baf2ca,"kha.graphics4.Graphics2.disableScissor","kha/graphics4/Graphics2.hx",1049,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE(1050)		this->flush();
HXLINE(1051)		::kha::graphics4::Graphics_obj::disableScissor(this->g);
            	}


void Graphics2_obj::begin(hx::Null< Bool >  __o_clear, ::Dynamic clearColor){
Bool clear = __o_clear.Default(true);
            	HX_STACK_FRAME("kha.graphics4.Graphics2","begin",0xdda83933,"kha.graphics4.Graphics2.begin","kha/graphics4/Graphics2.hx",1054,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(clear,"clear")
            	HX_STACK_ARG(clearColor,"clearColor")
HXLINE(1055)		::kha::graphics4::Graphics_obj::begin(this->g,null());
HXLINE(1056)		if (clear) {
HXLINE(1056)			this->clear(clearColor);
            		}
HXLINE(1057)		this->setProjection();
            	}


void Graphics2_obj::clear( ::Dynamic color){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","clear",0x75adc097,"kha.graphics4.Graphics2.clear","kha/graphics4/Graphics2.hx",1060,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
HXLINE(1061)		this->flush();
HXLINE(1062)		 ::Dynamic _hx_tmp;
HXDLIN(1062)		Bool _hx_tmp1 = hx::IsNull( color );
HXDLIN(1062)		if (_hx_tmp1) {
HXLINE(1062)			_hx_tmp = ::kha::_Color::Color_Impl__obj::Black;
            		}
            		else {
HXLINE(1062)			_hx_tmp = color;
            		}
HXDLIN(1062)		::kha::graphics4::Graphics_obj::clear(this->g,_hx_tmp,null(),null());
            	}


void Graphics2_obj::flush(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","flush",0x2fedb1ce,"kha.graphics4.Graphics2.flush","kha/graphics4/Graphics2.hx",1065,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE(1066)		this->imagePainter->end();
HXLINE(1067)		this->textPainter->end();
HXLINE(1068)		{
HXLINE(1068)			HX_VARI(  ::kha::graphics4::ColoredShaderPainter,_this) = this->coloredPainter;
HXDLIN(1068)			Bool _hx_tmp = (_this->triangleBufferIndex > (int)0);
HXDLIN(1068)			if (_hx_tmp) {
HXLINE(1068)				_this->drawTriBuffer(false);
            			}
HXDLIN(1068)			Bool _hx_tmp1 = (_this->bufferIndex > (int)0);
HXDLIN(1068)			if (_hx_tmp1) {
HXLINE(1068)				_this->drawBuffer(false);
            			}
            		}
            	}


void Graphics2_obj::end(){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","end",0x1f209c65,"kha.graphics4.Graphics2.end","kha/graphics4/Graphics2.hx",1071,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE(1072)		this->flush();
HXLINE(1073)		::kha::graphics4::Graphics_obj::end(this->g);
            	}


void Graphics2_obj::drawVideoInternal( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","drawVideoInternal",0xe071523e,"kha.graphics4.Graphics2.drawVideoInternal","kha/graphics4/Graphics2.hx",1076,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(video,"video")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics2_obj,drawVideoInternal,(void))

void Graphics2_obj::drawVideo( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","drawVideo",0xa72ee5e1,"kha.graphics4.Graphics2.drawVideo","kha/graphics4/Graphics2.hx",1080,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(video,"video")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1081)		this->setPipeline(::kha::graphics4::Graphics2_obj::videoPipeline);
HXLINE(1082)		this->drawVideoInternal(video,x,y,width,height);
HXLINE(1083)		this->setPipeline(null());
            	}


 ::kha::graphics4::PipelineState Graphics2_obj::videoPipeline;

Int Graphics2_obj::upperPowerOfTwo(Int v){
            	HX_STACK_FRAME("kha.graphics4.Graphics2","upperPowerOfTwo",0x6f9869fc,"kha.graphics4.Graphics2.upperPowerOfTwo","kha/graphics4/Graphics2.hx",829,0x0c1de808)
            	HX_STACK_ARG(v,"v")
HXLINE( 830)		--v;
HXLINE( 831)		Int _hx_tmp = hx::UShr(v,(int)1);
HXDLIN( 831)		hx::OrEq(v,_hx_tmp);
HXLINE( 832)		Int _hx_tmp1 = hx::UShr(v,(int)2);
HXDLIN( 832)		hx::OrEq(v,_hx_tmp1);
HXLINE( 833)		Int _hx_tmp2 = hx::UShr(v,(int)4);
HXDLIN( 833)		hx::OrEq(v,_hx_tmp2);
HXLINE( 834)		Int _hx_tmp3 = hx::UShr(v,(int)8);
HXDLIN( 834)		hx::OrEq(v,_hx_tmp3);
HXLINE( 835)		Int _hx_tmp4 = hx::UShr(v,(int)16);
HXDLIN( 835)		hx::OrEq(v,_hx_tmp4);
HXLINE( 837)		return ++v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,upperPowerOfTwo,return )


Graphics2_obj::Graphics2_obj()
{
}

void Graphics2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics2);
	HX_MARK_MEMBER_NAME(myColor,"myColor");
	HX_MARK_MEMBER_NAME(myFont,"myFont");
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(imagePainter,"imagePainter");
	HX_MARK_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_MARK_MEMBER_NAME(textPainter,"textPainter");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_MARK_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Graphics2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(myColor,"myColor");
	HX_VISIT_MEMBER_NAME(myFont,"myFont");
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(imagePainter,"imagePainter");
	HX_VISIT_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_VISIT_MEMBER_NAME(textPainter,"textPainter");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_VISIT_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Graphics2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { return hx::Val( myFont); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return hx::Val( canvas); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { return hx::Val( myColor); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn()); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn()); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn()); }
		if (HX_FIELD_EQ(inName,"drawLine") ) { return hx::Val( drawLine_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return hx::Val( drawImage_dyn()); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn()); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn()); }
		if (HX_FIELD_EQ(inName,"drawVideo") ) { return hx::Val( drawVideo_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawString") ) { return hx::Val( drawString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { return hx::Val( textPainter); }
		if (HX_FIELD_EQ(inName,"setPipeline") ) { return hx::Val( setPipeline_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { return hx::Val( imagePainter); }
		if (HX_FIELD_EQ(inName,"set_fontSize") ) { return hx::Val( set_fontSize_dyn()); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return hx::Val( fillTriangle_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { return hx::Val( coloredPainter); }
		if (HX_FIELD_EQ(inName,"disableScissor") ) { return hx::Val( disableScissor_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawVideoInternal") ) { return hx::Val( drawVideoInternal_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"drawScaledSubImage") ) { return hx::Val( drawScaledSubImage_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { return hx::Val( myImageScaleQuality); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { return hx::Val( myMipmapScaleQuality); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_imageScaleQuality") ) { return hx::Val( get_imageScaleQuality_dyn()); }
		if (HX_FIELD_EQ(inName,"set_imageScaleQuality") ) { return hx::Val( set_imageScaleQuality_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_mipmapScaleQuality") ) { return hx::Val( get_mipmapScaleQuality_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mipmapScaleQuality") ) { return hx::Val( set_mipmapScaleQuality_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Graphics2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { outValue = videoPipeline; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"upperPowerOfTwo") ) { outValue = upperPowerOfTwo_dyn(); return true; }
	}
	return false;
}

hx::Val Graphics2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { myFont=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { myColor=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { textPainter=inValue.Cast<  ::kha::graphics4::TextShaderPainter >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { imagePainter=inValue.Cast<  ::kha::graphics4::ImageShaderPainter >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { coloredPainter=inValue.Cast<  ::kha::graphics4::ColoredShaderPainter >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { myImageScaleQuality=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { myMipmapScaleQuality=inValue.Cast< ::hx::EnumBase >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Graphics2_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { videoPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
	}
	return false;
}

void Graphics2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("myColor","\x57","\x1a","\x5c","\xf3"));
	outFields->push(HX_HCSTRING("myFont","\x5b","\x0f","\xfc","\x6e"));
	outFields->push(HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"));
	outFields->push(HX_HCSTRING("imagePainter","\x70","\x2d","\xeb","\xa7"));
	outFields->push(HX_HCSTRING("coloredPainter","\x29","\xa7","\x40","\xdc"));
	outFields->push(HX_HCSTRING("textPainter","\x5e","\xae","\xa2","\x93"));
	outFields->push(HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("myImageScaleQuality","\x44","\x72","\x83","\xee"));
	outFields->push(HX_HCSTRING("myMipmapScaleQuality","\x89","\x17","\xd9","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics2_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Graphics2_obj,myColor),HX_HCSTRING("myColor","\x57","\x1a","\x5c","\xf3")},
	{hx::fsObject /*::kha::Font*/ ,(int)offsetof(Graphics2_obj,myFont),HX_HCSTRING("myFont","\x5b","\x0f","\xfc","\x6e")},
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(Graphics2_obj,projectionMatrix),HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0")},
	{hx::fsObject /*::kha::graphics4::ImageShaderPainter*/ ,(int)offsetof(Graphics2_obj,imagePainter),HX_HCSTRING("imagePainter","\x70","\x2d","\xeb","\xa7")},
	{hx::fsObject /*::kha::graphics4::ColoredShaderPainter*/ ,(int)offsetof(Graphics2_obj,coloredPainter),HX_HCSTRING("coloredPainter","\x29","\xa7","\x40","\xdc")},
	{hx::fsObject /*::kha::graphics4::TextShaderPainter*/ ,(int)offsetof(Graphics2_obj,textPainter),HX_HCSTRING("textPainter","\x5e","\xae","\xa2","\x93")},
	{hx::fsObject /*::kha::Canvas*/ ,(int)offsetof(Graphics2_obj,canvas),HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(Graphics2_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::kha::graphics2::ImageScaleQuality*/ ,(int)offsetof(Graphics2_obj,myImageScaleQuality),HX_HCSTRING("myImageScaleQuality","\x44","\x72","\x83","\xee")},
	{hx::fsObject /*::kha::graphics2::ImageScaleQuality*/ ,(int)offsetof(Graphics2_obj,myMipmapScaleQuality),HX_HCSTRING("myMipmapScaleQuality","\x89","\x17","\xd9","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Graphics2_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &Graphics2_obj::videoPipeline,HX_HCSTRING("videoPipeline","\xbd","\xfe","\x62","\xee")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Graphics2_obj_sMemberFields[] = {
	HX_HCSTRING("myColor","\x57","\x1a","\x5c","\xf3"),
	HX_HCSTRING("myFont","\x5b","\x0f","\xfc","\x6e"),
	HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"),
	HX_HCSTRING("imagePainter","\x70","\x2d","\xeb","\xa7"),
	HX_HCSTRING("coloredPainter","\x29","\xa7","\x40","\xdc"),
	HX_HCSTRING("textPainter","\x5e","\xae","\xa2","\x93"),
	HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("setProjection","\xd1","\xc6","\x03","\x66"),
	HX_HCSTRING("drawImage","\xb7","\x54","\x74","\x85"),
	HX_HCSTRING("drawScaledSubImage","\x99","\x85","\xbc","\xe8"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("drawString","\xf5","\xa3","\xf3","\x52"),
	HX_HCSTRING("get_font","\x58","\x19","\x7b","\xc3"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("set_fontSize","\xad","\x95","\xe4","\x98"),
	HX_HCSTRING("drawLine","\x18","\xc2","\x1c","\x5c"),
	HX_HCSTRING("fillTriangle","\x6b","\x04","\x3a","\x92"),
	HX_HCSTRING("myImageScaleQuality","\x44","\x72","\x83","\xee"),
	HX_HCSTRING("get_imageScaleQuality","\x27","\x2e","\xde","\xf3"),
	HX_HCSTRING("set_imageScaleQuality","\x33","\xfc","\xe6","\x47"),
	HX_HCSTRING("myMipmapScaleQuality","\x89","\x17","\xd9","\xb9"),
	HX_HCSTRING("get_mipmapScaleQuality","\x46","\xc2","\xe2","\x63"),
	HX_HCSTRING("set_mipmapScaleQuality","\xba","\x3e","\x8e","\x97"),
	HX_HCSTRING("setPipeline","\xe4","\x84","\xe4","\x7b"),
	HX_HCSTRING("scissor","\x1c","\x28","\xe7","\x04"),
	HX_HCSTRING("disableScissor","\x14","\x73","\x66","\x02"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("drawVideoInternal","\x34","\x9c","\xdf","\xdf"),
	HX_HCSTRING("drawVideo","\xd7","\x49","\x07","\xff"),
	::String(null()) };

static void Graphics2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics2_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics2_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#endif

hx::Class Graphics2_obj::__mClass;

static ::String Graphics2_obj_sStaticFields[] = {
	HX_HCSTRING("videoPipeline","\xbd","\xfe","\x62","\xee"),
	HX_HCSTRING("upperPowerOfTwo","\x72","\x2a","\xfd","\xfb"),
	::String(null())
};

void Graphics2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.Graphics2","\xf8","\x6b","\xfa","\xcf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Graphics2_obj::__GetStatic;
	__mClass->mSetStaticField = &Graphics2_obj::__SetStatic;
	__mClass->mMarkFunc = Graphics2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Graphics2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
