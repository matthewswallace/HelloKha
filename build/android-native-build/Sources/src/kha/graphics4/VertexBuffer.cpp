// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_arrays_Float32Array
#include <kha/arrays/Float32Array.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexElement
#include <kha/graphics4/VertexElement.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif

namespace kha{
namespace graphics4{

void VertexBuffer_obj::__construct(Int vertexCount, ::kha::graphics4::VertexStructure structure,::hx::EnumBase usage,hx::Null< Int >  __o_instanceDataStepRate,hx::Null< Bool >  __o_canRead){
Int instanceDataStepRate = __o_instanceDataStepRate.Default(0);
Bool canRead = __o_canRead.Default(false);
            	HX_STACK_FRAME("kha.graphics4.VertexBuffer","new",0x19bc5fa5,"kha.graphics4.VertexBuffer.new","kha/graphics4/VertexBuffer.hx",17,0x9edcaa69)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertexCount,"vertexCount")
            	HX_STACK_ARG(structure,"structure")
            	HX_STACK_ARG(usage,"usage")
            	HX_STACK_ARG(instanceDataStepRate,"instanceDataStepRate")
            	HX_STACK_ARG(canRead,"canRead")
HXLINE(  18)		this->init(vertexCount,structure,instanceDataStepRate);
HXLINE(  19)		this->data =  ::kha::arrays::Float32Array_obj::__new();
HXLINE(  20)		 ::kha::graphics4::VertexElement_obj::__new(HX_("a",61,00,00,00),::kha::graphics4::VertexData_obj::Float2_dyn());
            	}

Dynamic VertexBuffer_obj::__CreateEmpty() { return new VertexBuffer_obj; }

hx::ObjectPtr< VertexBuffer_obj > VertexBuffer_obj::__new(Int vertexCount, ::kha::graphics4::VertexStructure structure,::hx::EnumBase usage,hx::Null< Int >  __o_instanceDataStepRate,hx::Null< Bool >  __o_canRead)
{
	hx::ObjectPtr< VertexBuffer_obj > _hx_result = new VertexBuffer_obj();
	_hx_result->__construct(vertexCount,structure,usage,__o_instanceDataStepRate,__o_canRead);
	return _hx_result;
}

Dynamic VertexBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexBuffer_obj > _hx_result = new VertexBuffer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

void VertexBuffer_obj::_hx_delete(){
            	HX_STACK_FRAME("kha.graphics4.VertexBuffer","delete",0xd58f4a06,"kha.graphics4.VertexBuffer.delete","kha/graphics4/VertexBuffer.hx",24,0x9edcaa69)
            	HX_STACK_THIS(this)
HXLINE(  24)		delete buffer; buffer = nullptr;;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexBuffer_obj,_hx_delete,(void))

void VertexBuffer_obj::init(Int vertexCount, ::kha::graphics4::VertexStructure structure,Int instanceDataStepRate){
            	HX_STACK_FRAME("kha.graphics4.VertexBuffer","init",0x67d0082b,"kha.graphics4.VertexBuffer.init","kha/graphics4/VertexBuffer.hx",52,0x9edcaa69)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertexCount,"vertexCount")
            	HX_STACK_ARG(structure,"structure")
            	HX_STACK_ARG(instanceDataStepRate,"instanceDataStepRate")
            	
		Kore::VertexStructure structure2;
		for (int i = 0; i < structure->size(); ++i) {
			Kore::VertexData data;
			switch (structure->get(i)->data->index) {
			case 0:
				data = Kore::Float1VertexData;
				break;
			case 1:
				data = Kore::Float2VertexData;
				break;
			case 2:
				data = Kore::Float3VertexData;
				break;
			case 3:
				data = Kore::Float4VertexData;
				break;
			case 4:
				data = Kore::Float4x4VertexData;
				break;
			}
			structure2.add(structure->get(i)->name, data);
		}
		buffer = new Kore::VertexBuffer(vertexCount, structure2, instanceDataStepRate);
	

            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexBuffer_obj,init,(void))

 ::kha::arrays::Float32Array VertexBuffer_obj::lock( ::Dynamic start, ::Dynamic count){
            	HX_STACK_FRAME("kha.graphics4.VertexBuffer","lock",0x69cc6906,"kha.graphics4.VertexBuffer.lock","kha/graphics4/VertexBuffer.hx",62,0x9edcaa69)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(count,"count")
            	
		data->data.data = buffer->lock();
		data->data.myLength = buffer->count() * buffer->stride() / 4;
		return data;
	

HXLINE(  62)		return this->data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexBuffer_obj,lock,return )

void VertexBuffer_obj::unlock(){
            	HX_STACK_FRAME("kha.graphics4.VertexBuffer","unlock",0xd0432c9f,"kha.graphics4.VertexBuffer.unlock","kha/graphics4/VertexBuffer.hx",66,0x9edcaa69)
            	HX_STACK_THIS(this)
            	buffer->unlock();

            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexBuffer_obj,unlock,(void))

Int VertexBuffer_obj::stride(){
            	HX_STACK_FRAME("kha.graphics4.VertexBuffer","stride",0x7be6a9f4,"kha.graphics4.VertexBuffer.stride","kha/graphics4/VertexBuffer.hx",72,0x9edcaa69)
            	HX_STACK_THIS(this)
            	return buffer->stride();

HXLINE(  72)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexBuffer_obj,stride,return )

Int VertexBuffer_obj::count(){
            	HX_STACK_FRAME("kha.graphics4.VertexBuffer","count",0xfa81ef54,"kha.graphics4.VertexBuffer.count","kha/graphics4/VertexBuffer.hx",77,0x9edcaa69)
            	HX_STACK_THIS(this)
            	return buffer->count();

HXLINE(  77)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexBuffer_obj,count,return )


VertexBuffer_obj::VertexBuffer_obj()
{
}

void VertexBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexBuffer);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void VertexBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
}

hx::Val VertexBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn()); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn()); }
		if (HX_FIELD_EQ(inName,"stride") ) { return hx::Val( stride_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VertexBuffer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::kha::arrays::Float32Array >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VertexBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexBuffer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::arrays::Float32Array*/ ,(int)offsetof(VertexBuffer_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VertexBuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String VertexBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("delete","\x2b","\xc0","\xd8","\x6a"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("stride","\x19","\x20","\x30","\x11"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	::String(null()) };

static void VertexBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexBuffer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexBuffer_obj::__mClass,"__mClass");
};

#endif

hx::Class VertexBuffer_obj::__mClass;

void VertexBuffer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.VertexBuffer","\x33","\xa9","\x88","\x81");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VertexBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
