// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_Blob
#include <kha/Blob.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_GeometryShader
#include <kha/graphics4/GeometryShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationControlShader
#include <kha/graphics4/TessellationControlShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationEvaluationShader
#include <kha/graphics4/TessellationEvaluationShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexElement
#include <kha/graphics4/VertexElement.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_ConstantLocation
#include <kha/kore/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_TextureUnit
#include <kha/kore/graphics4/TextureUnit.h>
#endif

namespace kha{
namespace graphics4{

void PipelineState_obj::__construct(){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","new",0x339c2ff2,"kha.graphics4.PipelineState.new","kha/graphics4/PipelineState.hx",17,0x454a2300)
            	HX_STACK_THIS(this)
HXLINE(  18)		super::__construct();
HXLINE(  19)		program = new Kore::Program;;
            	}

Dynamic PipelineState_obj::__CreateEmpty() { return new PipelineState_obj; }

hx::ObjectPtr< PipelineState_obj > PipelineState_obj::__new()
{
	hx::ObjectPtr< PipelineState_obj > _hx_result = new PipelineState_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic PipelineState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PipelineState_obj > _hx_result = new PipelineState_obj();
	_hx_result->__construct();
	return _hx_result;
}

void PipelineState_obj::_hx_delete(){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","delete",0xa056e7d9,"kha.graphics4.PipelineState.delete","kha/graphics4/PipelineState.hx",23,0x454a2300)
            	HX_STACK_THIS(this)
HXLINE(  23)		delete program; program = nullptr;;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_hx_delete,(void))

void PipelineState_obj::linkWithStructures2( ::kha::graphics4::VertexStructure structure0, ::kha::graphics4::VertexStructure structure1, ::kha::graphics4::VertexStructure structure2, ::kha::graphics4::VertexStructure structure3,Int size){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","linkWithStructures2",0x8868fba4,"kha.graphics4.PipelineState.linkWithStructures2","kha/graphics4/PipelineState.hx",60,0x454a2300)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(structure0,"structure0")
            	HX_STACK_ARG(structure1,"structure1")
            	HX_STACK_ARG(structure2,"structure2")
            	HX_STACK_ARG(structure3,"structure3")
            	HX_STACK_ARG(size,"size")
            	
		program->setVertexShader(vertexShader->shader);
		program->setFragmentShader(fragmentShader->shader);
		if (geometryShader != null()) program->setGeometryShader(geometryShader->shader);
		if (tessellationControlShader != null()) program->setTessellationControlShader(tessellationControlShader->shader);
		if (tessellationEvaluationShader != null()) program->setTessellationEvaluationShader(tessellationEvaluationShader->shader);
		Kore::VertexStructure s0, s1, s2, s3;
		Kore::VertexStructure* structures2[4] = { &s0, &s1, &s2, &s3 };
		::kha::graphics4::VertexStructure* structures[4] = { &structure0, &structure1, &structure2, &structure3 };
		for (int i1 = 0; i1 < size; ++i1) {
			for (int i2 = 0; i2 < (*structures[i1])->size(); ++i2) {
				Kore::VertexData data;
			switch ((*structures[i1])->get(i2)->data->index) {
				case 0:
					data = Kore::Float1VertexData;
					break;
				case 1:
					data = Kore::Float2VertexData;
					break;
				case 2:
					data = Kore::Float3VertexData;
					break;
				case 3:
					data = Kore::Float4VertexData;
					break;
				case 4:
					data = Kore::Float4x4VertexData;
					break;
				}
				structures2[i1]->add((*structures[i1])->get(i2)->name, data);
			}
		}
		program->link(structures2, size);
	

            	}


HX_DEFINE_DYNAMIC_FUNC5(PipelineState_obj,linkWithStructures2,(void))

void PipelineState_obj::compile(){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","compile",0x1c53b605,"kha.graphics4.PipelineState.compile","kha/graphics4/PipelineState.hx",65,0x454a2300)
            	HX_STACK_THIS(this)
HXLINE(  66)		 ::kha::graphics4::VertexStructure _hx_tmp;
HXDLIN(  66)		if ((this->inputLayout->length > (int)0)) {
HXLINE(  66)			_hx_tmp = this->inputLayout->__get((int)0).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE(  66)			_hx_tmp = null();
            		}
HXLINE(  67)		 ::kha::graphics4::VertexStructure _hx_tmp1;
HXDLIN(  67)		if ((this->inputLayout->length > (int)1)) {
HXLINE(  67)			_hx_tmp1 = this->inputLayout->__get((int)1).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE(  67)			_hx_tmp1 = null();
            		}
HXLINE(  68)		 ::kha::graphics4::VertexStructure _hx_tmp2;
HXDLIN(  68)		if ((this->inputLayout->length > (int)2)) {
HXLINE(  68)			_hx_tmp2 = this->inputLayout->__get((int)2).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE(  68)			_hx_tmp2 = null();
            		}
HXLINE(  69)		 ::kha::graphics4::VertexStructure _hx_tmp3;
HXDLIN(  69)		if ((this->inputLayout->length > (int)3)) {
HXLINE(  69)			_hx_tmp3 = this->inputLayout->__get((int)3).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE(  69)			_hx_tmp3 = null();
            		}
HXLINE(  65)		this->linkWithStructures2(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,this->inputLayout->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,compile,(void))

::Dynamic PipelineState_obj::getConstantLocation(::String name){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","getConstantLocation",0x57767c01,"kha.graphics4.PipelineState.getConstantLocation","kha/graphics4/PipelineState.hx",73,0x454a2300)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  74)		HX_VARI(  ::kha::kore::graphics4::ConstantLocation,location) =  ::kha::kore::graphics4::ConstantLocation_obj::__new();
HXLINE(  75)		this->initConstantLocation(location,name);
HXLINE(  76)		return location;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PipelineState_obj,getConstantLocation,return )

void PipelineState_obj::initConstantLocation( ::kha::kore::graphics4::ConstantLocation location,::String name){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","initConstantLocation",0x84c02317,"kha.graphics4.PipelineState.initConstantLocation","kha/graphics4/PipelineState.hx",82,0x454a2300)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(name,"name")
            	
		location->location = program->getConstantLocation(name.c_str());
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(PipelineState_obj,initConstantLocation,(void))

::Dynamic PipelineState_obj::getTextureUnit(::String name){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","getTextureUnit",0x9659a1b7,"kha.graphics4.PipelineState.getTextureUnit","kha/graphics4/PipelineState.hx",86,0x454a2300)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  87)		HX_VARI(  ::kha::kore::graphics4::TextureUnit,unit) =  ::kha::kore::graphics4::TextureUnit_obj::__new();
HXLINE(  88)		this->initTextureUnit(unit,name);
HXLINE(  89)		return unit;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PipelineState_obj,getTextureUnit,return )

void PipelineState_obj::initTextureUnit( ::kha::kore::graphics4::TextureUnit unit,::String name){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","initTextureUnit",0x465d5261,"kha.graphics4.PipelineState.initTextureUnit","kha/graphics4/PipelineState.hx",95,0x454a2300)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(unit,"unit")
            	HX_STACK_ARG(name,"name")
            	
		unit->unit = program->getTextureUnit(name.c_str());
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(PipelineState_obj,initTextureUnit,(void))

void PipelineState_obj::set(){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","set",0x339ffb34,"kha.graphics4.PipelineState.set","kha/graphics4/PipelineState.hx",102,0x454a2300)
            	HX_STACK_THIS(this)
            	
		program->set();
	

            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,set,(void))

void PipelineState_obj::unused(){
            	HX_STACK_FRAME("kha.graphics4.PipelineState","unused",0xa100c0c4,"kha.graphics4.PipelineState.unused","kha/graphics4/PipelineState.hx",106,0x454a2300)
            	HX_STACK_THIS(this)
HXLINE( 107)		 ::kha::graphics4::VertexElement_obj::__new(HX_("include",28,fe,f6,51),::kha::graphics4::VertexData_obj::Float2_dyn());
HXLINE( 108)		 ::kha::graphics4::VertexShader_obj::__new(null(),null());
HXLINE( 109)		 ::kha::graphics4::FragmentShader_obj::__new(null(),null());
HXLINE( 110)		 ::kha::graphics4::GeometryShader_obj::__new(null(),null());
HXLINE( 111)		 ::kha::graphics4::TessellationControlShader_obj::__new(null(),null());
HXLINE( 112)		 ::kha::graphics4::TessellationEvaluationShader_obj::__new(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,unused,(void))


PipelineState_obj::PipelineState_obj()
{
}

hx::Val PipelineState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn()); }
		if (HX_FIELD_EQ(inName,"unused") ) { return hx::Val( unused_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compile") ) { return hx::Val( compile_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getTextureUnit") ) { return hx::Val( getTextureUnit_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"initTextureUnit") ) { return hx::Val( initTextureUnit_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"linkWithStructures2") ) { return hx::Val( linkWithStructures2_dyn()); }
		if (HX_FIELD_EQ(inName,"getConstantLocation") ) { return hx::Val( getConstantLocation_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"initConstantLocation") ) { return hx::Val( initConstantLocation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PipelineState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PipelineState_obj_sStaticStorageInfo = 0;
#endif

static ::String PipelineState_obj_sMemberFields[] = {
	HX_HCSTRING("delete","\x2b","\xc0","\xd8","\x6a"),
	HX_HCSTRING("linkWithStructures2","\x12","\xd8","\x24","\x1b"),
	HX_HCSTRING("compile","\x73","\x25","\x6f","\x83"),
	HX_HCSTRING("getConstantLocation","\x6f","\x58","\x32","\xea"),
	HX_HCSTRING("initConstantLocation","\xe9","\x26","\x65","\x56"),
	HX_HCSTRING("getTextureUnit","\x09","\x1c","\xc7","\x8b"),
	HX_HCSTRING("initTextureUnit","\xcf","\xdf","\xba","\x10"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("unused","\x16","\x99","\x82","\x6b"),
	::String(null()) };

static void PipelineState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PipelineState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PipelineState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PipelineState_obj::__mClass,"__mClass");
};

#endif

hx::Class PipelineState_obj::__mClass;

void PipelineState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.PipelineState","\x00","\x0f","\xad","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PipelineState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PipelineState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PipelineState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PipelineState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PipelineState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PipelineState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
