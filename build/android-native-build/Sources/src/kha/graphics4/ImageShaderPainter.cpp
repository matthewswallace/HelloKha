// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "float32array.h"
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32Array
#include <kha/arrays/Float32Array.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_MipMapFilter
#include <kha/graphics4/MipMapFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureAddressing
#include <kha/graphics4/TextureAddressing.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFilter
#include <kha/graphics4/TextureFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

namespace kha{
namespace graphics4{

void ImageShaderPainter_obj::__construct(::Dynamic g4){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","new",0xa318bb6c,"kha.graphics4.ImageShaderPainter.new","kha/graphics4/Graphics2.hx",32,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g4,"g4")
HXLINE(  52)		this->destinationBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE(  51)		this->sourceBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE(  48)		this->myPipeline = null();
HXLINE(  46)		this->bilinearMipmaps = false;
HXLINE(  45)		this->bilinear = false;
HXLINE(  55)		this->g = g4;
HXLINE(  56)		this->bufferIndex = (int)0;
HXLINE(  57)		::kha::graphics4::ImageShaderPainter_obj::initShaders();
HXLINE(  58)		this->initBuffers();
HXLINE(  59)		this->projectionLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE(  60)		this->textureLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            	}

Dynamic ImageShaderPainter_obj::__CreateEmpty() { return new ImageShaderPainter_obj; }

hx::ObjectPtr< ImageShaderPainter_obj > ImageShaderPainter_obj::__new(::Dynamic g4)
{
	hx::ObjectPtr< ImageShaderPainter_obj > _hx_result = new ImageShaderPainter_obj();
	_hx_result->__construct(g4);
	return _hx_result;
}

Dynamic ImageShaderPainter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageShaderPainter_obj > _hx_result = new ImageShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::kha::graphics4::PipelineState ImageShaderPainter_obj::get_pipeline(){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","get_pipeline",0x44e0c29f,"kha.graphics4.ImageShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",64,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE(  64)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,get_pipeline,return )

 ::kha::graphics4::PipelineState ImageShaderPainter_obj::set_pipeline( ::kha::graphics4::PipelineState pipe){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","set_pipeline",0x59d9e613,"kha.graphics4.ImageShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",67,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pipe,"pipe")
HXLINE(  68)		Bool _hx_tmp = hx::IsNull( pipe );
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  69)			this->projectionLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE(  70)			this->textureLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
            		else {
HXLINE(  73)			this->projectionLocation = pipe->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE(  74)			this->textureLocation = pipe->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
HXLINE(  76)		return (this->myPipeline = pipe);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,set_pipeline,return )

void ImageShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","setProjection",0xdca978dd,"kha.graphics4.ImageShaderPainter.setProjection","kha/graphics4/Graphics2.hx",80,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(projectionMatrix,"projectionMatrix")
HXLINE(  80)		this->projectionMatrix = projectionMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setProjection,(void))

void ImageShaderPainter_obj::initBuffers(){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","initBuffers",0xef73e94f,"kha.graphics4.ImageShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",104,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 105)		Int _hx_tmp = (::kha::graphics4::ImageShaderPainter_obj::bufferSize * (int)4);
HXDLIN( 105)		this->rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__new(_hx_tmp,::kha::graphics4::ImageShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE( 106)		this->rectVertices = this->rectVertexBuffer->lock(null(),null());
HXLINE( 108)		Int _hx_tmp1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferSize * (int)3) * (int)2);
HXDLIN( 108)		this->indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__new(_hx_tmp1,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE( 109)		HX_VARI( ::Array< Int >,indices) = this->indexBuffer->lock();
HXLINE( 110)		{
HXLINE( 110)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 110)			HX_VARI( Int,_g) = ::kha::graphics4::ImageShaderPainter_obj::bufferSize;
HXDLIN( 110)			while((_g1 < _g)){
HXLINE( 110)				HX_VARI( Int,i) = _g1++;
HXLINE( 111)				indices[((i * (int)3) * (int)2)] = (i * (int)4);
HXLINE( 112)				indices[(((i * (int)3) * (int)2) + (int)1)] = ((i * (int)4) + (int)1);
HXLINE( 113)				indices[(((i * (int)3) * (int)2) + (int)2)] = ((i * (int)4) + (int)2);
HXLINE( 114)				indices[(((i * (int)3) * (int)2) + (int)3)] = (i * (int)4);
HXLINE( 115)				indices[(((i * (int)3) * (int)2) + (int)4)] = ((i * (int)4) + (int)2);
HXLINE( 116)				indices[(((i * (int)3) * (int)2) + (int)5)] = ((i * (int)4) + (int)3);
            			}
            		}
HXLINE( 118)		this->indexBuffer->unlock();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initBuffers,(void))

void ImageShaderPainter_obj::setRectVertices(float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","setRectVertices",0x24abad0b,"kha.graphics4.ImageShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",125,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bottomleftx,"bottomleftx")
            	HX_STACK_ARG(bottomlefty,"bottomlefty")
            	HX_STACK_ARG(topleftx,"topleftx")
            	HX_STACK_ARG(toplefty,"toplefty")
            	HX_STACK_ARG(toprightx,"toprightx")
            	HX_STACK_ARG(toprighty,"toprighty")
            	HX_STACK_ARG(bottomrightx,"bottomrightx")
            	HX_STACK_ARG(bottomrighty,"bottomrighty")
HXLINE( 126)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXLINE( 127)		this->rectVertices->data.set(baseIndex,bottomleftx);
HXLINE( 128)		this->rectVertices->data.set((baseIndex + (int)1),bottomlefty);
HXLINE( 129)		this->rectVertices->data.set((baseIndex + (int)2),((Float)-5.0));
HXLINE( 131)		this->rectVertices->data.set((baseIndex + (int)9),topleftx);
HXLINE( 132)		this->rectVertices->data.set((baseIndex + (int)10),toplefty);
HXLINE( 133)		this->rectVertices->data.set((baseIndex + (int)11),((Float)-5.0));
HXLINE( 135)		this->rectVertices->data.set((baseIndex + (int)18),toprightx);
HXLINE( 136)		this->rectVertices->data.set((baseIndex + (int)19),toprighty);
HXLINE( 137)		this->rectVertices->data.set((baseIndex + (int)20),((Float)-5.0));
HXLINE( 139)		this->rectVertices->data.set((baseIndex + (int)27),bottomrightx);
HXLINE( 140)		this->rectVertices->data.set((baseIndex + (int)28),bottomrighty);
HXLINE( 141)		this->rectVertices->data.set((baseIndex + (int)29),((Float)-5.0));
            	}


HX_DEFINE_DYNAMIC_FUNC8(ImageShaderPainter_obj,setRectVertices,(void))

void ImageShaderPainter_obj::setRectTexCoords(float left,float top,float right,float bottom){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","setRectTexCoords",0x2a0ce013,"kha.graphics4.ImageShaderPainter.setRectTexCoords","kha/graphics4/Graphics2.hx",144,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(left,"left")
            	HX_STACK_ARG(top,"top")
            	HX_STACK_ARG(right,"right")
            	HX_STACK_ARG(bottom,"bottom")
HXLINE( 145)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXLINE( 146)		this->rectVertices->data.set((baseIndex + (int)3),left);
HXLINE( 147)		this->rectVertices->data.set((baseIndex + (int)4),bottom);
HXLINE( 149)		this->rectVertices->data.set((baseIndex + (int)12),left);
HXLINE( 150)		this->rectVertices->data.set((baseIndex + (int)13),top);
HXLINE( 152)		this->rectVertices->data.set((baseIndex + (int)21),right);
HXLINE( 153)		this->rectVertices->data.set((baseIndex + (int)22),top);
HXLINE( 155)		this->rectVertices->data.set((baseIndex + (int)30),right);
HXLINE( 156)		this->rectVertices->data.set((baseIndex + (int)31),bottom);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectTexCoords,(void))

void ImageShaderPainter_obj::setRectColor(float r,float g,float b,float a){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","setRectColor",0x3cb78511,"kha.graphics4.ImageShaderPainter.setRectColor","kha/graphics4/Graphics2.hx",159,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(a,"a")
HXLINE( 160)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXLINE( 161)		this->rectVertices->data.set((baseIndex + (int)5),r);
HXLINE( 162)		this->rectVertices->data.set((baseIndex + (int)6),g);
HXLINE( 163)		this->rectVertices->data.set((baseIndex + (int)7),b);
HXLINE( 164)		this->rectVertices->data.set((baseIndex + (int)8),a);
HXLINE( 166)		this->rectVertices->data.set((baseIndex + (int)14),r);
HXLINE( 167)		this->rectVertices->data.set((baseIndex + (int)15),g);
HXLINE( 168)		this->rectVertices->data.set((baseIndex + (int)16),b);
HXLINE( 169)		this->rectVertices->data.set((baseIndex + (int)17),a);
HXLINE( 171)		this->rectVertices->data.set((baseIndex + (int)23),r);
HXLINE( 172)		this->rectVertices->data.set((baseIndex + (int)24),g);
HXLINE( 173)		this->rectVertices->data.set((baseIndex + (int)25),b);
HXLINE( 174)		this->rectVertices->data.set((baseIndex + (int)26),a);
HXLINE( 176)		this->rectVertices->data.set((baseIndex + (int)32),r);
HXLINE( 177)		this->rectVertices->data.set((baseIndex + (int)33),g);
HXLINE( 178)		this->rectVertices->data.set((baseIndex + (int)34),b);
HXLINE( 179)		this->rectVertices->data.set((baseIndex + (int)35),a);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectColor,(void))

void ImageShaderPainter_obj::drawBuffer(){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","drawBuffer",0x0d340698,"kha.graphics4.ImageShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",182,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 183)		this->rectVertexBuffer->unlock();
HXLINE( 184)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,this->rectVertexBuffer);
HXLINE( 185)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,this->indexBuffer);
HXLINE( 186)		 ::kha::graphics4::PipelineState _hx_tmp;
HXDLIN( 186)		 ::kha::graphics4::PipelineState _hx_tmp1 = this->get_pipeline();
HXDLIN( 186)		Bool _hx_tmp2 = hx::IsNull( _hx_tmp1 );
HXDLIN( 186)		if (_hx_tmp2) {
HXLINE( 186)			_hx_tmp = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 186)			_hx_tmp = this->get_pipeline();
            		}
HXDLIN( 186)		::kha::graphics4::Graphics_obj::setPipeline(this->g,_hx_tmp);
HXLINE( 187)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,this->lastTexture);
HXLINE( 188)		::hx::EnumBase _hx_tmp3;
HXDLIN( 188)		if (this->bilinear) {
HXLINE( 188)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 188)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 188)		::hx::EnumBase _hx_tmp4;
HXDLIN( 188)		if (this->bilinear) {
HXLINE( 188)			_hx_tmp4 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 188)			_hx_tmp4 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 188)		::hx::EnumBase _hx_tmp5;
HXDLIN( 188)		if (this->bilinearMipmaps) {
HXLINE( 188)			_hx_tmp5 = ::kha::graphics4::MipMapFilter_obj::LinearMipFilter_dyn();
            		}
            		else {
HXLINE( 188)			_hx_tmp5 = ::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn();
            		}
HXDLIN( 188)		::kha::graphics4::Graphics_obj::setTextureParameters(this->g,this->textureLocation,::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXLINE( 189)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 197)		Int _hx_tmp6 = ((this->bufferIndex * (int)2) * (int)3);
HXDLIN( 197)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,(int)0,_hx_tmp6);
HXLINE( 199)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,null());
HXLINE( 200)		this->bufferIndex = (int)0;
HXLINE( 201)		this->rectVertices = this->rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,drawBuffer,(void))

void ImageShaderPainter_obj::setBilinearFilter(Bool bilinear){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","setBilinearFilter",0x7d147312,"kha.graphics4.ImageShaderPainter.setBilinearFilter","kha/graphics4/Graphics2.hx",204,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bilinear,"bilinear")
HXLINE( 205)		this->end();
HXLINE( 206)		this->bilinear = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearFilter,(void))

void ImageShaderPainter_obj::setBilinearMipmapFilter(Bool bilinear){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","setBilinearMipmapFilter",0x1f8fea3a,"kha.graphics4.ImageShaderPainter.setBilinearMipmapFilter","kha/graphics4/Graphics2.hx",209,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bilinear,"bilinear")
HXLINE( 210)		this->end();
HXLINE( 211)		this->bilinearMipmaps = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearMipmapFilter,(void))

void ImageShaderPainter_obj::drawImage( ::kha::Image img,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,Int color){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","drawImage",0xba3d10c3,"kha.graphics4.ImageShaderPainter.drawImage","kha/graphics4/Graphics2.hx",219,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(img,"img")
            	HX_STACK_ARG(bottomleftx,"bottomleftx")
            	HX_STACK_ARG(bottomlefty,"bottomlefty")
            	HX_STACK_ARG(topleftx,"topleftx")
            	HX_STACK_ARG(toplefty,"toplefty")
            	HX_STACK_ARG(toprightx,"toprightx")
            	HX_STACK_ARG(toprighty,"toprighty")
            	HX_STACK_ARG(bottomrightx,"bottomrightx")
            	HX_STACK_ARG(bottomrighty,"bottomrighty")
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
HXLINE( 221)		Bool _hx_tmp;
HXDLIN( 221)		if (((this->bufferIndex + (int)1) < ::kha::graphics4::ImageShaderPainter_obj::bufferSize)) {
HXLINE( 221)			Bool _hx_tmp1 = hx::IsNotNull( this->lastTexture );
HXDLIN( 221)			if (_hx_tmp1) {
HXLINE( 221)				_hx_tmp = hx::IsNotEq( img,this->lastTexture );
            			}
            			else {
HXLINE( 221)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 221)			_hx_tmp = true;
            		}
HXDLIN( 221)		if (_hx_tmp) {
HXLINE( 221)			this->drawBuffer();
            		}
HXLINE( 223)		{
HXLINE( 223)			HX_VARI( float,r) = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 223)			HX_VARI( float,g) = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 223)			HX_VARI( float,b) = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 223)			HX_VARI( float,a) = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 223)			HX_VARI( Int,baseIndex) = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)5),r);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)6),g);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)7),b);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)8),a);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)14),r);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)15),g);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)16),b);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)17),a);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)23),r);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)24),g);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)25),b);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)26),a);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)32),r);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)33),g);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)34),b);
HXDLIN( 223)			this->rectVertices->data.set((baseIndex + (int)35),a);
            		}
HXLINE( 224)		{
HXLINE( 224)			Int _hx_tmp2 = img->get_width();
HXDLIN( 224)			Int _hx_tmp3 = img->get_realWidth();
HXDLIN( 224)			HX_VARI( float,right) = ((Float)_hx_tmp2 / (Float)_hx_tmp3);
HXDLIN( 224)			Int _hx_tmp4 = img->get_height();
HXDLIN( 224)			Int _hx_tmp5 = img->get_realHeight();
HXDLIN( 224)			HX_VARI( float,bottom) = ((Float)_hx_tmp4 / (Float)_hx_tmp5);
HXDLIN( 224)			HX_VARI_NAME( Int,baseIndex1,"baseIndex") = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)3),(int)0);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)4),bottom);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)12),(int)0);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)13),(int)0);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)21),right);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)22),(int)0);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)30),right);
HXDLIN( 224)			this->rectVertices->data.set((baseIndex1 + (int)31),bottom);
            		}
HXLINE( 225)		{
HXLINE( 225)			HX_VARI_NAME( Int,baseIndex2,"baseIndex") = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 225)			this->rectVertices->data.set(baseIndex2,bottomleftx);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)1),bottomlefty);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)2),((Float)-5.0));
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)9),topleftx);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)10),toplefty);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)11),((Float)-5.0));
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)18),toprightx);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)19),toprighty);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)20),((Float)-5.0));
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)27),bottomrightx);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)28),bottomrighty);
HXDLIN( 225)			this->rectVertices->data.set((baseIndex2 + (int)29),((Float)-5.0));
            		}
HXLINE( 227)		++this->bufferIndex;
HXLINE( 228)		this->lastTexture = img;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImage,(void))

void ImageShaderPainter_obj::drawImage2( ::kha::Image img,float sx,float sy,float sw,float sh,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,Int color){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","drawImage2",0x3b319a0f,"kha.graphics4.ImageShaderPainter.drawImage2","kha/graphics4/Graphics2.hx",236,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(img,"img")
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
            	HX_STACK_ARG(sw,"sw")
            	HX_STACK_ARG(sh,"sh")
            	HX_STACK_ARG(bottomleftx,"bottomleftx")
            	HX_STACK_ARG(bottomlefty,"bottomlefty")
            	HX_STACK_ARG(topleftx,"topleftx")
            	HX_STACK_ARG(toplefty,"toplefty")
            	HX_STACK_ARG(toprightx,"toprightx")
            	HX_STACK_ARG(toprighty,"toprighty")
            	HX_STACK_ARG(bottomrightx,"bottomrightx")
            	HX_STACK_ARG(bottomrighty,"bottomrighty")
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
HXLINE( 238)		Bool _hx_tmp;
HXDLIN( 238)		if (((this->bufferIndex + (int)1) < ::kha::graphics4::ImageShaderPainter_obj::bufferSize)) {
HXLINE( 238)			Bool _hx_tmp1 = hx::IsNotNull( this->lastTexture );
HXDLIN( 238)			if (_hx_tmp1) {
HXLINE( 238)				_hx_tmp = hx::IsNotEq( img,this->lastTexture );
            			}
            			else {
HXLINE( 238)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 238)			_hx_tmp = true;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 238)			this->drawBuffer();
            		}
HXLINE( 240)		{
HXLINE( 240)			Int _hx_tmp2 = img->get_realWidth();
HXDLIN( 240)			HX_VARI( float,left) = ((Float)sx / (Float)_hx_tmp2);
HXDLIN( 240)			Int _hx_tmp3 = img->get_realHeight();
HXDLIN( 240)			HX_VARI( float,top) = ((Float)sy / (Float)_hx_tmp3);
HXDLIN( 240)			float _hx_tmp4 = (sx + sw);
HXDLIN( 240)			Int _hx_tmp5 = img->get_realWidth();
HXDLIN( 240)			HX_VARI( float,right) = ((Float)_hx_tmp4 / (Float)_hx_tmp5);
HXDLIN( 240)			float _hx_tmp6 = (sy + sh);
HXDLIN( 240)			Int _hx_tmp7 = img->get_realHeight();
HXDLIN( 240)			HX_VARI( float,bottom) = ((Float)_hx_tmp6 / (Float)_hx_tmp7);
HXDLIN( 240)			HX_VARI( Int,baseIndex) = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)3),left);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)4),bottom);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)12),left);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)13),top);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)21),right);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)22),top);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)30),right);
HXDLIN( 240)			this->rectVertices->data.set((baseIndex + (int)31),bottom);
            		}
HXLINE( 241)		{
HXLINE( 241)			HX_VARI( float,r) = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 241)			HX_VARI( float,g) = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 241)			HX_VARI( float,b) = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 241)			HX_VARI( float,a) = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 241)			HX_VARI_NAME( Int,baseIndex1,"baseIndex") = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)5),r);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)6),g);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)7),b);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)8),a);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)14),r);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)15),g);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)16),b);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)17),a);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)23),r);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)24),g);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)25),b);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)26),a);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)32),r);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)33),g);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)34),b);
HXDLIN( 241)			this->rectVertices->data.set((baseIndex1 + (int)35),a);
            		}
HXLINE( 242)		{
HXLINE( 242)			HX_VARI_NAME( Int,baseIndex2,"baseIndex") = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 242)			this->rectVertices->data.set(baseIndex2,bottomleftx);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)1),bottomlefty);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)2),((Float)-5.0));
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)9),topleftx);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)10),toplefty);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)11),((Float)-5.0));
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)18),toprightx);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)19),toprighty);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)20),((Float)-5.0));
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)27),bottomrightx);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)28),bottomrighty);
HXDLIN( 242)			this->rectVertices->data.set((baseIndex2 + (int)29),((Float)-5.0));
            		}
HXLINE( 244)		++this->bufferIndex;
HXLINE( 245)		this->lastTexture = img;
            	}


HX_DEFINE_DYNAMIC_FUNC15(ImageShaderPainter_obj,drawImage2,(void))

void ImageShaderPainter_obj::drawImageScale( ::kha::Image img,float sx,float sy,float sw,float sh,float left,float top,float right,float bottom,float opacity,Int color){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","drawImageScale",0xc1fc8ac7,"kha.graphics4.ImageShaderPainter.drawImageScale","kha/graphics4/Graphics2.hx",248,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(img,"img")
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
            	HX_STACK_ARG(sw,"sw")
            	HX_STACK_ARG(sh,"sh")
            	HX_STACK_ARG(left,"left")
            	HX_STACK_ARG(top,"top")
            	HX_STACK_ARG(right,"right")
            	HX_STACK_ARG(bottom,"bottom")
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
HXLINE( 250)		Bool _hx_tmp;
HXDLIN( 250)		if (((this->bufferIndex + (int)1) < ::kha::graphics4::ImageShaderPainter_obj::bufferSize)) {
HXLINE( 250)			Bool _hx_tmp1 = hx::IsNotNull( this->lastTexture );
HXDLIN( 250)			if (_hx_tmp1) {
HXLINE( 250)				_hx_tmp = hx::IsNotEq( img,this->lastTexture );
            			}
            			else {
HXLINE( 250)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 250)			_hx_tmp = true;
            		}
HXDLIN( 250)		if (_hx_tmp) {
HXLINE( 250)			this->drawBuffer();
            		}
HXLINE( 252)		{
HXLINE( 252)			Int _hx_tmp2 = img->get_realWidth();
HXDLIN( 252)			HX_VARI_NAME( float,left1,"left") = ((Float)sx / (Float)_hx_tmp2);
HXDLIN( 252)			Int _hx_tmp3 = img->get_realHeight();
HXDLIN( 252)			HX_VARI_NAME( float,top1,"top") = ((Float)sy / (Float)_hx_tmp3);
HXDLIN( 252)			float _hx_tmp4 = (sx + sw);
HXDLIN( 252)			Int _hx_tmp5 = img->get_realWidth();
HXDLIN( 252)			HX_VARI_NAME( float,right1,"right") = ((Float)_hx_tmp4 / (Float)_hx_tmp5);
HXDLIN( 252)			float _hx_tmp6 = (sy + sh);
HXDLIN( 252)			Int _hx_tmp7 = img->get_realHeight();
HXDLIN( 252)			HX_VARI_NAME( float,bottom1,"bottom") = ((Float)_hx_tmp6 / (Float)_hx_tmp7);
HXDLIN( 252)			HX_VARI( Int,baseIndex) = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)3),left1);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)4),bottom1);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)12),left1);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)13),top1);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)21),right1);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)22),top1);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)30),right1);
HXDLIN( 252)			this->rectVertices->data.set((baseIndex + (int)31),bottom1);
            		}
HXLINE( 253)		{
HXLINE( 253)			HX_VARI( float,r) = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 253)			HX_VARI( float,g) = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 253)			HX_VARI( float,b) = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 253)			HX_VARI_NAME( Int,baseIndex1,"baseIndex") = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)5),r);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)6),g);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)7),b);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)8),opacity);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)14),r);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)15),g);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)16),b);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)17),opacity);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)23),r);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)24),g);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)25),b);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)26),opacity);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)32),r);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)33),g);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)34),b);
HXDLIN( 253)			this->rectVertices->data.set((baseIndex1 + (int)35),opacity);
            		}
HXLINE( 254)		{
HXLINE( 254)			HX_VARI_NAME( Int,baseIndex2,"baseIndex") = ((this->bufferIndex * ::kha::graphics4::ImageShaderPainter_obj::vertexSize) * (int)4);
HXDLIN( 254)			this->rectVertices->data.set(baseIndex2,left);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)1),bottom);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)2),((Float)-5.0));
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)9),left);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)10),top);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)11),((Float)-5.0));
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)18),right);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)19),top);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)20),((Float)-5.0));
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)27),right);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)28),bottom);
HXDLIN( 254)			this->rectVertices->data.set((baseIndex2 + (int)29),((Float)-5.0));
            		}
HXLINE( 256)		++this->bufferIndex;
HXLINE( 257)		this->lastTexture = img;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImageScale,(void))

void ImageShaderPainter_obj::end(){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","end",0xa311eee7,"kha.graphics4.ImageShaderPainter.end","kha/graphics4/Graphics2.hx",260,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 261)		Bool _hx_tmp = (this->bufferIndex > (int)0);
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 261)			this->drawBuffer();
            		}
HXLINE( 262)		this->lastTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,end,(void))

 ::kha::graphics4::PipelineState ImageShaderPainter_obj::shaderPipeline;

 ::kha::graphics4::VertexStructure ImageShaderPainter_obj::structure;

Int ImageShaderPainter_obj::bufferSize;

Int ImageShaderPainter_obj::vertexSize;

void ImageShaderPainter_obj::initShaders(){
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","initShaders",0x9d69c78a,"kha.graphics4.ImageShaderPainter.initShaders","kha/graphics4/Graphics2.hx",83,0x0c1de808)
HXLINE(  84)		Bool _hx_tmp = hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline );
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  84)			return;
            		}
HXLINE(  86)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline =  ::kha::graphics4::PipelineState_obj::__new();
HXLINE(  87)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_image_frag;
HXLINE(  88)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_image_vert;
HXLINE(  90)		::kha::graphics4::ImageShaderPainter_obj::structure =  ::kha::graphics4::VertexStructure_obj::__new();
HXLINE(  91)		::kha::graphics4::ImageShaderPainter_obj::structure->add(HX_("vertexPosition",2d,3c,14,50),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE(  92)		::kha::graphics4::ImageShaderPainter_obj::structure->add(HX_("texPosition",b0,79,ff,c7),::kha::graphics4::VertexData_obj::Float2_dyn());
HXLINE(  93)		::kha::graphics4::ImageShaderPainter_obj::structure->add(HX_("vertexColor",5f,3b,98,5e),::kha::graphics4::VertexData_obj::Float4_dyn());
HXLINE(  94)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,::kha::graphics4::ImageShaderPainter_obj::structure);
HXLINE(  96)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXLINE(  97)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(  98)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(  99)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE( 101)		::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->compile();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initShaders,(void))


ImageShaderPainter_obj::ImageShaderPainter_obj()
{
}

void ImageShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(textureLocation,"textureLocation");
	HX_MARK_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(lastTexture,"lastTexture");
	HX_MARK_MEMBER_NAME(bilinear,"bilinear");
	HX_MARK_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_MARK_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_MARK_END_CLASS();
}

void ImageShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(textureLocation,"textureLocation");
	HX_VISIT_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(lastTexture,"lastTexture");
	HX_VISIT_MEMBER_NAME(bilinear,"bilinear");
	HX_VISIT_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
	HX_VISIT_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_VISIT_MEMBER_NAME(destinationBlend,"destinationBlend");
}

hx::Val ImageShaderPainter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { return hx::Val( bilinear); }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_pipeline()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return hx::Val( drawImage_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return hx::Val( myPipeline); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return hx::Val( drawBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"drawImage2") ) { return hx::Val( drawImage2_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { return hx::Val( bufferIndex); }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { return hx::Val( indexBuffer); }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { return hx::Val( lastTexture); }
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { return hx::Val( sourceBlend); }
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { return hx::Val( rectVertices); }
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return hx::Val( get_pipeline_dyn()); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return hx::Val( set_pipeline_dyn()); }
		if (HX_FIELD_EQ(inName,"setRectColor") ) { return hx::Val( setRectColor_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawImageScale") ) { return hx::Val( drawImageScale_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { return hx::Val( textureLocation); }
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { return hx::Val( bilinearMipmaps); }
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return hx::Val( setRectVertices_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix); }
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { return hx::Val( rectVertexBuffer); }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { return hx::Val( destinationBlend); }
		if (HX_FIELD_EQ(inName,"setRectTexCoords") ) { return hx::Val( setRectTexCoords_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setBilinearFilter") ) { return hx::Val( setBilinearFilter_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return hx::Val( projectionLocation); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setBilinearMipmapFilter") ) { return hx::Val( setBilinearMipmapFilter_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ImageShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = structure; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bufferSize") ) { outValue = bufferSize; return true; }
		if (HX_FIELD_EQ(inName,"vertexSize") ) { outValue = vertexSize; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { outValue = shaderPipeline; return true; }
	}
	return false;
}

hx::Val ImageShaderPainter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { bilinear=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pipeline(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { myPipeline=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=inValue.Cast<  ::kha::graphics4::IndexBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=inValue.Cast<  ::kha::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { sourceBlend=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=inValue.Cast<  ::kha::arrays::Float32Array >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { textureLocation=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { bilinearMipmaps=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=inValue.Cast<  ::kha::graphics4::VertexBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { destinationBlend=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { projectionLocation=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ImageShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bufferSize") ) { bufferSize=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"vertexSize") ) { vertexSize=ioValue.Cast< Int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { shaderPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
	}
	return false;
}

void ImageShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"));
	outFields->push(HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"));
	outFields->push(HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c"));
	outFields->push(HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b"));
	outFields->push(HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97"));
	outFields->push(HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54"));
	outFields->push(HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"));
	outFields->push(HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53"));
	outFields->push(HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"));
	outFields->push(HX_HCSTRING("bilinearMipmaps","\x5f","\x10","\xab","\x2b"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"));
	outFields->push(HX_HCSTRING("pipeline","\x22","\xbb","\x83","\x4b"));
	outFields->push(HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"));
	outFields->push(HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ImageShaderPainter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(ImageShaderPainter_obj,projectionMatrix),HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0")},
	{hx::fsObject /*::kha::graphics4::ConstantLocation*/ ,(int)offsetof(ImageShaderPainter_obj,projectionLocation),HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b")},
	{hx::fsObject /*::kha::graphics4::TextureUnit*/ ,(int)offsetof(ImageShaderPainter_obj,textureLocation),HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c")},
	{hx::fsInt,(int)offsetof(ImageShaderPainter_obj,bufferIndex),HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b")},
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(int)offsetof(ImageShaderPainter_obj,rectVertexBuffer),HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97")},
	{hx::fsObject /*::kha::arrays::Float32Array*/ ,(int)offsetof(ImageShaderPainter_obj,rectVertices),HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54")},
	{hx::fsObject /*::kha::graphics4::IndexBuffer*/ ,(int)offsetof(ImageShaderPainter_obj,indexBuffer),HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5")},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(ImageShaderPainter_obj,lastTexture),HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53")},
	{hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinear),HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0")},
	{hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinearMipmaps),HX_HCSTRING("bilinearMipmaps","\x5f","\x10","\xab","\x2b")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(ImageShaderPainter_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(int)offsetof(ImageShaderPainter_obj,myPipeline),HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(ImageShaderPainter_obj,sourceBlend),HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(ImageShaderPainter_obj,destinationBlend),HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ImageShaderPainter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &ImageShaderPainter_obj::shaderPipeline,HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc")},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(void *) &ImageShaderPainter_obj::structure,HX_HCSTRING("structure","\x33","\x54","\x4f","\x47")},
	{hx::fsInt,(void *) &ImageShaderPainter_obj::bufferSize,HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d")},
	{hx::fsInt,(void *) &ImageShaderPainter_obj::vertexSize,HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ImageShaderPainter_obj_sMemberFields[] = {
	HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"),
	HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"),
	HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c"),
	HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b"),
	HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97"),
	HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54"),
	HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"),
	HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53"),
	HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"),
	HX_HCSTRING("bilinearMipmaps","\x5f","\x10","\xab","\x2b"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"),
	HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"),
	HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"),
	HX_HCSTRING("get_pipeline","\x2b","\x6f","\x9d","\x00"),
	HX_HCSTRING("set_pipeline","\x9f","\x92","\x96","\x15"),
	HX_HCSTRING("setProjection","\xd1","\xc6","\x03","\x66"),
	HX_HCSTRING("initBuffers","\x43","\x12","\xfb","\x69"),
	HX_HCSTRING("setRectVertices","\xff","\x5f","\xac","\x73"),
	HX_HCSTRING("setRectTexCoords","\x9f","\xc2","\xa8","\xfb"),
	HX_HCSTRING("setRectColor","\x9d","\x31","\x74","\xf8"),
	HX_HCSTRING("drawBuffer","\x24","\x38","\x58","\x12"),
	HX_HCSTRING("setBilinearFilter","\x06","\xcb","\xde","\x13"),
	HX_HCSTRING("setBilinearMipmapFilter","\x2e","\xb1","\xaa","\x57"),
	HX_HCSTRING("drawImage","\xb7","\x54","\x74","\x85"),
	HX_HCSTRING("drawImage2","\x9b","\xcb","\x55","\x40"),
	HX_HCSTRING("drawImageScale","\x53","\x72","\xa6","\x67"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	::String(null()) };

static void ImageShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
};

#endif

hx::Class ImageShaderPainter_obj::__mClass;

static ::String ImageShaderPainter_obj_sStaticFields[] = {
	HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc"),
	HX_HCSTRING("structure","\x33","\x54","\x4f","\x47"),
	HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d"),
	HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd"),
	HX_HCSTRING("initShaders","\x7e","\xf0","\xf0","\x17"),
	::String(null())
};

void ImageShaderPainter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.ImageShaderPainter","\x7a","\xd5","\x6b","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ImageShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImageShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageShaderPainter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageShaderPainter_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",34,0x0c1de808)
HXLINE(  34)		shaderPipeline = null();
            	}
{
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",35,0x0c1de808)
HXLINE(  35)		structure = null();
            	}
{
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",38,0x0c1de808)
HXLINE(  38)		bufferSize = (int)1500;
            	}
{
            	HX_STACK_FRAME("kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",39,0x0c1de808)
HXLINE(  39)		vertexSize = (int)9;
            	}
}

} // end namespace kha
} // end namespace graphics4
