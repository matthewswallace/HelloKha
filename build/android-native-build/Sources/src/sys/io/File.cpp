// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif

namespace sys{
namespace io{

void File_obj::__construct() { }

Dynamic File_obj::__CreateEmpty() { return new File_obj; }

hx::ObjectPtr< File_obj > File_obj::__new()
{
	hx::ObjectPtr< File_obj > _hx_result = new File_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic File_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< File_obj > _hx_result = new File_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::haxe::io::Bytes File_obj::getBytes(::String path){
            	HX_STACK_FRAME("sys.io.File","getBytes",0xbe457600,"sys.io.File.getBytes","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/sys/io/File.hx",33,0xbd3610dc)
            	HX_STACK_ARG(path,"path")
HXLINE(  34)		HX_VARI( ::Array< unsigned char >,data) = _hx_std_file_contents_bytes(path);
HXLINE(  35)		return ::haxe::io::Bytes_obj::ofData(data);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(File_obj,getBytes,return )

 ::sys::io::FileInput File_obj::read(::String path,hx::Null< Bool >  __o_binary){
Bool binary = __o_binary.Default(true);
            	HX_STACK_FRAME("sys.io.File","read",0x203d07e1,"sys.io.File.read","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/sys/io/File.hx",51,0xbd3610dc)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(binary,"binary")
HXLINE(  51)		::String _hx_tmp;
HXDLIN(  51)		if (binary) {
HXLINE(  51)			_hx_tmp = HX_("rb",b0,63,00,00);
            		}
            		else {
HXLINE(  51)			_hx_tmp = HX_("r",72,00,00,00);
            		}
HXDLIN(  51)		 ::Dynamic _hx_tmp1 = _hx_std_file_open(path,_hx_tmp);
HXDLIN(  51)		return  ::sys::io::FileInput_obj::__new(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(File_obj,read,return )


File_obj::File_obj()
{
}

bool File_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *File_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *File_obj_sStaticStorageInfo = 0;
#endif

static void File_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(File_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void File_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(File_obj::__mClass,"__mClass");
};

#endif

hx::Class File_obj::__mClass;

static ::String File_obj_sStaticFields[] = {
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void File_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("sys.io.File","\xc3","\xef","\x8d","\xeb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &File_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = File_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(File_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< File_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = File_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = File_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = File_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace io
