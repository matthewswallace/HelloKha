// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif


void Date_obj::__construct(Int year,Int month,Int day,Int hour,Int min,Int sec){
            	HX_STACK_FRAME("Date","new",0x9aa26240,"Date.new","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Date.hx",27,0x28ecf66f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
            	HX_STACK_ARG(hour,"hour")
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(sec,"sec")
HXLINE(  27)		this->mSeconds = ::__hxcpp_new_date(year,month,day,hour,min,sec);
            	}

Dynamic Date_obj::__CreateEmpty() { return new Date_obj; }

hx::ObjectPtr< Date_obj > Date_obj::__new(Int year,Int month,Int day,Int hour,Int min,Int sec)
{
	hx::ObjectPtr< Date_obj > _hx_result = new Date_obj();
	_hx_result->__construct(year,month,day,hour,min,sec);
	return _hx_result;
}

Dynamic Date_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Date_obj > _hx_result = new Date_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

 ::Date Date_obj::fromTime(Float t){
            	HX_STACK_FRAME("Date","fromTime",0x44fd3cb7,"Date.fromTime","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Date.hx",57,0x28ecf66f)
            	HX_STACK_ARG(t,"t")
HXLINE(  58)		HX_VARI(  ::Date,result) =  ::Date_obj::__new((int)0,(int)0,(int)0,(int)0,(int)0,(int)0);
HXLINE(  59)		result->mSeconds = (t * ((Float)0.001));
HXLINE(  60)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Date_obj,fromTime,return )

 ::Date Date_obj::fromString(::String s){
            	HX_STACK_FRAME("Date","fromString",0x5ead97fb,"Date.fromString","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Date.hx",64,0x28ecf66f)
            	HX_STACK_ARG(s,"s")
HXLINE(  64)		HX_VARI( Int,_g) = s.length;
HXDLIN(  64)		switch((int)(_g)){
            			case (int)8: {
HXLINE(  66)				HX_VARI( ::Array< ::String >,k) = s.split(HX_(":",3a,00,00,00));
HXLINE(  67)				::String _hx_tmp = k->__get((int)0);
HXDLIN(  67)				 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(_hx_tmp);
HXDLIN(  67)				::String _hx_tmp2 = k->__get((int)1);
HXDLIN(  67)				 ::Dynamic _hx_tmp3 = ::Std_obj::parseInt(_hx_tmp2);
HXDLIN(  67)				::String _hx_tmp4 = k->__get((int)2);
HXDLIN(  67)				 ::Dynamic _hx_tmp5 = ::Std_obj::parseInt(_hx_tmp4);
HXDLIN(  67)				HX_VARI(  ::Date,d) =  ::Date_obj::__new((int)0,(int)0,(int)0,_hx_tmp1,_hx_tmp3,_hx_tmp5);
HXLINE(  68)				return d;
            			}
            			break;
            			case (int)10: {
HXLINE(  70)				HX_VARI_NAME( ::Array< ::String >,k1,"k") = s.split(HX_("-",2d,00,00,00));
HXLINE(  71)				::String _hx_tmp6 = k1->__get((int)0);
HXDLIN(  71)				 ::Dynamic _hx_tmp7 = ::Std_obj::parseInt(_hx_tmp6);
HXDLIN(  71)				::String _hx_tmp8 = k1->__get((int)1);
HXDLIN(  71)				 ::Dynamic _hx_tmp9 = ::Std_obj::parseInt(_hx_tmp8);
HXDLIN(  71)				Int _hx_tmp10 = (_hx_tmp9 - (int)1);
HXDLIN(  71)				::String _hx_tmp11 = k1->__get((int)2);
HXDLIN(  71)				 ::Dynamic _hx_tmp12 = ::Std_obj::parseInt(_hx_tmp11);
HXDLIN(  71)				return  ::Date_obj::__new(_hx_tmp7,_hx_tmp10,_hx_tmp12,(int)0,(int)0,(int)0);
            			}
            			break;
            			case (int)19: {
HXLINE(  73)				HX_VARI_NAME( ::Array< ::String >,k2,"k") = s.split(HX_(" ",20,00,00,00));
HXLINE(  74)				HX_VARI( ::Array< ::String >,y) = k2->__get((int)0).split(HX_("-",2d,00,00,00));
HXLINE(  75)				HX_VARI( ::Array< ::String >,t) = k2->__get((int)1).split(HX_(":",3a,00,00,00));
HXLINE(  76)				::String _hx_tmp13 = y->__get((int)0);
HXDLIN(  76)				 ::Dynamic _hx_tmp14 = ::Std_obj::parseInt(_hx_tmp13);
HXDLIN(  76)				::String _hx_tmp15 = y->__get((int)1);
HXDLIN(  76)				 ::Dynamic _hx_tmp16 = ::Std_obj::parseInt(_hx_tmp15);
HXDLIN(  76)				Int _hx_tmp17 = (_hx_tmp16 - (int)1);
HXDLIN(  76)				::String _hx_tmp18 = y->__get((int)2);
HXDLIN(  76)				 ::Dynamic _hx_tmp19 = ::Std_obj::parseInt(_hx_tmp18);
HXLINE(  77)				::String _hx_tmp20 = t->__get((int)0);
HXDLIN(  77)				 ::Dynamic _hx_tmp21 = ::Std_obj::parseInt(_hx_tmp20);
HXDLIN(  77)				::String _hx_tmp22 = t->__get((int)1);
HXDLIN(  77)				 ::Dynamic _hx_tmp23 = ::Std_obj::parseInt(_hx_tmp22);
HXDLIN(  77)				::String _hx_tmp24 = t->__get((int)2);
HXDLIN(  77)				 ::Dynamic _hx_tmp25 = ::Std_obj::parseInt(_hx_tmp24);
HXLINE(  76)				return  ::Date_obj::__new(_hx_tmp14,_hx_tmp17,_hx_tmp19,_hx_tmp21,_hx_tmp23,_hx_tmp25);
            			}
            			break;
            			default:{
HXLINE(  79)				HX_STACK_DO_THROW((HX_("Invalid date format : ",a6,de,58,13) + s));
            			}
            		}
HXLINE(  64)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Date_obj,fromString,return )


Date_obj::Date_obj()
{
}

hx::Val Date_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"mSeconds") ) { return hx::Val( mSeconds); }
	}
	return super::__Field(inName,inCallProp);
}

bool Date_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromTime") ) { outValue = fromTime_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

hx::Val Date_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"mSeconds") ) { mSeconds=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Date_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mSeconds","\x92","\x75","\x59","\x82"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Date_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Date_obj,mSeconds),HX_HCSTRING("mSeconds","\x92","\x75","\x59","\x82")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Date_obj_sStaticStorageInfo = 0;
#endif

static ::String Date_obj_sMemberFields[] = {
	HX_HCSTRING("mSeconds","\x92","\x75","\x59","\x82"),
	::String(null()) };

static void Date_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Date_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Date_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Date_obj::__mClass,"__mClass");
};

#endif

hx::Class Date_obj::__mClass;

static ::String Date_obj_sStaticFields[] = {
	HX_HCSTRING("fromTime","\x97","\x9a","\xc8","\xaa"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	::String(null())
};

void Date_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Date","\x4e","\x82","\x3c","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Date_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Date_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Date_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Date_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Date_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Date_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Date_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Date_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

