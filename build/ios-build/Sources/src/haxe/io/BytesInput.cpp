// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif

namespace haxe{
namespace io{

void BytesInput_obj::__construct( ::haxe::io::Bytes b, ::Dynamic pos, ::Dynamic len){
            	HX_STACK_FRAME("haxe.io.BytesInput","new",0x7fa18571,"haxe.io.BytesInput.new","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/haxe/io/BytesInput.hx",38,0xba6cdb81)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE(  39)		Bool _hx_tmp = hx::IsNull( pos );
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  39)			pos = (int)0;
            		}
HXLINE(  40)		Bool _hx_tmp1 = hx::IsNull( len );
HXDLIN(  40)		if (_hx_tmp1) {
HXLINE(  40)			len = (b->length - pos);
            		}
HXLINE(  41)		Bool _hx_tmp2;
HXDLIN(  41)		Bool _hx_tmp3;
HXDLIN(  41)		if (hx::IsGreaterEq( pos,(int)0 )) {
HXLINE(  41)			_hx_tmp3 = hx::IsLess( len,(int)0 );
            		}
            		else {
HXLINE(  41)			_hx_tmp3 = true;
            		}
HXDLIN(  41)		if (!(_hx_tmp3)) {
HXLINE(  41)			_hx_tmp2 = ((pos + len) > b->length);
            		}
            		else {
HXLINE(  41)			_hx_tmp2 = true;
            		}
HXDLIN(  41)		if (_hx_tmp2) {
HXLINE(  41)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE(  53)		this->b = b->b;
HXLINE(  54)		this->pos = pos;
HXLINE(  55)		this->len = len;
HXLINE(  56)		this->totlen = len;
            	}

Dynamic BytesInput_obj::__CreateEmpty() { return new BytesInput_obj; }

hx::ObjectPtr< BytesInput_obj > BytesInput_obj::__new( ::haxe::io::Bytes b, ::Dynamic pos, ::Dynamic len)
{
	hx::ObjectPtr< BytesInput_obj > _hx_result = new BytesInput_obj();
	_hx_result->__construct(b,pos,len);
	return _hx_result;
}

Dynamic BytesInput_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BytesInput_obj > _hx_result = new BytesInput_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

Int BytesInput_obj::set_position(Int p){
            	HX_STACK_FRAME("haxe.io.BytesInput","set_position",0xafd318f5,"haxe.io.BytesInput.set_position","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/haxe/io/BytesInput.hx",79,0xba6cdb81)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE(  80)		Bool _hx_tmp = (p < (int)0);
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  80)			p = (int)0;
            		}
            		else {
HXLINE(  81)			Bool _hx_tmp1 = (p > this->totlen);
HXDLIN(  81)			if (_hx_tmp1) {
HXLINE(  81)				p = this->totlen;
            			}
            		}
HXLINE(  85)		this->len = (this->totlen - p);
HXLINE(  86)		return (this->pos = p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesInput_obj,set_position,return )

Int BytesInput_obj::readByte(){
            	HX_STACK_FRAME("haxe.io.BytesInput","readByte",0xb70e46cd,"haxe.io.BytesInput.readByte","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/haxe/io/BytesInput.hx",90,0xba6cdb81)
            	HX_STACK_THIS(this)
HXLINE(  94)		if ((this->len == (int)0)) {
HXLINE(  95)			HX_STACK_DO_THROW( ::haxe::io::Eof_obj::__new());
            		}
HXLINE(  96)		this->len--;
HXLINE( 102)		return this->b->__get(this->pos++);
            	}


Int BytesInput_obj::readBytes( ::haxe::io::Bytes buf,Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.BytesInput","readBytes",0x756fad06,"haxe.io.BytesInput.readBytes","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/haxe/io/BytesInput.hx",111,0xba6cdb81)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buf,"buf")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE( 113)		Bool _hx_tmp;
HXDLIN( 113)		Bool _hx_tmp1;
HXDLIN( 113)		if ((pos >= (int)0)) {
HXLINE( 113)			_hx_tmp1 = (len < (int)0);
            		}
            		else {
HXLINE( 113)			_hx_tmp1 = true;
            		}
HXDLIN( 113)		if (!(_hx_tmp1)) {
HXLINE( 113)			_hx_tmp = ((pos + len) > buf->length);
            		}
            		else {
HXLINE( 113)			_hx_tmp = true;
            		}
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 114)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE( 137)		Bool _hx_tmp2;
HXDLIN( 137)		if ((this->len == (int)0)) {
HXLINE( 137)			_hx_tmp2 = (len > (int)0);
            		}
            		else {
HXLINE( 137)			_hx_tmp2 = false;
            		}
HXDLIN( 137)		if (_hx_tmp2) {
HXLINE( 138)			HX_STACK_DO_THROW( ::haxe::io::Eof_obj::__new());
            		}
HXLINE( 139)		Bool _hx_tmp3 = (this->len < len);
HXDLIN( 139)		if (_hx_tmp3) {
HXLINE( 140)			len = this->len;
            		}
HXLINE( 148)		HX_VARI( ::Array< unsigned char >,b1) = this->b;
HXLINE( 149)		HX_VARI( ::Array< unsigned char >,b2) = buf->b;
HXLINE( 150)		{
HXLINE( 150)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 150)			HX_VARI( Int,_g) = len;
HXDLIN( 150)			while((_g1 < _g)){
HXLINE( 150)				HX_VARI( Int,i) = _g1++;
HXLINE( 151)				Int _hx_tmp4 = (pos + i);
HXDLIN( 151)				unsigned char _hx_tmp5 = b1->__get((this->pos + i));
HXDLIN( 151)				b2[_hx_tmp4] = _hx_tmp5;
            			}
            		}
HXLINE( 153)		hx::AddEq(this->pos,len);
HXLINE( 154)		hx::SubEq(this->len,len);
HXLINE( 156)		return len;
            	}



BytesInput_obj::BytesInput_obj()
{
}

void BytesInput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BytesInput);
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(len,"len");
	HX_MARK_MEMBER_NAME(totlen,"totlen");
	HX_MARK_END_CLASS();
}

void BytesInput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(len,"len");
	HX_VISIT_MEMBER_NAME(totlen,"totlen");
}

hx::Val BytesInput_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos); }
		if (HX_FIELD_EQ(inName,"len") ) { return hx::Val( len); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"totlen") ) { return hx::Val( totlen); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BytesInput_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< ::Array< unsigned char > >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"len") ) { len=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"totlen") ) { totlen=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BytesInput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("len","\xd5","\x4b","\x52","\x00"));
	outFields->push(HX_HCSTRING("totlen","\xdc","\x4a","\xdf","\x97"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BytesInput_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< unsigned char >*/ ,(int)offsetof(BytesInput_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(BytesInput_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsInt,(int)offsetof(BytesInput_obj,len),HX_HCSTRING("len","\xd5","\x4b","\x52","\x00")},
	{hx::fsInt,(int)offsetof(BytesInput_obj,totlen),HX_HCSTRING("totlen","\xdc","\x4a","\xdf","\x97")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BytesInput_obj_sStaticStorageInfo = 0;
#endif

static ::String BytesInput_obj_sMemberFields[] = {
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("len","\xd5","\x4b","\x52","\x00"),
	HX_HCSTRING("totlen","\xdc","\x4a","\xdf","\x97"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	::String(null()) };

static void BytesInput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BytesInput_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BytesInput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BytesInput_obj::__mClass,"__mClass");
};

#endif

hx::Class BytesInput_obj::__mClass;

void BytesInput_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.io.BytesInput","\xff","\xf8","\x5b","\x64");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BytesInput_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BytesInput_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BytesInput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BytesInput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BytesInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BytesInput_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
