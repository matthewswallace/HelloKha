// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_ScreenRotation
#include <kha/ScreenRotation.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_network_Client
#include <kha/network/Client.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif
#ifndef INCLUDED_kha_network_Entity
#include <kha/network/Entity.h>
#endif
#ifndef INCLUDED_kha_network_LocalClient
#include <kha/network/LocalClient.h>
#endif
#ifndef INCLUDED_kha_network_Network
#include <kha/network/Network.h>
#endif
#ifndef INCLUDED_kha_network_Session
#include <kha/network/Session.h>
#endif
#ifndef INCLUDED_kha_network_SyncBuilder
#include <kha/network/SyncBuilder.h>
#endif

namespace kha{
namespace network{

void Session_obj::__construct(Int maxPlayers,::String address,Int port){
            	HX_STACK_FRAME("kha.network.Session","new",0x2871021e,"kha.network.Session.new","kha/network/Session.hx",25,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maxPlayers,"maxPlayers")
            	HX_STACK_ARG(address,"address")
            	HX_STACK_ARG(port,"port")
HXLINE(  42)		this->ping = ((Float)1);
HXLINE(  41)		this->currentPlayers = (int)0;
HXLINE(  39)		this->controllers =  ::haxe::ds::IntMap_obj::__new();
HXLINE(  38)		this->entities =  ::haxe::ds::IntMap_obj::__new();
HXLINE(  73)		::kha::network::Session_obj::instance = hx::ObjectPtr<OBJ_>(this);
HXLINE(  74)		this->maxPlayers = maxPlayers;
HXLINE(  75)		this->address = address;
HXLINE(  76)		this->port = port;
            	}

Dynamic Session_obj::__CreateEmpty() { return new Session_obj; }

hx::ObjectPtr< Session_obj > Session_obj::__new(Int maxPlayers,::String address,Int port)
{
	hx::ObjectPtr< Session_obj > _hx_result = new Session_obj();
	_hx_result->__construct(maxPlayers,address,port);
	return _hx_result;
}

Dynamic Session_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Session_obj > _hx_result = new Session_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

::Dynamic Session_obj::get_me(){
            	HX_STACK_FRAME("kha.network.Session","get_me",0x8c3defa3,"kha.network.Session.get_me","kha/network/Session.hx",68,0x4384aa94)
            	HX_STACK_THIS(this)
HXLINE(  68)		return this->localClient;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,get_me,return )

void Session_obj::addEntity(::Dynamic entity){
            	HX_STACK_FRAME("kha.network.Session","addEntity",0xd1c65c62,"kha.network.Session.addEntity","kha/network/Session.hx",84,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(entity,"entity")
HXLINE(  84)		Int key = ::kha::network::Entity_obj::_id(entity);
HXDLIN(  84)		this->entities->set(key,entity);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,addEntity,(void))

void Session_obj::addController( ::kha::network::Controller controller){
            	HX_STACK_FRAME("kha.network.Session","addController",0xf4ffed5b,"kha.network.Session.addController","kha/network/Session.hx",87,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controller,"controller")
HXLINE(  88)		Int _hx_tmp = controller->_id();
HXDLIN(  88)		::haxe::Log_obj::trace((HX_("Adding controller id ",20,e6,6a,34) + _hx_tmp),hx::SourceInfo(HX_("Session.hx",48,e9,fc,1e),88,HX_("kha.network.Session",2c,5b,4a,50),HX_("addController",1d,e2,07,6f)));
HXLINE(  89)		controller->_inputBufferIndex = (int)0;
HXLINE(  90)		{
HXLINE(  90)			Int key = controller->_id();
HXDLIN(  90)			this->controllers->set(key,controller);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,addController,(void))

void Session_obj::sendControllerUpdate(Int id, ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("kha.network.Session","sendControllerUpdate",0xcc1e61af,"kha.network.Session.sendControllerUpdate","kha/network/Session.hx",121,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 121)		Bool _hx_tmp = this->controllers->exists(id);
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 122)			Int _hx_tmp1 = this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBuffer->length;
HXDLIN( 122)			Int _hx_tmp2 = (this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBufferIndex + (int)4);
HXDLIN( 122)			Bool _hx_tmp3 = (_hx_tmp1 < (_hx_tmp2 + bytes->length));
HXDLIN( 122)			if (_hx_tmp3) {
HXLINE( 123)				Int _hx_tmp4 = (this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBufferIndex + (int)4);
HXDLIN( 123)				Int _hx_tmp5 = (_hx_tmp4 + bytes->length);
HXDLIN( 123)				HX_VARI(  ::haxe::io::Bytes,newBuffer) = ::haxe::io::Bytes_obj::alloc(_hx_tmp5);
HXLINE( 124)				 ::haxe::io::Bytes _hx_tmp6 = this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBuffer;
HXDLIN( 124)				newBuffer->blit((int)0,_hx_tmp6,(int)0,this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBufferIndex);
HXLINE( 125)				this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBuffer = newBuffer;
            			}
HXLINE( 128)			{
HXLINE( 128)				HX_VARI(  ::haxe::io::Bytes,_this) = this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBuffer;
HXDLIN( 128)				HX_VARI( Int,pos) = this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBufferIndex;
HXDLIN( 128)				HX_VARI( Int,v) = bytes->length;
HXDLIN( 128)				_this->b[pos] = v;
HXDLIN( 128)				_this->b[(pos + (int)1)] = ((int)v >> (int)(int)8);
HXDLIN( 128)				_this->b[(pos + (int)2)] = ((int)v >> (int)(int)16);
HXDLIN( 128)				_this->b[(pos + (int)3)] = hx::UShr(v,(int)24);
            			}
HXLINE( 129)			 ::haxe::io::Bytes _hx_tmp7 = this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBuffer;
HXDLIN( 129)			Int _hx_tmp8 = (this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBufferIndex + (int)4);
HXDLIN( 129)			_hx_tmp7->blit(_hx_tmp8,bytes,(int)0,bytes->length);
HXLINE( 130)			hx::AddEq(this->controllers->get(id).StaticCast<  ::kha::network::Controller >()->_inputBufferIndex,((int)4 + bytes->length));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Session_obj,sendControllerUpdate,(void))

void Session_obj::sendPing(){
            	HX_STACK_FRAME("kha.network.Session","sendPing",0xa165ad5c,"kha.network.Session.sendPing","kha/network/Session.hx",135,0x4384aa94)
            	HX_STACK_THIS(this)
HXLINE( 137)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((int)5);
HXLINE( 138)		bytes->b[(int)0] = (int)4;
HXLINE( 139)		bytes->setFloat((int)1,::kha::Scheduler_obj::realTime());
HXLINE( 141)		this->sendToServer(bytes);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,sendPing,(void))

void Session_obj::sendPlayerUpdate(){
            	HX_STACK_FRAME("kha.network.Session","sendPlayerUpdate",0x65f8d934,"kha.network.Session.sendPlayerUpdate","kha/network/Session.hx",145,0x4384aa94)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,sendPlayerUpdate,(void))

void Session_obj::receive( ::haxe::io::Bytes bytes,::Dynamic client){
            	HX_STACK_FRAME("kha.network.Session","receive",0x2d844aa1,"kha.network.Session.receive","kha/network/Session.hx",215,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(client,"client")
HXLINE( 215)		HX_VARI( Int,_g) = bytes->b->__get((int)0);
HXDLIN( 215)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 217)				HX_VARI( Int,index) = bytes->b->__get((int)1);
HXLINE( 218)				this->localClient =  ::kha::network::LocalClient_obj::__new(index);
HXLINE( 219)				::kha::Scheduler_obj::resetTime();
HXLINE( 220)				this->startCallback();
            			}
            			break;
            			case (int)1: {
HXLINE( 222)				if (((int)9 > bytes->length)) {
HXLINE( 222)					HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            				}
HXDLIN( 222)				HX_VARI( Float,time) = ::__hxcpp_memory_get_double(bytes->b,(int)1);
HXLINE( 223)				HX_VARI( Int,offset) = (int)9;
HXLINE( 224)				{
HXLINE( 224)					HX_VARI(  ::Dynamic,tmp) = this->entities->iterator();
HXDLIN( 224)					while(true){
HXLINE( 224)						Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 224)						if (_hx_tmp) {
HXLINE( 224)							goto _hx_goto_0;
            						}
HXDLIN( 224)						HX_VARI( ::Dynamic,entity) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 225)						::kha::network::Entity_obj::_receive(entity,offset,bytes);
HXLINE( 226)						Int _hx_tmp1 = ::kha::network::Entity_obj::_size(entity);
HXDLIN( 226)						hx::AddEq(offset,_hx_tmp1);
            					}
            					_hx_goto_0:;
            				}
HXLINE( 228)				::kha::Scheduler_obj::back(time);
            			}
            			break;
            			case (int)3: {
HXLINE( 230)				HX_VARI_NAME( Int,_g1,"_g") = bytes->b->__get((int)1);
HXDLIN( 230)				switch((int)(_g1)){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE( 234)						this->executeRPC(bytes);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 237)				if (((int)5 > bytes->length)) {
HXLINE( 237)					HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            				}
HXDLIN( 237)				HX_VARI( Float,sendTime) = ::__hxcpp_memory_get_float(bytes->b,(int)1);
HXLINE( 238)				this->ping = (::kha::Scheduler_obj::realTime() - sendTime);
            			}
            			break;
            			case (int)5: {
HXLINE( 240)				this->refusedCallback();
            			}
            			break;
            			case (int)6: {
HXLINE( 242)				Int _hx_tmp2 = ((int)((int)bytes->b->__get((int)1) | (int)((int)bytes->b->__get((int)2) << (int)(int)8)) | (int)((int)bytes->b->__get((int)3) << (int)(int)16));
HXDLIN( 242)				Int _hx_tmp3 = ((int)bytes->b->__get((int)4) << (int)(int)24);
HXDLIN( 242)				this->currentPlayers = ((int)_hx_tmp2 | (int)_hx_tmp3);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Session_obj,receive,(void))

void Session_obj::executeRPC( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("kha.network.Session","executeRPC",0x1a47a5b2,"kha.network.Session.executeRPC","kha/network/Session.hx",260,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 261)		HX_VARI( ::cpp::VirtualArray,args) = ::cpp::VirtualArray_obj::__new();
HXLINE( 262)		HX_VARI( Int,syncId) = ((int)((int)((int)bytes->b->__get((int)2) | (int)((int)bytes->b->__get((int)3) << (int)(int)8)) | (int)((int)bytes->b->__get((int)4) << (int)(int)16)) | (int)((int)bytes->b->__get((int)5) << (int)(int)24));
HXLINE( 263)		HX_VARI( Int,index) = (int)6;
HXLINE( 265)		HX_VARI( Int,classnamelength) = ((int)bytes->b->__get((int)6) | (int)((int)bytes->b->__get((int)7) << (int)(int)8));
HXLINE( 266)		index = (int)8;
HXLINE( 267)		HX_VARI( ::String,classname) = HX_("",00,00,00,00);
HXLINE( 268)		{
HXLINE( 268)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 268)			while((_g1 < classnamelength)){
HXLINE( 268)				++_g1;
HXLINE( 269)				hx::AddEq(classname,::String::fromCharCode(bytes->b->__get(index)));
HXLINE( 270)				++index;
            			}
            		}
HXLINE( 273)		HX_VARI( Int,methodnamelength) = ((int)bytes->b->__get(index) | (int)((int)bytes->b->__get((index + (int)1)) << (int)(int)8));
HXLINE( 274)		hx::AddEq(index,(int)2);
HXLINE( 275)		HX_VARI( ::String,methodname) = HX_("",00,00,00,00);
HXLINE( 276)		{
HXLINE( 276)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 276)			while((_g11 < methodnamelength)){
HXLINE( 276)				++_g11;
HXLINE( 277)				hx::AddEq(methodname,::String::fromCharCode(bytes->b->__get(index)));
HXLINE( 278)				++index;
            			}
            		}
HXLINE( 281)		while((index < bytes->length)){
HXLINE( 282)			HX_VARI( Int,type) = bytes->b->__get(index);
HXLINE( 283)			++index;
HXLINE( 284)			switch((int)(type)){
            				case (int)66: {
HXLINE( 286)					HX_VARI( Bool,value) = (bytes->b->__get(index) == (int)1);
HXLINE( 287)					++index;
HXLINE( 288)					::String _hx_tmp = ::Std_obj::string(value);
HXDLIN( 288)					::haxe::Log_obj::trace((HX_("Bool: ",70,09,b9,96) + _hx_tmp),hx::SourceInfo(HX_("Session.hx",48,e9,fc,1e),288,HX_("kha.network.Session",2c,5b,4a,50),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 289)					args->push(value);
            				}
            				break;
            				case (int)70: {
HXLINE( 291)					Bool _hx_tmp1;
HXDLIN( 291)					if ((index >= (int)0)) {
HXLINE( 291)						_hx_tmp1 = ((index + (int)8) > bytes->length);
            					}
            					else {
HXLINE( 291)						_hx_tmp1 = true;
            					}
HXDLIN( 291)					if (_hx_tmp1) {
HXLINE( 291)						HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            					}
HXDLIN( 291)					HX_VARI_NAME( Float,value1,"value") = ::__hxcpp_memory_get_double(bytes->b,index);
HXLINE( 292)					hx::AddEq(index,(int)8);
HXLINE( 293)					::haxe::Log_obj::trace((HX_("Float: ",22,bf,59,b7) + value1),hx::SourceInfo(HX_("Session.hx",48,e9,fc,1e),293,HX_("kha.network.Session",2c,5b,4a,50),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 294)					args->push(value1);
            				}
            				break;
            				case (int)73: {
HXLINE( 296)					HX_VARI_NAME( Int,value2,"value") = ((int)((int)((int)bytes->b->__get(index) | (int)((int)bytes->b->__get((index + (int)1)) << (int)(int)8)) | (int)((int)bytes->b->__get((index + (int)2)) << (int)(int)16)) | (int)((int)bytes->b->__get((index + (int)3)) << (int)(int)24));
HXLINE( 297)					hx::AddEq(index,(int)4);
HXLINE( 298)					::haxe::Log_obj::trace((HX_("Int: ",35,09,4e,51) + value2),hx::SourceInfo(HX_("Session.hx",48,e9,fc,1e),298,HX_("kha.network.Session",2c,5b,4a,50),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 299)					args->push(value2);
            				}
            				break;
            				case (int)83: {
HXLINE( 301)					HX_VARI( Int,length) = ((int)bytes->b->__get(index) | (int)((int)bytes->b->__get((index + (int)1)) << (int)(int)8));
HXLINE( 302)					hx::AddEq(index,(int)2);
HXLINE( 303)					HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXLINE( 304)					{
HXLINE( 304)						HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 304)						while((_g12 < length)){
HXLINE( 304)							++_g12;
HXLINE( 305)							hx::AddEq(str,::String::fromCharCode(bytes->b->__get(index)));
HXLINE( 306)							++index;
            						}
            					}
HXLINE( 308)					::haxe::Log_obj::trace((HX_("String: ",d7,ad,da,b5) + str),hx::SourceInfo(HX_("Session.hx",48,e9,fc,1e),308,HX_("kha.network.Session",2c,5b,4a,50),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 309)					args->push(str);
            				}
            				break;
            				default:{
HXLINE( 311)					::haxe::Log_obj::trace(HX_("Unknown argument type.",47,fa,c6,a3),hx::SourceInfo(HX_("Session.hx",48,e9,fc,1e),311,HX_("kha.network.Session",2c,5b,4a,50),HX_("executeRPC",b0,03,7c,39)));
            				}
            			}
            		}
HXLINE( 314)		if ((syncId == (int)-1)) {
HXLINE( 315)			hx::Class _hx_tmp2 = ::Type_obj::resolveClass(classname);
HXDLIN( 315)			 ::Dynamic _hx_tmp3 = ::Reflect_obj::field(_hx_tmp2,(methodname + HX_("_remotely",f2,1d,5f,f3)));
HXDLIN( 315)			::Reflect_obj::callMethod(null(),_hx_tmp3,args);
            		}
            		else {
HXLINE( 318)			 ::Dynamic _hx_tmp4 = ::kha::network::SyncBuilder_obj::objects->__get(syncId);
HXDLIN( 318)			 ::Dynamic _hx_tmp5 = ::kha::network::SyncBuilder_obj::objects->__get(syncId);
HXDLIN( 318)			 ::Dynamic _hx_tmp6 = ::Reflect_obj::field(_hx_tmp5,(methodname + HX_("_remotely",f2,1d,5f,f3)));
HXDLIN( 318)			::Reflect_obj::callMethod(_hx_tmp4,_hx_tmp6,args);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,executeRPC,(void))

void Session_obj::waitForStart( ::Dynamic callback, ::Dynamic refuseCallback, ::Dynamic errorCallback, ::Dynamic closeCallback, ::Dynamic resCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::kha::network::Session,_gthis, ::Dynamic,closeCallback) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("kha.network.Session","waitForStart",0x942cb6b0,"kha.network.Session.waitForStart","kha/network/Session.hx",377,0x4384aa94)
HXLINE( 378)			closeCallback();
HXLINE( 379)			_gthis->reset();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::kha::network::Session,_gthis) HXARGC(1)
            		void _hx_run( ::haxe::io::Bytes bytes){
            			HX_STACK_FRAME("kha.network.Session","waitForStart",0x942cb6b0,"kha.network.Session.waitForStart","kha/network/Session.hx",381,0x4384aa94)
            			HX_STACK_ARG(bytes,"bytes")
HXLINE( 381)			_gthis->receive(bytes,null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("kha.network.Session","waitForStart",0x942cb6b0,"kha.network.Session.waitForStart","kha/network/Session.hx",322,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(refuseCallback,"refuseCallback")
            	HX_STACK_ARG(errorCallback,"errorCallback")
            	HX_STACK_ARG(closeCallback,"closeCallback")
            	HX_STACK_ARG(resCallback,"resCallback")
HXLINE( 322)		HX_VARI(  ::kha::network::Session,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 323)		this->startCallback = callback;
HXLINE( 324)		this->refusedCallback = refuseCallback;
HXLINE( 325)		this->resetCallback = resCallback;
HXLINE( 377)		this->network =  ::kha::network::Network_obj::__new(this->address,this->port,errorCallback, ::Dynamic(new _hx_Closure_0(_gthis,closeCallback)));
HXLINE( 381)		this->network->listen( ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 382)		this->updateTaskId = ::kha::Scheduler_obj::addFrameTask(this->update_dyn(),(int)0);
HXLINE( 383)		this->ping = (int)1;
HXLINE( 384)		this->pingTaskId = ::kha::Scheduler_obj::addTimeTask(this->sendPing_dyn(),(int)0,(int)1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(Session_obj,waitForStart,(void))

void Session_obj::reset(){
            	HX_STACK_FRAME("kha.network.Session","reset",0x35e3e70d,"kha.network.Session.reset","kha/network/Session.hx",388,0x4384aa94)
            	HX_STACK_THIS(this)
HXLINE( 393)		::kha::Scheduler_obj::removeFrameTask(this->updateTaskId);
HXLINE( 394)		::kha::Scheduler_obj::removeTimeTask(this->pingTaskId);
HXLINE( 396)		this->currentPlayers = (int)0;
HXLINE( 397)		this->ping = (int)1;
HXLINE( 398)		this->controllers =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 399)		this->entities =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 400)		this->resetCallback();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,reset,(void))

void Session_obj::update(){
            	HX_STACK_FRAME("kha.network.Session","update",0x70137f0b,"kha.network.Session.update","kha/network/Session.hx",408,0x4384aa94)
            	HX_STACK_THIS(this)
HXLINE( 408)		HX_VARI(  ::Dynamic,tmp) = this->controllers->iterator();
HXDLIN( 408)		while(true){
HXLINE( 408)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 408)			if (_hx_tmp) {
HXLINE( 408)				goto _hx_goto_5;
            			}
HXDLIN( 408)			HX_VARI(  ::kha::network::Controller,controller) = ( ( ::kha::network::Controller)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 409)			Bool _hx_tmp1 = (controller->_inputBufferIndex > (int)0);
HXDLIN( 409)			if (_hx_tmp1) {
HXLINE( 410)				Int _hx_tmp2 = ((int)22 + controller->_inputBufferIndex);
HXDLIN( 410)				HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc(_hx_tmp2);
HXLINE( 411)				bytes->b[(int)0] = (int)2;
HXLINE( 412)				{
HXLINE( 412)					HX_VARI( Int,v) = controller->_id();
HXDLIN( 412)					bytes->b[(int)1] = v;
HXDLIN( 412)					bytes->b[(int)2] = ((int)v >> (int)(int)8);
HXDLIN( 412)					bytes->b[(int)3] = ((int)v >> (int)(int)16);
HXDLIN( 412)					bytes->b[(int)4] = hx::UShr(v,(int)24);
            				}
HXLINE( 413)				bytes->setDouble((int)5,::kha::Scheduler_obj::realTime());
HXLINE( 414)				{
HXLINE( 414)					HX_VARI_NAME( Int,v1,"v") = ::kha::System_obj::windowWidth((int)0);
HXDLIN( 414)					bytes->b[(int)13] = v1;
HXDLIN( 414)					bytes->b[(int)14] = ((int)v1 >> (int)(int)8);
HXDLIN( 414)					bytes->b[(int)15] = ((int)v1 >> (int)(int)16);
HXDLIN( 414)					bytes->b[(int)16] = hx::UShr(v1,(int)24);
            				}
HXLINE( 415)				{
HXLINE( 415)					HX_VARI_NAME( Int,v2,"v") = ::kha::System_obj::windowHeight((int)0);
HXDLIN( 415)					bytes->b[(int)17] = v2;
HXDLIN( 415)					bytes->b[(int)18] = ((int)v2 >> (int)(int)8);
HXDLIN( 415)					bytes->b[(int)19] = ((int)v2 >> (int)(int)16);
HXDLIN( 415)					bytes->b[(int)20] = hx::UShr(v2,(int)24);
            				}
HXLINE( 416)				{
HXLINE( 416)					Int v3 = ( ( ::hx::EnumBase)(::kha::System_obj::get_screenRotation()) )->_hx_getIndex();
HXDLIN( 416)					bytes->b[(int)21] = v3;
            				}
HXLINE( 418)				bytes->blit((int)22,controller->_inputBuffer,(int)0,controller->_inputBufferIndex);
HXLINE( 420)				this->sendToServer(bytes);
HXLINE( 421)				controller->_inputBufferIndex = (int)0;
            			}
            		}
            		_hx_goto_5:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,update,(void))

void Session_obj::sendToServer( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("kha.network.Session","sendToServer",0x3aac6a88,"kha.network.Session.sendToServer","kha/network/Session.hx",437,0x4384aa94)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 437)		this->network->send(bytes,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,sendToServer,(void))

Int Session_obj::START;

Int Session_obj::ENTITY_UPDATES;

Int Session_obj::CONTROLLER_UPDATES;

Int Session_obj::REMOTE_CALL;

Int Session_obj::PING;

Int Session_obj::ERROR;

Int Session_obj::PLAYER_UPDATES;

Int Session_obj::RPC_SERVER;

Int Session_obj::RPC_ALL;

 ::kha::network::Session Session_obj::instance;

 ::kha::network::Session Session_obj::the(){
            	HX_STACK_FRAME("kha.network.Session","the",0x2875922f,"kha.network.Session.the","kha/network/Session.hx",80,0x4384aa94)
HXLINE(  80)		return ::kha::network::Session_obj::instance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Session_obj,the,return )


Session_obj::Session_obj()
{
}

void Session_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Session);
	HX_MARK_MEMBER_NAME(entities,"entities");
	HX_MARK_MEMBER_NAME(controllers,"controllers");
	HX_MARK_MEMBER_NAME(maxPlayers,"maxPlayers");
	HX_MARK_MEMBER_NAME(currentPlayers,"currentPlayers");
	HX_MARK_MEMBER_NAME(ping,"ping");
	HX_MARK_MEMBER_NAME(address,"address");
	HX_MARK_MEMBER_NAME(port,"port");
	HX_MARK_MEMBER_NAME(startCallback,"startCallback");
	HX_MARK_MEMBER_NAME(refusedCallback,"refusedCallback");
	HX_MARK_MEMBER_NAME(resetCallback,"resetCallback");
	HX_MARK_MEMBER_NAME(localClient,"localClient");
	HX_MARK_MEMBER_NAME(network,"network");
	HX_MARK_MEMBER_NAME(updateTaskId,"updateTaskId");
	HX_MARK_MEMBER_NAME(pingTaskId,"pingTaskId");
	HX_MARK_MEMBER_NAME(me,"me");
	HX_MARK_END_CLASS();
}

void Session_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(entities,"entities");
	HX_VISIT_MEMBER_NAME(controllers,"controllers");
	HX_VISIT_MEMBER_NAME(maxPlayers,"maxPlayers");
	HX_VISIT_MEMBER_NAME(currentPlayers,"currentPlayers");
	HX_VISIT_MEMBER_NAME(ping,"ping");
	HX_VISIT_MEMBER_NAME(address,"address");
	HX_VISIT_MEMBER_NAME(port,"port");
	HX_VISIT_MEMBER_NAME(startCallback,"startCallback");
	HX_VISIT_MEMBER_NAME(refusedCallback,"refusedCallback");
	HX_VISIT_MEMBER_NAME(resetCallback,"resetCallback");
	HX_VISIT_MEMBER_NAME(localClient,"localClient");
	HX_VISIT_MEMBER_NAME(network,"network");
	HX_VISIT_MEMBER_NAME(updateTaskId,"updateTaskId");
	HX_VISIT_MEMBER_NAME(pingTaskId,"pingTaskId");
	HX_VISIT_MEMBER_NAME(me,"me");
}

hx::Val Session_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"me") ) { return hx::Val( inCallProp == hx::paccAlways ? get_me() : me); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ping") ) { return hx::Val( ping); }
		if (HX_FIELD_EQ(inName,"port") ) { return hx::Val( port); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_me") ) { return hx::Val( get_me_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"address") ) { return hx::Val( address); }
		if (HX_FIELD_EQ(inName,"network") ) { return hx::Val( network); }
		if (HX_FIELD_EQ(inName,"receive") ) { return hx::Val( receive_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { return hx::Val( entities); }
		if (HX_FIELD_EQ(inName,"sendPing") ) { return hx::Val( sendPing_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addEntity") ) { return hx::Val( addEntity_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxPlayers") ) { return hx::Val( maxPlayers); }
		if (HX_FIELD_EQ(inName,"pingTaskId") ) { return hx::Val( pingTaskId); }
		if (HX_FIELD_EQ(inName,"executeRPC") ) { return hx::Val( executeRPC_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"controllers") ) { return hx::Val( controllers); }
		if (HX_FIELD_EQ(inName,"localClient") ) { return hx::Val( localClient); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateTaskId") ) { return hx::Val( updateTaskId); }
		if (HX_FIELD_EQ(inName,"waitForStart") ) { return hx::Val( waitForStart_dyn()); }
		if (HX_FIELD_EQ(inName,"sendToServer") ) { return hx::Val( sendToServer_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startCallback") ) { return hx::Val( startCallback); }
		if (HX_FIELD_EQ(inName,"resetCallback") ) { return hx::Val( resetCallback); }
		if (HX_FIELD_EQ(inName,"addController") ) { return hx::Val( addController_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentPlayers") ) { return hx::Val( currentPlayers); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"refusedCallback") ) { return hx::Val( refusedCallback); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sendPlayerUpdate") ) { return hx::Val( sendPlayerUpdate_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sendControllerUpdate") ) { return hx::Val( sendControllerUpdate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Session_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"the") ) { outValue = the_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = instance; return true; }
	}
	return false;
}

hx::Val Session_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"me") ) { me=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ping") ) { ping=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"port") ) { port=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"address") ) { address=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"network") ) { network=inValue.Cast<  ::kha::network::Network >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { entities=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxPlayers") ) { maxPlayers=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pingTaskId") ) { pingTaskId=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"controllers") ) { controllers=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localClient") ) { localClient=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateTaskId") ) { updateTaskId=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startCallback") ) { startCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resetCallback") ) { resetCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentPlayers") ) { currentPlayers=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"refusedCallback") ) { refusedCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Session_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::kha::network::Session >(); return true; }
	}
	return false;
}

void Session_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("entities","\x41","\x96","\x95","\x92"));
	outFields->push(HX_HCSTRING("controllers","\x57","\xf0","\x06","\x22"));
	outFields->push(HX_HCSTRING("maxPlayers","\xae","\x83","\x39","\xf4"));
	outFields->push(HX_HCSTRING("currentPlayers","\xb9","\x7e","\xa9","\x97"));
	outFields->push(HX_HCSTRING("ping","\x72","\xf2","\x57","\x4a"));
	outFields->push(HX_HCSTRING("address","\xb4","\x71","\x0b","\x9d"));
	outFields->push(HX_HCSTRING("port","\x81","\x83","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("localClient","\x16","\x6a","\x8a","\xc7"));
	outFields->push(HX_HCSTRING("network","\xae","\xc4","\xbc","\x59"));
	outFields->push(HX_HCSTRING("updateTaskId","\x69","\xc1","\x5c","\x87"));
	outFields->push(HX_HCSTRING("pingTaskId","\x92","\xe2","\x95","\xb0"));
	outFields->push(HX_HCSTRING("me","\x58","\x5f","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Session_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Session_obj,entities),HX_HCSTRING("entities","\x41","\x96","\x95","\x92")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Session_obj,controllers),HX_HCSTRING("controllers","\x57","\xf0","\x06","\x22")},
	{hx::fsInt,(int)offsetof(Session_obj,maxPlayers),HX_HCSTRING("maxPlayers","\xae","\x83","\x39","\xf4")},
	{hx::fsInt,(int)offsetof(Session_obj,currentPlayers),HX_HCSTRING("currentPlayers","\xb9","\x7e","\xa9","\x97")},
	{hx::fsFloat,(int)offsetof(Session_obj,ping),HX_HCSTRING("ping","\x72","\xf2","\x57","\x4a")},
	{hx::fsString,(int)offsetof(Session_obj,address),HX_HCSTRING("address","\xb4","\x71","\x0b","\x9d")},
	{hx::fsInt,(int)offsetof(Session_obj,port),HX_HCSTRING("port","\x81","\x83","\x5c","\x4a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Session_obj,startCallback),HX_HCSTRING("startCallback","\x47","\xfc","\xc1","\x83")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Session_obj,refusedCallback),HX_HCSTRING("refusedCallback","\xf5","\xf6","\xee","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Session_obj,resetCallback),HX_HCSTRING("resetCallback","\xb4","\x86","\xa5","\xaf")},
	{hx::fsObject /*::kha::network::Client*/ ,(int)offsetof(Session_obj,localClient),HX_HCSTRING("localClient","\x16","\x6a","\x8a","\xc7")},
	{hx::fsObject /*::kha::network::Network*/ ,(int)offsetof(Session_obj,network),HX_HCSTRING("network","\xae","\xc4","\xbc","\x59")},
	{hx::fsInt,(int)offsetof(Session_obj,updateTaskId),HX_HCSTRING("updateTaskId","\x69","\xc1","\x5c","\x87")},
	{hx::fsInt,(int)offsetof(Session_obj,pingTaskId),HX_HCSTRING("pingTaskId","\x92","\xe2","\x95","\xb0")},
	{hx::fsObject /*::kha::network::Client*/ ,(int)offsetof(Session_obj,me),HX_HCSTRING("me","\x58","\x5f","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Session_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Session_obj::START,HX_HCSTRING("START","\x42","\xac","\xf9","\x01")},
	{hx::fsInt,(void *) &Session_obj::ENTITY_UPDATES,HX_HCSTRING("ENTITY_UPDATES","\xce","\x09","\x53","\xd1")},
	{hx::fsInt,(void *) &Session_obj::CONTROLLER_UPDATES,HX_HCSTRING("CONTROLLER_UPDATES","\x47","\xf8","\x2b","\x32")},
	{hx::fsInt,(void *) &Session_obj::REMOTE_CALL,HX_HCSTRING("REMOTE_CALL","\x37","\x50","\xb5","\x4f")},
	{hx::fsInt,(void *) &Session_obj::PING,HX_HCSTRING("PING","\x72","\xba","\x18","\x35")},
	{hx::fsInt,(void *) &Session_obj::ERROR,HX_HCSTRING("ERROR","\xa8","\x03","\x18","\xf1")},
	{hx::fsInt,(void *) &Session_obj::PLAYER_UPDATES,HX_HCSTRING("PLAYER_UPDATES","\x0c","\x50","\xff","\xc6")},
	{hx::fsInt,(void *) &Session_obj::RPC_SERVER,HX_HCSTRING("RPC_SERVER","\x3d","\x1c","\xb0","\x0a")},
	{hx::fsInt,(void *) &Session_obj::RPC_ALL,HX_HCSTRING("RPC_ALL","\x47","\x9f","\x42","\x21")},
	{hx::fsObject /*::kha::network::Session*/ ,(void *) &Session_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Session_obj_sMemberFields[] = {
	HX_HCSTRING("entities","\x41","\x96","\x95","\x92"),
	HX_HCSTRING("controllers","\x57","\xf0","\x06","\x22"),
	HX_HCSTRING("maxPlayers","\xae","\x83","\x39","\xf4"),
	HX_HCSTRING("currentPlayers","\xb9","\x7e","\xa9","\x97"),
	HX_HCSTRING("ping","\x72","\xf2","\x57","\x4a"),
	HX_HCSTRING("address","\xb4","\x71","\x0b","\x9d"),
	HX_HCSTRING("port","\x81","\x83","\x5c","\x4a"),
	HX_HCSTRING("startCallback","\x47","\xfc","\xc1","\x83"),
	HX_HCSTRING("refusedCallback","\xf5","\xf6","\xee","\x7d"),
	HX_HCSTRING("resetCallback","\xb4","\x86","\xa5","\xaf"),
	HX_HCSTRING("localClient","\x16","\x6a","\x8a","\xc7"),
	HX_HCSTRING("network","\xae","\xc4","\xbc","\x59"),
	HX_HCSTRING("updateTaskId","\x69","\xc1","\x5c","\x87"),
	HX_HCSTRING("pingTaskId","\x92","\xe2","\x95","\xb0"),
	HX_HCSTRING("me","\x58","\x5f","\x00","\x00"),
	HX_HCSTRING("get_me","\xa1","\xf6","\x2f","\xa3"),
	HX_HCSTRING("addEntity","\x24","\x48","\x40","\xbd"),
	HX_HCSTRING("addController","\x1d","\xe2","\x07","\x6f"),
	HX_HCSTRING("sendControllerUpdate","\x2d","\x69","\xf7","\x1d"),
	HX_HCSTRING("sendPing","\xda","\xef","\x25","\xde"),
	HX_HCSTRING("sendPlayerUpdate","\xb2","\xc9","\x9c","\x72"),
	HX_HCSTRING("receive","\xe3","\x61","\x58","\x2a"),
	HX_HCSTRING("executeRPC","\xb0","\x03","\x7c","\x39"),
	HX_HCSTRING("waitForStart","\x2e","\x10","\xb3","\x2f"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("sendToServer","\x06","\xc4","\x32","\xd6"),
	::String(null()) };

static void Session_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Session_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Session_obj::START,"START");
	HX_MARK_MEMBER_NAME(Session_obj::ENTITY_UPDATES,"ENTITY_UPDATES");
	HX_MARK_MEMBER_NAME(Session_obj::CONTROLLER_UPDATES,"CONTROLLER_UPDATES");
	HX_MARK_MEMBER_NAME(Session_obj::REMOTE_CALL,"REMOTE_CALL");
	HX_MARK_MEMBER_NAME(Session_obj::PING,"PING");
	HX_MARK_MEMBER_NAME(Session_obj::ERROR,"ERROR");
	HX_MARK_MEMBER_NAME(Session_obj::PLAYER_UPDATES,"PLAYER_UPDATES");
	HX_MARK_MEMBER_NAME(Session_obj::RPC_SERVER,"RPC_SERVER");
	HX_MARK_MEMBER_NAME(Session_obj::RPC_ALL,"RPC_ALL");
	HX_MARK_MEMBER_NAME(Session_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Session_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Session_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Session_obj::START,"START");
	HX_VISIT_MEMBER_NAME(Session_obj::ENTITY_UPDATES,"ENTITY_UPDATES");
	HX_VISIT_MEMBER_NAME(Session_obj::CONTROLLER_UPDATES,"CONTROLLER_UPDATES");
	HX_VISIT_MEMBER_NAME(Session_obj::REMOTE_CALL,"REMOTE_CALL");
	HX_VISIT_MEMBER_NAME(Session_obj::PING,"PING");
	HX_VISIT_MEMBER_NAME(Session_obj::ERROR,"ERROR");
	HX_VISIT_MEMBER_NAME(Session_obj::PLAYER_UPDATES,"PLAYER_UPDATES");
	HX_VISIT_MEMBER_NAME(Session_obj::RPC_SERVER,"RPC_SERVER");
	HX_VISIT_MEMBER_NAME(Session_obj::RPC_ALL,"RPC_ALL");
	HX_VISIT_MEMBER_NAME(Session_obj::instance,"instance");
};

#endif

hx::Class Session_obj::__mClass;

static ::String Session_obj_sStaticFields[] = {
	HX_HCSTRING("START","\x42","\xac","\xf9","\x01"),
	HX_HCSTRING("ENTITY_UPDATES","\xce","\x09","\x53","\xd1"),
	HX_HCSTRING("CONTROLLER_UPDATES","\x47","\xf8","\x2b","\x32"),
	HX_HCSTRING("REMOTE_CALL","\x37","\x50","\xb5","\x4f"),
	HX_HCSTRING("PING","\x72","\xba","\x18","\x35"),
	HX_HCSTRING("ERROR","\xa8","\x03","\x18","\xf1"),
	HX_HCSTRING("PLAYER_UPDATES","\x0c","\x50","\xff","\xc6"),
	HX_HCSTRING("RPC_SERVER","\x3d","\x1c","\xb0","\x0a"),
	HX_HCSTRING("RPC_ALL","\x47","\x9f","\x42","\x21"),
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	HX_HCSTRING("the","\x71","\x60","\x58","\x00"),
	::String(null())
};

void Session_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.network.Session","\x2c","\x5b","\x4a","\x50");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Session_obj::__GetStatic;
	__mClass->mSetStaticField = &Session_obj::__SetStatic;
	__mClass->mMarkFunc = Session_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Session_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Session_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Session_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Session_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Session_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Session_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Session_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",26,0x4384aa94)
HXLINE(  26)		START = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",27,0x4384aa94)
HXLINE(  27)		ENTITY_UPDATES = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",28,0x4384aa94)
HXLINE(  28)		CONTROLLER_UPDATES = (int)2;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",29,0x4384aa94)
HXLINE(  29)		REMOTE_CALL = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",30,0x4384aa94)
HXLINE(  30)		PING = (int)4;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",31,0x4384aa94)
HXLINE(  31)		ERROR = (int)5;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",32,0x4384aa94)
HXLINE(  32)		PLAYER_UPDATES = (int)6;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",34,0x4384aa94)
HXLINE(  34)		RPC_SERVER = (int)0;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",35,0x4384aa94)
HXLINE(  35)		RPC_ALL = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.network.Session","boot",0x3289d8b4,"kha.network.Session.boot","kha/network/Session.hx",37,0x4384aa94)
HXLINE(  37)		instance = null();
            	}
}

} // end namespace kha
} // end namespace network
