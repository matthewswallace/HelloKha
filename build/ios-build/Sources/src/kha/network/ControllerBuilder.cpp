// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_network_ControllerBuilder
#include <kha/network/ControllerBuilder.h>
#endif

namespace kha{
namespace network{

void ControllerBuilder_obj::__construct() { }

Dynamic ControllerBuilder_obj::__CreateEmpty() { return new ControllerBuilder_obj; }

hx::ObjectPtr< ControllerBuilder_obj > ControllerBuilder_obj::__new()
{
	hx::ObjectPtr< ControllerBuilder_obj > _hx_result = new ControllerBuilder_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ControllerBuilder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ControllerBuilder_obj > _hx_result = new ControllerBuilder_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int ControllerBuilder_obj::nextId;


ControllerBuilder_obj::ControllerBuilder_obj()
{
}

bool ControllerBuilder_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { outValue = nextId; return true; }
	}
	return false;
}

bool ControllerBuilder_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { nextId=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ControllerBuilder_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ControllerBuilder_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ControllerBuilder_obj::nextId,HX_HCSTRING("nextId","\xae","\x27","\x64","\x72")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ControllerBuilder_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ControllerBuilder_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ControllerBuilder_obj::nextId,"nextId");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ControllerBuilder_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ControllerBuilder_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ControllerBuilder_obj::nextId,"nextId");
};

#endif

hx::Class ControllerBuilder_obj::__mClass;

static ::String ControllerBuilder_obj_sStaticFields[] = {
	HX_HCSTRING("nextId","\xae","\x27","\x64","\x72"),
	::String(null())
};

void ControllerBuilder_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.network.ControllerBuilder","\x35","\xa1","\xbf","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ControllerBuilder_obj::__GetStatic;
	__mClass->mSetStaticField = &ControllerBuilder_obj::__SetStatic;
	__mClass->mMarkFunc = ControllerBuilder_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ControllerBuilder_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ControllerBuilder_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ControllerBuilder_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ControllerBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ControllerBuilder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ControllerBuilder_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.network.ControllerBuilder","boot",0x356d120b,"kha.network.ControllerBuilder.boot","kha/network/ControllerBuilder.hx",7,0x77f946ab)
HXLINE(   7)		nextId = (int)0;
            	}
}

} // end namespace kha
} // end namespace network
