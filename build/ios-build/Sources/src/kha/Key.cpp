// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_Key
#include <kha/Key.h>
#endif
namespace kha{

::kha::Key Key_obj::ALT;

::kha::Key Key_obj::BACK;

::kha::Key Key_obj::BACKSPACE;

::kha::Key Key_obj::CHAR;

::kha::Key Key_obj::CTRL;

::kha::Key Key_obj::DEL;

::kha::Key Key_obj::DOWN;

::kha::Key Key_obj::ENTER;

::kha::Key Key_obj::ESC;

::kha::Key Key_obj::LEFT;

::kha::Key Key_obj::RIGHT;

::kha::Key Key_obj::SHIFT;

::kha::Key Key_obj::TAB;

::kha::Key Key_obj::UP;

bool Key_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ALT",09,95,31,00)) { outValue = Key_obj::ALT; return true; }
	if (inName==HX_("BACK",27,a2,d1,2b)) { outValue = Key_obj::BACK; return true; }
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) { outValue = Key_obj::BACKSPACE; return true; }
	if (inName==HX_("CHAR",d6,26,80,2c)) { outValue = Key_obj::CHAR; return true; }
	if (inName==HX_("CTRL",ab,50,89,2c)) { outValue = Key_obj::CTRL; return true; }
	if (inName==HX_("DEL",ab,d5,33,00)) { outValue = Key_obj::DEL; return true; }
	if (inName==HX_("DOWN",62,c0,2e,2d)) { outValue = Key_obj::DOWN; return true; }
	if (inName==HX_("ENTER",f8,a4,74,ee)) { outValue = Key_obj::ENTER; return true; }
	if (inName==HX_("ESC",15,a4,34,00)) { outValue = Key_obj::ESC; return true; }
	if (inName==HX_("LEFT",07,d0,70,32)) { outValue = Key_obj::LEFT; return true; }
	if (inName==HX_("RIGHT",bc,43,52,67)) { outValue = Key_obj::RIGHT; return true; }
	if (inName==HX_("SHIFT",62,24,11,fa)) { outValue = Key_obj::SHIFT; return true; }
	if (inName==HX_("TAB",35,f6,3f,00)) { outValue = Key_obj::TAB; return true; }
	if (inName==HX_("UP",5b,4a,00,00)) { outValue = Key_obj::UP; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Key_obj)

int Key_obj::__FindIndex(::String inName)
{
	if (inName==HX_("ALT",09,95,31,00)) return 5;
	if (inName==HX_("BACK",27,a2,d1,2b)) return 13;
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) return 0;
	if (inName==HX_("CHAR",d6,26,80,2c)) return 6;
	if (inName==HX_("CTRL",ab,50,89,2c)) return 4;
	if (inName==HX_("DEL",ab,d5,33,00)) return 8;
	if (inName==HX_("DOWN",62,c0,2e,2d)) return 10;
	if (inName==HX_("ENTER",f8,a4,74,ee)) return 2;
	if (inName==HX_("ESC",15,a4,34,00)) return 7;
	if (inName==HX_("LEFT",07,d0,70,32)) return 11;
	if (inName==HX_("RIGHT",bc,43,52,67)) return 12;
	if (inName==HX_("SHIFT",62,24,11,fa)) return 3;
	if (inName==HX_("TAB",35,f6,3f,00)) return 1;
	if (inName==HX_("UP",5b,4a,00,00)) return 9;
	return super::__FindIndex(inName);
}

int Key_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("ALT",09,95,31,00)) return 0;
	if (inName==HX_("BACK",27,a2,d1,2b)) return 0;
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) return 0;
	if (inName==HX_("CHAR",d6,26,80,2c)) return 0;
	if (inName==HX_("CTRL",ab,50,89,2c)) return 0;
	if (inName==HX_("DEL",ab,d5,33,00)) return 0;
	if (inName==HX_("DOWN",62,c0,2e,2d)) return 0;
	if (inName==HX_("ENTER",f8,a4,74,ee)) return 0;
	if (inName==HX_("ESC",15,a4,34,00)) return 0;
	if (inName==HX_("LEFT",07,d0,70,32)) return 0;
	if (inName==HX_("RIGHT",bc,43,52,67)) return 0;
	if (inName==HX_("SHIFT",62,24,11,fa)) return 0;
	if (inName==HX_("TAB",35,f6,3f,00)) return 0;
	if (inName==HX_("UP",5b,4a,00,00)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Key_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ALT",09,95,31,00)) return ALT;
	if (inName==HX_("BACK",27,a2,d1,2b)) return BACK;
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) return BACKSPACE;
	if (inName==HX_("CHAR",d6,26,80,2c)) return CHAR;
	if (inName==HX_("CTRL",ab,50,89,2c)) return CTRL;
	if (inName==HX_("DEL",ab,d5,33,00)) return DEL;
	if (inName==HX_("DOWN",62,c0,2e,2d)) return DOWN;
	if (inName==HX_("ENTER",f8,a4,74,ee)) return ENTER;
	if (inName==HX_("ESC",15,a4,34,00)) return ESC;
	if (inName==HX_("LEFT",07,d0,70,32)) return LEFT;
	if (inName==HX_("RIGHT",bc,43,52,67)) return RIGHT;
	if (inName==HX_("SHIFT",62,24,11,fa)) return SHIFT;
	if (inName==HX_("TAB",35,f6,3f,00)) return TAB;
	if (inName==HX_("UP",5b,4a,00,00)) return UP;
	return super::__Field(inName,inCallProp);
}

static ::String Key_obj_sStaticFields[] = {
	HX_("BACKSPACE",1f,f5,42,c6),
	HX_("TAB",35,f6,3f,00),
	HX_("ENTER",f8,a4,74,ee),
	HX_("SHIFT",62,24,11,fa),
	HX_("CTRL",ab,50,89,2c),
	HX_("ALT",09,95,31,00),
	HX_("CHAR",d6,26,80,2c),
	HX_("ESC",15,a4,34,00),
	HX_("DEL",ab,d5,33,00),
	HX_("UP",5b,4a,00,00),
	HX_("DOWN",62,c0,2e,2d),
	HX_("LEFT",07,d0,70,32),
	HX_("RIGHT",bc,43,52,67),
	HX_("BACK",27,a2,d1,2b),
	::String(null())
};

static void Key_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Key_obj::ALT,"ALT");
	HX_MARK_MEMBER_NAME(Key_obj::BACK,"BACK");
	HX_MARK_MEMBER_NAME(Key_obj::BACKSPACE,"BACKSPACE");
	HX_MARK_MEMBER_NAME(Key_obj::CHAR,"CHAR");
	HX_MARK_MEMBER_NAME(Key_obj::CTRL,"CTRL");
	HX_MARK_MEMBER_NAME(Key_obj::DEL,"DEL");
	HX_MARK_MEMBER_NAME(Key_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(Key_obj::ENTER,"ENTER");
	HX_MARK_MEMBER_NAME(Key_obj::ESC,"ESC");
	HX_MARK_MEMBER_NAME(Key_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Key_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Key_obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(Key_obj::TAB,"TAB");
	HX_MARK_MEMBER_NAME(Key_obj::UP,"UP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Key_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Key_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Key_obj::ALT,"ALT");
	HX_VISIT_MEMBER_NAME(Key_obj::BACK,"BACK");
	HX_VISIT_MEMBER_NAME(Key_obj::BACKSPACE,"BACKSPACE");
	HX_VISIT_MEMBER_NAME(Key_obj::CHAR,"CHAR");
	HX_VISIT_MEMBER_NAME(Key_obj::CTRL,"CTRL");
	HX_VISIT_MEMBER_NAME(Key_obj::DEL,"DEL");
	HX_VISIT_MEMBER_NAME(Key_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(Key_obj::ENTER,"ENTER");
	HX_VISIT_MEMBER_NAME(Key_obj::ESC,"ESC");
	HX_VISIT_MEMBER_NAME(Key_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Key_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Key_obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(Key_obj::TAB,"TAB");
	HX_VISIT_MEMBER_NAME(Key_obj::UP,"UP");
};
#endif

hx::Class Key_obj::__mClass;

Dynamic __Create_Key_obj() { return new Key_obj; }

void Key_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("kha.Key","\x35","\x80","\x15","\xef"), hx::TCanCast< Key_obj >,Key_obj_sStaticFields,0,
	&__Create_Key_obj, &__Create,
	&super::__SGetClass(), &CreateKey_obj, Key_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Key_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Key_obj::__GetStatic;
}

void Key_obj::__boot()
{
ALT = hx::CreateEnum< Key_obj >(HX_HCSTRING("ALT","\x09","\x95","\x31","\x00"),5,0);
BACK = hx::CreateEnum< Key_obj >(HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b"),13,0);
BACKSPACE = hx::CreateEnum< Key_obj >(HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6"),0,0);
CHAR = hx::CreateEnum< Key_obj >(HX_HCSTRING("CHAR","\xd6","\x26","\x80","\x2c"),6,0);
CTRL = hx::CreateEnum< Key_obj >(HX_HCSTRING("CTRL","\xab","\x50","\x89","\x2c"),4,0);
DEL = hx::CreateEnum< Key_obj >(HX_HCSTRING("DEL","\xab","\xd5","\x33","\x00"),8,0);
DOWN = hx::CreateEnum< Key_obj >(HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d"),10,0);
ENTER = hx::CreateEnum< Key_obj >(HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee"),2,0);
ESC = hx::CreateEnum< Key_obj >(HX_HCSTRING("ESC","\x15","\xa4","\x34","\x00"),7,0);
LEFT = hx::CreateEnum< Key_obj >(HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),11,0);
RIGHT = hx::CreateEnum< Key_obj >(HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),12,0);
SHIFT = hx::CreateEnum< Key_obj >(HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa"),3,0);
TAB = hx::CreateEnum< Key_obj >(HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00"),1,0);
UP = hx::CreateEnum< Key_obj >(HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00"),9,0);
}


} // end namespace kha
