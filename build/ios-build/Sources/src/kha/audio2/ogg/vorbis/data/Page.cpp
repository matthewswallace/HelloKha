// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Page
#include <kha/audio2/ogg/vorbis/data/Page.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Page_obj::__construct(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Page","new",0xa090c191,"kha.audio2.ogg.vorbis.data.Page.new","kha/audio2/ogg/vorbis/data/Page.hx",14,0x2c32c11e)
            	HX_STACK_THIS(this)
            	}

Dynamic Page_obj::__CreateEmpty() { return new Page_obj; }

hx::ObjectPtr< Page_obj > Page_obj::__new()
{
	hx::ObjectPtr< Page_obj > _hx_result = new Page_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Page_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Page_obj > _hx_result = new Page_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::kha::audio2::ogg::vorbis::data::Page Page_obj::clone(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Page","clone",0x26a372ce,"kha.audio2.ogg.vorbis.data.Page.clone","kha/audio2/ogg/vorbis/data/Page.hx",18,0x2c32c11e)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Page,page) =  ::kha::audio2::ogg::vorbis::data::Page_obj::__new();
HXLINE(  20)		page->flag = this->flag;
HXLINE(  21)		return page;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Page_obj,clone,return )

void Page_obj::start( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Page","start",0x624bd3d3,"kha.audio2.ogg.vorbis.data.Page.start","kha/audio2/ogg/vorbis/data/Page.hx",25,0x2c32c11e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
HXLINE(  26)		Bool _hx_tmp;
HXDLIN(  26)		Bool _hx_tmp1;
HXDLIN(  26)		Bool _hx_tmp2;
HXDLIN(  26)		hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  26)		Int _hx_tmp3 = decodeState->input->readByte();
HXDLIN(  26)		if ((_hx_tmp3 == (int)79)) {
HXLINE(  26)			hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  26)			Int _hx_tmp4 = decodeState->input->readByte();
HXDLIN(  26)			_hx_tmp2 = (_hx_tmp4 != (int)103);
            		}
            		else {
HXLINE(  26)			_hx_tmp2 = true;
            		}
HXDLIN(  26)		if (!(_hx_tmp2)) {
HXLINE(  26)			hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  26)			Int _hx_tmp5 = decodeState->input->readByte();
HXDLIN(  26)			_hx_tmp1 = (_hx_tmp5 != (int)103);
            		}
            		else {
HXLINE(  26)			_hx_tmp1 = true;
            		}
HXDLIN(  26)		if (!(_hx_tmp1)) {
HXLINE(  26)			hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  26)			Int _hx_tmp6 = decodeState->input->readByte();
HXDLIN(  26)			_hx_tmp = (_hx_tmp6 != (int)83);
            		}
            		else {
HXLINE(  26)			_hx_tmp = true;
            		}
HXDLIN(  26)		if (_hx_tmp) {
HXLINE(  26)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),323,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("capturePattern",6a,1a,b8,20))));
            		}
HXLINE(  27)		this->startWithoutCapturePattern(decodeState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Page_obj,start,(void))

void Page_obj::startWithoutCapturePattern( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Page","startWithoutCapturePattern",0xbc8317ff,"kha.audio2.ogg.vorbis.data.Page.startWithoutCapturePattern","kha/audio2/ogg/vorbis/data/Page.hx",31,0x2c32c11e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
HXLINE(  32)		hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  32)		HX_VARI( Int,version) = decodeState->input->readByte();
HXLINE(  33)		if ((version != (int)0)) {
HXLINE(  34)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_STRUCTURE_VERSION_dyn(),(HX_("",00,00,00,00) + version),hx::SourceInfo(HX_("Page.hx",af,ab,7e,58),34,HX_("kha.audio2.ogg.vorbis.data.Page",1f,a5,b2,c9),HX_("startWithoutCapturePattern",10,03,9b,8e))));
            		}
HXLINE(  37)		hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  37)		Int _hx_tmp = decodeState->input->readByte();
HXDLIN(  37)		this->flag = _hx_tmp;
HXLINE(  38)		hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  38)		HX_VARI( Int,loc0) = decodeState->input->readInt32();
HXLINE(  39)		hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  39)		HX_VARI( Int,loc1) = decodeState->input->readInt32();
HXLINE(  42)		{
HXLINE(  42)			hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  42)			decodeState->input->readInt32();
            		}
HXLINE(  46)		{
HXLINE(  46)			hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  46)			decodeState->input->readInt32();
            		}
HXLINE(  49)		{
HXLINE(  49)			hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  49)			decodeState->input->readInt32();
            		}
HXLINE(  52)		decodeState->setup(loc0,loc1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Page_obj,startWithoutCapturePattern,(void))


Page_obj::Page_obj()
{
}

hx::Val Page_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { return hx::Val( flag); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"startWithoutCapturePattern") ) { return hx::Val( startWithoutCapturePattern_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Page_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { flag=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Page_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Page_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Page_obj,flag),HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Page_obj_sStaticStorageInfo = 0;
#endif

static ::String Page_obj_sMemberFields[] = {
	HX_HCSTRING("flag","\xac","\x0b","\xbe","\x43"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("startWithoutCapturePattern","\x10","\x03","\x9b","\x8e"),
	::String(null()) };

static void Page_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Page_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Page_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Page_obj::__mClass,"__mClass");
};

#endif

hx::Class Page_obj::__mClass;

void Page_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Page","\x1f","\xa5","\xb2","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Page_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Page_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Page_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Page_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Page_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Page_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
