// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisTools
#include <kha/audio2/ogg/vorbis/VorbisTools.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor
#include <kha/audio2/ogg/vorbis/data/Floor.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor0
#include <kha/audio2/ogg/vorbis/data/Floor0.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor1
#include <kha/audio2/ogg/vorbis/data/Floor1.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_IntPoint
#include <kha/audio2/ogg/vorbis/data/IntPoint.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Floor_obj::__construct(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Floor","new",0x5f0b4bee,"kha.audio2.ogg.vorbis.data.Floor.new","kha/audio2/ogg/vorbis/data/Floor.hx",18,0x2f4d0043)
            	HX_STACK_THIS(this)
            	}

Dynamic Floor_obj::__CreateEmpty() { return new Floor_obj; }

hx::ObjectPtr< Floor_obj > Floor_obj::__new()
{
	hx::ObjectPtr< Floor_obj > _hx_result = new Floor_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Floor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Floor_obj > _hx_result = new Floor_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::kha::audio2::ogg::vorbis::data::Floor Floor_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< ::Dynamic> codebooks){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Floor","read",0xcd7bec08,"kha.audio2.ogg.vorbis.data.Floor.read","kha/audio2/ogg/vorbis/data/Floor.hx",23,0x2f4d0043)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(codebooks,"codebooks")
HXLINE(  24)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Floor,floor) =  ::kha::audio2::ogg::vorbis::data::Floor_obj::__new();
HXLINE(  26)		Int _hx_tmp;
HXDLIN(  26)		Bool _hx_tmp1 = (decodeState->validBits < (int)0);
HXDLIN(  26)		if (_hx_tmp1) {
HXLINE(  26)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  26)			Bool _hx_tmp2 = (decodeState->validBits < (int)16);
HXDLIN(  26)			if (_hx_tmp2) {
HXLINE(  26)				Bool _hx_tmp3 = (decodeState->validBits == (int)0);
HXDLIN(  26)				if (_hx_tmp3) {
HXLINE(  26)					decodeState->acc = (int)0;
            				}
HXDLIN(  26)				while(true){
HXLINE(  26)					Bool _hx_tmp4;
HXDLIN(  26)					Bool _hx_tmp5 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  26)					if (_hx_tmp5) {
HXLINE(  26)						Bool _hx_tmp6 = !(decodeState->lastSeg);
HXDLIN(  26)						if (_hx_tmp6) {
HXLINE(  26)							Int _hx_tmp7 = decodeState->next();
HXDLIN(  26)							_hx_tmp4 = (_hx_tmp7 == (int)0);
            						}
            						else {
HXLINE(  26)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE(  26)						_hx_tmp4 = false;
            					}
HXDLIN(  26)					if (_hx_tmp4) {
HXLINE(  26)						decodeState->validBits = (int)-1;
HXDLIN(  26)						goto _hx_goto_0;
            					}
            					else {
HXLINE(  26)						decodeState->bytesInSeg--;
HXDLIN(  26)						Int a = decodeState->acc;
HXDLIN(  26)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  26)						Int _hx_tmp8 = decodeState->input->readByte();
HXDLIN(  26)						Int _hx_tmp9 = (a + ((int)_hx_tmp8 << (int)decodeState->validBits));
HXDLIN(  26)						decodeState->acc = _hx_tmp9;
HXDLIN(  26)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  26)					if (!((decodeState->validBits < (int)16))) {
HXLINE(  26)						goto _hx_goto_0;
            					}
            				}
            				_hx_goto_0:;
HXDLIN(  26)				Bool _hx_tmp10 = (decodeState->validBits < (int)0);
HXDLIN(  26)				if (_hx_tmp10) {
HXLINE(  26)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  26)					HX_VARI( Int,z) = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  26)					Int _hx_tmp11 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  26)					decodeState->acc = _hx_tmp11;
HXDLIN(  26)					hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  26)					_hx_tmp = z;
            				}
            			}
            			else {
HXLINE(  26)				HX_VARI_NAME( Int,z1,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  26)				Int _hx_tmp12 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  26)				decodeState->acc = _hx_tmp12;
HXDLIN(  26)				hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  26)				_hx_tmp = z1;
            			}
            		}
HXDLIN(  26)		floor->type = _hx_tmp;
HXLINE(  27)		if ((floor->type > (int)1)) {
HXLINE(  28)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),28,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  30)		Bool _hx_tmp13 = (floor->type == (int)0);
HXDLIN(  30)		if (_hx_tmp13) {
HXLINE(  31)			HX_VARI(  ::kha::audio2::ogg::vorbis::data::Floor0,g) = (floor->floor0 =  ::kha::audio2::ogg::vorbis::data::Floor0_obj::__new());
HXLINE(  32)			Int _hx_tmp14;
HXDLIN(  32)			Bool _hx_tmp15 = (decodeState->validBits < (int)0);
HXDLIN(  32)			if (_hx_tmp15) {
HXLINE(  32)				_hx_tmp14 = (int)0;
            			}
            			else {
HXLINE(  32)				Bool _hx_tmp16 = (decodeState->validBits < (int)8);
HXDLIN(  32)				if (_hx_tmp16) {
HXLINE(  32)					Bool _hx_tmp17 = (decodeState->validBits == (int)0);
HXDLIN(  32)					if (_hx_tmp17) {
HXLINE(  32)						decodeState->acc = (int)0;
            					}
HXDLIN(  32)					while(true){
HXLINE(  32)						Bool _hx_tmp18;
HXDLIN(  32)						Bool _hx_tmp19 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  32)						if (_hx_tmp19) {
HXLINE(  32)							Bool _hx_tmp20 = !(decodeState->lastSeg);
HXDLIN(  32)							if (_hx_tmp20) {
HXLINE(  32)								Int _hx_tmp21 = decodeState->next();
HXDLIN(  32)								_hx_tmp18 = (_hx_tmp21 == (int)0);
            							}
            							else {
HXLINE(  32)								_hx_tmp18 = true;
            							}
            						}
            						else {
HXLINE(  32)							_hx_tmp18 = false;
            						}
HXDLIN(  32)						if (_hx_tmp18) {
HXLINE(  32)							decodeState->validBits = (int)-1;
HXDLIN(  32)							goto _hx_goto_1;
            						}
            						else {
HXLINE(  32)							decodeState->bytesInSeg--;
HXDLIN(  32)							Int a1 = decodeState->acc;
HXDLIN(  32)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  32)							Int _hx_tmp22 = decodeState->input->readByte();
HXDLIN(  32)							Int _hx_tmp23 = (a1 + ((int)_hx_tmp22 << (int)decodeState->validBits));
HXDLIN(  32)							decodeState->acc = _hx_tmp23;
HXDLIN(  32)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  32)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  32)							goto _hx_goto_1;
            						}
            					}
            					_hx_goto_1:;
HXDLIN(  32)					Bool _hx_tmp24 = (decodeState->validBits < (int)0);
HXDLIN(  32)					if (_hx_tmp24) {
HXLINE(  32)						_hx_tmp14 = (int)0;
            					}
            					else {
HXLINE(  32)						HX_VARI_NAME( Int,z2,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  32)						Int _hx_tmp25 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  32)						decodeState->acc = _hx_tmp25;
HXDLIN(  32)						hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  32)						_hx_tmp14 = z2;
            					}
            				}
            				else {
HXLINE(  32)					HX_VARI_NAME( Int,z3,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  32)					Int _hx_tmp26 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  32)					decodeState->acc = _hx_tmp26;
HXDLIN(  32)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  32)					_hx_tmp14 = z3;
            				}
            			}
HXDLIN(  32)			g->order = _hx_tmp14;
HXLINE(  33)			Int _hx_tmp27;
HXDLIN(  33)			Bool _hx_tmp28 = (decodeState->validBits < (int)0);
HXDLIN(  33)			if (_hx_tmp28) {
HXLINE(  33)				_hx_tmp27 = (int)0;
            			}
            			else {
HXLINE(  33)				Bool _hx_tmp29 = (decodeState->validBits < (int)16);
HXDLIN(  33)				if (_hx_tmp29) {
HXLINE(  33)					Bool _hx_tmp30 = (decodeState->validBits == (int)0);
HXDLIN(  33)					if (_hx_tmp30) {
HXLINE(  33)						decodeState->acc = (int)0;
            					}
HXDLIN(  33)					while(true){
HXLINE(  33)						Bool _hx_tmp31;
HXDLIN(  33)						Bool _hx_tmp32 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  33)						if (_hx_tmp32) {
HXLINE(  33)							Bool _hx_tmp33 = !(decodeState->lastSeg);
HXDLIN(  33)							if (_hx_tmp33) {
HXLINE(  33)								Int _hx_tmp34 = decodeState->next();
HXDLIN(  33)								_hx_tmp31 = (_hx_tmp34 == (int)0);
            							}
            							else {
HXLINE(  33)								_hx_tmp31 = true;
            							}
            						}
            						else {
HXLINE(  33)							_hx_tmp31 = false;
            						}
HXDLIN(  33)						if (_hx_tmp31) {
HXLINE(  33)							decodeState->validBits = (int)-1;
HXDLIN(  33)							goto _hx_goto_2;
            						}
            						else {
HXLINE(  33)							decodeState->bytesInSeg--;
HXDLIN(  33)							Int a2 = decodeState->acc;
HXDLIN(  33)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  33)							Int _hx_tmp35 = decodeState->input->readByte();
HXDLIN(  33)							Int _hx_tmp36 = (a2 + ((int)_hx_tmp35 << (int)decodeState->validBits));
HXDLIN(  33)							decodeState->acc = _hx_tmp36;
HXDLIN(  33)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  33)						if (!((decodeState->validBits < (int)16))) {
HXLINE(  33)							goto _hx_goto_2;
            						}
            					}
            					_hx_goto_2:;
HXDLIN(  33)					Bool _hx_tmp37 = (decodeState->validBits < (int)0);
HXDLIN(  33)					if (_hx_tmp37) {
HXLINE(  33)						_hx_tmp27 = (int)0;
            					}
            					else {
HXLINE(  33)						HX_VARI_NAME( Int,z4,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  33)						Int _hx_tmp38 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  33)						decodeState->acc = _hx_tmp38;
HXDLIN(  33)						hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  33)						_hx_tmp27 = z4;
            					}
            				}
            				else {
HXLINE(  33)					HX_VARI_NAME( Int,z5,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  33)					Int _hx_tmp39 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  33)					decodeState->acc = _hx_tmp39;
HXDLIN(  33)					hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  33)					_hx_tmp27 = z5;
            				}
            			}
HXDLIN(  33)			g->rate = _hx_tmp27;
HXLINE(  34)			Int _hx_tmp40;
HXDLIN(  34)			Bool _hx_tmp41 = (decodeState->validBits < (int)0);
HXDLIN(  34)			if (_hx_tmp41) {
HXLINE(  34)				_hx_tmp40 = (int)0;
            			}
            			else {
HXLINE(  34)				Bool _hx_tmp42 = (decodeState->validBits < (int)16);
HXDLIN(  34)				if (_hx_tmp42) {
HXLINE(  34)					Bool _hx_tmp43 = (decodeState->validBits == (int)0);
HXDLIN(  34)					if (_hx_tmp43) {
HXLINE(  34)						decodeState->acc = (int)0;
            					}
HXDLIN(  34)					while(true){
HXLINE(  34)						Bool _hx_tmp44;
HXDLIN(  34)						Bool _hx_tmp45 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  34)						if (_hx_tmp45) {
HXLINE(  34)							Bool _hx_tmp46 = !(decodeState->lastSeg);
HXDLIN(  34)							if (_hx_tmp46) {
HXLINE(  34)								Int _hx_tmp47 = decodeState->next();
HXDLIN(  34)								_hx_tmp44 = (_hx_tmp47 == (int)0);
            							}
            							else {
HXLINE(  34)								_hx_tmp44 = true;
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp44 = false;
            						}
HXDLIN(  34)						if (_hx_tmp44) {
HXLINE(  34)							decodeState->validBits = (int)-1;
HXDLIN(  34)							goto _hx_goto_3;
            						}
            						else {
HXLINE(  34)							decodeState->bytesInSeg--;
HXDLIN(  34)							Int a3 = decodeState->acc;
HXDLIN(  34)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  34)							Int _hx_tmp48 = decodeState->input->readByte();
HXDLIN(  34)							Int _hx_tmp49 = (a3 + ((int)_hx_tmp48 << (int)decodeState->validBits));
HXDLIN(  34)							decodeState->acc = _hx_tmp49;
HXDLIN(  34)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  34)						if (!((decodeState->validBits < (int)16))) {
HXLINE(  34)							goto _hx_goto_3;
            						}
            					}
            					_hx_goto_3:;
HXDLIN(  34)					Bool _hx_tmp50 = (decodeState->validBits < (int)0);
HXDLIN(  34)					if (_hx_tmp50) {
HXLINE(  34)						_hx_tmp40 = (int)0;
            					}
            					else {
HXLINE(  34)						HX_VARI_NAME( Int,z6,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  34)						Int _hx_tmp51 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  34)						decodeState->acc = _hx_tmp51;
HXDLIN(  34)						hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  34)						_hx_tmp40 = z6;
            					}
            				}
            				else {
HXLINE(  34)					HX_VARI_NAME( Int,z7,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  34)					Int _hx_tmp52 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  34)					decodeState->acc = _hx_tmp52;
HXDLIN(  34)					hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  34)					_hx_tmp40 = z7;
            				}
            			}
HXDLIN(  34)			g->barkMapSize = _hx_tmp40;
HXLINE(  35)			Int _hx_tmp53;
HXDLIN(  35)			Bool _hx_tmp54 = (decodeState->validBits < (int)0);
HXDLIN(  35)			if (_hx_tmp54) {
HXLINE(  35)				_hx_tmp53 = (int)0;
            			}
            			else {
HXLINE(  35)				Bool _hx_tmp55 = (decodeState->validBits < (int)6);
HXDLIN(  35)				if (_hx_tmp55) {
HXLINE(  35)					Bool _hx_tmp56 = (decodeState->validBits == (int)0);
HXDLIN(  35)					if (_hx_tmp56) {
HXLINE(  35)						decodeState->acc = (int)0;
            					}
HXDLIN(  35)					while(true){
HXLINE(  35)						Bool _hx_tmp57;
HXDLIN(  35)						Bool _hx_tmp58 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  35)						if (_hx_tmp58) {
HXLINE(  35)							Bool _hx_tmp59 = !(decodeState->lastSeg);
HXDLIN(  35)							if (_hx_tmp59) {
HXLINE(  35)								Int _hx_tmp60 = decodeState->next();
HXDLIN(  35)								_hx_tmp57 = (_hx_tmp60 == (int)0);
            							}
            							else {
HXLINE(  35)								_hx_tmp57 = true;
            							}
            						}
            						else {
HXLINE(  35)							_hx_tmp57 = false;
            						}
HXDLIN(  35)						if (_hx_tmp57) {
HXLINE(  35)							decodeState->validBits = (int)-1;
HXDLIN(  35)							goto _hx_goto_4;
            						}
            						else {
HXLINE(  35)							decodeState->bytesInSeg--;
HXDLIN(  35)							Int a4 = decodeState->acc;
HXDLIN(  35)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  35)							Int _hx_tmp61 = decodeState->input->readByte();
HXDLIN(  35)							Int _hx_tmp62 = (a4 + ((int)_hx_tmp61 << (int)decodeState->validBits));
HXDLIN(  35)							decodeState->acc = _hx_tmp62;
HXDLIN(  35)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  35)						if (!((decodeState->validBits < (int)6))) {
HXLINE(  35)							goto _hx_goto_4;
            						}
            					}
            					_hx_goto_4:;
HXDLIN(  35)					Bool _hx_tmp63 = (decodeState->validBits < (int)0);
HXDLIN(  35)					if (_hx_tmp63) {
HXLINE(  35)						_hx_tmp53 = (int)0;
            					}
            					else {
HXLINE(  35)						HX_VARI_NAME( Int,z8,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  35)						Int _hx_tmp64 = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  35)						decodeState->acc = _hx_tmp64;
HXDLIN(  35)						hx::SubEq(decodeState->validBits,(int)6);
HXDLIN(  35)						_hx_tmp53 = z8;
            					}
            				}
            				else {
HXLINE(  35)					HX_VARI_NAME( Int,z9,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  35)					Int _hx_tmp65 = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  35)					decodeState->acc = _hx_tmp65;
HXDLIN(  35)					hx::SubEq(decodeState->validBits,(int)6);
HXDLIN(  35)					_hx_tmp53 = z9;
            				}
            			}
HXDLIN(  35)			g->amplitudeBits = _hx_tmp53;
HXLINE(  36)			Int _hx_tmp66;
HXDLIN(  36)			Bool _hx_tmp67 = (decodeState->validBits < (int)0);
HXDLIN(  36)			if (_hx_tmp67) {
HXLINE(  36)				_hx_tmp66 = (int)0;
            			}
            			else {
HXLINE(  36)				Bool _hx_tmp68 = (decodeState->validBits < (int)8);
HXDLIN(  36)				if (_hx_tmp68) {
HXLINE(  36)					Bool _hx_tmp69 = (decodeState->validBits == (int)0);
HXDLIN(  36)					if (_hx_tmp69) {
HXLINE(  36)						decodeState->acc = (int)0;
            					}
HXDLIN(  36)					while(true){
HXLINE(  36)						Bool _hx_tmp70;
HXDLIN(  36)						Bool _hx_tmp71 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  36)						if (_hx_tmp71) {
HXLINE(  36)							Bool _hx_tmp72 = !(decodeState->lastSeg);
HXDLIN(  36)							if (_hx_tmp72) {
HXLINE(  36)								Int _hx_tmp73 = decodeState->next();
HXDLIN(  36)								_hx_tmp70 = (_hx_tmp73 == (int)0);
            							}
            							else {
HXLINE(  36)								_hx_tmp70 = true;
            							}
            						}
            						else {
HXLINE(  36)							_hx_tmp70 = false;
            						}
HXDLIN(  36)						if (_hx_tmp70) {
HXLINE(  36)							decodeState->validBits = (int)-1;
HXDLIN(  36)							goto _hx_goto_5;
            						}
            						else {
HXLINE(  36)							decodeState->bytesInSeg--;
HXDLIN(  36)							Int a5 = decodeState->acc;
HXDLIN(  36)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  36)							Int _hx_tmp74 = decodeState->input->readByte();
HXDLIN(  36)							Int _hx_tmp75 = (a5 + ((int)_hx_tmp74 << (int)decodeState->validBits));
HXDLIN(  36)							decodeState->acc = _hx_tmp75;
HXDLIN(  36)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  36)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  36)							goto _hx_goto_5;
            						}
            					}
            					_hx_goto_5:;
HXDLIN(  36)					Bool _hx_tmp76 = (decodeState->validBits < (int)0);
HXDLIN(  36)					if (_hx_tmp76) {
HXLINE(  36)						_hx_tmp66 = (int)0;
            					}
            					else {
HXLINE(  36)						HX_VARI_NAME( Int,z10,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  36)						Int _hx_tmp77 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  36)						decodeState->acc = _hx_tmp77;
HXDLIN(  36)						hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  36)						_hx_tmp66 = z10;
            					}
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME( Int,z11,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  36)					Int _hx_tmp78 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  36)					decodeState->acc = _hx_tmp78;
HXDLIN(  36)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  36)					_hx_tmp66 = z11;
            				}
            			}
HXDLIN(  36)			g->amplitudeOffset = _hx_tmp66;
HXLINE(  37)			Int _hx_tmp79;
HXDLIN(  37)			Bool _hx_tmp80 = (decodeState->validBits < (int)0);
HXDLIN(  37)			if (_hx_tmp80) {
HXLINE(  37)				_hx_tmp79 = (int)0;
            			}
            			else {
HXLINE(  37)				Bool _hx_tmp81 = (decodeState->validBits < (int)4);
HXDLIN(  37)				if (_hx_tmp81) {
HXLINE(  37)					Bool _hx_tmp82 = (decodeState->validBits == (int)0);
HXDLIN(  37)					if (_hx_tmp82) {
HXLINE(  37)						decodeState->acc = (int)0;
            					}
HXDLIN(  37)					while(true){
HXLINE(  37)						Bool _hx_tmp83;
HXDLIN(  37)						Bool _hx_tmp84 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  37)						if (_hx_tmp84) {
HXLINE(  37)							Bool _hx_tmp85 = !(decodeState->lastSeg);
HXDLIN(  37)							if (_hx_tmp85) {
HXLINE(  37)								Int _hx_tmp86 = decodeState->next();
HXDLIN(  37)								_hx_tmp83 = (_hx_tmp86 == (int)0);
            							}
            							else {
HXLINE(  37)								_hx_tmp83 = true;
            							}
            						}
            						else {
HXLINE(  37)							_hx_tmp83 = false;
            						}
HXDLIN(  37)						if (_hx_tmp83) {
HXLINE(  37)							decodeState->validBits = (int)-1;
HXDLIN(  37)							goto _hx_goto_6;
            						}
            						else {
HXLINE(  37)							decodeState->bytesInSeg--;
HXDLIN(  37)							Int a6 = decodeState->acc;
HXDLIN(  37)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  37)							Int _hx_tmp87 = decodeState->input->readByte();
HXDLIN(  37)							Int _hx_tmp88 = (a6 + ((int)_hx_tmp87 << (int)decodeState->validBits));
HXDLIN(  37)							decodeState->acc = _hx_tmp88;
HXDLIN(  37)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  37)						if (!((decodeState->validBits < (int)4))) {
HXLINE(  37)							goto _hx_goto_6;
            						}
            					}
            					_hx_goto_6:;
HXDLIN(  37)					Bool _hx_tmp89 = (decodeState->validBits < (int)0);
HXDLIN(  37)					if (_hx_tmp89) {
HXLINE(  37)						_hx_tmp79 = (int)0;
            					}
            					else {
HXLINE(  37)						HX_VARI_NAME( Int,z12,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  37)						Int _hx_tmp90 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  37)						decodeState->acc = _hx_tmp90;
HXDLIN(  37)						hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  37)						_hx_tmp79 = z12;
            					}
            				}
            				else {
HXLINE(  37)					HX_VARI_NAME( Int,z13,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  37)					Int _hx_tmp91 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  37)					decodeState->acc = _hx_tmp91;
HXDLIN(  37)					hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  37)					_hx_tmp79 = z13;
            				}
            			}
HXDLIN(  37)			g->numberOfBooks = (_hx_tmp79 + (int)1);
HXLINE(  38)			{
HXLINE(  38)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(  38)				HX_VARI( Int,_g) = g->numberOfBooks;
HXDLIN(  38)				while((_g1 < _g)){
HXLINE(  38)					HX_VARI( Int,j) = _g1++;
HXLINE(  39)					{
HXLINE(  39)						Int val;
HXDLIN(  39)						Bool _hx_tmp92 = (decodeState->validBits < (int)0);
HXDLIN(  39)						if (_hx_tmp92) {
HXLINE(  39)							val = (int)0;
            						}
            						else {
HXLINE(  39)							Bool _hx_tmp93 = (decodeState->validBits < (int)8);
HXDLIN(  39)							if (_hx_tmp93) {
HXLINE(  39)								Bool _hx_tmp94 = (decodeState->validBits == (int)0);
HXDLIN(  39)								if (_hx_tmp94) {
HXLINE(  39)									decodeState->acc = (int)0;
            								}
HXDLIN(  39)								while(true){
HXLINE(  39)									Bool _hx_tmp95;
HXDLIN(  39)									Bool _hx_tmp96 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  39)									if (_hx_tmp96) {
HXLINE(  39)										Bool _hx_tmp97 = !(decodeState->lastSeg);
HXDLIN(  39)										if (_hx_tmp97) {
HXLINE(  39)											Int _hx_tmp98 = decodeState->next();
HXDLIN(  39)											_hx_tmp95 = (_hx_tmp98 == (int)0);
            										}
            										else {
HXLINE(  39)											_hx_tmp95 = true;
            										}
            									}
            									else {
HXLINE(  39)										_hx_tmp95 = false;
            									}
HXDLIN(  39)									if (_hx_tmp95) {
HXLINE(  39)										decodeState->validBits = (int)-1;
HXDLIN(  39)										goto _hx_goto_8;
            									}
            									else {
HXLINE(  39)										decodeState->bytesInSeg--;
HXDLIN(  39)										Int a7 = decodeState->acc;
HXDLIN(  39)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  39)										Int _hx_tmp99 = decodeState->input->readByte();
HXDLIN(  39)										Int _hx_tmp100 = (a7 + ((int)_hx_tmp99 << (int)decodeState->validBits));
HXDLIN(  39)										decodeState->acc = _hx_tmp100;
HXDLIN(  39)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN(  39)									if (!((decodeState->validBits < (int)8))) {
HXLINE(  39)										goto _hx_goto_8;
            									}
            								}
            								_hx_goto_8:;
HXDLIN(  39)								Bool _hx_tmp101 = (decodeState->validBits < (int)0);
HXDLIN(  39)								if (_hx_tmp101) {
HXLINE(  39)									val = (int)0;
            								}
            								else {
HXLINE(  39)									HX_VARI_NAME( Int,z14,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)									Int _hx_tmp102 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)									decodeState->acc = _hx_tmp102;
HXDLIN(  39)									hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)									val = z14;
            								}
            							}
            							else {
HXLINE(  39)								HX_VARI_NAME( Int,z15,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)								Int _hx_tmp103 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)								decodeState->acc = _hx_tmp103;
HXDLIN(  39)								hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  39)								val = z15;
            							}
            						}
HXDLIN(  39)						g->bookList->__unsafe_set(j,val);
            					}
            				}
            			}
HXLINE(  41)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::FEATURE_NOT_SUPPORTED_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),41,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            		}
            		else {
HXLINE(  43)			HX_VARI( ::Array< ::Dynamic>,p) = ::Array_obj< ::Dynamic>::__new();
HXLINE(  44)			HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Floor1,g1,"g") = (floor->floor1 =  ::kha::audio2::ogg::vorbis::data::Floor1_obj::__new());
HXLINE(  45)			HX_VARI( Int,maxClass) = (int)-1;
HXLINE(  46)			Int _hx_tmp104;
HXDLIN(  46)			Bool _hx_tmp105 = (decodeState->validBits < (int)0);
HXDLIN(  46)			if (_hx_tmp105) {
HXLINE(  46)				_hx_tmp104 = (int)0;
            			}
            			else {
HXLINE(  46)				Bool _hx_tmp106 = (decodeState->validBits < (int)5);
HXDLIN(  46)				if (_hx_tmp106) {
HXLINE(  46)					Bool _hx_tmp107 = (decodeState->validBits == (int)0);
HXDLIN(  46)					if (_hx_tmp107) {
HXLINE(  46)						decodeState->acc = (int)0;
            					}
HXDLIN(  46)					while(true){
HXLINE(  46)						Bool _hx_tmp108;
HXDLIN(  46)						Bool _hx_tmp109 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  46)						if (_hx_tmp109) {
HXLINE(  46)							Bool _hx_tmp110 = !(decodeState->lastSeg);
HXDLIN(  46)							if (_hx_tmp110) {
HXLINE(  46)								Int _hx_tmp111 = decodeState->next();
HXDLIN(  46)								_hx_tmp108 = (_hx_tmp111 == (int)0);
            							}
            							else {
HXLINE(  46)								_hx_tmp108 = true;
            							}
            						}
            						else {
HXLINE(  46)							_hx_tmp108 = false;
            						}
HXDLIN(  46)						if (_hx_tmp108) {
HXLINE(  46)							decodeState->validBits = (int)-1;
HXDLIN(  46)							goto _hx_goto_9;
            						}
            						else {
HXLINE(  46)							decodeState->bytesInSeg--;
HXDLIN(  46)							Int a8 = decodeState->acc;
HXDLIN(  46)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  46)							Int _hx_tmp112 = decodeState->input->readByte();
HXDLIN(  46)							Int _hx_tmp113 = (a8 + ((int)_hx_tmp112 << (int)decodeState->validBits));
HXDLIN(  46)							decodeState->acc = _hx_tmp113;
HXDLIN(  46)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  46)						if (!((decodeState->validBits < (int)5))) {
HXLINE(  46)							goto _hx_goto_9;
            						}
            					}
            					_hx_goto_9:;
HXDLIN(  46)					Bool _hx_tmp114 = (decodeState->validBits < (int)0);
HXDLIN(  46)					if (_hx_tmp114) {
HXLINE(  46)						_hx_tmp104 = (int)0;
            					}
            					else {
HXLINE(  46)						HX_VARI_NAME( Int,z16,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  46)						Int _hx_tmp115 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  46)						decodeState->acc = _hx_tmp115;
HXDLIN(  46)						hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  46)						_hx_tmp104 = z16;
            					}
            				}
            				else {
HXLINE(  46)					HX_VARI_NAME( Int,z17,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  46)					Int _hx_tmp116 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  46)					decodeState->acc = _hx_tmp116;
HXDLIN(  46)					hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  46)					_hx_tmp104 = z17;
            				}
            			}
HXDLIN(  46)			g1->partitions = _hx_tmp104;
HXLINE(  47)			Int length = g1->partitions;
HXDLIN(  47)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN(  47)			_hx_array_set_size_exact(this1,length);
HXDLIN(  47)			g1->partitionClassList = this1;
HXLINE(  48)			{
HXLINE(  48)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  48)				HX_VARI_NAME( Int,_g2,"_g") = g1->partitions;
HXDLIN(  48)				while((_g11 < _g2)){
HXLINE(  48)					HX_VARI_NAME( Int,j1,"j") = _g11++;
HXLINE(  49)					{
HXLINE(  49)						Int val1;
HXDLIN(  49)						Bool _hx_tmp117 = (decodeState->validBits < (int)0);
HXDLIN(  49)						if (_hx_tmp117) {
HXLINE(  49)							val1 = (int)0;
            						}
            						else {
HXLINE(  49)							Bool _hx_tmp118 = (decodeState->validBits < (int)4);
HXDLIN(  49)							if (_hx_tmp118) {
HXLINE(  49)								Bool _hx_tmp119 = (decodeState->validBits == (int)0);
HXDLIN(  49)								if (_hx_tmp119) {
HXLINE(  49)									decodeState->acc = (int)0;
            								}
HXDLIN(  49)								while(true){
HXLINE(  49)									Bool _hx_tmp120;
HXDLIN(  49)									Bool _hx_tmp121 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  49)									if (_hx_tmp121) {
HXLINE(  49)										Bool _hx_tmp122 = !(decodeState->lastSeg);
HXDLIN(  49)										if (_hx_tmp122) {
HXLINE(  49)											Int _hx_tmp123 = decodeState->next();
HXDLIN(  49)											_hx_tmp120 = (_hx_tmp123 == (int)0);
            										}
            										else {
HXLINE(  49)											_hx_tmp120 = true;
            										}
            									}
            									else {
HXLINE(  49)										_hx_tmp120 = false;
            									}
HXDLIN(  49)									if (_hx_tmp120) {
HXLINE(  49)										decodeState->validBits = (int)-1;
HXDLIN(  49)										goto _hx_goto_11;
            									}
            									else {
HXLINE(  49)										decodeState->bytesInSeg--;
HXDLIN(  49)										Int a9 = decodeState->acc;
HXDLIN(  49)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  49)										Int _hx_tmp124 = decodeState->input->readByte();
HXDLIN(  49)										Int _hx_tmp125 = (a9 + ((int)_hx_tmp124 << (int)decodeState->validBits));
HXDLIN(  49)										decodeState->acc = _hx_tmp125;
HXDLIN(  49)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN(  49)									if (!((decodeState->validBits < (int)4))) {
HXLINE(  49)										goto _hx_goto_11;
            									}
            								}
            								_hx_goto_11:;
HXDLIN(  49)								Bool _hx_tmp126 = (decodeState->validBits < (int)0);
HXDLIN(  49)								if (_hx_tmp126) {
HXLINE(  49)									val1 = (int)0;
            								}
            								else {
HXLINE(  49)									HX_VARI_NAME( Int,z18,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  49)									Int _hx_tmp127 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  49)									decodeState->acc = _hx_tmp127;
HXDLIN(  49)									hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  49)									val1 = z18;
            								}
            							}
            							else {
HXLINE(  49)								HX_VARI_NAME( Int,z19,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  49)								Int _hx_tmp128 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  49)								decodeState->acc = _hx_tmp128;
HXDLIN(  49)								hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  49)								val1 = z19;
            							}
            						}
HXDLIN(  49)						g1->partitionClassList->__unsafe_set(j1,val1);
            					}
HXLINE(  50)					Bool _hx_tmp129 = (( (Int)(_hx_array_unsafe_get(g1->partitionClassList,j1)) ) > maxClass);
HXDLIN(  50)					if (_hx_tmp129) {
HXLINE(  51)						maxClass = ( (Int)(_hx_array_unsafe_get(g1->partitionClassList,j1)) );
            					}
            				}
            			}
HXLINE(  54)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new();
HXDLIN(  54)			_hx_array_set_size_exact(this2,(maxClass + (int)1));
HXDLIN(  54)			g1->classDimensions = this2;
HXLINE(  55)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new();
HXDLIN(  55)			_hx_array_set_size_exact(this3,(maxClass + (int)1));
HXDLIN(  55)			g1->classMasterbooks = this3;
HXLINE(  56)			HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new();
HXDLIN(  56)			_hx_array_set_size_exact(this4,(maxClass + (int)1));
HXDLIN(  56)			g1->classSubclasses = this4;
HXLINE(  57)			HX_VARI_NAME( ::Array< ::Dynamic>,this5,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(  57)			_hx_array_set_size_exact(this5,(maxClass + (int)1));
HXDLIN(  57)			g1->subclassBooks = this5;
HXLINE(  58)			{
HXLINE(  58)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(  58)				HX_VARI_NAME( Int,_g3,"_g") = (maxClass + (int)1);
HXDLIN(  58)				while((_g12 < _g3)){
HXLINE(  58)					HX_VARI_NAME( Int,j2,"j") = _g12++;
HXLINE(  59)					{
HXLINE(  59)						Int _hx_tmp130;
HXDLIN(  59)						Bool _hx_tmp131 = (decodeState->validBits < (int)0);
HXDLIN(  59)						if (_hx_tmp131) {
HXLINE(  59)							_hx_tmp130 = (int)0;
            						}
            						else {
HXLINE(  59)							Bool _hx_tmp132 = (decodeState->validBits < (int)3);
HXDLIN(  59)							if (_hx_tmp132) {
HXLINE(  59)								Bool _hx_tmp133 = (decodeState->validBits == (int)0);
HXDLIN(  59)								if (_hx_tmp133) {
HXLINE(  59)									decodeState->acc = (int)0;
            								}
HXDLIN(  59)								while(true){
HXLINE(  59)									Bool _hx_tmp134;
HXDLIN(  59)									Bool _hx_tmp135 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  59)									if (_hx_tmp135) {
HXLINE(  59)										Bool _hx_tmp136 = !(decodeState->lastSeg);
HXDLIN(  59)										if (_hx_tmp136) {
HXLINE(  59)											Int _hx_tmp137 = decodeState->next();
HXDLIN(  59)											_hx_tmp134 = (_hx_tmp137 == (int)0);
            										}
            										else {
HXLINE(  59)											_hx_tmp134 = true;
            										}
            									}
            									else {
HXLINE(  59)										_hx_tmp134 = false;
            									}
HXDLIN(  59)									if (_hx_tmp134) {
HXLINE(  59)										decodeState->validBits = (int)-1;
HXDLIN(  59)										goto _hx_goto_13;
            									}
            									else {
HXLINE(  59)										decodeState->bytesInSeg--;
HXDLIN(  59)										Int a10 = decodeState->acc;
HXDLIN(  59)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  59)										Int _hx_tmp138 = decodeState->input->readByte();
HXDLIN(  59)										Int _hx_tmp139 = (a10 + ((int)_hx_tmp138 << (int)decodeState->validBits));
HXDLIN(  59)										decodeState->acc = _hx_tmp139;
HXDLIN(  59)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN(  59)									if (!((decodeState->validBits < (int)3))) {
HXLINE(  59)										goto _hx_goto_13;
            									}
            								}
            								_hx_goto_13:;
HXDLIN(  59)								Bool _hx_tmp140 = (decodeState->validBits < (int)0);
HXDLIN(  59)								if (_hx_tmp140) {
HXLINE(  59)									_hx_tmp130 = (int)0;
            								}
            								else {
HXLINE(  59)									HX_VARI_NAME( Int,z20,"z") = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  59)									Int _hx_tmp141 = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  59)									decodeState->acc = _hx_tmp141;
HXDLIN(  59)									hx::SubEq(decodeState->validBits,(int)3);
HXDLIN(  59)									_hx_tmp130 = z20;
            								}
            							}
            							else {
HXLINE(  59)								HX_VARI_NAME( Int,z21,"z") = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  59)								Int _hx_tmp142 = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  59)								decodeState->acc = _hx_tmp142;
HXDLIN(  59)								hx::SubEq(decodeState->validBits,(int)3);
HXDLIN(  59)								_hx_tmp130 = z21;
            							}
            						}
HXDLIN(  59)						g1->classDimensions->__unsafe_set(j2,(_hx_tmp130 + (int)1));
            					}
HXLINE(  60)					{
HXLINE(  60)						Int val2;
HXDLIN(  60)						Bool _hx_tmp143 = (decodeState->validBits < (int)0);
HXDLIN(  60)						if (_hx_tmp143) {
HXLINE(  60)							val2 = (int)0;
            						}
            						else {
HXLINE(  60)							Bool _hx_tmp144 = (decodeState->validBits < (int)2);
HXDLIN(  60)							if (_hx_tmp144) {
HXLINE(  60)								Bool _hx_tmp145 = (decodeState->validBits == (int)0);
HXDLIN(  60)								if (_hx_tmp145) {
HXLINE(  60)									decodeState->acc = (int)0;
            								}
HXDLIN(  60)								while(true){
HXLINE(  60)									Bool _hx_tmp146;
HXDLIN(  60)									Bool _hx_tmp147 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  60)									if (_hx_tmp147) {
HXLINE(  60)										Bool _hx_tmp148 = !(decodeState->lastSeg);
HXDLIN(  60)										if (_hx_tmp148) {
HXLINE(  60)											Int _hx_tmp149 = decodeState->next();
HXDLIN(  60)											_hx_tmp146 = (_hx_tmp149 == (int)0);
            										}
            										else {
HXLINE(  60)											_hx_tmp146 = true;
            										}
            									}
            									else {
HXLINE(  60)										_hx_tmp146 = false;
            									}
HXDLIN(  60)									if (_hx_tmp146) {
HXLINE(  60)										decodeState->validBits = (int)-1;
HXDLIN(  60)										goto _hx_goto_14;
            									}
            									else {
HXLINE(  60)										decodeState->bytesInSeg--;
HXDLIN(  60)										Int a11 = decodeState->acc;
HXDLIN(  60)										hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  60)										Int _hx_tmp150 = decodeState->input->readByte();
HXDLIN(  60)										Int _hx_tmp151 = (a11 + ((int)_hx_tmp150 << (int)decodeState->validBits));
HXDLIN(  60)										decodeState->acc = _hx_tmp151;
HXDLIN(  60)										hx::AddEq(decodeState->validBits,(int)8);
            									}
HXDLIN(  60)									if (!((decodeState->validBits < (int)2))) {
HXLINE(  60)										goto _hx_goto_14;
            									}
            								}
            								_hx_goto_14:;
HXDLIN(  60)								Bool _hx_tmp152 = (decodeState->validBits < (int)0);
HXDLIN(  60)								if (_hx_tmp152) {
HXLINE(  60)									val2 = (int)0;
            								}
            								else {
HXLINE(  60)									HX_VARI_NAME( Int,z22,"z") = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)									Int _hx_tmp153 = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)									decodeState->acc = _hx_tmp153;
HXDLIN(  60)									hx::SubEq(decodeState->validBits,(int)2);
HXDLIN(  60)									val2 = z22;
            								}
            							}
            							else {
HXLINE(  60)								HX_VARI_NAME( Int,z23,"z") = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)								Int _hx_tmp154 = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)								decodeState->acc = _hx_tmp154;
HXDLIN(  60)								hx::SubEq(decodeState->validBits,(int)2);
HXDLIN(  60)								val2 = z23;
            							}
            						}
HXDLIN(  60)						g1->classSubclasses->__unsafe_set(j2,val2);
            					}
HXLINE(  61)					Bool _hx_tmp155 = (( (Int)(_hx_array_unsafe_get(g1->classSubclasses,j2)) ) != (int)0);
HXDLIN(  61)					if (_hx_tmp155) {
HXLINE(  62)						{
HXLINE(  62)							Int val3;
HXDLIN(  62)							Bool _hx_tmp156 = (decodeState->validBits < (int)0);
HXDLIN(  62)							if (_hx_tmp156) {
HXLINE(  62)								val3 = (int)0;
            							}
            							else {
HXLINE(  62)								Bool _hx_tmp157 = (decodeState->validBits < (int)8);
HXDLIN(  62)								if (_hx_tmp157) {
HXLINE(  62)									Bool _hx_tmp158 = (decodeState->validBits == (int)0);
HXDLIN(  62)									if (_hx_tmp158) {
HXLINE(  62)										decodeState->acc = (int)0;
            									}
HXDLIN(  62)									while(true){
HXLINE(  62)										Bool _hx_tmp159;
HXDLIN(  62)										Bool _hx_tmp160 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  62)										if (_hx_tmp160) {
HXLINE(  62)											Bool _hx_tmp161 = !(decodeState->lastSeg);
HXDLIN(  62)											if (_hx_tmp161) {
HXLINE(  62)												Int _hx_tmp162 = decodeState->next();
HXDLIN(  62)												_hx_tmp159 = (_hx_tmp162 == (int)0);
            											}
            											else {
HXLINE(  62)												_hx_tmp159 = true;
            											}
            										}
            										else {
HXLINE(  62)											_hx_tmp159 = false;
            										}
HXDLIN(  62)										if (_hx_tmp159) {
HXLINE(  62)											decodeState->validBits = (int)-1;
HXDLIN(  62)											goto _hx_goto_15;
            										}
            										else {
HXLINE(  62)											decodeState->bytesInSeg--;
HXDLIN(  62)											Int a12 = decodeState->acc;
HXDLIN(  62)											hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  62)											Int _hx_tmp163 = decodeState->input->readByte();
HXDLIN(  62)											Int _hx_tmp164 = (a12 + ((int)_hx_tmp163 << (int)decodeState->validBits));
HXDLIN(  62)											decodeState->acc = _hx_tmp164;
HXDLIN(  62)											hx::AddEq(decodeState->validBits,(int)8);
            										}
HXDLIN(  62)										if (!((decodeState->validBits < (int)8))) {
HXLINE(  62)											goto _hx_goto_15;
            										}
            									}
            									_hx_goto_15:;
HXDLIN(  62)									Bool _hx_tmp165 = (decodeState->validBits < (int)0);
HXDLIN(  62)									if (_hx_tmp165) {
HXLINE(  62)										val3 = (int)0;
            									}
            									else {
HXLINE(  62)										HX_VARI_NAME( Int,z24,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  62)										Int _hx_tmp166 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  62)										decodeState->acc = _hx_tmp166;
HXDLIN(  62)										hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  62)										val3 = z24;
            									}
            								}
            								else {
HXLINE(  62)									HX_VARI_NAME( Int,z25,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  62)									Int _hx_tmp167 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  62)									decodeState->acc = _hx_tmp167;
HXDLIN(  62)									hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  62)									val3 = z25;
            								}
            							}
HXDLIN(  62)							g1->classMasterbooks->__unsafe_set(j2,val3);
            						}
HXLINE(  63)						Bool _hx_tmp168 = (( (Int)(_hx_array_unsafe_get(g1->classMasterbooks,j2)) ) >= codebooks->length);
HXDLIN(  63)						if (_hx_tmp168) {
HXLINE(  64)							HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),64,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            						}
            					}
HXLINE(  68)					HX_VARI( Int,kl) = ((int)(int)1 << (int)( (Int)(_hx_array_unsafe_get(g1->classSubclasses,j2)) ));
HXLINE(  69)					{
HXLINE(  69)						HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new();
HXDLIN(  69)						_hx_array_set_size_exact(this6,kl);
HXDLIN(  69)						g1->subclassBooks->__unsafe_set(j2,this6);
            					}
HXLINE(  70)					{
HXLINE(  70)						HX_VARI_NAME( Int,_g31,"_g3") = (int)0;
HXDLIN(  70)						while((_g31 < kl)){
HXLINE(  70)							HX_VARI( Int,k) = _g31++;
HXLINE(  71)							{
HXLINE(  71)								::Array< Int > this7 = ( (::Array< Int >)(_hx_array_unsafe_get(g1->subclassBooks,j2)) );
HXDLIN(  71)								Int _hx_tmp169;
HXDLIN(  71)								Bool _hx_tmp170 = (decodeState->validBits < (int)0);
HXDLIN(  71)								if (_hx_tmp170) {
HXLINE(  71)									_hx_tmp169 = (int)0;
            								}
            								else {
HXLINE(  71)									Bool _hx_tmp171 = (decodeState->validBits < (int)8);
HXDLIN(  71)									if (_hx_tmp171) {
HXLINE(  71)										Bool _hx_tmp172 = (decodeState->validBits == (int)0);
HXDLIN(  71)										if (_hx_tmp172) {
HXLINE(  71)											decodeState->acc = (int)0;
            										}
HXDLIN(  71)										while(true){
HXLINE(  71)											Bool _hx_tmp173;
HXDLIN(  71)											Bool _hx_tmp174 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  71)											if (_hx_tmp174) {
HXLINE(  71)												Bool _hx_tmp175 = !(decodeState->lastSeg);
HXDLIN(  71)												if (_hx_tmp175) {
HXLINE(  71)													Int _hx_tmp176 = decodeState->next();
HXDLIN(  71)													_hx_tmp173 = (_hx_tmp176 == (int)0);
            												}
            												else {
HXLINE(  71)													_hx_tmp173 = true;
            												}
            											}
            											else {
HXLINE(  71)												_hx_tmp173 = false;
            											}
HXDLIN(  71)											if (_hx_tmp173) {
HXLINE(  71)												decodeState->validBits = (int)-1;
HXDLIN(  71)												goto _hx_goto_17;
            											}
            											else {
HXLINE(  71)												decodeState->bytesInSeg--;
HXDLIN(  71)												Int a13 = decodeState->acc;
HXDLIN(  71)												hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  71)												Int _hx_tmp177 = decodeState->input->readByte();
HXDLIN(  71)												Int _hx_tmp178 = (a13 + ((int)_hx_tmp177 << (int)decodeState->validBits));
HXDLIN(  71)												decodeState->acc = _hx_tmp178;
HXDLIN(  71)												hx::AddEq(decodeState->validBits,(int)8);
            											}
HXDLIN(  71)											if (!((decodeState->validBits < (int)8))) {
HXLINE(  71)												goto _hx_goto_17;
            											}
            										}
            										_hx_goto_17:;
HXDLIN(  71)										Bool _hx_tmp179 = (decodeState->validBits < (int)0);
HXDLIN(  71)										if (_hx_tmp179) {
HXLINE(  71)											_hx_tmp169 = (int)0;
            										}
            										else {
HXLINE(  71)											HX_VARI_NAME( Int,z26,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  71)											Int _hx_tmp180 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  71)											decodeState->acc = _hx_tmp180;
HXDLIN(  71)											hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  71)											_hx_tmp169 = z26;
            										}
            									}
            									else {
HXLINE(  71)										HX_VARI_NAME( Int,z27,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  71)										Int _hx_tmp181 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  71)										decodeState->acc = _hx_tmp181;
HXDLIN(  71)										hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  71)										_hx_tmp169 = z27;
            									}
            								}
HXDLIN(  71)								this7->__unsafe_set(k,(_hx_tmp169 - (int)1));
            							}
HXLINE(  72)							::Array< Int > this8 = ( (::Array< Int >)(_hx_array_unsafe_get(g1->subclassBooks,j2)) );
HXDLIN(  72)							Int _hx_tmp182 = ( (Int)(_hx_array_unsafe_get(this8,k)) );
HXDLIN(  72)							if ((_hx_tmp182 >= codebooks->length)) {
HXLINE(  73)								HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),73,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            							}
            						}
            					}
            				}
            			}
HXLINE(  78)			Int _hx_tmp183;
HXDLIN(  78)			Bool _hx_tmp184 = (decodeState->validBits < (int)0);
HXDLIN(  78)			if (_hx_tmp184) {
HXLINE(  78)				_hx_tmp183 = (int)0;
            			}
            			else {
HXLINE(  78)				Bool _hx_tmp185 = (decodeState->validBits < (int)2);
HXDLIN(  78)				if (_hx_tmp185) {
HXLINE(  78)					Bool _hx_tmp186 = (decodeState->validBits == (int)0);
HXDLIN(  78)					if (_hx_tmp186) {
HXLINE(  78)						decodeState->acc = (int)0;
            					}
HXDLIN(  78)					while(true){
HXLINE(  78)						Bool _hx_tmp187;
HXDLIN(  78)						Bool _hx_tmp188 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  78)						if (_hx_tmp188) {
HXLINE(  78)							Bool _hx_tmp189 = !(decodeState->lastSeg);
HXDLIN(  78)							if (_hx_tmp189) {
HXLINE(  78)								Int _hx_tmp190 = decodeState->next();
HXDLIN(  78)								_hx_tmp187 = (_hx_tmp190 == (int)0);
            							}
            							else {
HXLINE(  78)								_hx_tmp187 = true;
            							}
            						}
            						else {
HXLINE(  78)							_hx_tmp187 = false;
            						}
HXDLIN(  78)						if (_hx_tmp187) {
HXLINE(  78)							decodeState->validBits = (int)-1;
HXDLIN(  78)							goto _hx_goto_18;
            						}
            						else {
HXLINE(  78)							decodeState->bytesInSeg--;
HXDLIN(  78)							Int a14 = decodeState->acc;
HXDLIN(  78)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  78)							Int _hx_tmp191 = decodeState->input->readByte();
HXDLIN(  78)							Int _hx_tmp192 = (a14 + ((int)_hx_tmp191 << (int)decodeState->validBits));
HXDLIN(  78)							decodeState->acc = _hx_tmp192;
HXDLIN(  78)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  78)						if (!((decodeState->validBits < (int)2))) {
HXLINE(  78)							goto _hx_goto_18;
            						}
            					}
            					_hx_goto_18:;
HXDLIN(  78)					Bool _hx_tmp193 = (decodeState->validBits < (int)0);
HXDLIN(  78)					if (_hx_tmp193) {
HXLINE(  78)						_hx_tmp183 = (int)0;
            					}
            					else {
HXLINE(  78)						HX_VARI_NAME( Int,z28,"z") = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  78)						Int _hx_tmp194 = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  78)						decodeState->acc = _hx_tmp194;
HXDLIN(  78)						hx::SubEq(decodeState->validBits,(int)2);
HXDLIN(  78)						_hx_tmp183 = z28;
            					}
            				}
            				else {
HXLINE(  78)					HX_VARI_NAME( Int,z29,"z") = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  78)					Int _hx_tmp195 = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  78)					decodeState->acc = _hx_tmp195;
HXDLIN(  78)					hx::SubEq(decodeState->validBits,(int)2);
HXDLIN(  78)					_hx_tmp183 = z29;
            				}
            			}
HXDLIN(  78)			g1->floor1Multiplier = (_hx_tmp183 + (int)1);
HXLINE(  79)			Int _hx_tmp196;
HXDLIN(  79)			Bool _hx_tmp197 = (decodeState->validBits < (int)0);
HXDLIN(  79)			if (_hx_tmp197) {
HXLINE(  79)				_hx_tmp196 = (int)0;
            			}
            			else {
HXLINE(  79)				Bool _hx_tmp198 = (decodeState->validBits < (int)4);
HXDLIN(  79)				if (_hx_tmp198) {
HXLINE(  79)					Bool _hx_tmp199 = (decodeState->validBits == (int)0);
HXDLIN(  79)					if (_hx_tmp199) {
HXLINE(  79)						decodeState->acc = (int)0;
            					}
HXDLIN(  79)					while(true){
HXLINE(  79)						Bool _hx_tmp200;
HXDLIN(  79)						Bool _hx_tmp201 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  79)						if (_hx_tmp201) {
HXLINE(  79)							Bool _hx_tmp202 = !(decodeState->lastSeg);
HXDLIN(  79)							if (_hx_tmp202) {
HXLINE(  79)								Int _hx_tmp203 = decodeState->next();
HXDLIN(  79)								_hx_tmp200 = (_hx_tmp203 == (int)0);
            							}
            							else {
HXLINE(  79)								_hx_tmp200 = true;
            							}
            						}
            						else {
HXLINE(  79)							_hx_tmp200 = false;
            						}
HXDLIN(  79)						if (_hx_tmp200) {
HXLINE(  79)							decodeState->validBits = (int)-1;
HXDLIN(  79)							goto _hx_goto_19;
            						}
            						else {
HXLINE(  79)							decodeState->bytesInSeg--;
HXDLIN(  79)							Int a15 = decodeState->acc;
HXDLIN(  79)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  79)							Int _hx_tmp204 = decodeState->input->readByte();
HXDLIN(  79)							Int _hx_tmp205 = (a15 + ((int)_hx_tmp204 << (int)decodeState->validBits));
HXDLIN(  79)							decodeState->acc = _hx_tmp205;
HXDLIN(  79)							hx::AddEq(decodeState->validBits,(int)8);
            						}
HXDLIN(  79)						if (!((decodeState->validBits < (int)4))) {
HXLINE(  79)							goto _hx_goto_19;
            						}
            					}
            					_hx_goto_19:;
HXDLIN(  79)					Bool _hx_tmp206 = (decodeState->validBits < (int)0);
HXDLIN(  79)					if (_hx_tmp206) {
HXLINE(  79)						_hx_tmp196 = (int)0;
            					}
            					else {
HXLINE(  79)						HX_VARI_NAME( Int,z30,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  79)						Int _hx_tmp207 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  79)						decodeState->acc = _hx_tmp207;
HXDLIN(  79)						hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  79)						_hx_tmp196 = z30;
            					}
            				}
            				else {
HXLINE(  79)					HX_VARI_NAME( Int,z31,"z") = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  79)					Int _hx_tmp208 = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  79)					decodeState->acc = _hx_tmp208;
HXDLIN(  79)					hx::SubEq(decodeState->validBits,(int)4);
HXDLIN(  79)					_hx_tmp196 = z31;
            				}
            			}
HXDLIN(  79)			g1->rangebits = _hx_tmp196;
HXLINE(  80)			HX_VARI_NAME( ::Array< Int >,this9,"this") = ::Array_obj< Int >::__new();
HXDLIN(  80)			_hx_array_set_size_exact(this9,(int)250);
HXDLIN(  80)			g1->xlist = this9;
HXLINE(  81)			g1->xlist->__unsafe_set((int)0,(int)0);
HXLINE(  82)			{
HXLINE(  82)				Int val4 = ((int)(int)1 << (int)g1->rangebits);
HXDLIN(  82)				g1->xlist->__unsafe_set((int)1,val4);
            			}
HXLINE(  83)			g1->values = (int)2;
HXLINE(  84)			{
HXLINE(  84)				HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN(  84)				HX_VARI_NAME( Int,_g4,"_g") = g1->partitions;
HXDLIN(  84)				while((_g13 < _g4)){
HXLINE(  84)					HX_VARI_NAME( Int,j3,"j") = _g13++;
HXLINE(  85)					HX_VARI( Int,c) = ( (Int)(_hx_array_unsafe_get(g1->partitionClassList,j3)) );
HXLINE(  86)					{
HXLINE(  86)						HX_VARI_NAME( Int,_g32,"_g3") = (int)0;
HXDLIN(  86)						HX_VARI_NAME( Int,_g21,"_g2") = ( (Int)(_hx_array_unsafe_get(g1->classDimensions,c)) );
HXDLIN(  86)						while((_g32 < _g21)){
HXLINE(  86)							++_g32;
HXLINE(  87)							{
HXLINE(  87)								Int index = g1->values;
HXDLIN(  87)								HX_VARI( Int,n) = g1->rangebits;
HXDLIN(  87)								Int val5;
HXDLIN(  87)								Bool _hx_tmp209 = (decodeState->validBits < (int)0);
HXDLIN(  87)								if (_hx_tmp209) {
HXLINE(  87)									val5 = (int)0;
            								}
            								else {
HXLINE(  87)									Bool _hx_tmp210 = (decodeState->validBits < n);
HXDLIN(  87)									if (_hx_tmp210) {
HXLINE(  87)										if ((n > (int)24)) {
HXLINE(  87)											Int _hx_tmp211 = decodeState->readBits((int)24);
HXDLIN(  87)											Int _hx_tmp212 = decodeState->readBits((n - (int)24));
HXDLIN(  87)											val5 = (_hx_tmp211 + ((int)_hx_tmp212 << (int)(int)24));
            										}
            										else {
HXLINE(  87)											Bool _hx_tmp213 = (decodeState->validBits == (int)0);
HXDLIN(  87)											if (_hx_tmp213) {
HXLINE(  87)												decodeState->acc = (int)0;
            											}
HXDLIN(  87)											while(true){
HXLINE(  87)												Bool _hx_tmp214;
HXDLIN(  87)												Bool _hx_tmp215 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  87)												if (_hx_tmp215) {
HXLINE(  87)													Bool _hx_tmp216 = !(decodeState->lastSeg);
HXDLIN(  87)													if (_hx_tmp216) {
HXLINE(  87)														Int _hx_tmp217 = decodeState->next();
HXDLIN(  87)														_hx_tmp214 = (_hx_tmp217 == (int)0);
            													}
            													else {
HXLINE(  87)														_hx_tmp214 = true;
            													}
            												}
            												else {
HXLINE(  87)													_hx_tmp214 = false;
            												}
HXDLIN(  87)												if (_hx_tmp214) {
HXLINE(  87)													decodeState->validBits = (int)-1;
HXDLIN(  87)													goto _hx_goto_22;
            												}
            												else {
HXLINE(  87)													decodeState->bytesInSeg--;
HXDLIN(  87)													Int a16 = decodeState->acc;
HXDLIN(  87)													hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  87)													Int _hx_tmp218 = decodeState->input->readByte();
HXDLIN(  87)													Int _hx_tmp219 = (a16 + ((int)_hx_tmp218 << (int)decodeState->validBits));
HXDLIN(  87)													decodeState->acc = _hx_tmp219;
HXDLIN(  87)													hx::AddEq(decodeState->validBits,(int)8);
            												}
HXDLIN(  87)												if (!((decodeState->validBits < n))) {
HXLINE(  87)													goto _hx_goto_22;
            												}
            											}
            											_hx_goto_22:;
HXDLIN(  87)											Bool _hx_tmp220 = (decodeState->validBits < (int)0);
HXDLIN(  87)											if (_hx_tmp220) {
HXLINE(  87)												val5 = (int)0;
            											}
            											else {
HXLINE(  87)												HX_VARI_NAME( Int,z32,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXDLIN(  87)												Int _hx_tmp221 = hx::UShr(decodeState->acc,n);
HXDLIN(  87)												decodeState->acc = _hx_tmp221;
HXDLIN(  87)												hx::SubEq(decodeState->validBits,n);
HXDLIN(  87)												val5 = z32;
            											}
            										}
            									}
            									else {
HXLINE(  87)										HX_VARI_NAME( Int,z33,"z") = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXDLIN(  87)										Int _hx_tmp222 = hx::UShr(decodeState->acc,n);
HXDLIN(  87)										decodeState->acc = _hx_tmp222;
HXDLIN(  87)										hx::SubEq(decodeState->validBits,n);
HXDLIN(  87)										val5 = z33;
            									}
            								}
HXDLIN(  87)								g1->xlist->__unsafe_set(index,val5);
            							}
HXLINE(  88)							g1->values++;
            						}
            					}
            				}
            			}
HXLINE(  93)			{
HXLINE(  93)				HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN(  93)				HX_VARI_NAME( Int,_g5,"_g") = g1->values;
HXDLIN(  93)				while((_g14 < _g5)){
HXLINE(  93)					HX_VARI_NAME( Int,j4,"j") = _g14++;
HXLINE(  94)					p->push( ::kha::audio2::ogg::vorbis::data::IntPoint_obj::__new());
HXLINE(  95)					p->__get(j4).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->x = ( (Int)(_hx_array_unsafe_get(g1->xlist,j4)) );
HXLINE(  96)					p->__get(j4).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->y = j4;
            				}
            			}
HXLINE(  99)			p->sort(::kha::audio2::ogg::vorbis::VorbisTools_obj::pointCompare_dyn());
HXLINE( 101)			Int length1 = g1->values;
HXDLIN( 101)			HX_VARI_NAME( ::Array< Int >,this10,"this") = ::Array_obj< Int >::__new();
HXDLIN( 101)			_hx_array_set_size_exact(this10,length1);
HXDLIN( 101)			g1->sortedOrder = this10;
HXLINE( 102)			{
HXLINE( 102)				HX_VARI_NAME( Int,_g15,"_g1") = (int)0;
HXDLIN( 102)				HX_VARI_NAME( Int,_g6,"_g") = g1->values;
HXDLIN( 102)				while((_g15 < _g6)){
HXLINE( 102)					HX_VARI_NAME( Int,j5,"j") = _g15++;
HXLINE( 103)					{
HXLINE( 103)						Int val6 = p->__get(j5).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->y;
HXDLIN( 103)						g1->sortedOrder->__unsafe_set(j5,val6);
            					}
            				}
            			}
HXLINE( 106)			Int length2 = g1->values;
HXDLIN( 106)			HX_VARI_NAME( ::Array< ::Dynamic>,this11,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 106)			_hx_array_set_size_exact(this11,length2);
HXDLIN( 106)			g1->neighbors = this11;
HXLINE( 108)			{
HXLINE( 108)				HX_VARI_NAME( Int,_g16,"_g1") = (int)2;
HXDLIN( 108)				HX_VARI_NAME( Int,_g7,"_g") = g1->values;
HXDLIN( 108)				while((_g16 < _g7)){
HXLINE( 108)					HX_VARI_NAME( Int,j6,"j") = _g16++;
HXLINE( 109)					HX_VARI( ::Array< Int >,x) = g1->xlist;
HXDLIN( 109)					HX_VARI( Int,low) = (int)-1;
HXDLIN( 109)					HX_VARI( Int,high) = (int)65536;
HXDLIN( 109)					HX_VARI( Int,plow) = (int)0;
HXDLIN( 109)					HX_VARI( Int,phigh) = (int)0;
HXDLIN( 109)					HX_VARI_NAME( Int,_g17,"_g1") = (int)0;
HXDLIN( 109)					while((_g17 < j6)){
HXLINE( 109)						HX_VARI( Int,i) = _g17++;
HXDLIN( 109)						Bool _hx_tmp223;
HXDLIN( 109)						Bool _hx_tmp224 = (( (Int)(_hx_array_unsafe_get(x,i)) ) > low);
HXDLIN( 109)						if (_hx_tmp224) {
HXLINE( 109)							Int _hx_tmp225 = ( (Int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 109)							_hx_tmp223 = (_hx_tmp225 < ( (Int)(_hx_array_unsafe_get(x,j6)) ));
            						}
            						else {
HXLINE( 109)							_hx_tmp223 = false;
            						}
HXDLIN( 109)						if (_hx_tmp223) {
HXLINE( 109)							plow = i;
HXDLIN( 109)							low = ( (Int)(_hx_array_unsafe_get(x,i)) );
            						}
HXDLIN( 109)						Bool _hx_tmp226;
HXDLIN( 109)						Bool _hx_tmp227 = (( (Int)(_hx_array_unsafe_get(x,i)) ) < high);
HXDLIN( 109)						if (_hx_tmp227) {
HXLINE( 109)							Int _hx_tmp228 = ( (Int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 109)							_hx_tmp226 = (_hx_tmp228 > ( (Int)(_hx_array_unsafe_get(x,j6)) ));
            						}
            						else {
HXLINE( 109)							_hx_tmp226 = false;
            						}
HXDLIN( 109)						if (_hx_tmp226) {
HXLINE( 109)							phigh = i;
HXDLIN( 109)							high = ( (Int)(_hx_array_unsafe_get(x,i)) );
            						}
            					}
HXLINE(  22)					HX_VARI( Int,ne_low) = plow;
HXDLIN(  22)					HX_VARI( Int,ne_high) = phigh;
HXLINE( 110)					{
HXLINE( 110)						Int length3 = g1->values;
HXDLIN( 110)						HX_VARI_NAME( ::Array< Int >,this12,"this") = ::Array_obj< Int >::__new();
HXDLIN( 110)						_hx_array_set_size_exact(this12,length3);
HXDLIN( 110)						g1->neighbors->__unsafe_set(j6,this12);
            					}
HXLINE( 111)					{
HXLINE( 111)						::Array< Int > this13 = ( (::Array< Int >)(_hx_array_unsafe_get(g1->neighbors,j6)) );
HXDLIN( 111)						this13->__unsafe_set((int)0,ne_low);
            					}
HXLINE( 112)					{
HXLINE( 112)						::Array< Int > this14 = ( (::Array< Int >)(_hx_array_unsafe_get(g1->neighbors,j6)) );
HXDLIN( 112)						this14->__unsafe_set((int)1,ne_high);
            					}
            				}
            			}
            		}
HXLINE( 116)		return floor;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Floor_obj,read,return )


Floor_obj::Floor_obj()
{
}

void Floor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Floor);
	HX_MARK_MEMBER_NAME(floor0,"floor0");
	HX_MARK_MEMBER_NAME(floor1,"floor1");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Floor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(floor0,"floor0");
	HX_VISIT_MEMBER_NAME(floor1,"floor1");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val Floor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floor0") ) { return hx::Val( floor0); }
		if (HX_FIELD_EQ(inName,"floor1") ) { return hx::Val( floor1); }
	}
	return super::__Field(inName,inCallProp);
}

bool Floor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Floor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floor0") ) { floor0=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Floor0 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"floor1") ) { floor1=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Floor1 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Floor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("floor0","\xe4","\xc0","\x60","\x41"));
	outFields->push(HX_HCSTRING("floor1","\xe5","\xc0","\x60","\x41"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Floor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Floor0*/ ,(int)offsetof(Floor_obj,floor0),HX_HCSTRING("floor0","\xe4","\xc0","\x60","\x41")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Floor1*/ ,(int)offsetof(Floor_obj,floor1),HX_HCSTRING("floor1","\xe5","\xc0","\x60","\x41")},
	{hx::fsInt,(int)offsetof(Floor_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Floor_obj_sStaticStorageInfo = 0;
#endif

static ::String Floor_obj_sMemberFields[] = {
	HX_HCSTRING("floor0","\xe4","\xc0","\x60","\x41"),
	HX_HCSTRING("floor1","\xe5","\xc0","\x60","\x41"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	::String(null()) };

static void Floor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Floor_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Floor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Floor_obj::__mClass,"__mClass");
};

#endif

hx::Class Floor_obj::__mClass;

static ::String Floor_obj_sStaticFields[] = {
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Floor_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Floor","\xfc","\x7c","\xe7","\xf7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Floor_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Floor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Floor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Floor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Floor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Floor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Floor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Floor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
