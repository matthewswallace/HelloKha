// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Comment
#include <kha/audio2/ogg/vorbis/data/Comment.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor
#include <kha/audio2/ogg/vorbis/data/Floor.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mapping
#include <kha/audio2/ogg/vorbis/data/Mapping.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mode
#include <kha/audio2/ogg/vorbis/data/Mode.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Page
#include <kha/audio2/ogg/vorbis/data/Page.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Residue
#include <kha/audio2/ogg/vorbis/data/Residue.h>
#endif

namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Header_obj::__construct(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Header","new",0x66f8bbcf,"kha.audio2.ogg.vorbis.data.Header.new","kha/audio2/ogg/vorbis/data/Header.hx",37,0x4e0c5e60)
            	HX_STACK_THIS(this)
            	}

Dynamic Header_obj::__CreateEmpty() { return new Header_obj; }

hx::ObjectPtr< Header_obj > Header_obj::__new()
{
	hx::ObjectPtr< Header_obj > _hx_result = new Header_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Header_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Header_obj > _hx_result = new Header_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Header_obj::PACKET_ID;

Int Header_obj::PACKET_COMMENT;

Int Header_obj::PACKET_SETUP;

 ::kha::audio2::ogg::vorbis::data::Header Header_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Header","read",0xb5506107,"kha.audio2.ogg.vorbis.data.Header.read","kha/audio2/ogg/vorbis/data/Header.hx",41,0x4e0c5e60)
            	HX_STACK_ARG(decodeState,"decodeState")
HXLINE(  42)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Page,page) = decodeState->page;
HXLINE(  43)		page->start(decodeState);
HXLINE(  45)		if ((((int)page->flag & (int)(int)2) == (int)0)) {
HXLINE(  46)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("not firstPage",52,61,ee,e9),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),46,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  48)		if ((((int)page->flag & (int)(int)4) != (int)0)) {
HXLINE(  49)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("lastPage",c5,f3,9a,dd),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),49,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  51)		if ((((int)page->flag & (int)(int)1) != (int)0)) {
HXLINE(  52)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("continuedPacket",85,39,ee,94),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),52,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  55)		decodeState->firstPageValidate();
HXLINE(  56)		hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  56)		Int _hx_tmp = decodeState->input->readByte();
HXDLIN(  56)		if ((_hx_tmp != (int)1)) {
HXLINE(  57)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("decodeState head",5d,8c,63,29),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),57,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  61)		{
HXLINE(  61)			HX_VARI(  ::haxe::io::Bytes,header) = ::haxe::io::Bytes_obj::alloc((int)6);
HXDLIN(  61)			{
HXLINE(  61)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  61)				while((_g < (int)6)){
HXLINE(  61)					HX_VARI( Int,i) = _g++;
HXDLIN(  61)					{
HXLINE(  61)						HX_VAR( Int,x);
HXDLIN(  61)						Bool _hx_tmp1;
HXDLIN(  61)						Bool _hx_tmp2 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  61)						if (_hx_tmp2) {
HXLINE(  61)							Bool _hx_tmp3 = !(decodeState->lastSeg);
HXDLIN(  61)							if (_hx_tmp3) {
HXLINE(  61)								Int _hx_tmp4 = decodeState->next();
HXDLIN(  61)								_hx_tmp1 = (_hx_tmp4 == (int)0);
            							}
            							else {
HXLINE(  61)								_hx_tmp1 = true;
            							}
            						}
            						else {
HXLINE(  61)							_hx_tmp1 = false;
            						}
HXDLIN(  61)						if (_hx_tmp1) {
HXLINE(  61)							x = (int)-1;
            						}
            						else {
HXLINE(  61)							decodeState->bytesInSeg--;
HXDLIN(  61)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  61)							x = decodeState->input->readByte();
            						}
HXDLIN(  61)						decodeState->validBits = (int)0;
HXDLIN(  61)						header->b[i] = x;
            					}
            				}
            			}
HXDLIN(  61)			::String _hx_tmp5 = header->toString();
HXDLIN(  61)			if ((_hx_tmp5 != HX_("vorbis",53,03,3c,63))) {
HXLINE(  61)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("vorbis header",ba,3e,a4,0e),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),300,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("vorbisValidate",09,9b,51,16))));
            			}
            		}
HXLINE(  64)		hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  64)		HX_VARI( Int,version) = decodeState->input->readInt32();
HXLINE(  65)		if ((version != (int)0)) {
HXLINE(  66)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),(HX_("vorbis version : ",5b,e2,58,09) + version),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),66,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  69)		HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Header,header1,"header") =  ::kha::audio2::ogg::vorbis::data::Header_obj::__new();
HXLINE(  71)		hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  71)		Int _hx_tmp6 = decodeState->input->readByte();
HXDLIN(  71)		header1->channel = _hx_tmp6;
HXLINE(  72)		if ((header1->channel == (int)0)) {
HXLINE(  73)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("no channel",e4,4d,cc,09),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),73,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
            		else {
HXLINE(  74)			if ((header1->channel > (int)16)) {
HXLINE(  75)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::TOO_MANY_CHANNELS_dyn(),HX_("too many channels",65,2f,80,4b),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),75,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            			}
            		}
HXLINE(  78)		hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  78)		Int _hx_tmp7 = decodeState->input->readInt32();
HXDLIN(  78)		header1->sampleRate = _hx_tmp7;
HXLINE(  79)		if ((header1->sampleRate == (int)0)) {
HXLINE(  80)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("no sampling rate",9a,91,ba,fc),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),80,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  83)		hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  83)		Int _hx_tmp8 = decodeState->input->readInt32();
HXDLIN(  83)		header1->maximumBitRate = _hx_tmp8;
HXLINE(  84)		hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  84)		Int _hx_tmp9 = decodeState->input->readInt32();
HXDLIN(  84)		header1->nominalBitRate = _hx_tmp9;
HXLINE(  85)		hx::AddEq(decodeState->inputPosition,(int)4);
HXDLIN(  85)		Int _hx_tmp10 = decodeState->input->readInt32();
HXDLIN(  85)		header1->minimumBitRate = _hx_tmp10;
HXLINE(  87)		hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  87)		HX_VARI_NAME( Int,x1,"x") = decodeState->input->readByte();
HXLINE(  88)		HX_VARI( Int,log0) = ((int)x1 & (int)(int)15);
HXLINE(  89)		HX_VARI( Int,log1) = ((int)x1 >> (int)(int)4);
HXLINE(  90)		header1->blocksize0 = ((int)(int)1 << (int)log0);
HXLINE(  91)		header1->blocksize1 = ((int)(int)1 << (int)log1);
HXLINE(  92)		Bool _hx_tmp11;
HXDLIN(  92)		if ((log0 >= (int)6)) {
HXLINE(  92)			_hx_tmp11 = (log0 > (int)13);
            		}
            		else {
HXLINE(  92)			_hx_tmp11 = true;
            		}
HXDLIN(  92)		if (_hx_tmp11) {
HXLINE(  93)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),93,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  95)		Bool _hx_tmp12;
HXDLIN(  95)		if ((log1 >= (int)6)) {
HXLINE(  95)			_hx_tmp12 = (log1 > (int)13);
            		}
            		else {
HXLINE(  95)			_hx_tmp12 = true;
            		}
HXDLIN(  95)		if (_hx_tmp12) {
HXLINE(  96)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),96,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  98)		if ((log0 > log1)) {
HXLINE(  99)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),99,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 103)		hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 103)		HX_VARI_NAME( Int,x2,"x") = decodeState->input->readByte();
HXLINE( 104)		if ((((int)x2 & (int)(int)1) == (int)0)) {
HXLINE( 105)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),105,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 109)		decodeState->page->start(decodeState);
HXLINE( 110)		decodeState->startPacket();
HXLINE( 112)		HX_VARI( Int,len) = (int)0;
HXLINE( 113)		HX_VARI(  ::haxe::io::BytesOutput,output) =  ::haxe::io::BytesOutput_obj::__new();
HXLINE( 114)		while(true){
HXLINE( 114)			len = decodeState->next();
HXDLIN( 114)			if (!((len != (int)0))) {
HXLINE( 114)				goto _hx_goto_1;
            			}
HXLINE( 115)			hx::AddEq(decodeState->inputPosition,len);
HXDLIN( 115)			 ::haxe::io::Bytes _hx_tmp13 = decodeState->input->read(len);
HXDLIN( 115)			output->write(_hx_tmp13);
HXLINE( 116)			decodeState->bytesInSeg = (int)0;
            		}
            		_hx_goto_1:;
HXLINE( 119)		{
HXLINE( 120)			 ::haxe::io::Bytes _hx_tmp14 = output->getBytes();
HXDLIN( 120)			HX_VARI(  ::haxe::io::BytesInput,packetInput) =  ::haxe::io::BytesInput_obj::__new(_hx_tmp14,null(),null());
HXLINE( 121)			packetInput->readByte();
HXLINE( 122)			packetInput->read((int)6);
HXLINE( 124)			HX_VARI( Int,vendorLength) = packetInput->readInt32();
HXLINE( 125)			header1->vendor = packetInput->readString(vendorLength);
HXLINE( 126)			header1->comment =  ::kha::audio2::ogg::vorbis::data::Comment_obj::__new();
HXLINE( 128)			HX_VARI( Int,commentCount) = packetInput->readInt32();
HXLINE( 130)			{
HXLINE( 130)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 130)				while((_g1 < commentCount)){
HXLINE( 130)					++_g1;
HXLINE( 131)					HX_VARI( Int,n) = packetInput->readInt32();
HXLINE( 132)					HX_VARI( ::String,str) = packetInput->readString(n);
HXLINE( 133)					HX_VARI( Int,splitter) = str.indexOf(HX_("=",3d,00,00,00),null());
HXLINE( 134)					if ((splitter != (int)-1)) {
HXLINE( 135)						::String _hx_tmp15 = str.substring((int)0,splitter);
HXDLIN( 135)						::String _hx_tmp16 = str.substring((splitter + (int)1),null());
HXDLIN( 135)						header1->comment->add(_hx_tmp15,_hx_tmp16);
            					}
            				}
            			}
HXLINE( 139)			HX_VARI_NAME( Int,x3,"x") = packetInput->readByte();
HXLINE( 140)			if ((((int)x3 & (int)(int)1) == (int)0)) {
HXLINE( 141)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),141,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            			}
            		}
HXLINE( 146)		decodeState->startPacket();
HXLINE( 148)		HX_VAR_NAME( Int,x4,"x");
HXDLIN( 148)		Bool _hx_tmp17;
HXDLIN( 148)		Bool _hx_tmp18 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 148)		if (_hx_tmp18) {
HXLINE( 148)			Bool _hx_tmp19 = !(decodeState->lastSeg);
HXDLIN( 148)			if (_hx_tmp19) {
HXLINE( 148)				Int _hx_tmp20 = decodeState->next();
HXDLIN( 148)				_hx_tmp17 = (_hx_tmp20 == (int)0);
            			}
            			else {
HXLINE( 148)				_hx_tmp17 = true;
            			}
            		}
            		else {
HXLINE( 148)			_hx_tmp17 = false;
            		}
HXDLIN( 148)		if (_hx_tmp17) {
HXLINE( 148)			x4 = (int)-1;
            		}
            		else {
HXLINE( 148)			decodeState->bytesInSeg--;
HXDLIN( 148)			hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 148)			x4 = decodeState->input->readByte();
            		}
HXDLIN( 148)		decodeState->validBits = (int)0;
HXDLIN( 148)		if ((x4 != (int)5)) {
HXLINE( 149)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("setup packet",cb,fa,2a,07),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),149,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 152)		{
HXLINE( 152)			HX_VARI_NAME(  ::haxe::io::Bytes,header2,"header") = ::haxe::io::Bytes_obj::alloc((int)6);
HXDLIN( 152)			{
HXLINE( 152)				HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 152)				while((_g2 < (int)6)){
HXLINE( 152)					HX_VARI_NAME( Int,i1,"i") = _g2++;
HXDLIN( 152)					{
HXLINE( 152)						HX_VAR_NAME( Int,x5,"x");
HXDLIN( 152)						Bool _hx_tmp21;
HXDLIN( 152)						Bool _hx_tmp22 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 152)						if (_hx_tmp22) {
HXLINE( 152)							Bool _hx_tmp23 = !(decodeState->lastSeg);
HXDLIN( 152)							if (_hx_tmp23) {
HXLINE( 152)								Int _hx_tmp24 = decodeState->next();
HXDLIN( 152)								_hx_tmp21 = (_hx_tmp24 == (int)0);
            							}
            							else {
HXLINE( 152)								_hx_tmp21 = true;
            							}
            						}
            						else {
HXLINE( 152)							_hx_tmp21 = false;
            						}
HXDLIN( 152)						if (_hx_tmp21) {
HXLINE( 152)							x5 = (int)-1;
            						}
            						else {
HXLINE( 152)							decodeState->bytesInSeg--;
HXDLIN( 152)							hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 152)							x5 = decodeState->input->readByte();
            						}
HXDLIN( 152)						decodeState->validBits = (int)0;
HXDLIN( 152)						header2->b[i1] = x5;
            					}
            				}
            			}
HXDLIN( 152)			::String _hx_tmp25 = header2->toString();
HXDLIN( 152)			if ((_hx_tmp25 != HX_("vorbis",53,03,3c,63))) {
HXLINE( 152)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("vorbis header",ba,3e,a4,0e),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),300,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("vorbisValidate",09,9b,51,16))));
            			}
            		}
HXLINE( 155)		Int _hx_tmp26;
HXDLIN( 155)		Bool _hx_tmp27 = (decodeState->validBits < (int)0);
HXDLIN( 155)		if (_hx_tmp27) {
HXLINE( 155)			_hx_tmp26 = (int)0;
            		}
            		else {
HXLINE( 155)			Bool _hx_tmp28 = (decodeState->validBits < (int)8);
HXDLIN( 155)			if (_hx_tmp28) {
HXLINE( 155)				Bool _hx_tmp29 = (decodeState->validBits == (int)0);
HXDLIN( 155)				if (_hx_tmp29) {
HXLINE( 155)					decodeState->acc = (int)0;
            				}
HXDLIN( 155)				while(true){
HXLINE( 155)					Bool _hx_tmp30;
HXDLIN( 155)					Bool _hx_tmp31 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 155)					if (_hx_tmp31) {
HXLINE( 155)						Bool _hx_tmp32 = !(decodeState->lastSeg);
HXDLIN( 155)						if (_hx_tmp32) {
HXLINE( 155)							Int _hx_tmp33 = decodeState->next();
HXDLIN( 155)							_hx_tmp30 = (_hx_tmp33 == (int)0);
            						}
            						else {
HXLINE( 155)							_hx_tmp30 = true;
            						}
            					}
            					else {
HXLINE( 155)						_hx_tmp30 = false;
            					}
HXDLIN( 155)					if (_hx_tmp30) {
HXLINE( 155)						decodeState->validBits = (int)-1;
HXDLIN( 155)						goto _hx_goto_4;
            					}
            					else {
HXLINE( 155)						decodeState->bytesInSeg--;
HXDLIN( 155)						Int a = decodeState->acc;
HXDLIN( 155)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 155)						Int _hx_tmp34 = decodeState->input->readByte();
HXDLIN( 155)						Int _hx_tmp35 = (a + ((int)_hx_tmp34 << (int)decodeState->validBits));
HXDLIN( 155)						decodeState->acc = _hx_tmp35;
HXDLIN( 155)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN( 155)					if (!((decodeState->validBits < (int)8))) {
HXLINE( 155)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
HXDLIN( 155)				Bool _hx_tmp36 = (decodeState->validBits < (int)0);
HXDLIN( 155)				if (_hx_tmp36) {
HXLINE( 155)					_hx_tmp26 = (int)0;
            				}
            				else {
HXLINE( 155)					HX_VARI( Int,z) = ((int)decodeState->acc & (int)(int)255);
HXDLIN( 155)					Int _hx_tmp37 = hx::UShr(decodeState->acc,(int)8);
HXDLIN( 155)					decodeState->acc = _hx_tmp37;
HXDLIN( 155)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN( 155)					_hx_tmp26 = z;
            				}
            			}
            			else {
HXLINE( 155)				HX_VARI_NAME( Int,z1,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN( 155)				Int _hx_tmp38 = hx::UShr(decodeState->acc,(int)8);
HXDLIN( 155)				decodeState->acc = _hx_tmp38;
HXDLIN( 155)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN( 155)				_hx_tmp26 = z1;
            			}
            		}
HXDLIN( 155)		HX_VARI( Int,codebookCount) = (_hx_tmp26 + (int)1);
HXLINE( 156)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 156)		_hx_array_set_size_exact(this1,codebookCount);
HXDLIN( 156)		header1->codebooks = this1;
HXLINE( 157)		{
HXLINE( 157)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 157)			while((_g11 < codebookCount)){
HXLINE( 157)				HX_VARI_NAME( Int,i2,"i") = _g11++;
HXLINE( 158)				{
HXLINE( 158)					 ::kha::audio2::ogg::vorbis::data::Codebook val = ::kha::audio2::ogg::vorbis::data::Codebook_obj::read(decodeState);
HXDLIN( 158)					header1->codebooks->__unsafe_set(i2,val);
            				}
            			}
            		}
HXLINE( 162)		Int _hx_tmp39;
HXDLIN( 162)		Bool _hx_tmp40 = (decodeState->validBits < (int)0);
HXDLIN( 162)		if (_hx_tmp40) {
HXLINE( 162)			_hx_tmp39 = (int)0;
            		}
            		else {
HXLINE( 162)			Bool _hx_tmp41 = (decodeState->validBits < (int)6);
HXDLIN( 162)			if (_hx_tmp41) {
HXLINE( 162)				Bool _hx_tmp42 = (decodeState->validBits == (int)0);
HXDLIN( 162)				if (_hx_tmp42) {
HXLINE( 162)					decodeState->acc = (int)0;
            				}
HXDLIN( 162)				while(true){
HXLINE( 162)					Bool _hx_tmp43;
HXDLIN( 162)					Bool _hx_tmp44 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 162)					if (_hx_tmp44) {
HXLINE( 162)						Bool _hx_tmp45 = !(decodeState->lastSeg);
HXDLIN( 162)						if (_hx_tmp45) {
HXLINE( 162)							Int _hx_tmp46 = decodeState->next();
HXDLIN( 162)							_hx_tmp43 = (_hx_tmp46 == (int)0);
            						}
            						else {
HXLINE( 162)							_hx_tmp43 = true;
            						}
            					}
            					else {
HXLINE( 162)						_hx_tmp43 = false;
            					}
HXDLIN( 162)					if (_hx_tmp43) {
HXLINE( 162)						decodeState->validBits = (int)-1;
HXDLIN( 162)						goto _hx_goto_6;
            					}
            					else {
HXLINE( 162)						decodeState->bytesInSeg--;
HXDLIN( 162)						Int a1 = decodeState->acc;
HXDLIN( 162)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 162)						Int _hx_tmp47 = decodeState->input->readByte();
HXDLIN( 162)						Int _hx_tmp48 = (a1 + ((int)_hx_tmp47 << (int)decodeState->validBits));
HXDLIN( 162)						decodeState->acc = _hx_tmp48;
HXDLIN( 162)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN( 162)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 162)						goto _hx_goto_6;
            					}
            				}
            				_hx_goto_6:;
HXDLIN( 162)				Bool _hx_tmp49 = (decodeState->validBits < (int)0);
HXDLIN( 162)				if (_hx_tmp49) {
HXLINE( 162)					_hx_tmp39 = (int)0;
            				}
            				else {
HXLINE( 162)					HX_VARI_NAME( Int,z2,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 162)					Int _hx_tmp50 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 162)					decodeState->acc = _hx_tmp50;
HXDLIN( 162)					hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 162)					_hx_tmp39 = z2;
            				}
            			}
            			else {
HXLINE( 162)				HX_VARI_NAME( Int,z3,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 162)				Int _hx_tmp51 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 162)				decodeState->acc = _hx_tmp51;
HXDLIN( 162)				hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 162)				_hx_tmp39 = z3;
            			}
            		}
HXDLIN( 162)		x2 = (_hx_tmp39 + (int)1);
HXLINE( 163)		{
HXLINE( 163)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 163)			HX_VARI_NAME( Int,_g3,"_g") = x2;
HXDLIN( 163)			while((_g12 < _g3)){
HXLINE( 163)				++_g12;
HXLINE( 164)				Int _hx_tmp52;
HXDLIN( 164)				Bool _hx_tmp53 = (decodeState->validBits < (int)0);
HXDLIN( 164)				if (_hx_tmp53) {
HXLINE( 164)					_hx_tmp52 = (int)0;
            				}
            				else {
HXLINE( 164)					Bool _hx_tmp54 = (decodeState->validBits < (int)16);
HXDLIN( 164)					if (_hx_tmp54) {
HXLINE( 164)						Bool _hx_tmp55 = (decodeState->validBits == (int)0);
HXDLIN( 164)						if (_hx_tmp55) {
HXLINE( 164)							decodeState->acc = (int)0;
            						}
HXDLIN( 164)						while(true){
HXLINE( 164)							Bool _hx_tmp56;
HXDLIN( 164)							Bool _hx_tmp57 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 164)							if (_hx_tmp57) {
HXLINE( 164)								Bool _hx_tmp58 = !(decodeState->lastSeg);
HXDLIN( 164)								if (_hx_tmp58) {
HXLINE( 164)									Int _hx_tmp59 = decodeState->next();
HXDLIN( 164)									_hx_tmp56 = (_hx_tmp59 == (int)0);
            								}
            								else {
HXLINE( 164)									_hx_tmp56 = true;
            								}
            							}
            							else {
HXLINE( 164)								_hx_tmp56 = false;
            							}
HXDLIN( 164)							if (_hx_tmp56) {
HXLINE( 164)								decodeState->validBits = (int)-1;
HXDLIN( 164)								goto _hx_goto_8;
            							}
            							else {
HXLINE( 164)								decodeState->bytesInSeg--;
HXDLIN( 164)								Int a2 = decodeState->acc;
HXDLIN( 164)								hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 164)								Int _hx_tmp60 = decodeState->input->readByte();
HXDLIN( 164)								Int _hx_tmp61 = (a2 + ((int)_hx_tmp60 << (int)decodeState->validBits));
HXDLIN( 164)								decodeState->acc = _hx_tmp61;
HXDLIN( 164)								hx::AddEq(decodeState->validBits,(int)8);
            							}
HXDLIN( 164)							if (!((decodeState->validBits < (int)16))) {
HXLINE( 164)								goto _hx_goto_8;
            							}
            						}
            						_hx_goto_8:;
HXDLIN( 164)						Bool _hx_tmp62 = (decodeState->validBits < (int)0);
HXDLIN( 164)						if (_hx_tmp62) {
HXLINE( 164)							_hx_tmp52 = (int)0;
            						}
            						else {
HXLINE( 164)							HX_VARI_NAME( Int,z4,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN( 164)							Int _hx_tmp63 = hx::UShr(decodeState->acc,(int)16);
HXDLIN( 164)							decodeState->acc = _hx_tmp63;
HXDLIN( 164)							hx::SubEq(decodeState->validBits,(int)16);
HXDLIN( 164)							_hx_tmp52 = z4;
            						}
            					}
            					else {
HXLINE( 164)						HX_VARI_NAME( Int,z5,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN( 164)						Int _hx_tmp64 = hx::UShr(decodeState->acc,(int)16);
HXDLIN( 164)						decodeState->acc = _hx_tmp64;
HXDLIN( 164)						hx::SubEq(decodeState->validBits,(int)16);
HXDLIN( 164)						_hx_tmp52 = z5;
            					}
            				}
HXDLIN( 164)				if ((_hx_tmp52 != (int)0)) {
HXLINE( 165)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),165,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            				}
            			}
            		}
HXLINE( 170)		Int _hx_tmp65;
HXDLIN( 170)		Bool _hx_tmp66 = (decodeState->validBits < (int)0);
HXDLIN( 170)		if (_hx_tmp66) {
HXLINE( 170)			_hx_tmp65 = (int)0;
            		}
            		else {
HXLINE( 170)			Bool _hx_tmp67 = (decodeState->validBits < (int)6);
HXDLIN( 170)			if (_hx_tmp67) {
HXLINE( 170)				Bool _hx_tmp68 = (decodeState->validBits == (int)0);
HXDLIN( 170)				if (_hx_tmp68) {
HXLINE( 170)					decodeState->acc = (int)0;
            				}
HXDLIN( 170)				while(true){
HXLINE( 170)					Bool _hx_tmp69;
HXDLIN( 170)					Bool _hx_tmp70 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 170)					if (_hx_tmp70) {
HXLINE( 170)						Bool _hx_tmp71 = !(decodeState->lastSeg);
HXDLIN( 170)						if (_hx_tmp71) {
HXLINE( 170)							Int _hx_tmp72 = decodeState->next();
HXDLIN( 170)							_hx_tmp69 = (_hx_tmp72 == (int)0);
            						}
            						else {
HXLINE( 170)							_hx_tmp69 = true;
            						}
            					}
            					else {
HXLINE( 170)						_hx_tmp69 = false;
            					}
HXDLIN( 170)					if (_hx_tmp69) {
HXLINE( 170)						decodeState->validBits = (int)-1;
HXDLIN( 170)						goto _hx_goto_9;
            					}
            					else {
HXLINE( 170)						decodeState->bytesInSeg--;
HXDLIN( 170)						Int a3 = decodeState->acc;
HXDLIN( 170)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 170)						Int _hx_tmp73 = decodeState->input->readByte();
HXDLIN( 170)						Int _hx_tmp74 = (a3 + ((int)_hx_tmp73 << (int)decodeState->validBits));
HXDLIN( 170)						decodeState->acc = _hx_tmp74;
HXDLIN( 170)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN( 170)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 170)						goto _hx_goto_9;
            					}
            				}
            				_hx_goto_9:;
HXDLIN( 170)				Bool _hx_tmp75 = (decodeState->validBits < (int)0);
HXDLIN( 170)				if (_hx_tmp75) {
HXLINE( 170)					_hx_tmp65 = (int)0;
            				}
            				else {
HXLINE( 170)					HX_VARI_NAME( Int,z6,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 170)					Int _hx_tmp76 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 170)					decodeState->acc = _hx_tmp76;
HXDLIN( 170)					hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 170)					_hx_tmp65 = z6;
            				}
            			}
            			else {
HXLINE( 170)				HX_VARI_NAME( Int,z7,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 170)				Int _hx_tmp77 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 170)				decodeState->acc = _hx_tmp77;
HXDLIN( 170)				hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 170)				_hx_tmp65 = z7;
            			}
            		}
HXDLIN( 170)		HX_VARI( Int,floorCount) = (_hx_tmp65 + (int)1);
HXLINE( 171)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 171)		_hx_array_set_size_exact(this2,floorCount);
HXDLIN( 171)		header1->floorConfig = this2;
HXLINE( 172)		{
HXLINE( 172)			HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 172)			while((_g13 < floorCount)){
HXLINE( 172)				HX_VARI_NAME( Int,i3,"i") = _g13++;
HXLINE( 173)				{
HXLINE( 173)					 ::kha::audio2::ogg::vorbis::data::Floor val1 = ::kha::audio2::ogg::vorbis::data::Floor_obj::read(decodeState,header1->codebooks);
HXDLIN( 173)					header1->floorConfig->__unsafe_set(i3,val1);
            				}
            			}
            		}
HXLINE( 177)		Int _hx_tmp78;
HXDLIN( 177)		Bool _hx_tmp79 = (decodeState->validBits < (int)0);
HXDLIN( 177)		if (_hx_tmp79) {
HXLINE( 177)			_hx_tmp78 = (int)0;
            		}
            		else {
HXLINE( 177)			Bool _hx_tmp80 = (decodeState->validBits < (int)6);
HXDLIN( 177)			if (_hx_tmp80) {
HXLINE( 177)				Bool _hx_tmp81 = (decodeState->validBits == (int)0);
HXDLIN( 177)				if (_hx_tmp81) {
HXLINE( 177)					decodeState->acc = (int)0;
            				}
HXDLIN( 177)				while(true){
HXLINE( 177)					Bool _hx_tmp82;
HXDLIN( 177)					Bool _hx_tmp83 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 177)					if (_hx_tmp83) {
HXLINE( 177)						Bool _hx_tmp84 = !(decodeState->lastSeg);
HXDLIN( 177)						if (_hx_tmp84) {
HXLINE( 177)							Int _hx_tmp85 = decodeState->next();
HXDLIN( 177)							_hx_tmp82 = (_hx_tmp85 == (int)0);
            						}
            						else {
HXLINE( 177)							_hx_tmp82 = true;
            						}
            					}
            					else {
HXLINE( 177)						_hx_tmp82 = false;
            					}
HXDLIN( 177)					if (_hx_tmp82) {
HXLINE( 177)						decodeState->validBits = (int)-1;
HXDLIN( 177)						goto _hx_goto_11;
            					}
            					else {
HXLINE( 177)						decodeState->bytesInSeg--;
HXDLIN( 177)						Int a4 = decodeState->acc;
HXDLIN( 177)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 177)						Int _hx_tmp86 = decodeState->input->readByte();
HXDLIN( 177)						Int _hx_tmp87 = (a4 + ((int)_hx_tmp86 << (int)decodeState->validBits));
HXDLIN( 177)						decodeState->acc = _hx_tmp87;
HXDLIN( 177)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN( 177)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 177)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
HXDLIN( 177)				Bool _hx_tmp88 = (decodeState->validBits < (int)0);
HXDLIN( 177)				if (_hx_tmp88) {
HXLINE( 177)					_hx_tmp78 = (int)0;
            				}
            				else {
HXLINE( 177)					HX_VARI_NAME( Int,z8,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 177)					Int _hx_tmp89 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 177)					decodeState->acc = _hx_tmp89;
HXDLIN( 177)					hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 177)					_hx_tmp78 = z8;
            				}
            			}
            			else {
HXLINE( 177)				HX_VARI_NAME( Int,z9,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 177)				Int _hx_tmp90 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 177)				decodeState->acc = _hx_tmp90;
HXDLIN( 177)				hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 177)				_hx_tmp78 = z9;
            			}
            		}
HXDLIN( 177)		HX_VARI( Int,residueCount) = (_hx_tmp78 + (int)1);
HXLINE( 178)		HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 178)		_hx_array_set_size_exact(this3,residueCount);
HXDLIN( 178)		header1->residueConfig = this3;
HXLINE( 179)		{
HXLINE( 179)			HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN( 179)			while((_g14 < residueCount)){
HXLINE( 179)				HX_VARI_NAME( Int,i4,"i") = _g14++;
HXLINE( 180)				{
HXLINE( 180)					 ::kha::audio2::ogg::vorbis::data::Residue val2 = ::kha::audio2::ogg::vorbis::data::Residue_obj::read(decodeState,header1->codebooks);
HXDLIN( 180)					header1->residueConfig->__unsafe_set(i4,val2);
            				}
            			}
            		}
HXLINE( 184)		Int _hx_tmp91;
HXDLIN( 184)		Bool _hx_tmp92 = (decodeState->validBits < (int)0);
HXDLIN( 184)		if (_hx_tmp92) {
HXLINE( 184)			_hx_tmp91 = (int)0;
            		}
            		else {
HXLINE( 184)			Bool _hx_tmp93 = (decodeState->validBits < (int)6);
HXDLIN( 184)			if (_hx_tmp93) {
HXLINE( 184)				Bool _hx_tmp94 = (decodeState->validBits == (int)0);
HXDLIN( 184)				if (_hx_tmp94) {
HXLINE( 184)					decodeState->acc = (int)0;
            				}
HXDLIN( 184)				while(true){
HXLINE( 184)					Bool _hx_tmp95;
HXDLIN( 184)					Bool _hx_tmp96 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 184)					if (_hx_tmp96) {
HXLINE( 184)						Bool _hx_tmp97 = !(decodeState->lastSeg);
HXDLIN( 184)						if (_hx_tmp97) {
HXLINE( 184)							Int _hx_tmp98 = decodeState->next();
HXDLIN( 184)							_hx_tmp95 = (_hx_tmp98 == (int)0);
            						}
            						else {
HXLINE( 184)							_hx_tmp95 = true;
            						}
            					}
            					else {
HXLINE( 184)						_hx_tmp95 = false;
            					}
HXDLIN( 184)					if (_hx_tmp95) {
HXLINE( 184)						decodeState->validBits = (int)-1;
HXDLIN( 184)						goto _hx_goto_13;
            					}
            					else {
HXLINE( 184)						decodeState->bytesInSeg--;
HXDLIN( 184)						Int a5 = decodeState->acc;
HXDLIN( 184)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 184)						Int _hx_tmp99 = decodeState->input->readByte();
HXDLIN( 184)						Int _hx_tmp100 = (a5 + ((int)_hx_tmp99 << (int)decodeState->validBits));
HXDLIN( 184)						decodeState->acc = _hx_tmp100;
HXDLIN( 184)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN( 184)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 184)						goto _hx_goto_13;
            					}
            				}
            				_hx_goto_13:;
HXDLIN( 184)				Bool _hx_tmp101 = (decodeState->validBits < (int)0);
HXDLIN( 184)				if (_hx_tmp101) {
HXLINE( 184)					_hx_tmp91 = (int)0;
            				}
            				else {
HXLINE( 184)					HX_VARI_NAME( Int,z10,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 184)					Int _hx_tmp102 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 184)					decodeState->acc = _hx_tmp102;
HXDLIN( 184)					hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 184)					_hx_tmp91 = z10;
            				}
            			}
            			else {
HXLINE( 184)				HX_VARI_NAME( Int,z11,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 184)				Int _hx_tmp103 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 184)				decodeState->acc = _hx_tmp103;
HXDLIN( 184)				hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 184)				_hx_tmp91 = z11;
            			}
            		}
HXDLIN( 184)		HX_VARI( Int,mappingCount) = (_hx_tmp91 + (int)1);
HXLINE( 185)		HX_VARI_NAME( ::Array< ::Dynamic>,this4,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 185)		_hx_array_set_size_exact(this4,mappingCount);
HXDLIN( 185)		header1->mapping = this4;
HXLINE( 186)		{
HXLINE( 186)			HX_VARI_NAME( Int,_g15,"_g1") = (int)0;
HXDLIN( 186)			while((_g15 < mappingCount)){
HXLINE( 186)				HX_VARI_NAME( Int,i5,"i") = _g15++;
HXLINE( 187)				HX_VARI(  ::kha::audio2::ogg::vorbis::data::Mapping,map) = ::kha::audio2::ogg::vorbis::data::Mapping_obj::read(decodeState,header1->channel);
HXLINE( 188)				header1->mapping->__unsafe_set(i5,map);
HXLINE( 189)				{
HXLINE( 189)					HX_VARI_NAME( Int,_g31,"_g3") = (int)0;
HXDLIN( 189)					HX_VARI_NAME( Int,_g21,"_g2") = map->submaps;
HXDLIN( 189)					while((_g31 < _g21)){
HXLINE( 189)						HX_VARI( Int,j) = _g31++;
HXLINE( 190)						Bool _hx_tmp104 = (( (Int)(_hx_array_unsafe_get(map->submapFloor,j)) ) >= header1->floorConfig->length);
HXDLIN( 190)						if (_hx_tmp104) {
HXLINE( 191)							HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),191,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            						}
HXLINE( 193)						Bool _hx_tmp105 = (( (Int)(_hx_array_unsafe_get(map->submapResidue,j)) ) >= header1->residueConfig->length);
HXDLIN( 193)						if (_hx_tmp105) {
HXLINE( 194)							HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),194,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            						}
            					}
            				}
            			}
            		}
HXLINE( 199)		Int _hx_tmp106;
HXDLIN( 199)		Bool _hx_tmp107 = (decodeState->validBits < (int)0);
HXDLIN( 199)		if (_hx_tmp107) {
HXLINE( 199)			_hx_tmp106 = (int)0;
            		}
            		else {
HXLINE( 199)			Bool _hx_tmp108 = (decodeState->validBits < (int)6);
HXDLIN( 199)			if (_hx_tmp108) {
HXLINE( 199)				Bool _hx_tmp109 = (decodeState->validBits == (int)0);
HXDLIN( 199)				if (_hx_tmp109) {
HXLINE( 199)					decodeState->acc = (int)0;
            				}
HXDLIN( 199)				while(true){
HXLINE( 199)					Bool _hx_tmp110;
HXDLIN( 199)					Bool _hx_tmp111 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 199)					if (_hx_tmp111) {
HXLINE( 199)						Bool _hx_tmp112 = !(decodeState->lastSeg);
HXDLIN( 199)						if (_hx_tmp112) {
HXLINE( 199)							Int _hx_tmp113 = decodeState->next();
HXDLIN( 199)							_hx_tmp110 = (_hx_tmp113 == (int)0);
            						}
            						else {
HXLINE( 199)							_hx_tmp110 = true;
            						}
            					}
            					else {
HXLINE( 199)						_hx_tmp110 = false;
            					}
HXDLIN( 199)					if (_hx_tmp110) {
HXLINE( 199)						decodeState->validBits = (int)-1;
HXDLIN( 199)						goto _hx_goto_16;
            					}
            					else {
HXLINE( 199)						decodeState->bytesInSeg--;
HXDLIN( 199)						Int a6 = decodeState->acc;
HXDLIN( 199)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 199)						Int _hx_tmp114 = decodeState->input->readByte();
HXDLIN( 199)						Int _hx_tmp115 = (a6 + ((int)_hx_tmp114 << (int)decodeState->validBits));
HXDLIN( 199)						decodeState->acc = _hx_tmp115;
HXDLIN( 199)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN( 199)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 199)						goto _hx_goto_16;
            					}
            				}
            				_hx_goto_16:;
HXDLIN( 199)				Bool _hx_tmp116 = (decodeState->validBits < (int)0);
HXDLIN( 199)				if (_hx_tmp116) {
HXLINE( 199)					_hx_tmp106 = (int)0;
            				}
            				else {
HXLINE( 199)					HX_VARI_NAME( Int,z12,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 199)					Int _hx_tmp117 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 199)					decodeState->acc = _hx_tmp117;
HXDLIN( 199)					hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 199)					_hx_tmp106 = z12;
            				}
            			}
            			else {
HXLINE( 199)				HX_VARI_NAME( Int,z13,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 199)				Int _hx_tmp118 = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 199)				decodeState->acc = _hx_tmp118;
HXDLIN( 199)				hx::SubEq(decodeState->validBits,(int)6);
HXDLIN( 199)				_hx_tmp106 = z13;
            			}
            		}
HXDLIN( 199)		HX_VARI( Int,modeCount) = (_hx_tmp106 + (int)1);
HXLINE( 200)		HX_VARI_NAME( ::Array< ::Dynamic>,this5,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 200)		_hx_array_set_size_exact(this5,modeCount);
HXDLIN( 200)		header1->modes = this5;
HXLINE( 201)		{
HXLINE( 201)			HX_VARI_NAME( Int,_g16,"_g1") = (int)0;
HXDLIN( 201)			while((_g16 < modeCount)){
HXLINE( 201)				HX_VARI_NAME( Int,i6,"i") = _g16++;
HXLINE( 202)				HX_VARI(  ::kha::audio2::ogg::vorbis::data::Mode,mode) = ::kha::audio2::ogg::vorbis::data::Mode_obj::read(decodeState);
HXLINE( 203)				header1->modes->__unsafe_set(i6,mode);
HXLINE( 204)				if ((mode->mapping >= header1->mapping->length)) {
HXLINE( 205)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),205,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            				}
            			}
            		}
HXLINE( 209)		while(true){
HXLINE( 209)			Bool _hx_tmp119;
HXDLIN( 209)			Bool _hx_tmp120 = (decodeState->bytesInSeg == (int)0);
HXDLIN( 209)			if (_hx_tmp120) {
HXLINE( 209)				Bool _hx_tmp121 = !(decodeState->lastSeg);
HXDLIN( 209)				if (_hx_tmp121) {
HXLINE( 209)					Int _hx_tmp122 = decodeState->next();
HXDLIN( 209)					_hx_tmp119 = (_hx_tmp122 != (int)0);
            				}
            				else {
HXLINE( 209)					_hx_tmp119 = false;
            				}
            			}
            			else {
HXLINE( 209)				_hx_tmp119 = true;
            			}
HXDLIN( 209)			if (!(_hx_tmp119)) {
HXLINE( 209)				goto _hx_goto_18;
            			}
HXDLIN( 209)			decodeState->bytesInSeg--;
HXDLIN( 209)			{
HXLINE( 209)				hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN( 209)				decodeState->input->readByte();
            			}
            		}
            		_hx_goto_18:;
HXLINE( 211)		return header1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Header_obj,read,return )


Header_obj::Header_obj()
{
}

void Header_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Header);
	HX_MARK_MEMBER_NAME(maximumBitRate,"maximumBitRate");
	HX_MARK_MEMBER_NAME(nominalBitRate,"nominalBitRate");
	HX_MARK_MEMBER_NAME(minimumBitRate,"minimumBitRate");
	HX_MARK_MEMBER_NAME(sampleRate,"sampleRate");
	HX_MARK_MEMBER_NAME(channel,"channel");
	HX_MARK_MEMBER_NAME(blocksize0,"blocksize0");
	HX_MARK_MEMBER_NAME(blocksize1,"blocksize1");
	HX_MARK_MEMBER_NAME(codebooks,"codebooks");
	HX_MARK_MEMBER_NAME(floorConfig,"floorConfig");
	HX_MARK_MEMBER_NAME(residueConfig,"residueConfig");
	HX_MARK_MEMBER_NAME(mapping,"mapping");
	HX_MARK_MEMBER_NAME(modes,"modes");
	HX_MARK_MEMBER_NAME(comment,"comment");
	HX_MARK_MEMBER_NAME(vendor,"vendor");
	HX_MARK_END_CLASS();
}

void Header_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maximumBitRate,"maximumBitRate");
	HX_VISIT_MEMBER_NAME(nominalBitRate,"nominalBitRate");
	HX_VISIT_MEMBER_NAME(minimumBitRate,"minimumBitRate");
	HX_VISIT_MEMBER_NAME(sampleRate,"sampleRate");
	HX_VISIT_MEMBER_NAME(channel,"channel");
	HX_VISIT_MEMBER_NAME(blocksize0,"blocksize0");
	HX_VISIT_MEMBER_NAME(blocksize1,"blocksize1");
	HX_VISIT_MEMBER_NAME(codebooks,"codebooks");
	HX_VISIT_MEMBER_NAME(floorConfig,"floorConfig");
	HX_VISIT_MEMBER_NAME(residueConfig,"residueConfig");
	HX_VISIT_MEMBER_NAME(mapping,"mapping");
	HX_VISIT_MEMBER_NAME(modes,"modes");
	HX_VISIT_MEMBER_NAME(comment,"comment");
	HX_VISIT_MEMBER_NAME(vendor,"vendor");
}

hx::Val Header_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"modes") ) { return hx::Val( modes); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vendor") ) { return hx::Val( vendor); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"channel") ) { return hx::Val( channel); }
		if (HX_FIELD_EQ(inName,"mapping") ) { return hx::Val( mapping); }
		if (HX_FIELD_EQ(inName,"comment") ) { return hx::Val( comment); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"codebooks") ) { return hx::Val( codebooks); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { return hx::Val( sampleRate); }
		if (HX_FIELD_EQ(inName,"blocksize0") ) { return hx::Val( blocksize0); }
		if (HX_FIELD_EQ(inName,"blocksize1") ) { return hx::Val( blocksize1); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"floorConfig") ) { return hx::Val( floorConfig); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"residueConfig") ) { return hx::Val( residueConfig); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"maximumBitRate") ) { return hx::Val( maximumBitRate); }
		if (HX_FIELD_EQ(inName,"nominalBitRate") ) { return hx::Val( nominalBitRate); }
		if (HX_FIELD_EQ(inName,"minimumBitRate") ) { return hx::Val( minimumBitRate); }
	}
	return super::__Field(inName,inCallProp);
}

bool Header_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Header_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"modes") ) { modes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vendor") ) { vendor=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"channel") ) { channel=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mapping") ) { mapping=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comment") ) { comment=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Comment >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"codebooks") ) { codebooks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { sampleRate=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blocksize0") ) { blocksize0=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blocksize1") ) { blocksize1=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"floorConfig") ) { floorConfig=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"residueConfig") ) { residueConfig=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"maximumBitRate") ) { maximumBitRate=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nominalBitRate") ) { nominalBitRate=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minimumBitRate") ) { minimumBitRate=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Header_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("maximumBitRate","\x4d","\x56","\x30","\x56"));
	outFields->push(HX_HCSTRING("nominalBitRate","\x91","\xa2","\x66","\x22"));
	outFields->push(HX_HCSTRING("minimumBitRate","\x1f","\xfa","\xb9","\xf2"));
	outFields->push(HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"));
	outFields->push(HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc"));
	outFields->push(HX_HCSTRING("blocksize0","\xe2","\x3b","\x0f","\xc1"));
	outFields->push(HX_HCSTRING("blocksize1","\xe3","\x3b","\x0f","\xc1"));
	outFields->push(HX_HCSTRING("codebooks","\xdd","\x0b","\xa1","\xb7"));
	outFields->push(HX_HCSTRING("floorConfig","\xae","\xfd","\x8a","\x3c"));
	outFields->push(HX_HCSTRING("residueConfig","\x6d","\x4d","\x6d","\xb1"));
	outFields->push(HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"));
	outFields->push(HX_HCSTRING("modes","\xb0","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("comment","\x5f","\x7a","\x70","\x81"));
	outFields->push(HX_HCSTRING("vendor","\x88","\xe5","\x96","\x9e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Header_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Header_obj,maximumBitRate),HX_HCSTRING("maximumBitRate","\x4d","\x56","\x30","\x56")},
	{hx::fsInt,(int)offsetof(Header_obj,nominalBitRate),HX_HCSTRING("nominalBitRate","\x91","\xa2","\x66","\x22")},
	{hx::fsInt,(int)offsetof(Header_obj,minimumBitRate),HX_HCSTRING("minimumBitRate","\x1f","\xfa","\xb9","\xf2")},
	{hx::fsInt,(int)offsetof(Header_obj,sampleRate),HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67")},
	{hx::fsInt,(int)offsetof(Header_obj,channel),HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc")},
	{hx::fsInt,(int)offsetof(Header_obj,blocksize0),HX_HCSTRING("blocksize0","\xe2","\x3b","\x0f","\xc1")},
	{hx::fsInt,(int)offsetof(Header_obj,blocksize1),HX_HCSTRING("blocksize1","\xe3","\x3b","\x0f","\xc1")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,codebooks),HX_HCSTRING("codebooks","\xdd","\x0b","\xa1","\xb7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,floorConfig),HX_HCSTRING("floorConfig","\xae","\xfd","\x8a","\x3c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,residueConfig),HX_HCSTRING("residueConfig","\x6d","\x4d","\x6d","\xb1")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,mapping),HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,modes),HX_HCSTRING("modes","\xb0","\x23","\x58","\x0c")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Comment*/ ,(int)offsetof(Header_obj,comment),HX_HCSTRING("comment","\x5f","\x7a","\x70","\x81")},
	{hx::fsString,(int)offsetof(Header_obj,vendor),HX_HCSTRING("vendor","\x88","\xe5","\x96","\x9e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Header_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Header_obj::PACKET_ID,HX_HCSTRING("PACKET_ID","\x72","\x37","\x96","\x42")},
	{hx::fsInt,(void *) &Header_obj::PACKET_COMMENT,HX_HCSTRING("PACKET_COMMENT","\x48","\x73","\x92","\xc8")},
	{hx::fsInt,(void *) &Header_obj::PACKET_SETUP,HX_HCSTRING("PACKET_SETUP","\x26","\x87","\x2b","\x68")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Header_obj_sMemberFields[] = {
	HX_HCSTRING("maximumBitRate","\x4d","\x56","\x30","\x56"),
	HX_HCSTRING("nominalBitRate","\x91","\xa2","\x66","\x22"),
	HX_HCSTRING("minimumBitRate","\x1f","\xfa","\xb9","\xf2"),
	HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"),
	HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc"),
	HX_HCSTRING("blocksize0","\xe2","\x3b","\x0f","\xc1"),
	HX_HCSTRING("blocksize1","\xe3","\x3b","\x0f","\xc1"),
	HX_HCSTRING("codebooks","\xdd","\x0b","\xa1","\xb7"),
	HX_HCSTRING("floorConfig","\xae","\xfd","\x8a","\x3c"),
	HX_HCSTRING("residueConfig","\x6d","\x4d","\x6d","\xb1"),
	HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"),
	HX_HCSTRING("modes","\xb0","\x23","\x58","\x0c"),
	HX_HCSTRING("comment","\x5f","\x7a","\x70","\x81"),
	HX_HCSTRING("vendor","\x88","\xe5","\x96","\x9e"),
	::String(null()) };

static void Header_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Header_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Header_obj::PACKET_ID,"PACKET_ID");
	HX_MARK_MEMBER_NAME(Header_obj::PACKET_COMMENT,"PACKET_COMMENT");
	HX_MARK_MEMBER_NAME(Header_obj::PACKET_SETUP,"PACKET_SETUP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Header_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Header_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Header_obj::PACKET_ID,"PACKET_ID");
	HX_VISIT_MEMBER_NAME(Header_obj::PACKET_COMMENT,"PACKET_COMMENT");
	HX_VISIT_MEMBER_NAME(Header_obj::PACKET_SETUP,"PACKET_SETUP");
};

#endif

hx::Class Header_obj::__mClass;

static ::String Header_obj_sStaticFields[] = {
	HX_HCSTRING("PACKET_ID","\x72","\x37","\x96","\x42"),
	HX_HCSTRING("PACKET_COMMENT","\x48","\x73","\x92","\xc8"),
	HX_HCSTRING("PACKET_SETUP","\x26","\x87","\x2b","\x68"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Header_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Header","\x5d","\x28","\x45","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Header_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Header_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Header_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Header_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Header_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Header_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Header_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Header_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Header_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Header","boot",0xaac499e3,"kha.audio2.ogg.vorbis.data.Header.boot","kha/audio2/ogg/vorbis/data/Header.hx",18,0x4e0c5e60)
HXLINE(  18)		PACKET_ID = (int)1;
            	}
{
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Header","boot",0xaac499e3,"kha.audio2.ogg.vorbis.data.Header.boot","kha/audio2/ogg/vorbis/data/Header.hx",19,0x4e0c5e60)
HXLINE(  19)		PACKET_COMMENT = (int)3;
            	}
{
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Header","boot",0xaac499e3,"kha.audio2.ogg.vorbis.data.Header.boot","kha/audio2/ogg/vorbis/data/Header.hx",20,0x4e0c5e60)
HXLINE(  20)		PACKET_SETUP = (int)5;
            	}
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
