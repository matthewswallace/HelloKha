// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Residue
#include <kha/audio2/ogg/vorbis/data/Residue.h>
#endif

namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Residue_obj::__construct(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Residue","new",0x389109ed,"kha.audio2.ogg.vorbis.data.Residue.new","kha/audio2/ogg/vorbis/data/Residue.hx",21,0xcd2d4964)
            	HX_STACK_THIS(this)
            	}

Dynamic Residue_obj::__CreateEmpty() { return new Residue_obj; }

hx::ObjectPtr< Residue_obj > Residue_obj::__new()
{
	hx::ObjectPtr< Residue_obj > _hx_result = new Residue_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Residue_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Residue_obj > _hx_result = new Residue_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Residue_obj::decode( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState, ::kha::audio2::ogg::vorbis::data::Header header,::Array< ::Dynamic> residueBuffers,Int ch,Int n,::Array< Bool > doNotDecode,::Array< ::Dynamic> channelBuffers){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Residue","decode",0x3b2cd9c1,"kha.audio2.ogg.vorbis.data.Residue.decode","kha/audio2/ogg/vorbis/data/Residue.hx",84,0xcd2d4964)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(header,"header")
            	HX_STACK_ARG(residueBuffers,"residueBuffers")
            	HX_STACK_ARG(ch,"ch")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(doNotDecode,"doNotDecode")
            	HX_STACK_ARG(channelBuffers,"channelBuffers")
HXLINE(  86)		HX_VARI( ::Array< ::Dynamic>,codebooks) = header->codebooks;
HXLINE(  87)		Int index = this->classbook;
HXDLIN(  87)		 ::kha::audio2::ogg::vorbis::data::Codebook _hx_tmp = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,index)) );
HXDLIN(  87)		HX_VARI( Int,classwords) = _hx_tmp->dimensions;
HXLINE(  88)		HX_VARI( Int,nRead) = (this->end - this->begin);
HXLINE(  89)		HX_VARI( Int,partSize) = this->partSize;
HXLINE(  90)		HX_VARI_NAME( Int,_hx_int,"int") = nRead;
HXDLIN(  90)		Float _hx_tmp1;
HXDLIN(  90)		if ((_hx_int < (int)0)) {
HXLINE(  90)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  90)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  90)		HX_VARI_NAME( Int,int1,"int") = partSize;
HXDLIN(  90)		Float _hx_tmp2;
HXDLIN(  90)		if ((int1 < (int)0)) {
HXLINE(  90)			_hx_tmp2 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE(  90)			_hx_tmp2 = (int1 + ((Float)0.0));
            		}
HXDLIN(  90)		HX_VARI( Int,partRead) = ::Std_obj::_hx_int(((Float)_hx_tmp1 / (Float)_hx_tmp2));
HXLINE(  91)		Int length = ((header->channel * partRead) + (int)1);
HXDLIN(  91)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN(  91)		_hx_array_set_size_exact(this1,length);
HXDLIN(  91)		HX_VARI( ::Array< Int >,classifications) = this1;
HXLINE(  94)		{
HXLINE(  94)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  94)			while((_g1 < ch)){
HXLINE(  94)				HX_VARI( Int,i) = _g1++;
HXLINE(  95)				Bool _hx_tmp3 = !(( (Bool)(_hx_array_unsafe_get(doNotDecode,i)) ));
HXDLIN(  95)				if (_hx_tmp3) {
HXLINE(  96)					HX_VARI( ::Array< Float >,buffer) = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,i)) );
HXLINE(  97)					{
HXLINE(  97)						HX_VARI( Int,_g3) = (int)0;
HXDLIN(  97)						HX_VARI( Int,_g2) = buffer->length;
HXDLIN(  97)						while((_g3 < _g2)){
HXLINE(  97)							HX_VARI( Int,j) = _g3++;
HXLINE(  98)							buffer->__unsafe_set(j,(int)0);
            						}
            					}
            				}
            			}
            		}
HXLINE( 103)		Bool _hx_tmp4;
HXDLIN( 103)		if ((this->type == (int)2)) {
HXLINE( 103)			_hx_tmp4 = (ch != (int)1);
            		}
            		else {
HXLINE( 103)			_hx_tmp4 = false;
            		}
HXDLIN( 103)		if (_hx_tmp4) {
HXLINE( 104)			{
HXLINE( 104)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 104)				while((_g11 < ch)){
HXLINE( 104)					HX_VARI_NAME( Int,j1,"j") = _g11++;
HXLINE( 105)					Bool _hx_tmp5 = !(( (Bool)(_hx_array_unsafe_get(doNotDecode,j1)) ));
HXDLIN( 105)					if (_hx_tmp5) {
HXLINE( 106)						goto _hx_goto_2;
            					}
            					else {
HXLINE( 107)						if ((j1 == (ch - (int)1))) {
HXLINE( 108)							return;
            						}
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 113)			{
HXLINE( 113)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 113)				while((_g < (int)8)){
HXLINE( 113)					HX_VARI( Int,pass) = _g++;
HXLINE( 114)					HX_VARI( Int,pcount) = (int)0;
HXLINE( 115)					if ((ch == (int)2)) {
HXLINE( 117)						while((pcount < partRead)){
HXLINE( 118)							HX_VARI( Int,z) = (this->begin + (pcount * partSize));
HXLINE( 119)							HX_VARI( Int,cInter) = ((int)z & (int)(int)1);
HXLINE( 120)							HX_VARI( Int,pInter) = hx::UShr(z,(int)1);
HXLINE( 121)							if ((pass == (int)0)) {
HXLINE( 122)								Int index1 = this->classbook;
HXDLIN( 122)								HX_VARI(  ::kha::audio2::ogg::vorbis::data::Codebook,c) = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,index1)) );
HXLINE( 123)								Bool _hx_tmp6 = (decodeState->validBits < (int)10);
HXDLIN( 123)								if (_hx_tmp6) {
HXLINE( 123)									decodeState->prepHuffman();
            								}
HXDLIN( 123)								Int index2 = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 123)								HX_VARI_NAME( Int,i1,"i") = ( (Int)(_hx_array_unsafe_get(c->fastHuffman,index2)) );
HXDLIN( 123)								HX_VAR( Int,val);
HXDLIN( 123)								if ((i1 >= (int)0)) {
HXLINE( 123)									HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(c->codewordLengths,i1)) );
HXDLIN( 123)									Int _hx_tmp7 = hx::UShr(decodeState->acc,l);
HXDLIN( 123)									decodeState->acc = _hx_tmp7;
HXDLIN( 123)									hx::SubEq(decodeState->validBits,l);
HXDLIN( 123)									Bool _hx_tmp8 = (decodeState->validBits < (int)0);
HXDLIN( 123)									if (_hx_tmp8) {
HXLINE( 123)										decodeState->validBits = (int)0;
HXDLIN( 123)										val = (int)-1;
            									}
            									else {
HXLINE( 123)										val = i1;
            									}
            								}
            								else {
HXLINE( 123)									val = decodeState->decodeScalarRaw(c);
            								}
HXDLIN( 123)								Bool _hx_tmp9 = c->sparse;
HXDLIN( 123)								if (_hx_tmp9) {
HXLINE( 123)									val = ( (Int)(_hx_array_unsafe_get(c->sortedValues,val)) );
            								}
HXDLIN( 123)								HX_VARI( Int,q) = val;
HXLINE( 124)								if ((q == (int)-1)) {
HXLINE( 125)									return;
            								}
HXLINE( 127)								HX_VARI_NAME( Int,i2,"i") = classwords;
HXLINE( 128)								while(true){
HXLINE( 128)									Int _hx_tmp10 = --i2;
HXDLIN( 128)									if (!((_hx_tmp10 >= (int)0))) {
HXLINE( 128)										goto _hx_goto_5;
            									}
HXLINE( 129)									{
HXLINE( 129)										Int val1 = hx::Mod(q,this->classifications);
HXDLIN( 129)										classifications->__unsafe_set((i2 + pcount),val1);
            									}
HXLINE( 130)									Float _hx_tmp11 = ((Float)q / (Float)this->classifications);
HXDLIN( 130)									q = ::Std_obj::_hx_int(_hx_tmp11);
            								}
            								_hx_goto_5:;
            							}
HXLINE( 134)							{
HXLINE( 134)								HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 134)								while((_g21 < classwords)){
HXLINE( 134)									++_g21;
HXLINE( 135)									if ((pcount >= partRead)) {
HXLINE( 136)										goto _hx_goto_6;
            									}
HXLINE( 138)									HX_VARI_NAME( Int,z1,"z") = (this->begin + (pcount * partSize));
HXLINE( 139)									HX_VARI_NAME( Int,c1,"c") = ( (Int)(_hx_array_unsafe_get(classifications,pcount)) );
HXLINE( 140)									::Array< Int > this2 = ( (::Array< Int >)(_hx_array_unsafe_get(this->residueBooks,c1)) );
HXDLIN( 140)									HX_VARI( Int,b) = ( (Int)(_hx_array_unsafe_get(this2,pass)) );
HXLINE( 141)									if ((b >= (int)0)) {
HXLINE( 142)										HX_VARI(  ::kha::audio2::ogg::vorbis::data::Codebook,book) = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b)) );
HXLINE( 144)										HX_VARI(  ::Dynamic,result) = book->decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
HXLINE( 145)										Bool _hx_tmp12 = hx::IsNull( result );
HXDLIN( 145)										if (_hx_tmp12) {
HXLINE( 146)											return;
            										}
            										else {
HXLINE( 148)											cInter = ( (Int)(result->__Field(HX_("cInter",b9,e7,a2,e6),hx::paccDynamic)) );
HXLINE( 149)											pInter = ( (Int)(result->__Field(HX_("pInter",8c,98,46,19),hx::paccDynamic)) );
            										}
            									}
            									else {
HXLINE( 153)										z1 = (z1 + partSize);
HXLINE( 154)										cInter = ((int)z1 & (int)(int)1);
HXLINE( 155)										pInter = hx::UShr(z1,(int)1);
            									}
HXLINE( 157)									++pcount;
            								}
            								_hx_goto_6:;
            							}
            						}
            					}
            					else {
HXLINE( 161)						if ((ch == (int)1)) {
HXLINE( 162)							while((pcount < partRead)){
HXLINE( 163)								HX_VARI_NAME( Int,z2,"z") = (this->begin + (pcount * partSize));
HXLINE( 164)								HX_VARI_NAME( Int,cInter1,"cInter") = (int)0;
HXLINE( 165)								HX_VARI_NAME( Int,pInter1,"pInter") = z2;
HXLINE( 166)								if ((pass == (int)0)) {
HXLINE( 167)									Int index3 = this->classbook;
HXDLIN( 167)									HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Codebook,c2,"c") = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,index3)) );
HXLINE( 168)									Bool _hx_tmp13 = (decodeState->validBits < (int)10);
HXDLIN( 168)									if (_hx_tmp13) {
HXLINE( 168)										decodeState->prepHuffman();
            									}
HXDLIN( 168)									Int index4 = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 168)									HX_VARI_NAME( Int,i3,"i") = ( (Int)(_hx_array_unsafe_get(c2->fastHuffman,index4)) );
HXDLIN( 168)									HX_VAR_NAME( Int,val2,"val");
HXDLIN( 168)									if ((i3 >= (int)0)) {
HXLINE( 168)										HX_VARI_NAME( Int,l1,"l") = ( (Int)(_hx_array_unsafe_get(c2->codewordLengths,i3)) );
HXDLIN( 168)										Int _hx_tmp14 = hx::UShr(decodeState->acc,l1);
HXDLIN( 168)										decodeState->acc = _hx_tmp14;
HXDLIN( 168)										hx::SubEq(decodeState->validBits,l1);
HXDLIN( 168)										Bool _hx_tmp15 = (decodeState->validBits < (int)0);
HXDLIN( 168)										if (_hx_tmp15) {
HXLINE( 168)											decodeState->validBits = (int)0;
HXDLIN( 168)											val2 = (int)-1;
            										}
            										else {
HXLINE( 168)											val2 = i3;
            										}
            									}
            									else {
HXLINE( 168)										val2 = decodeState->decodeScalarRaw(c2);
            									}
HXDLIN( 168)									Bool _hx_tmp16 = c2->sparse;
HXDLIN( 168)									if (_hx_tmp16) {
HXLINE( 168)										val2 = ( (Int)(_hx_array_unsafe_get(c2->sortedValues,val2)) );
            									}
HXDLIN( 168)									HX_VARI_NAME( Int,q1,"q") = val2;
HXLINE( 169)									if ((q1 == (int)-1)) {
HXLINE( 169)										return;
            									}
HXLINE( 171)									HX_VARI_NAME( Int,i4,"i") = classwords;
HXLINE( 172)									while(true){
HXLINE( 172)										Int _hx_tmp17 = --i4;
HXDLIN( 172)										if (!((_hx_tmp17 >= (int)0))) {
HXLINE( 172)											goto _hx_goto_8;
            										}
HXLINE( 173)										{
HXLINE( 173)											Int val3 = hx::Mod(q1,this->classifications);
HXDLIN( 173)											classifications->__unsafe_set((i4 + pcount),val3);
            										}
HXLINE( 174)										Float _hx_tmp18 = ((Float)q1 / (Float)this->classifications);
HXDLIN( 174)										q1 = ::Std_obj::_hx_int(_hx_tmp18);
            									}
            									_hx_goto_8:;
            								}
HXLINE( 178)								{
HXLINE( 178)									HX_VARI_NAME( Int,_g22,"_g2") = (int)0;
HXDLIN( 178)									while((_g22 < classwords)){
HXLINE( 178)										++_g22;
HXLINE( 179)										if ((pcount >= partRead)) {
HXLINE( 180)											goto _hx_goto_9;
            										}
HXLINE( 182)										HX_VARI_NAME( Int,z3,"z") = (this->begin + (pcount * partSize));
HXLINE( 183)										Int index5 = ( (Int)(_hx_array_unsafe_get(classifications,pcount)) );
HXDLIN( 183)										::Array< Int > this3 = ( (::Array< Int >)(_hx_array_unsafe_get(this->residueBooks,index5)) );
HXDLIN( 183)										HX_VARI_NAME( Int,b1,"b") = ( (Int)(_hx_array_unsafe_get(this3,pass)) );
HXLINE( 184)										if ((b1 >= (int)0)) {
HXLINE( 185)											HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Codebook,book1,"book") = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b1)) );
HXLINE( 187)											HX_VARI_NAME(  ::Dynamic,result1,"result") = book1->decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
HXLINE( 188)											Bool _hx_tmp19 = hx::IsNull( result1 );
HXDLIN( 188)											if (_hx_tmp19) {
HXLINE( 189)												return;
            											}
            											else {
HXLINE( 191)												cInter1 = ( (Int)(result1->__Field(HX_("cInter",b9,e7,a2,e6),hx::paccDynamic)) );
HXLINE( 192)												pInter1 = ( (Int)(result1->__Field(HX_("pInter",8c,98,46,19),hx::paccDynamic)) );
            											}
            										}
            										else {
HXLINE( 196)											z3 = (z3 + partSize);
HXLINE( 197)											cInter1 = (int)0;
HXLINE( 198)											pInter1 = z3;
            										}
HXLINE( 200)										++pcount;
            									}
            									_hx_goto_9:;
            								}
            							}
            						}
            						else {
HXLINE( 204)							while((pcount < partRead)){
HXLINE( 205)								HX_VARI_NAME( Int,z4,"z") = (this->begin + (pcount * partSize));
HXLINE( 206)								HX_VARI_NAME( Int,int2,"int") = z4;
HXDLIN( 206)								Float _hx_tmp20;
HXDLIN( 206)								if ((int2 < (int)0)) {
HXLINE( 206)									_hx_tmp20 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE( 206)									_hx_tmp20 = (int2 + ((Float)0.0));
            								}
HXDLIN( 206)								Float _hx_tmp21;
HXDLIN( 206)								if ((ch < (int)0)) {
HXLINE( 206)									_hx_tmp21 = (((Float)4294967296.0) + ch);
            								}
            								else {
HXLINE( 206)									_hx_tmp21 = (ch + ((Float)0.0));
            								}
HXDLIN( 206)								HX_VARI_NAME( Int,cInter2,"cInter") = ::Std_obj::_hx_int(hx::Mod(_hx_tmp20,_hx_tmp21));
HXLINE( 207)								HX_VARI_NAME( Int,int3,"int") = z4;
HXDLIN( 207)								Float _hx_tmp22;
HXDLIN( 207)								if ((int3 < (int)0)) {
HXLINE( 207)									_hx_tmp22 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE( 207)									_hx_tmp22 = (int3 + ((Float)0.0));
            								}
HXDLIN( 207)								Float _hx_tmp23;
HXDLIN( 207)								if ((ch < (int)0)) {
HXLINE( 207)									_hx_tmp23 = (((Float)4294967296.0) + ch);
            								}
            								else {
HXLINE( 207)									_hx_tmp23 = (ch + ((Float)0.0));
            								}
HXDLIN( 207)								HX_VARI_NAME( Int,pInter2,"pInter") = ::Std_obj::_hx_int(((Float)_hx_tmp22 / (Float)_hx_tmp23));
HXLINE( 209)								if ((pass == (int)0)) {
HXLINE( 210)									Int index6 = this->classbook;
HXDLIN( 210)									HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Codebook,c3,"c") = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,index6)) );
HXLINE( 211)									Bool _hx_tmp24 = (decodeState->validBits < (int)10);
HXDLIN( 211)									if (_hx_tmp24) {
HXLINE( 211)										decodeState->prepHuffman();
            									}
HXDLIN( 211)									Int index7 = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 211)									HX_VARI_NAME( Int,i5,"i") = ( (Int)(_hx_array_unsafe_get(c3->fastHuffman,index7)) );
HXDLIN( 211)									HX_VAR_NAME( Int,val4,"val");
HXDLIN( 211)									if ((i5 >= (int)0)) {
HXLINE( 211)										HX_VARI_NAME( Int,l2,"l") = ( (Int)(_hx_array_unsafe_get(c3->codewordLengths,i5)) );
HXDLIN( 211)										Int _hx_tmp25 = hx::UShr(decodeState->acc,l2);
HXDLIN( 211)										decodeState->acc = _hx_tmp25;
HXDLIN( 211)										hx::SubEq(decodeState->validBits,l2);
HXDLIN( 211)										Bool _hx_tmp26 = (decodeState->validBits < (int)0);
HXDLIN( 211)										if (_hx_tmp26) {
HXLINE( 211)											decodeState->validBits = (int)0;
HXDLIN( 211)											val4 = (int)-1;
            										}
            										else {
HXLINE( 211)											val4 = i5;
            										}
            									}
            									else {
HXLINE( 211)										val4 = decodeState->decodeScalarRaw(c3);
            									}
HXDLIN( 211)									Bool _hx_tmp27 = c3->sparse;
HXDLIN( 211)									if (_hx_tmp27) {
HXLINE( 211)										val4 = ( (Int)(_hx_array_unsafe_get(c3->sortedValues,val4)) );
            									}
HXDLIN( 211)									HX_VARI_NAME( Int,q2,"q") = val4;
HXLINE( 212)									if ((q2 == (int)-1)) {
HXLINE( 213)										return;
            									}
HXLINE( 216)									HX_VARI_NAME( Int,i6,"i") = classwords;
HXLINE( 217)									while(true){
HXLINE( 217)										Int _hx_tmp28 = --i6;
HXDLIN( 217)										if (!((_hx_tmp28 >= (int)0))) {
HXLINE( 217)											goto _hx_goto_11;
            										}
HXLINE( 218)										{
HXLINE( 218)											Int val5 = hx::Mod(q2,this->classifications);
HXDLIN( 218)											classifications->__unsafe_set((i6 + pcount),val5);
            										}
HXLINE( 219)										Float _hx_tmp29 = ((Float)q2 / (Float)this->classifications);
HXDLIN( 219)										q2 = ::Std_obj::_hx_int(_hx_tmp29);
            									}
            									_hx_goto_11:;
            								}
HXLINE( 223)								{
HXLINE( 223)									HX_VARI_NAME( Int,_g23,"_g2") = (int)0;
HXDLIN( 223)									while((_g23 < classwords)){
HXLINE( 223)										++_g23;
HXLINE( 224)										if ((pcount >= partRead)) {
HXLINE( 225)											goto _hx_goto_12;
            										}
HXLINE( 227)										HX_VARI_NAME( Int,z5,"z") = (this->begin + (pcount * partSize));
HXLINE( 228)										Int index8 = ( (Int)(_hx_array_unsafe_get(classifications,pcount)) );
HXDLIN( 228)										::Array< Int > this4 = ( (::Array< Int >)(_hx_array_unsafe_get(this->residueBooks,index8)) );
HXDLIN( 228)										HX_VARI_NAME( Int,b2,"b") = ( (Int)(_hx_array_unsafe_get(this4,pass)) );
HXLINE( 229)										if ((b2 >= (int)0)) {
HXLINE( 230)											HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Codebook,book2,"book") = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b2)) );
HXLINE( 232)											HX_VARI_NAME(  ::Dynamic,result2,"result") = book2->decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
HXLINE( 233)											Bool _hx_tmp30 = hx::IsNull( result2 );
HXDLIN( 233)											if (_hx_tmp30) {
HXLINE( 234)												return;
            											}
            											else {
HXLINE( 236)												cInter2 = ( (Int)(result2->__Field(HX_("cInter",b9,e7,a2,e6),hx::paccDynamic)) );
HXLINE( 237)												pInter2 = ( (Int)(result2->__Field(HX_("pInter",8c,98,46,19),hx::paccDynamic)) );
            											}
            										}
            										else {
HXLINE( 241)											z5 = (z5 + partSize);
HXLINE( 242)											HX_VARI_NAME( Int,int4,"int") = z5;
HXDLIN( 242)											Float _hx_tmp31;
HXDLIN( 242)											if ((int4 < (int)0)) {
HXLINE( 242)												_hx_tmp31 = (((Float)4294967296.0) + int4);
            											}
            											else {
HXLINE( 242)												_hx_tmp31 = (int4 + ((Float)0.0));
            											}
HXDLIN( 242)											Float _hx_tmp32;
HXDLIN( 242)											if ((ch < (int)0)) {
HXLINE( 242)												_hx_tmp32 = (((Float)4294967296.0) + ch);
            											}
            											else {
HXLINE( 242)												_hx_tmp32 = (ch + ((Float)0.0));
            											}
HXDLIN( 242)											cInter2 = ::Std_obj::_hx_int(hx::Mod(_hx_tmp31,_hx_tmp32));
HXLINE( 243)											HX_VARI_NAME( Int,int5,"int") = z5;
HXDLIN( 243)											Float _hx_tmp33;
HXDLIN( 243)											if ((int5 < (int)0)) {
HXLINE( 243)												_hx_tmp33 = (((Float)4294967296.0) + int5);
            											}
            											else {
HXLINE( 243)												_hx_tmp33 = (int5 + ((Float)0.0));
            											}
HXDLIN( 243)											Float _hx_tmp34;
HXDLIN( 243)											if ((ch < (int)0)) {
HXLINE( 243)												_hx_tmp34 = (((Float)4294967296.0) + ch);
            											}
            											else {
HXLINE( 243)												_hx_tmp34 = (ch + ((Float)0.0));
            											}
HXDLIN( 243)											pInter2 = ::Std_obj::_hx_int(((Float)_hx_tmp33 / (Float)_hx_tmp34));
            										}
HXLINE( 245)										++pcount;
            									}
            									_hx_goto_12:;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 250)			return;
            		}
HXLINE( 254)		{
HXLINE( 254)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 254)			while((_g4 < (int)8)){
HXLINE( 254)				HX_VARI_NAME( Int,pass1,"pass") = _g4++;
HXLINE( 255)				HX_VARI_NAME( Int,pcount1,"pcount") = (int)0;
HXLINE( 257)				while((pcount1 < partRead)){
HXLINE( 258)					if ((pass1 == (int)0)) {
HXLINE( 259)						HX_VARI_NAME( Int,_g24,"_g2") = (int)0;
HXDLIN( 259)						while((_g24 < ch)){
HXLINE( 259)							HX_VARI_NAME( Int,j2,"j") = _g24++;
HXLINE( 260)							Bool _hx_tmp35 = !(( (Bool)(_hx_array_unsafe_get(doNotDecode,j2)) ));
HXDLIN( 260)							if (_hx_tmp35) {
HXLINE( 261)								Int index9 = this->classbook;
HXDLIN( 261)								HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Codebook,c4,"c") = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,index9)) );
HXLINE( 262)								Bool _hx_tmp36 = (decodeState->validBits < (int)10);
HXDLIN( 262)								if (_hx_tmp36) {
HXLINE( 262)									decodeState->prepHuffman();
            								}
HXDLIN( 262)								Int index10 = ((int)decodeState->acc & (int)(int)1023);
HXDLIN( 262)								HX_VARI_NAME( Int,i7,"i") = ( (Int)(_hx_array_unsafe_get(c4->fastHuffman,index10)) );
HXDLIN( 262)								HX_VAR_NAME( Int,val6,"val");
HXDLIN( 262)								if ((i7 >= (int)0)) {
HXLINE( 262)									HX_VARI_NAME( Int,l3,"l") = ( (Int)(_hx_array_unsafe_get(c4->codewordLengths,i7)) );
HXDLIN( 262)									Int _hx_tmp37 = hx::UShr(decodeState->acc,l3);
HXDLIN( 262)									decodeState->acc = _hx_tmp37;
HXDLIN( 262)									hx::SubEq(decodeState->validBits,l3);
HXDLIN( 262)									Bool _hx_tmp38 = (decodeState->validBits < (int)0);
HXDLIN( 262)									if (_hx_tmp38) {
HXLINE( 262)										decodeState->validBits = (int)0;
HXDLIN( 262)										val6 = (int)-1;
            									}
            									else {
HXLINE( 262)										val6 = i7;
            									}
            								}
            								else {
HXLINE( 262)									val6 = decodeState->decodeScalarRaw(c4);
            								}
HXDLIN( 262)								Bool _hx_tmp39 = c4->sparse;
HXDLIN( 262)								if (_hx_tmp39) {
HXLINE( 262)									val6 = ( (Int)(_hx_array_unsafe_get(c4->sortedValues,val6)) );
            								}
HXDLIN( 262)								HX_VARI( Int,temp) = val6;
HXLINE( 263)								if ((temp == (int)-1)) {
HXLINE( 264)									return;
            								}
HXLINE( 266)								HX_VARI_NAME( Int,i8,"i") = classwords;
HXLINE( 267)								while(true){
HXLINE( 267)									Int _hx_tmp40 = --i8;
HXDLIN( 267)									if (!((_hx_tmp40 >= (int)0))) {
HXLINE( 267)										goto _hx_goto_16;
            									}
HXLINE( 268)									{
HXLINE( 268)										Int val7 = hx::Mod(temp,this->classifications);
HXDLIN( 268)										classifications->__unsafe_set((((j2 * partRead) + i8) + pcount1),val7);
            									}
HXLINE( 269)									Float _hx_tmp41 = ((Float)temp / (Float)this->classifications);
HXDLIN( 269)									temp = ::Std_obj::_hx_int(_hx_tmp41);
            								}
            								_hx_goto_16:;
            							}
            						}
            					}
HXLINE( 274)					{
HXLINE( 274)						HX_VARI_NAME( Int,_g25,"_g2") = (int)0;
HXDLIN( 274)						while((_g25 < classwords)){
HXLINE( 274)							++_g25;
HXLINE( 275)							if ((pcount1 >= partRead)) {
HXLINE( 276)								goto _hx_goto_17;
            							}
HXLINE( 278)							{
HXLINE( 278)								HX_VARI_NAME( Int,_g41,"_g4") = (int)0;
HXDLIN( 278)								while((_g41 < ch)){
HXLINE( 278)									HX_VARI_NAME( Int,j3,"j") = _g41++;
HXLINE( 279)									Bool _hx_tmp42 = !(( (Bool)(_hx_array_unsafe_get(doNotDecode,j3)) ));
HXDLIN( 279)									if (_hx_tmp42) {
HXLINE( 280)										HX_VARI_NAME( Int,c5,"c") = ( (Int)(_hx_array_unsafe_get(classifications,((j3 * partRead) + pcount1))) );
HXLINE( 281)										::Array< Int > this5 = ( (::Array< Int >)(_hx_array_unsafe_get(this->residueBooks,c5)) );
HXDLIN( 281)										HX_VARI_NAME( Int,b3,"b") = ( (Int)(_hx_array_unsafe_get(this5,pass1)) );
HXLINE( 282)										if ((b3 >= (int)0)) {
HXLINE( 283)											HX_VARI( ::Array< Float >,target) = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,j3)) );
HXLINE( 284)											HX_VARI( Int,offset) = (this->begin + (pcount1 * partSize));
HXLINE( 286)											HX_VARI_NAME(  ::kha::audio2::ogg::vorbis::data::Codebook,book3,"book") = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b3)) );
HXLINE( 287)											Bool _hx_tmp43 = !(book3->residueDecode(decodeState,target,offset,partSize,this->type));
HXDLIN( 287)											if (_hx_tmp43) {
HXLINE( 288)												return;
            											}
            										}
            									}
            								}
            							}
HXLINE( 293)							++pcount1;
            						}
            						_hx_goto_17:;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Residue_obj,decode,(void))

 ::kha::audio2::ogg::vorbis::data::Residue Residue_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< ::Dynamic> codebooks){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.data.Residue","read",0x48fc6d29,"kha.audio2.ogg.vorbis.data.Residue.read","kha/audio2/ogg/vorbis/data/Residue.hx",25,0xcd2d4964)
            	HX_STACK_ARG(decodeState,"decodeState")
            	HX_STACK_ARG(codebooks,"codebooks")
HXLINE(  26)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Residue,r) =  ::kha::audio2::ogg::vorbis::data::Residue_obj::__new();
HXLINE(  27)		Int _hx_tmp;
HXDLIN(  27)		Bool _hx_tmp1 = (decodeState->validBits < (int)0);
HXDLIN(  27)		if (_hx_tmp1) {
HXLINE(  27)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  27)			Bool _hx_tmp2 = (decodeState->validBits < (int)16);
HXDLIN(  27)			if (_hx_tmp2) {
HXLINE(  27)				Bool _hx_tmp3 = (decodeState->validBits == (int)0);
HXDLIN(  27)				if (_hx_tmp3) {
HXLINE(  27)					decodeState->acc = (int)0;
            				}
HXDLIN(  27)				while(true){
HXLINE(  27)					Bool _hx_tmp4;
HXDLIN(  27)					Bool _hx_tmp5 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  27)					if (_hx_tmp5) {
HXLINE(  27)						Bool _hx_tmp6 = !(decodeState->lastSeg);
HXDLIN(  27)						if (_hx_tmp6) {
HXLINE(  27)							Int _hx_tmp7 = decodeState->next();
HXDLIN(  27)							_hx_tmp4 = (_hx_tmp7 == (int)0);
            						}
            						else {
HXLINE(  27)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE(  27)						_hx_tmp4 = false;
            					}
HXDLIN(  27)					if (_hx_tmp4) {
HXLINE(  27)						decodeState->validBits = (int)-1;
HXDLIN(  27)						goto _hx_goto_19;
            					}
            					else {
HXLINE(  27)						decodeState->bytesInSeg--;
HXDLIN(  27)						Int a = decodeState->acc;
HXDLIN(  27)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  27)						Int _hx_tmp8 = decodeState->input->readByte();
HXDLIN(  27)						Int _hx_tmp9 = (a + ((int)_hx_tmp8 << (int)decodeState->validBits));
HXDLIN(  27)						decodeState->acc = _hx_tmp9;
HXDLIN(  27)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  27)					if (!((decodeState->validBits < (int)16))) {
HXLINE(  27)						goto _hx_goto_19;
            					}
            				}
            				_hx_goto_19:;
HXDLIN(  27)				Bool _hx_tmp10 = (decodeState->validBits < (int)0);
HXDLIN(  27)				if (_hx_tmp10) {
HXLINE(  27)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  27)					HX_VARI( Int,z) = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  27)					Int _hx_tmp11 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  27)					decodeState->acc = _hx_tmp11;
HXDLIN(  27)					hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  27)					_hx_tmp = z;
            				}
            			}
            			else {
HXLINE(  27)				HX_VARI_NAME( Int,z1,"z") = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  27)				Int _hx_tmp12 = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  27)				decodeState->acc = _hx_tmp12;
HXDLIN(  27)				hx::SubEq(decodeState->validBits,(int)16);
HXDLIN(  27)				_hx_tmp = z1;
            			}
            		}
HXDLIN(  27)		r->type = _hx_tmp;
HXLINE(  28)		if ((r->type > (int)2)) {
HXLINE(  29)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Residue.hx",73,8f,87,2d),29,HX_("kha.audio2.ogg.vorbis.data.Residue",7b,8f,98,ce),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  32)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN(  32)		_hx_array_set_size_exact(this1,(int)64);
HXDLIN(  32)		HX_VARI( ::Array< Int >,residueCascade) = this1;
HXLINE(  33)		Int _hx_tmp13;
HXDLIN(  33)		Bool _hx_tmp14 = (decodeState->validBits < (int)0);
HXDLIN(  33)		if (_hx_tmp14) {
HXLINE(  33)			_hx_tmp13 = (int)0;
            		}
            		else {
HXLINE(  33)			Bool _hx_tmp15 = (decodeState->validBits < (int)24);
HXDLIN(  33)			if (_hx_tmp15) {
HXLINE(  33)				Bool _hx_tmp16 = (decodeState->validBits == (int)0);
HXDLIN(  33)				if (_hx_tmp16) {
HXLINE(  33)					decodeState->acc = (int)0;
            				}
HXDLIN(  33)				while(true){
HXLINE(  33)					Bool _hx_tmp17;
HXDLIN(  33)					Bool _hx_tmp18 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  33)					if (_hx_tmp18) {
HXLINE(  33)						Bool _hx_tmp19 = !(decodeState->lastSeg);
HXDLIN(  33)						if (_hx_tmp19) {
HXLINE(  33)							Int _hx_tmp20 = decodeState->next();
HXDLIN(  33)							_hx_tmp17 = (_hx_tmp20 == (int)0);
            						}
            						else {
HXLINE(  33)							_hx_tmp17 = true;
            						}
            					}
            					else {
HXLINE(  33)						_hx_tmp17 = false;
            					}
HXDLIN(  33)					if (_hx_tmp17) {
HXLINE(  33)						decodeState->validBits = (int)-1;
HXDLIN(  33)						goto _hx_goto_20;
            					}
            					else {
HXLINE(  33)						decodeState->bytesInSeg--;
HXDLIN(  33)						Int a1 = decodeState->acc;
HXDLIN(  33)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  33)						Int _hx_tmp21 = decodeState->input->readByte();
HXDLIN(  33)						Int _hx_tmp22 = (a1 + ((int)_hx_tmp21 << (int)decodeState->validBits));
HXDLIN(  33)						decodeState->acc = _hx_tmp22;
HXDLIN(  33)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  33)					if (!((decodeState->validBits < (int)24))) {
HXLINE(  33)						goto _hx_goto_20;
            					}
            				}
            				_hx_goto_20:;
HXDLIN(  33)				Bool _hx_tmp23 = (decodeState->validBits < (int)0);
HXDLIN(  33)				if (_hx_tmp23) {
HXLINE(  33)					_hx_tmp13 = (int)0;
            				}
            				else {
HXLINE(  33)					HX_VARI_NAME( Int,z2,"z") = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  33)					Int _hx_tmp24 = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  33)					decodeState->acc = _hx_tmp24;
HXDLIN(  33)					hx::SubEq(decodeState->validBits,(int)24);
HXDLIN(  33)					_hx_tmp13 = z2;
            				}
            			}
            			else {
HXLINE(  33)				HX_VARI_NAME( Int,z3,"z") = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  33)				Int _hx_tmp25 = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  33)				decodeState->acc = _hx_tmp25;
HXDLIN(  33)				hx::SubEq(decodeState->validBits,(int)24);
HXDLIN(  33)				_hx_tmp13 = z3;
            			}
            		}
HXDLIN(  33)		r->begin = _hx_tmp13;
HXLINE(  34)		Int _hx_tmp26;
HXDLIN(  34)		Bool _hx_tmp27 = (decodeState->validBits < (int)0);
HXDLIN(  34)		if (_hx_tmp27) {
HXLINE(  34)			_hx_tmp26 = (int)0;
            		}
            		else {
HXLINE(  34)			Bool _hx_tmp28 = (decodeState->validBits < (int)24);
HXDLIN(  34)			if (_hx_tmp28) {
HXLINE(  34)				Bool _hx_tmp29 = (decodeState->validBits == (int)0);
HXDLIN(  34)				if (_hx_tmp29) {
HXLINE(  34)					decodeState->acc = (int)0;
            				}
HXDLIN(  34)				while(true){
HXLINE(  34)					Bool _hx_tmp30;
HXDLIN(  34)					Bool _hx_tmp31 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  34)					if (_hx_tmp31) {
HXLINE(  34)						Bool _hx_tmp32 = !(decodeState->lastSeg);
HXDLIN(  34)						if (_hx_tmp32) {
HXLINE(  34)							Int _hx_tmp33 = decodeState->next();
HXDLIN(  34)							_hx_tmp30 = (_hx_tmp33 == (int)0);
            						}
            						else {
HXLINE(  34)							_hx_tmp30 = true;
            						}
            					}
            					else {
HXLINE(  34)						_hx_tmp30 = false;
            					}
HXDLIN(  34)					if (_hx_tmp30) {
HXLINE(  34)						decodeState->validBits = (int)-1;
HXDLIN(  34)						goto _hx_goto_21;
            					}
            					else {
HXLINE(  34)						decodeState->bytesInSeg--;
HXDLIN(  34)						Int a2 = decodeState->acc;
HXDLIN(  34)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  34)						Int _hx_tmp34 = decodeState->input->readByte();
HXDLIN(  34)						Int _hx_tmp35 = (a2 + ((int)_hx_tmp34 << (int)decodeState->validBits));
HXDLIN(  34)						decodeState->acc = _hx_tmp35;
HXDLIN(  34)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  34)					if (!((decodeState->validBits < (int)24))) {
HXLINE(  34)						goto _hx_goto_21;
            					}
            				}
            				_hx_goto_21:;
HXDLIN(  34)				Bool _hx_tmp36 = (decodeState->validBits < (int)0);
HXDLIN(  34)				if (_hx_tmp36) {
HXLINE(  34)					_hx_tmp26 = (int)0;
            				}
            				else {
HXLINE(  34)					HX_VARI_NAME( Int,z4,"z") = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  34)					Int _hx_tmp37 = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  34)					decodeState->acc = _hx_tmp37;
HXDLIN(  34)					hx::SubEq(decodeState->validBits,(int)24);
HXDLIN(  34)					_hx_tmp26 = z4;
            				}
            			}
            			else {
HXLINE(  34)				HX_VARI_NAME( Int,z5,"z") = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  34)				Int _hx_tmp38 = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  34)				decodeState->acc = _hx_tmp38;
HXDLIN(  34)				hx::SubEq(decodeState->validBits,(int)24);
HXDLIN(  34)				_hx_tmp26 = z5;
            			}
            		}
HXDLIN(  34)		r->end = _hx_tmp26;
HXLINE(  35)		Int _hx_tmp39;
HXDLIN(  35)		Bool _hx_tmp40 = (decodeState->validBits < (int)0);
HXDLIN(  35)		if (_hx_tmp40) {
HXLINE(  35)			_hx_tmp39 = (int)0;
            		}
            		else {
HXLINE(  35)			Bool _hx_tmp41 = (decodeState->validBits < (int)24);
HXDLIN(  35)			if (_hx_tmp41) {
HXLINE(  35)				Bool _hx_tmp42 = (decodeState->validBits == (int)0);
HXDLIN(  35)				if (_hx_tmp42) {
HXLINE(  35)					decodeState->acc = (int)0;
            				}
HXDLIN(  35)				while(true){
HXLINE(  35)					Bool _hx_tmp43;
HXDLIN(  35)					Bool _hx_tmp44 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  35)					if (_hx_tmp44) {
HXLINE(  35)						Bool _hx_tmp45 = !(decodeState->lastSeg);
HXDLIN(  35)						if (_hx_tmp45) {
HXLINE(  35)							Int _hx_tmp46 = decodeState->next();
HXDLIN(  35)							_hx_tmp43 = (_hx_tmp46 == (int)0);
            						}
            						else {
HXLINE(  35)							_hx_tmp43 = true;
            						}
            					}
            					else {
HXLINE(  35)						_hx_tmp43 = false;
            					}
HXDLIN(  35)					if (_hx_tmp43) {
HXLINE(  35)						decodeState->validBits = (int)-1;
HXDLIN(  35)						goto _hx_goto_22;
            					}
            					else {
HXLINE(  35)						decodeState->bytesInSeg--;
HXDLIN(  35)						Int a3 = decodeState->acc;
HXDLIN(  35)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  35)						Int _hx_tmp47 = decodeState->input->readByte();
HXDLIN(  35)						Int _hx_tmp48 = (a3 + ((int)_hx_tmp47 << (int)decodeState->validBits));
HXDLIN(  35)						decodeState->acc = _hx_tmp48;
HXDLIN(  35)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  35)					if (!((decodeState->validBits < (int)24))) {
HXLINE(  35)						goto _hx_goto_22;
            					}
            				}
            				_hx_goto_22:;
HXDLIN(  35)				Bool _hx_tmp49 = (decodeState->validBits < (int)0);
HXDLIN(  35)				if (_hx_tmp49) {
HXLINE(  35)					_hx_tmp39 = (int)0;
            				}
            				else {
HXLINE(  35)					HX_VARI_NAME( Int,z6,"z") = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  35)					Int _hx_tmp50 = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  35)					decodeState->acc = _hx_tmp50;
HXDLIN(  35)					hx::SubEq(decodeState->validBits,(int)24);
HXDLIN(  35)					_hx_tmp39 = z6;
            				}
            			}
            			else {
HXLINE(  35)				HX_VARI_NAME( Int,z7,"z") = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  35)				Int _hx_tmp51 = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  35)				decodeState->acc = _hx_tmp51;
HXDLIN(  35)				hx::SubEq(decodeState->validBits,(int)24);
HXDLIN(  35)				_hx_tmp39 = z7;
            			}
            		}
HXDLIN(  35)		r->partSize = (_hx_tmp39 + (int)1);
HXLINE(  36)		Int _hx_tmp52;
HXDLIN(  36)		Bool _hx_tmp53 = (decodeState->validBits < (int)0);
HXDLIN(  36)		if (_hx_tmp53) {
HXLINE(  36)			_hx_tmp52 = (int)0;
            		}
            		else {
HXLINE(  36)			Bool _hx_tmp54 = (decodeState->validBits < (int)6);
HXDLIN(  36)			if (_hx_tmp54) {
HXLINE(  36)				Bool _hx_tmp55 = (decodeState->validBits == (int)0);
HXDLIN(  36)				if (_hx_tmp55) {
HXLINE(  36)					decodeState->acc = (int)0;
            				}
HXDLIN(  36)				while(true){
HXLINE(  36)					Bool _hx_tmp56;
HXDLIN(  36)					Bool _hx_tmp57 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  36)					if (_hx_tmp57) {
HXLINE(  36)						Bool _hx_tmp58 = !(decodeState->lastSeg);
HXDLIN(  36)						if (_hx_tmp58) {
HXLINE(  36)							Int _hx_tmp59 = decodeState->next();
HXDLIN(  36)							_hx_tmp56 = (_hx_tmp59 == (int)0);
            						}
            						else {
HXLINE(  36)							_hx_tmp56 = true;
            						}
            					}
            					else {
HXLINE(  36)						_hx_tmp56 = false;
            					}
HXDLIN(  36)					if (_hx_tmp56) {
HXLINE(  36)						decodeState->validBits = (int)-1;
HXDLIN(  36)						goto _hx_goto_23;
            					}
            					else {
HXLINE(  36)						decodeState->bytesInSeg--;
HXDLIN(  36)						Int a4 = decodeState->acc;
HXDLIN(  36)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  36)						Int _hx_tmp60 = decodeState->input->readByte();
HXDLIN(  36)						Int _hx_tmp61 = (a4 + ((int)_hx_tmp60 << (int)decodeState->validBits));
HXDLIN(  36)						decodeState->acc = _hx_tmp61;
HXDLIN(  36)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  36)					if (!((decodeState->validBits < (int)6))) {
HXLINE(  36)						goto _hx_goto_23;
            					}
            				}
            				_hx_goto_23:;
HXDLIN(  36)				Bool _hx_tmp62 = (decodeState->validBits < (int)0);
HXDLIN(  36)				if (_hx_tmp62) {
HXLINE(  36)					_hx_tmp52 = (int)0;
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME( Int,z8,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  36)					Int _hx_tmp63 = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  36)					decodeState->acc = _hx_tmp63;
HXDLIN(  36)					hx::SubEq(decodeState->validBits,(int)6);
HXDLIN(  36)					_hx_tmp52 = z8;
            				}
            			}
            			else {
HXLINE(  36)				HX_VARI_NAME( Int,z9,"z") = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  36)				Int _hx_tmp64 = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  36)				decodeState->acc = _hx_tmp64;
HXDLIN(  36)				hx::SubEq(decodeState->validBits,(int)6);
HXDLIN(  36)				_hx_tmp52 = z9;
            			}
            		}
HXDLIN(  36)		HX_VARI( Int,classifications) = (r->classifications = (_hx_tmp52 + (int)1));
HXLINE(  37)		Int _hx_tmp65;
HXDLIN(  37)		Bool _hx_tmp66 = (decodeState->validBits < (int)0);
HXDLIN(  37)		if (_hx_tmp66) {
HXLINE(  37)			_hx_tmp65 = (int)0;
            		}
            		else {
HXLINE(  37)			Bool _hx_tmp67 = (decodeState->validBits < (int)8);
HXDLIN(  37)			if (_hx_tmp67) {
HXLINE(  37)				Bool _hx_tmp68 = (decodeState->validBits == (int)0);
HXDLIN(  37)				if (_hx_tmp68) {
HXLINE(  37)					decodeState->acc = (int)0;
            				}
HXDLIN(  37)				while(true){
HXLINE(  37)					Bool _hx_tmp69;
HXDLIN(  37)					Bool _hx_tmp70 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  37)					if (_hx_tmp70) {
HXLINE(  37)						Bool _hx_tmp71 = !(decodeState->lastSeg);
HXDLIN(  37)						if (_hx_tmp71) {
HXLINE(  37)							Int _hx_tmp72 = decodeState->next();
HXDLIN(  37)							_hx_tmp69 = (_hx_tmp72 == (int)0);
            						}
            						else {
HXLINE(  37)							_hx_tmp69 = true;
            						}
            					}
            					else {
HXLINE(  37)						_hx_tmp69 = false;
            					}
HXDLIN(  37)					if (_hx_tmp69) {
HXLINE(  37)						decodeState->validBits = (int)-1;
HXDLIN(  37)						goto _hx_goto_24;
            					}
            					else {
HXLINE(  37)						decodeState->bytesInSeg--;
HXDLIN(  37)						Int a5 = decodeState->acc;
HXDLIN(  37)						hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  37)						Int _hx_tmp73 = decodeState->input->readByte();
HXDLIN(  37)						Int _hx_tmp74 = (a5 + ((int)_hx_tmp73 << (int)decodeState->validBits));
HXDLIN(  37)						decodeState->acc = _hx_tmp74;
HXDLIN(  37)						hx::AddEq(decodeState->validBits,(int)8);
            					}
HXDLIN(  37)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  37)						goto _hx_goto_24;
            					}
            				}
            				_hx_goto_24:;
HXDLIN(  37)				Bool _hx_tmp75 = (decodeState->validBits < (int)0);
HXDLIN(  37)				if (_hx_tmp75) {
HXLINE(  37)					_hx_tmp65 = (int)0;
            				}
            				else {
HXLINE(  37)					HX_VARI_NAME( Int,z10,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  37)					Int _hx_tmp76 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  37)					decodeState->acc = _hx_tmp76;
HXDLIN(  37)					hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  37)					_hx_tmp65 = z10;
            				}
            			}
            			else {
HXLINE(  37)				HX_VARI_NAME( Int,z11,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  37)				Int _hx_tmp77 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  37)				decodeState->acc = _hx_tmp77;
HXDLIN(  37)				hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  37)				_hx_tmp65 = z11;
            			}
            		}
HXDLIN(  37)		r->classbook = _hx_tmp65;
HXLINE(  39)		{
HXLINE(  39)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  39)			HX_VARI( Int,_g) = r->classifications;
HXDLIN(  39)			while((_g1 < _g)){
HXLINE(  39)				HX_VARI( Int,j) = _g1++;
HXLINE(  40)				HX_VARI( Int,highBits) = (int)0;
HXLINE(  41)				HX_VAR( Int,lowBits);
HXDLIN(  41)				Bool _hx_tmp78 = (decodeState->validBits < (int)0);
HXDLIN(  41)				if (_hx_tmp78) {
HXLINE(  41)					lowBits = (int)0;
            				}
            				else {
HXLINE(  41)					Bool _hx_tmp79 = (decodeState->validBits < (int)3);
HXDLIN(  41)					if (_hx_tmp79) {
HXLINE(  41)						Bool _hx_tmp80 = (decodeState->validBits == (int)0);
HXDLIN(  41)						if (_hx_tmp80) {
HXLINE(  41)							decodeState->acc = (int)0;
            						}
HXDLIN(  41)						while(true){
HXLINE(  41)							Bool _hx_tmp81;
HXDLIN(  41)							Bool _hx_tmp82 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  41)							if (_hx_tmp82) {
HXLINE(  41)								Bool _hx_tmp83 = !(decodeState->lastSeg);
HXDLIN(  41)								if (_hx_tmp83) {
HXLINE(  41)									Int _hx_tmp84 = decodeState->next();
HXDLIN(  41)									_hx_tmp81 = (_hx_tmp84 == (int)0);
            								}
            								else {
HXLINE(  41)									_hx_tmp81 = true;
            								}
            							}
            							else {
HXLINE(  41)								_hx_tmp81 = false;
            							}
HXDLIN(  41)							if (_hx_tmp81) {
HXLINE(  41)								decodeState->validBits = (int)-1;
HXDLIN(  41)								goto _hx_goto_26;
            							}
            							else {
HXLINE(  41)								decodeState->bytesInSeg--;
HXDLIN(  41)								Int a6 = decodeState->acc;
HXDLIN(  41)								hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  41)								Int _hx_tmp85 = decodeState->input->readByte();
HXDLIN(  41)								Int _hx_tmp86 = (a6 + ((int)_hx_tmp85 << (int)decodeState->validBits));
HXDLIN(  41)								decodeState->acc = _hx_tmp86;
HXDLIN(  41)								hx::AddEq(decodeState->validBits,(int)8);
            							}
HXDLIN(  41)							if (!((decodeState->validBits < (int)3))) {
HXLINE(  41)								goto _hx_goto_26;
            							}
            						}
            						_hx_goto_26:;
HXDLIN(  41)						Bool _hx_tmp87 = (decodeState->validBits < (int)0);
HXDLIN(  41)						if (_hx_tmp87) {
HXLINE(  41)							lowBits = (int)0;
            						}
            						else {
HXLINE(  41)							HX_VARI_NAME( Int,z12,"z") = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  41)							Int _hx_tmp88 = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  41)							decodeState->acc = _hx_tmp88;
HXDLIN(  41)							hx::SubEq(decodeState->validBits,(int)3);
HXDLIN(  41)							lowBits = z12;
            						}
            					}
            					else {
HXLINE(  41)						HX_VARI_NAME( Int,z13,"z") = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  41)						Int _hx_tmp89 = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  41)						decodeState->acc = _hx_tmp89;
HXDLIN(  41)						hx::SubEq(decodeState->validBits,(int)3);
HXDLIN(  41)						lowBits = z13;
            					}
            				}
HXLINE(  42)				Int _hx_tmp90;
HXDLIN(  42)				Bool _hx_tmp91 = (decodeState->validBits < (int)0);
HXDLIN(  42)				if (_hx_tmp91) {
HXLINE(  42)					_hx_tmp90 = (int)0;
            				}
            				else {
HXLINE(  42)					Bool _hx_tmp92 = (decodeState->validBits < (int)1);
HXDLIN(  42)					if (_hx_tmp92) {
HXLINE(  42)						Bool _hx_tmp93 = (decodeState->validBits == (int)0);
HXDLIN(  42)						if (_hx_tmp93) {
HXLINE(  42)							decodeState->acc = (int)0;
            						}
HXDLIN(  42)						while(true){
HXLINE(  42)							Bool _hx_tmp94;
HXDLIN(  42)							Bool _hx_tmp95 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  42)							if (_hx_tmp95) {
HXLINE(  42)								Bool _hx_tmp96 = !(decodeState->lastSeg);
HXDLIN(  42)								if (_hx_tmp96) {
HXLINE(  42)									Int _hx_tmp97 = decodeState->next();
HXDLIN(  42)									_hx_tmp94 = (_hx_tmp97 == (int)0);
            								}
            								else {
HXLINE(  42)									_hx_tmp94 = true;
            								}
            							}
            							else {
HXLINE(  42)								_hx_tmp94 = false;
            							}
HXDLIN(  42)							if (_hx_tmp94) {
HXLINE(  42)								decodeState->validBits = (int)-1;
HXDLIN(  42)								goto _hx_goto_27;
            							}
            							else {
HXLINE(  42)								decodeState->bytesInSeg--;
HXDLIN(  42)								Int a7 = decodeState->acc;
HXDLIN(  42)								hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  42)								Int _hx_tmp98 = decodeState->input->readByte();
HXDLIN(  42)								Int _hx_tmp99 = (a7 + ((int)_hx_tmp98 << (int)decodeState->validBits));
HXDLIN(  42)								decodeState->acc = _hx_tmp99;
HXDLIN(  42)								hx::AddEq(decodeState->validBits,(int)8);
            							}
HXDLIN(  42)							if (!((decodeState->validBits < (int)1))) {
HXLINE(  42)								goto _hx_goto_27;
            							}
            						}
            						_hx_goto_27:;
HXDLIN(  42)						Bool _hx_tmp100 = (decodeState->validBits < (int)0);
HXDLIN(  42)						if (_hx_tmp100) {
HXLINE(  42)							_hx_tmp90 = (int)0;
            						}
            						else {
HXLINE(  42)							HX_VARI_NAME( Int,z14,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  42)							Int _hx_tmp101 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  42)							decodeState->acc = _hx_tmp101;
HXDLIN(  42)							hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  42)							_hx_tmp90 = z14;
            						}
            					}
            					else {
HXLINE(  42)						HX_VARI_NAME( Int,z15,"z") = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  42)						Int _hx_tmp102 = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  42)						decodeState->acc = _hx_tmp102;
HXDLIN(  42)						hx::SubEq(decodeState->validBits,(int)1);
HXDLIN(  42)						_hx_tmp90 = z15;
            					}
            				}
HXDLIN(  42)				if ((_hx_tmp90 != (int)0)) {
HXLINE(  43)					Bool _hx_tmp103 = (decodeState->validBits < (int)0);
HXDLIN(  43)					if (_hx_tmp103) {
HXLINE(  43)						highBits = (int)0;
            					}
            					else {
HXLINE(  43)						Bool _hx_tmp104 = (decodeState->validBits < (int)5);
HXDLIN(  43)						if (_hx_tmp104) {
HXLINE(  43)							Bool _hx_tmp105 = (decodeState->validBits == (int)0);
HXDLIN(  43)							if (_hx_tmp105) {
HXLINE(  43)								decodeState->acc = (int)0;
            							}
HXDLIN(  43)							while(true){
HXLINE(  43)								Bool _hx_tmp106;
HXDLIN(  43)								Bool _hx_tmp107 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  43)								if (_hx_tmp107) {
HXLINE(  43)									Bool _hx_tmp108 = !(decodeState->lastSeg);
HXDLIN(  43)									if (_hx_tmp108) {
HXLINE(  43)										Int _hx_tmp109 = decodeState->next();
HXDLIN(  43)										_hx_tmp106 = (_hx_tmp109 == (int)0);
            									}
            									else {
HXLINE(  43)										_hx_tmp106 = true;
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp106 = false;
            								}
HXDLIN(  43)								if (_hx_tmp106) {
HXLINE(  43)									decodeState->validBits = (int)-1;
HXDLIN(  43)									goto _hx_goto_28;
            								}
            								else {
HXLINE(  43)									decodeState->bytesInSeg--;
HXDLIN(  43)									Int a8 = decodeState->acc;
HXDLIN(  43)									hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  43)									Int _hx_tmp110 = decodeState->input->readByte();
HXDLIN(  43)									Int _hx_tmp111 = (a8 + ((int)_hx_tmp110 << (int)decodeState->validBits));
HXDLIN(  43)									decodeState->acc = _hx_tmp111;
HXDLIN(  43)									hx::AddEq(decodeState->validBits,(int)8);
            								}
HXDLIN(  43)								if (!((decodeState->validBits < (int)5))) {
HXLINE(  43)									goto _hx_goto_28;
            								}
            							}
            							_hx_goto_28:;
HXDLIN(  43)							Bool _hx_tmp112 = (decodeState->validBits < (int)0);
HXDLIN(  43)							if (_hx_tmp112) {
HXLINE(  43)								highBits = (int)0;
            							}
            							else {
HXLINE(  43)								HX_VARI_NAME( Int,z16,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  43)								Int _hx_tmp113 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  43)								decodeState->acc = _hx_tmp113;
HXDLIN(  43)								hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  43)								highBits = z16;
            							}
            						}
            						else {
HXLINE(  43)							HX_VARI_NAME( Int,z17,"z") = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  43)							Int _hx_tmp114 = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  43)							decodeState->acc = _hx_tmp114;
HXDLIN(  43)							hx::SubEq(decodeState->validBits,(int)5);
HXDLIN(  43)							highBits = z17;
            						}
            					}
            				}
HXLINE(  45)				residueCascade->__unsafe_set(j,((highBits * (int)8) + lowBits));
            			}
            		}
HXLINE(  48)		Int length = r->classifications;
HXDLIN(  48)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(  48)		_hx_array_set_size_exact(this2,length);
HXDLIN(  48)		r->residueBooks = this2;
HXLINE(  49)		{
HXLINE(  49)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  49)			HX_VARI_NAME( Int,_g2,"_g") = r->classifications;
HXDLIN(  49)			while((_g11 < _g2)){
HXLINE(  49)				HX_VARI_NAME( Int,j1,"j") = _g11++;
HXLINE(  50)				{
HXLINE(  50)					HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new();
HXDLIN(  50)					_hx_array_set_size_exact(this3,(int)8);
HXDLIN(  50)					r->residueBooks->__unsafe_set(j1,this3);
            				}
HXLINE(  51)				{
HXLINE(  51)					HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN(  51)					while((_g21 < (int)8)){
HXLINE(  51)						HX_VARI( Int,k) = _g21++;
HXLINE(  52)						Int _hx_tmp115 = ( (Int)(_hx_array_unsafe_get(residueCascade,j1)) );
HXDLIN(  52)						if ((((int)_hx_tmp115 & (int)((int)(int)1 << (int)k)) != (int)0)) {
HXLINE(  53)							{
HXLINE(  53)								::Array< Int > this4 = ( (::Array< Int >)(_hx_array_unsafe_get(r->residueBooks,j1)) );
HXDLIN(  53)								Int val;
HXDLIN(  53)								Bool _hx_tmp116 = (decodeState->validBits < (int)0);
HXDLIN(  53)								if (_hx_tmp116) {
HXLINE(  53)									val = (int)0;
            								}
            								else {
HXLINE(  53)									Bool _hx_tmp117 = (decodeState->validBits < (int)8);
HXDLIN(  53)									if (_hx_tmp117) {
HXLINE(  53)										Bool _hx_tmp118 = (decodeState->validBits == (int)0);
HXDLIN(  53)										if (_hx_tmp118) {
HXLINE(  53)											decodeState->acc = (int)0;
            										}
HXDLIN(  53)										while(true){
HXLINE(  53)											Bool _hx_tmp119;
HXDLIN(  53)											Bool _hx_tmp120 = (decodeState->bytesInSeg == (int)0);
HXDLIN(  53)											if (_hx_tmp120) {
HXLINE(  53)												Bool _hx_tmp121 = !(decodeState->lastSeg);
HXDLIN(  53)												if (_hx_tmp121) {
HXLINE(  53)													Int _hx_tmp122 = decodeState->next();
HXDLIN(  53)													_hx_tmp119 = (_hx_tmp122 == (int)0);
            												}
            												else {
HXLINE(  53)													_hx_tmp119 = true;
            												}
            											}
            											else {
HXLINE(  53)												_hx_tmp119 = false;
            											}
HXDLIN(  53)											if (_hx_tmp119) {
HXLINE(  53)												decodeState->validBits = (int)-1;
HXDLIN(  53)												goto _hx_goto_31;
            											}
            											else {
HXLINE(  53)												decodeState->bytesInSeg--;
HXDLIN(  53)												Int a9 = decodeState->acc;
HXDLIN(  53)												hx::AddEq(decodeState->inputPosition,(int)1);
HXDLIN(  53)												Int _hx_tmp123 = decodeState->input->readByte();
HXDLIN(  53)												Int _hx_tmp124 = (a9 + ((int)_hx_tmp123 << (int)decodeState->validBits));
HXDLIN(  53)												decodeState->acc = _hx_tmp124;
HXDLIN(  53)												hx::AddEq(decodeState->validBits,(int)8);
            											}
HXDLIN(  53)											if (!((decodeState->validBits < (int)8))) {
HXLINE(  53)												goto _hx_goto_31;
            											}
            										}
            										_hx_goto_31:;
HXDLIN(  53)										Bool _hx_tmp125 = (decodeState->validBits < (int)0);
HXDLIN(  53)										if (_hx_tmp125) {
HXLINE(  53)											val = (int)0;
            										}
            										else {
HXLINE(  53)											HX_VARI_NAME( Int,z18,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  53)											Int _hx_tmp126 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  53)											decodeState->acc = _hx_tmp126;
HXDLIN(  53)											hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  53)											val = z18;
            										}
            									}
            									else {
HXLINE(  53)										HX_VARI_NAME( Int,z19,"z") = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  53)										Int _hx_tmp127 = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  53)										decodeState->acc = _hx_tmp127;
HXDLIN(  53)										hx::SubEq(decodeState->validBits,(int)8);
HXDLIN(  53)										val = z19;
            									}
            								}
HXDLIN(  53)								this4->__unsafe_set(k,val);
            							}
HXLINE(  54)							::Array< Int > this5 = ( (::Array< Int >)(_hx_array_unsafe_get(r->residueBooks,j1)) );
HXDLIN(  54)							Int _hx_tmp128 = ( (Int)(_hx_array_unsafe_get(this5,k)) );
HXDLIN(  54)							if ((_hx_tmp128 >= codebooks->length)) {
HXLINE(  55)								HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Residue.hx",73,8f,87,2d),55,HX_("kha.audio2.ogg.vorbis.data.Residue",7b,8f,98,ce),HX_("read",56,4b,a7,4b))));
            							}
            						}
            						else {
HXLINE(  58)							::Array< Int > this6 = ( (::Array< Int >)(_hx_array_unsafe_get(r->residueBooks,j1)) );
HXDLIN(  58)							this6->__unsafe_set(k,(int)-1);
            						}
            					}
            				}
            			}
            		}
HXLINE(  65)		Int index = r->classbook;
HXDLIN(  65)		 ::kha::audio2::ogg::vorbis::data::Codebook _hx_tmp129 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,index)) );
HXDLIN(  65)		HX_VARI( Int,el) = _hx_tmp129->entries;
HXLINE(  66)		Int index1 = r->classbook;
HXDLIN(  66)		 ::kha::audio2::ogg::vorbis::data::Codebook _hx_tmp130 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,index1)) );
HXDLIN(  66)		HX_VARI( Int,classwords) = _hx_tmp130->dimensions;
HXLINE(  67)		HX_VARI_NAME( ::Array< ::Dynamic>,this7,"this") = ::Array_obj< ::Dynamic>::__new();
HXDLIN(  67)		_hx_array_set_size_exact(this7,el);
HXDLIN(  67)		r->classdata = this7;
HXLINE(  69)		{
HXLINE(  69)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(  69)			while((_g12 < el)){
HXLINE(  69)				HX_VARI_NAME( Int,j2,"j") = _g12++;
HXLINE(  70)				HX_VARI( Int,temp) = j2;
HXLINE(  71)				HX_VARI_NAME( Int,k1,"k") = classwords;
HXLINE(  72)				HX_VARI_NAME( ::Array< Int >,this8,"this") = ::Array_obj< Int >::__new();
HXDLIN(  72)				_hx_array_set_size_exact(this8,classwords);
HXDLIN(  72)				HX_VARI( ::Array< Int >,cd) = r->classdata->__unsafe_set(j2,this8).StaticCast< ::Array< Int > >();
HXLINE(  73)				while(true){
HXLINE(  73)					Int _hx_tmp131 = --k1;
HXDLIN(  73)					if (!((_hx_tmp131 >= (int)0))) {
HXLINE(  73)						goto _hx_goto_33;
            					}
HXLINE(  74)					cd->__unsafe_set(k1,hx::Mod(temp,classifications));
HXLINE(  75)					temp = ::Std_obj::_hx_int(((Float)temp / (Float)classifications));
            				}
            				_hx_goto_33:;
            			}
            		}
HXLINE(  79)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Residue_obj,read,return )


Residue_obj::Residue_obj()
{
}

void Residue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Residue);
	HX_MARK_MEMBER_NAME(begin,"begin");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(partSize,"partSize");
	HX_MARK_MEMBER_NAME(classifications,"classifications");
	HX_MARK_MEMBER_NAME(classbook,"classbook");
	HX_MARK_MEMBER_NAME(classdata,"classdata");
	HX_MARK_MEMBER_NAME(residueBooks,"residueBooks");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Residue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(begin,"begin");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(partSize,"partSize");
	HX_VISIT_MEMBER_NAME(classifications,"classifications");
	HX_VISIT_MEMBER_NAME(classbook,"classbook");
	HX_VISIT_MEMBER_NAME(classdata,"classdata");
	HX_VISIT_MEMBER_NAME(residueBooks,"residueBooks");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val Residue_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"decode") ) { return hx::Val( decode_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"partSize") ) { return hx::Val( partSize); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"classbook") ) { return hx::Val( classbook); }
		if (HX_FIELD_EQ(inName,"classdata") ) { return hx::Val( classdata); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"residueBooks") ) { return hx::Val( residueBooks); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"classifications") ) { return hx::Val( classifications); }
	}
	return super::__Field(inName,inCallProp);
}

bool Residue_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Residue_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { begin=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"partSize") ) { partSize=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"classbook") ) { classbook=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"classdata") ) { classdata=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"residueBooks") ) { residueBooks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"classifications") ) { classifications=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Residue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("partSize","\x54","\x26","\x0b","\x5e"));
	outFields->push(HX_HCSTRING("classifications","\x8d","\xf6","\x53","\xe7"));
	outFields->push(HX_HCSTRING("classbook","\x61","\x78","\x80","\xe9"));
	outFields->push(HX_HCSTRING("classdata","\x62","\x4a","\xc8","\xea"));
	outFields->push(HX_HCSTRING("residueBooks","\xdf","\xe7","\xab","\x0a"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Residue_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Residue_obj,begin),HX_HCSTRING("begin","\x29","\xea","\x55","\xb0")},
	{hx::fsInt,(int)offsetof(Residue_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsInt,(int)offsetof(Residue_obj,partSize),HX_HCSTRING("partSize","\x54","\x26","\x0b","\x5e")},
	{hx::fsInt,(int)offsetof(Residue_obj,classifications),HX_HCSTRING("classifications","\x8d","\xf6","\x53","\xe7")},
	{hx::fsInt,(int)offsetof(Residue_obj,classbook),HX_HCSTRING("classbook","\x61","\x78","\x80","\xe9")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Residue_obj,classdata),HX_HCSTRING("classdata","\x62","\x4a","\xc8","\xea")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Residue_obj,residueBooks),HX_HCSTRING("residueBooks","\xdf","\xe7","\xab","\x0a")},
	{hx::fsInt,(int)offsetof(Residue_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Residue_obj_sStaticStorageInfo = 0;
#endif

static ::String Residue_obj_sMemberFields[] = {
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("partSize","\x54","\x26","\x0b","\x5e"),
	HX_HCSTRING("classifications","\x8d","\xf6","\x53","\xe7"),
	HX_HCSTRING("classbook","\x61","\x78","\x80","\xe9"),
	HX_HCSTRING("classdata","\x62","\x4a","\xc8","\xea"),
	HX_HCSTRING("residueBooks","\xdf","\xe7","\xab","\x0a"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	::String(null()) };

static void Residue_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Residue_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Residue_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Residue_obj::__mClass,"__mClass");
};

#endif

hx::Class Residue_obj::__mClass;

static ::String Residue_obj_sStaticFields[] = {
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Residue_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Residue","\x7b","\x8f","\x98","\xce");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Residue_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Residue_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Residue_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Residue_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Residue_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Residue_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Residue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Residue_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
