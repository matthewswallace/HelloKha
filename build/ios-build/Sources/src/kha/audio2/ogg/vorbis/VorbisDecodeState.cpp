// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_tools_Crc32
#include <kha/audio2/ogg/tools/Crc32.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis__VorbisDecodeState_FindPageResult
#include <kha/audio2/ogg/vorbis/_VorbisDecodeState/FindPageResult.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mode
#include <kha/audio2/ogg/vorbis/data/Mode.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Page
#include <kha/audio2/ogg/vorbis/data/Page.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ProbedPage
#include <kha/audio2/ogg/vorbis/data/ProbedPage.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

static const Int _hx_array_data_25[] = {
	(Int)0,(Int)1,(Int)2,(Int)2,(Int)3,(Int)3,(Int)3,(Int)3,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,(Int)4,
};
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{

void VorbisDecodeState_obj::__construct( ::haxe::io::Input input){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","new",0xe15b5a2e,"kha.audio2.ogg.vorbis.VorbisDecodeState.new","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",27,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(input,"input")
HXLINE(  54)		this->nextSeg = (int)0;
HXLINE(  53)		this->firstDecode = false;
HXLINE(  40)		this->bytesInSeg = (int)0;
HXLINE(  35)		this->validBits = (int)0;
HXLINE(  72)		this->input = input;
HXLINE(  73)		this->inputPosition = (int)0;
HXLINE(  74)		this->page =  ::kha::audio2::ogg::vorbis::data::Page_obj::__new();
HXLINE(  75)		::kha::audio2::ogg::tools::Crc32_obj::init();
            	}

Dynamic VorbisDecodeState_obj::__CreateEmpty() { return new VorbisDecodeState_obj; }

hx::ObjectPtr< VorbisDecodeState_obj > VorbisDecodeState_obj::__new( ::haxe::io::Input input)
{
	hx::ObjectPtr< VorbisDecodeState_obj > _hx_result = new VorbisDecodeState_obj();
	_hx_result->__construct(input);
	return _hx_result;
}

Dynamic VorbisDecodeState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VorbisDecodeState_obj > _hx_result = new VorbisDecodeState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void VorbisDecodeState_obj::setup(Int loc0,Int loc1){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","setup",0x5387c7cb,"kha.audio2.ogg.vorbis.VorbisDecodeState.setup","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",78,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(loc0,"loc0")
            	HX_STACK_ARG(loc1,"loc1")
HXLINE(  79)		hx::AddEq(this->inputPosition,(int)1);
HXDLIN(  79)		HX_VARI( Int,segmentCount) = this->input->readByte();
HXLINE(  80)		hx::AddEq(this->inputPosition,segmentCount);
HXDLIN(  80)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN(  80)		_hx_array_set_size_exact(this1,segmentCount);
HXDLIN(  80)		HX_VARI( ::Array< Int >,vec) = this1;
HXDLIN(  80)		{
HXLINE(  80)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  80)			while((_g1 < segmentCount)){
HXLINE(  80)				HX_VARI( Int,i) = _g1++;
HXDLIN(  80)				{
HXLINE(  80)					Int val = this->input->readByte();
HXDLIN(  80)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN(  80)		this->segments = vec;
HXLINE(  83)		this->endSegWithKnownLoc = (int)-2;
HXLINE(  84)		Bool _hx_tmp;
HXDLIN(  84)		if ((loc0 == (int)-1)) {
HXLINE(  84)			_hx_tmp = (loc1 != (int)-1);
            		}
            		else {
HXLINE(  84)			_hx_tmp = true;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  85)			HX_VARI_NAME( Int,i1,"i") = (segmentCount - (int)1);
HXLINE(  86)			while((i1 >= (int)0)){
HXLINE(  87)				Bool _hx_tmp1 = (( (Int)(_hx_array_unsafe_get(this->segments,i1)) ) < (int)255);
HXDLIN(  87)				if (_hx_tmp1) {
HXLINE(  88)					goto _hx_goto_1;
            				}
HXLINE(  90)				if ((i1 >= (int)0)) {
HXLINE(  91)					this->endSegWithKnownLoc = i1;
HXLINE(  92)					this->knownLocForPacket = loc0;
            				}
HXLINE(  94)				--i1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  98)		Bool _hx_tmp2 = this->firstDecode;
HXDLIN(  98)		if (_hx_tmp2) {
HXLINE( 100)			HX_VARI( Int,len) = (int)0;
HXLINE( 101)			HX_VARI(  ::kha::audio2::ogg::vorbis::data::ProbedPage,p) =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__new();
HXLINE( 103)			{
HXLINE( 103)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 103)				while((_g11 < segmentCount)){
HXLINE( 103)					HX_VARI_NAME( Int,i2,"i") = _g11++;
HXLINE( 104)					hx::AddEq(len,( (Int)(_hx_array_unsafe_get(this->segments,i2)) ));
            				}
            			}
HXLINE( 106)			hx::AddEq(len,((int)27 + segmentCount));
HXLINE( 108)			p->pageStart = this->firstAudioPageOffset;
HXLINE( 109)			p->pageEnd = (p->pageStart + len);
HXLINE( 110)			p->firstDecodedSample = (int)0;
HXLINE( 111)			p->lastDecodedSample = loc0;
HXLINE( 112)			this->pFirst = p;
            		}
HXLINE( 115)		this->nextSeg = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,setup,(void))

 ::kha::audio2::ogg::vorbis::VorbisDecodeState VorbisDecodeState_obj::clone( ::Dynamic seekFunc){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","clone",0x21bb2cab,"kha.audio2.ogg.vorbis.VorbisDecodeState.clone","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",119,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seekFunc,"seekFunc")
HXLINE( 120)		HX_VARI(  ::kha::audio2::ogg::vorbis::VorbisDecodeState,state) = ( ( ::kha::audio2::ogg::vorbis::VorbisDecodeState)(::Type_obj::createEmptyInstance(hx::ClassOf< ::kha::audio2::ogg::vorbis::VorbisDecodeState >())) );
HXLINE( 122)		seekFunc(this->inputPosition);
HXLINE( 123)		state->input = this->input;
HXLINE( 126)		state->eof = this->eof;
HXLINE( 127)		state->validBits = this->validBits;
HXLINE( 128)		state->discardSamplesDeferred = this->discardSamplesDeferred;
HXLINE( 129)		state->firstDecode = this->firstDecode;
HXLINE( 130)		state->nextSeg = this->nextSeg;
HXLINE( 131)		state->bytesInSeg = this->bytesInSeg;
HXLINE( 132)		state->acc = state->acc;
HXLINE( 133)		state->lastSeg = this->lastSeg;
HXLINE( 134)		state->lastSegWhich = this->lastSegWhich;
HXLINE( 135)		state->currentLoc = this->currentLoc;
HXLINE( 136)		state->currentLocValid = this->currentLocValid;
HXLINE( 137)		state->inputPosition = this->inputPosition;
HXLINE( 138)		state->firstAudioPageOffset = this->firstAudioPageOffset;
HXLINE( 141)		state->error = this->error;
HXLINE( 142)		state->segments = this->segments;
HXLINE( 143)		state->pFirst = this->pFirst;
HXLINE( 144)		state->pLast = this->pLast;
HXLINE( 147)		state->page = this->page->clone();
HXLINE( 149)		return state;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,clone,return )

Int VorbisDecodeState_obj::next(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","next",0x4e938f65,"kha.audio2.ogg.vorbis.VorbisDecodeState.next","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",154,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 155)		if (this->lastSeg) {
HXLINE( 156)			return (int)0;
            		}
HXLINE( 159)		Bool _hx_tmp = (this->nextSeg == (int)-1);
HXDLIN( 159)		if (_hx_tmp) {
HXLINE( 160)			this->lastSegWhich = (this->segments->length - (int)1);
HXLINE( 162)			try {
            				HX_STACK_CATCHABLE( ::kha::audio2::ogg::vorbis::data::ReaderError, 0);
HXLINE( 163)				this->page->start(hx::ObjectPtr<OBJ_>(this));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::kha::audio2::ogg::vorbis::data::ReaderError >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::kha::audio2::ogg::vorbis::data::ReaderError e = _hx_e;
HXLINE( 165)					this->lastSeg = true;
HXLINE( 166)					this->error = e;
HXLINE( 167)					return (int)0;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 170)			if ((((int)this->page->flag & (int)(int)1) == (int)0)) {
HXLINE( 171)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CONTINUED_PACKET_FLAG_INVALID_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),171,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("next",f3,84,02,49))));
            			}
            		}
HXLINE( 175)		Int index = this->nextSeg++;
HXDLIN( 175)		HX_VARI( Int,len) = ( (Int)(_hx_array_unsafe_get(this->segments,index)) );
HXLINE( 176)		if ((len < (int)255)) {
HXLINE( 177)			this->lastSeg = true;
HXLINE( 178)			this->lastSegWhich = (this->nextSeg - (int)1);
            		}
HXLINE( 180)		Bool _hx_tmp1 = (this->nextSeg >= this->segments->length);
HXDLIN( 180)		if (_hx_tmp1) {
HXLINE( 181)			this->nextSeg = (int)-1;
            		}
HXLINE( 185)		this->bytesInSeg = len;
HXLINE( 186)		return len;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,next,return )

void VorbisDecodeState_obj::startPacket(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","startPacket",0x0af9bd58,"kha.audio2.ogg.vorbis.VorbisDecodeState.startPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",189,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 190)		while((this->nextSeg == (int)-1)){
HXLINE( 191)			this->page->start(hx::ObjectPtr<OBJ_>(this));
HXLINE( 192)			if ((((int)this->page->flag & (int)(int)1) != (int)0)) {
HXLINE( 193)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),193,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("startPacket",8a,b5,7e,5b))));
            			}
            		}
HXLINE( 197)		this->lastSeg = false;
HXLINE( 198)		this->validBits = (int)0;
HXLINE( 199)		this->bytesInSeg = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,startPacket,(void))

Bool VorbisDecodeState_obj::maybeStartPacket(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","maybeStartPacket",0x5a5cf834,"kha.audio2.ogg.vorbis.VorbisDecodeState.maybeStartPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",203,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 204)		Bool _hx_tmp = (this->nextSeg == (int)-1);
HXDLIN( 204)		if (_hx_tmp) {
HXLINE( 205)			HX_VARI( Bool,eof) = false;
HXLINE( 206)			HX_VAR( Int,x);
HXDLIN( 206)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 207)				hx::AddEq(this->inputPosition,(int)1);
HXLINE( 206)				x = this->input->readByte();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
HXLINE( 209)					eof = true;
HXLINE( 206)					x = (int)0;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 213)			if (eof) {
HXLINE( 214)				return false;
            			}
HXLINE( 217)			Bool _hx_tmp1;
HXDLIN( 217)			Bool _hx_tmp2;
HXDLIN( 217)			Bool _hx_tmp3;
HXDLIN( 217)			if ((x == (int)79)) {
HXLINE( 217)				hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 217)				Int _hx_tmp4 = this->input->readByte();
HXDLIN( 217)				_hx_tmp3 = (_hx_tmp4 != (int)103);
            			}
            			else {
HXLINE( 217)				_hx_tmp3 = true;
            			}
HXDLIN( 217)			if (!(_hx_tmp3)) {
HXLINE( 217)				hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 217)				Int _hx_tmp5 = this->input->readByte();
HXDLIN( 217)				_hx_tmp2 = (_hx_tmp5 != (int)103);
            			}
            			else {
HXLINE( 217)				_hx_tmp2 = true;
            			}
HXDLIN( 217)			if (!(_hx_tmp2)) {
HXLINE( 217)				hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 217)				Int _hx_tmp6 = this->input->readByte();
HXDLIN( 217)				_hx_tmp1 = (_hx_tmp6 != (int)83);
            			}
            			else {
HXLINE( 217)				_hx_tmp1 = true;
            			}
HXDLIN( 217)			if (_hx_tmp1) {
HXLINE( 218)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),218,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("maybeStartPacket",c2,0a,ad,2a))));
            			}
HXLINE( 221)			this->page->startWithoutCapturePattern(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 224)		this->startPacket();
HXLINE( 225)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,maybeStartPacket,return )

Int VorbisDecodeState_obj::readBits(Int n){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","readBits",0xb09b00ee,"kha.audio2.ogg.vorbis.VorbisDecodeState.readBits","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",232,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 232)		Bool _hx_tmp = (this->validBits < (int)0);
HXDLIN( 232)		if (_hx_tmp) {
HXLINE( 233)			return (int)0;
            		}
            		else {
HXLINE( 234)			Bool _hx_tmp1 = (this->validBits < n);
HXDLIN( 234)			if (_hx_tmp1) {
HXLINE( 235)				if ((n > (int)24)) {
HXLINE( 237)					Int _hx_tmp2 = this->readBits((int)24);
HXDLIN( 237)					Int _hx_tmp3 = this->readBits((n - (int)24));
HXDLIN( 237)					return (_hx_tmp2 + ((int)_hx_tmp3 << (int)(int)24));
            				}
            				else {
HXLINE( 239)					Bool _hx_tmp4 = (this->validBits == (int)0);
HXDLIN( 239)					if (_hx_tmp4) {
HXLINE( 240)						this->acc = (int)0;
            					}
HXLINE( 243)					while(true){
HXLINE( 244)						Bool _hx_tmp5;
HXDLIN( 244)						Bool _hx_tmp6 = (this->bytesInSeg == (int)0);
HXDLIN( 244)						if (_hx_tmp6) {
HXLINE( 244)							Bool _hx_tmp7 = !(this->lastSeg);
HXDLIN( 244)							if (_hx_tmp7) {
HXLINE( 244)								Int _hx_tmp8 = this->next();
HXDLIN( 244)								_hx_tmp5 = (_hx_tmp8 == (int)0);
            							}
            							else {
HXLINE( 244)								_hx_tmp5 = true;
            							}
            						}
            						else {
HXLINE( 244)							_hx_tmp5 = false;
            						}
HXDLIN( 244)						if (_hx_tmp5) {
HXLINE( 245)							this->validBits = (int)-1;
HXLINE( 246)							goto _hx_goto_4;
            						}
            						else {
HXLINE( 248)							this->bytesInSeg--;
HXLINE( 249)							Int a = this->acc;
HXDLIN( 249)							hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 249)							Int _hx_tmp9 = this->input->readByte();
HXDLIN( 249)							Int _hx_tmp10 = (a + ((int)_hx_tmp9 << (int)this->validBits));
HXDLIN( 249)							this->acc = _hx_tmp10;
HXLINE( 250)							hx::AddEq(this->validBits,(int)8);
            						}
HXLINE( 243)						if (!((this->validBits < n))) {
HXLINE( 243)							goto _hx_goto_4;
            						}
            					}
            					_hx_goto_4:;
HXLINE( 254)					Bool _hx_tmp11 = (this->validBits < (int)0);
HXDLIN( 254)					if (_hx_tmp11) {
HXLINE( 255)						return (int)0;
            					}
            					else {
HXLINE( 257)						HX_VARI( Int,z) = ((int)this->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXLINE( 258)						Int _hx_tmp12 = hx::UShr(this->acc,n);
HXDLIN( 258)						this->acc = _hx_tmp12;
HXLINE( 259)						hx::SubEq(this->validBits,n);
HXLINE( 260)						return z;
            					}
            				}
            			}
            			else {
HXLINE( 264)				HX_VARI_NAME( Int,z1,"z") = ((int)this->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXLINE( 265)				Int _hx_tmp13 = hx::UShr(this->acc,n);
HXDLIN( 265)				this->acc = _hx_tmp13;
HXLINE( 266)				hx::SubEq(this->validBits,n);
HXLINE( 267)				return z1;
            			}
            		}
HXLINE( 232)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readBits,return )

Int VorbisDecodeState_obj::readPacketRaw(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","readPacketRaw",0xa4b12c58,"kha.audio2.ogg.vorbis.VorbisDecodeState.readPacketRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",271,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 271)		Bool _hx_tmp;
HXDLIN( 271)		Bool _hx_tmp1 = (this->bytesInSeg == (int)0);
HXDLIN( 271)		if (_hx_tmp1) {
HXLINE( 271)			Bool _hx_tmp2 = !(this->lastSeg);
HXDLIN( 271)			if (_hx_tmp2) {
HXLINE( 271)				Int _hx_tmp3 = this->next();
HXDLIN( 271)				_hx_tmp = (_hx_tmp3 == (int)0);
            			}
            			else {
HXLINE( 271)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 271)			_hx_tmp = false;
            		}
HXDLIN( 271)		if (_hx_tmp) {
HXLINE( 271)			return (int)-1;
            		}
            		else {
HXLINE( 275)			this->bytesInSeg--;
HXLINE( 276)			hx::AddEq(this->inputPosition,(int)1);
HXLINE( 271)			return this->input->readByte();
            		}
HXDLIN( 271)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readPacketRaw,return )

Int VorbisDecodeState_obj::readPacket(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","readPacket",0x4097a770,"kha.audio2.ogg.vorbis.VorbisDecodeState.readPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",281,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 282)		HX_VAR( Int,x);
HXDLIN( 282)		Bool _hx_tmp;
HXDLIN( 282)		Bool _hx_tmp1 = (this->bytesInSeg == (int)0);
HXDLIN( 282)		if (_hx_tmp1) {
HXLINE( 282)			Bool _hx_tmp2 = !(this->lastSeg);
HXDLIN( 282)			if (_hx_tmp2) {
HXLINE( 282)				Int _hx_tmp3 = this->next();
HXDLIN( 282)				_hx_tmp = (_hx_tmp3 == (int)0);
            			}
            			else {
HXLINE( 282)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 282)			_hx_tmp = false;
            		}
HXDLIN( 282)		if (_hx_tmp) {
HXLINE( 282)			x = (int)-1;
            		}
            		else {
HXLINE( 282)			this->bytesInSeg--;
HXDLIN( 282)			hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 282)			x = this->input->readByte();
            		}
HXLINE( 283)		this->validBits = (int)0;
HXLINE( 284)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readPacket,return )

void VorbisDecodeState_obj::flushPacket(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","flushPacket",0x3e67a13a,"kha.audio2.ogg.vorbis.VorbisDecodeState.flushPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",288,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 288)		while(true){
HXLINE( 288)			Bool _hx_tmp;
HXDLIN( 288)			Bool _hx_tmp1 = (this->bytesInSeg == (int)0);
HXDLIN( 288)			if (_hx_tmp1) {
HXLINE( 288)				Bool _hx_tmp2 = !(this->lastSeg);
HXDLIN( 288)				if (_hx_tmp2) {
HXLINE( 288)					Int _hx_tmp3 = this->next();
HXDLIN( 288)					_hx_tmp = (_hx_tmp3 != (int)0);
            				}
            				else {
HXLINE( 288)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 288)				_hx_tmp = true;
            			}
HXDLIN( 288)			if (!(_hx_tmp)) {
HXLINE( 288)				goto _hx_goto_5;
            			}
HXLINE( 289)			this->bytesInSeg--;
HXLINE( 290)			{
HXLINE( 290)				hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 290)				this->input->readByte();
            			}
            		}
            		_hx_goto_5:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,flushPacket,(void))

void VorbisDecodeState_obj::vorbisValidate(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","vorbisValidate",0x2e5ee7fb,"kha.audio2.ogg.vorbis.VorbisDecodeState.vorbisValidate","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",294,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 295)		HX_VARI(  ::haxe::io::Bytes,header) = ::haxe::io::Bytes_obj::alloc((int)6);
HXLINE( 296)		{
HXLINE( 296)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 296)			while((_g < (int)6)){
HXLINE( 296)				HX_VARI( Int,i) = _g++;
HXLINE( 297)				{
HXLINE( 297)					HX_VAR( Int,x);
HXDLIN( 297)					Bool _hx_tmp;
HXDLIN( 297)					Bool _hx_tmp1 = (this->bytesInSeg == (int)0);
HXDLIN( 297)					if (_hx_tmp1) {
HXLINE( 297)						Bool _hx_tmp2 = !(this->lastSeg);
HXDLIN( 297)						if (_hx_tmp2) {
HXLINE( 297)							Int _hx_tmp3 = this->next();
HXDLIN( 297)							_hx_tmp = (_hx_tmp3 == (int)0);
            						}
            						else {
HXLINE( 297)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 297)						_hx_tmp = false;
            					}
HXDLIN( 297)					if (_hx_tmp) {
HXLINE( 297)						x = (int)-1;
            					}
            					else {
HXLINE( 297)						this->bytesInSeg--;
HXDLIN( 297)						hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 297)						x = this->input->readByte();
            					}
HXDLIN( 297)					this->validBits = (int)0;
HXDLIN( 297)					header->b[i] = x;
            				}
            			}
            		}
HXLINE( 299)		::String _hx_tmp4 = header->toString();
HXDLIN( 299)		if ((_hx_tmp4 != HX_("vorbis",53,03,3c,63))) {
HXLINE( 300)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("vorbis header",ba,3e,a4,0e),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),300,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("vorbisValidate",09,9b,51,16))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,vorbisValidate,(void))

void VorbisDecodeState_obj::firstPageValidate(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","firstPageValidate",0xa72bf0a3,"kha.audio2.ogg.vorbis.VorbisDecodeState.firstPageValidate","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",305,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 306)		if ((this->segments->length != (int)1)) {
HXLINE( 307)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("segmentCount",1c,1c,95,3d),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),307,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("firstPageValidate",55,1a,ec,1c))));
            		}
HXLINE( 309)		Bool _hx_tmp = (( (Int)(_hx_array_unsafe_get(this->segments,(int)0)) ) != (int)30);
HXDLIN( 309)		if (_hx_tmp) {
HXLINE( 310)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("decodeState head",5d,8c,63,29),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),310,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("firstPageValidate",55,1a,ec,1c))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,firstPageValidate,(void))

void VorbisDecodeState_obj::startFirstDecode(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","startFirstDecode",0xf83b15ae,"kha.audio2.ogg.vorbis.VorbisDecodeState.startFirstDecode","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",315,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 316)		this->firstAudioPageOffset = this->inputPosition;
HXLINE( 317)		this->firstDecode = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,startFirstDecode,(void))

void VorbisDecodeState_obj::capturePattern(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","capturePattern",0x38c5675c,"kha.audio2.ogg.vorbis.VorbisDecodeState.capturePattern","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",322,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 322)		Bool _hx_tmp;
HXDLIN( 322)		Bool _hx_tmp1;
HXDLIN( 322)		Bool _hx_tmp2;
HXDLIN( 322)		hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 322)		Int _hx_tmp3 = this->input->readByte();
HXDLIN( 322)		if ((_hx_tmp3 == (int)79)) {
HXLINE( 322)			hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 322)			Int _hx_tmp4 = this->input->readByte();
HXDLIN( 322)			_hx_tmp2 = (_hx_tmp4 != (int)103);
            		}
            		else {
HXLINE( 322)			_hx_tmp2 = true;
            		}
HXDLIN( 322)		if (!(_hx_tmp2)) {
HXLINE( 322)			hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 322)			Int _hx_tmp5 = this->input->readByte();
HXDLIN( 322)			_hx_tmp1 = (_hx_tmp5 != (int)103);
            		}
            		else {
HXLINE( 322)			_hx_tmp1 = true;
            		}
HXDLIN( 322)		if (!(_hx_tmp1)) {
HXLINE( 322)			hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 322)			Int _hx_tmp6 = this->input->readByte();
HXDLIN( 322)			_hx_tmp = (_hx_tmp6 != (int)83);
            		}
            		else {
HXLINE( 322)			_hx_tmp = true;
            		}
HXDLIN( 322)		if (_hx_tmp) {
HXLINE( 323)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),323,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("capturePattern",6a,1a,b8,20))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,capturePattern,(void))

void VorbisDecodeState_obj::skip(Int len){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","skip",0x51e620f1,"kha.audio2.ogg.vorbis.VorbisDecodeState.skip","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",329,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(len,"len")
HXLINE( 329)		hx::AddEq(this->inputPosition,len);
HXDLIN( 329)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN( 329)		_hx_array_set_size_exact(this1,len);
HXDLIN( 329)		HX_VARI( ::Array< Int >,vec) = this1;
HXDLIN( 329)		{
HXLINE( 329)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 329)			while((_g1 < len)){
HXLINE( 329)				HX_VARI( Int,i) = _g1++;
HXDLIN( 329)				{
HXLINE( 329)					Int val = this->input->readByte();
HXDLIN( 329)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,skip,(void))

void VorbisDecodeState_obj::prepHuffman(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","prepHuffman",0x69ac478e,"kha.audio2.ogg.vorbis.VorbisDecodeState.prepHuffman","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",334,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 334)		Bool _hx_tmp = (this->validBits <= (int)24);
HXDLIN( 334)		if (_hx_tmp) {
HXLINE( 335)			Bool _hx_tmp1 = (this->validBits == (int)0);
HXDLIN( 335)			if (_hx_tmp1) {
HXLINE( 336)				this->acc = (int)0;
            			}
HXLINE( 338)			while(true){
HXLINE( 339)				Bool _hx_tmp2;
HXDLIN( 339)				Bool _hx_tmp3 = (this->bytesInSeg == (int)0);
HXDLIN( 339)				if (_hx_tmp3) {
HXLINE( 339)					Bool _hx_tmp4 = !(this->lastSeg);
HXDLIN( 339)					if (_hx_tmp4) {
HXLINE( 339)						Int _hx_tmp5 = this->next();
HXDLIN( 339)						_hx_tmp2 = (_hx_tmp5 == (int)0);
            					}
            					else {
HXLINE( 339)						_hx_tmp2 = true;
            					}
            				}
            				else {
HXLINE( 339)					_hx_tmp2 = false;
            				}
HXDLIN( 339)				if (_hx_tmp2) {
HXLINE( 340)					return;
            				}
            				else {
HXLINE( 342)					this->bytesInSeg--;
HXLINE( 343)					Int a = this->acc;
HXDLIN( 343)					hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 343)					Int _hx_tmp6 = this->input->readByte();
HXDLIN( 343)					Int _hx_tmp7 = (a + ((int)_hx_tmp6 << (int)this->validBits));
HXDLIN( 343)					this->acc = _hx_tmp7;
HXLINE( 344)					hx::AddEq(this->validBits,(int)8);
            				}
HXLINE( 338)				if (!((this->validBits <= (int)24))) {
HXLINE( 338)					goto _hx_goto_8;
            				}
            			}
            			_hx_goto_8:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,prepHuffman,(void))

Int VorbisDecodeState_obj::decode( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","decode",0xb8ab6820,"kha.audio2.ogg.vorbis.VorbisDecodeState.decode","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",350,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE( 351)		Bool _hx_tmp = (this->validBits < (int)10);
HXDLIN( 351)		if (_hx_tmp) {
HXLINE( 351)			this->prepHuffman();
            		}
HXDLIN( 351)		Int index = ((int)this->acc & (int)(int)1023);
HXDLIN( 351)		HX_VARI( Int,i) = ( (Int)(_hx_array_unsafe_get(c->fastHuffman,index)) );
HXDLIN( 351)		HX_VAR( Int,val);
HXDLIN( 351)		if ((i >= (int)0)) {
HXLINE( 351)			HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(c->codewordLengths,i)) );
HXDLIN( 351)			Int _hx_tmp1 = hx::UShr(this->acc,l);
HXDLIN( 351)			this->acc = _hx_tmp1;
HXDLIN( 351)			hx::SubEq(this->validBits,l);
HXDLIN( 351)			Bool _hx_tmp2 = (this->validBits < (int)0);
HXDLIN( 351)			if (_hx_tmp2) {
HXLINE( 351)				this->validBits = (int)0;
HXDLIN( 351)				val = (int)-1;
            			}
            			else {
HXLINE( 351)				val = i;
            			}
            		}
            		else {
HXLINE( 351)			val = this->decodeScalarRaw(c);
            		}
HXLINE( 352)		Bool _hx_tmp3 = c->sparse;
HXDLIN( 352)		if (_hx_tmp3) {
HXLINE( 353)			val = ( (Int)(_hx_array_unsafe_get(c->sortedValues,val)) );
            		}
HXLINE( 355)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decode,return )

Int VorbisDecodeState_obj::decodeRaw( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","decodeRaw",0x97caf9a8,"kha.audio2.ogg.vorbis.VorbisDecodeState.decodeRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",359,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE( 360)		Bool _hx_tmp = (this->validBits < (int)10);
HXDLIN( 360)		if (_hx_tmp) {
HXLINE( 361)			this->prepHuffman();
            		}
HXLINE( 365)		Int index = ((int)this->acc & (int)(int)1023);
HXDLIN( 365)		HX_VARI( Int,i) = ( (Int)(_hx_array_unsafe_get(c->fastHuffman,index)) );
HXLINE( 367)		if ((i >= (int)0)) {
HXLINE( 368)			HX_VARI( Int,l) = ( (Int)(_hx_array_unsafe_get(c->codewordLengths,i)) );
HXLINE( 369)			Int _hx_tmp1 = hx::UShr(this->acc,l);
HXDLIN( 369)			this->acc = _hx_tmp1;
HXLINE( 370)			hx::SubEq(this->validBits,l);
HXLINE( 371)			Bool _hx_tmp2 = (this->validBits < (int)0);
HXDLIN( 371)			if (_hx_tmp2) {
HXLINE( 372)				this->validBits = (int)0;
HXLINE( 367)				return (int)-1;
            			}
            			else {
HXLINE( 367)				return i;
            			}
            		}
            		else {
HXLINE( 367)			return this->decodeScalarRaw(c);
            		}
HXDLIN( 367)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decodeRaw,return )

Bool VorbisDecodeState_obj::isLastByte(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","isLastByte",0xb29eb67a,"kha.audio2.ogg.vorbis.VorbisDecodeState.isLastByte","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",384,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 384)		if ((this->bytesInSeg == (int)0)) {
HXLINE( 384)			return this->lastSeg;
            		}
            		else {
HXLINE( 384)			return false;
            		}
HXDLIN( 384)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,isLastByte,return )

 ::Dynamic VorbisDecodeState_obj::finishDecodePacket(Int previousLength,Int n, ::Dynamic r){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","finishDecodePacket",0xed4f2a3b,"kha.audio2.ogg.vorbis.VorbisDecodeState.finishDecodePacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",388,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(previousLength,"previousLength")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(r,"r")
HXLINE( 389)		HX_VARI( Int,left) = ( (Int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) );
HXLINE( 390)		HX_VARI( Bool,currentLocValid) = false;
HXLINE( 391)		HX_VARI( Int,n2) = ((int)n >> (int)(int)1);
HXLINE( 393)		Bool _hx_tmp = this->firstDecode;
HXDLIN( 393)		if (_hx_tmp) {
HXLINE( 398)			this->currentLoc = -(n2);
HXLINE( 401)			this->discardSamplesDeferred = (n - ( (Int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) ));
HXLINE( 402)			currentLocValid = true;
HXLINE( 403)			this->firstDecode = false;
            		}
            		else {
HXLINE( 404)			Bool _hx_tmp1 = (this->discardSamplesDeferred != (int)0);
HXDLIN( 404)			if (_hx_tmp1) {
HXLINE( 405)				hx::AddEq(hx::FieldRef(( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))).mPtr,HX_("start",62,74,0b,84)),this->discardSamplesDeferred);
HXLINE( 406)				left = ( (Int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) );
HXLINE( 407)				this->discardSamplesDeferred = (int)0;
            			}
            		}
HXLINE( 418)		Bool _hx_tmp2 = (this->lastSegWhich == this->endSegWithKnownLoc);
HXDLIN( 418)		if (_hx_tmp2) {
HXLINE( 420)			Bool _hx_tmp3;
HXDLIN( 420)			if (currentLocValid) {
HXLINE( 420)				_hx_tmp3 = (((int)this->page->flag & (int)(int)4) != (int)0);
            			}
            			else {
HXLINE( 420)				_hx_tmp3 = false;
            			}
HXDLIN( 420)			if (_hx_tmp3) {
HXLINE( 421)				HX_VARI( Int,currentEnd) = (this->knownLocForPacket - (n - ( (Int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) )));
HXLINE( 423)				Bool _hx_tmp4 = (currentEnd < (this->currentLoc + ( (Int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) )));
HXDLIN( 423)				if (_hx_tmp4) {
HXLINE( 424)					HX_VAR( Int,len);
HXDLIN( 424)					if ((currentEnd < this->currentLoc)) {
HXLINE( 424)						len = (int)0;
            					}
            					else {
HXLINE( 424)						len = (currentEnd - this->currentLoc);
            					}
HXLINE( 430)					hx::AddEq(len,( (Int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ));
HXLINE( 431)					hx::AddEq(this->currentLoc,len);
HXLINE( 433)					return  ::Dynamic(hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("right",dc,0b,64,e9), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)))
            						->setFixed(1,HX_("len",d5,4b,52,00),len)
            						->setFixed(2,HX_("left",07,08,b0,47),left));
            				}
            			}
HXLINE( 444)			Int _hx_tmp5 = this->knownLocForPacket;
HXDLIN( 444)			Int _hx_tmp6 = (n2 - ( (Int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ));
HXDLIN( 444)			this->currentLoc = (_hx_tmp5 - _hx_tmp6);
HXLINE( 445)			currentLocValid = true;
            		}
HXLINE( 448)		if (currentLocValid) {
HXLINE( 449)			hx::AddEq(this->currentLoc,(( (Int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ) - ( (Int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) )));
            		}
HXLINE( 455)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("right",dc,0b,64,e9), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)))
            			->setFixed(1,HX_("len",d5,4b,52,00), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)))
            			->setFixed(2,HX_("left",07,08,b0,47),left));
            	}


HX_DEFINE_DYNAMIC_FUNC3(VorbisDecodeState_obj,finishDecodePacket,return )

Int VorbisDecodeState_obj::readInt32(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","readInt32",0xe221b866,"kha.audio2.ogg.vorbis.VorbisDecodeState.readInt32","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",463,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 464)		hx::AddEq(this->inputPosition,(int)4);
HXLINE( 465)		return this->input->readInt32();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readInt32,return )

Int VorbisDecodeState_obj::readByte(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","readByte",0xb0a724f0,"kha.audio2.ogg.vorbis.VorbisDecodeState.readByte","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",469,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 470)		hx::AddEq(this->inputPosition,(int)1);
HXLINE( 471)		return this->input->readByte();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readByte,return )

::Array< Int > VorbisDecodeState_obj::read(Int n){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","read",0x513855c8,"kha.audio2.ogg.vorbis.VorbisDecodeState.read","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",474,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 475)		hx::AddEq(this->inputPosition,n);
HXLINE( 476)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN( 476)		_hx_array_set_size_exact(this1,n);
HXDLIN( 476)		HX_VARI( ::Array< Int >,vec) = this1;
HXLINE( 477)		{
HXLINE( 477)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 477)			while((_g1 < n)){
HXLINE( 477)				HX_VARI( Int,i) = _g1++;
HXLINE( 478)				{
HXLINE( 478)					Int val = this->input->readByte();
HXDLIN( 478)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 480)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,read,return )

 ::haxe::io::Bytes VorbisDecodeState_obj::readBytes(Int n){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","readBytes",0xe1992d83,"kha.audio2.ogg.vorbis.VorbisDecodeState.readBytes","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",483,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 484)		hx::AddEq(this->inputPosition,n);
HXLINE( 485)		return this->input->read(n);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readBytes,return )

::String VorbisDecodeState_obj::readString(Int n){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","readString",0x6e2f78b9,"kha.audio2.ogg.vorbis.VorbisDecodeState.readString","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",489,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 490)		hx::AddEq(this->inputPosition,n);
HXLINE( 491)		return this->input->readString(n);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readString,return )

Int VorbisDecodeState_obj::getSampleNumber( ::Dynamic seekFunc,Int inputLength){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","getSampleNumber",0xfc673317,"kha.audio2.ogg.vorbis.VorbisDecodeState.getSampleNumber","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",494,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seekFunc,"seekFunc")
            	HX_STACK_ARG(inputLength,"inputLength")
HXLINE( 497)		HX_VARI( Int,restoreOffset) = this->inputPosition;
HXLINE( 501)		HX_VAR( Int,previousSafe);
HXDLIN( 501)		Bool _hx_tmp;
HXDLIN( 501)		HX_VARI( Bool,aNeg) = (inputLength < (int)0);
HXDLIN( 501)		Bool _hx_tmp1;
HXDLIN( 501)		if ((aNeg != false)) {
HXLINE( 501)			_hx_tmp1 = aNeg;
            		}
            		else {
HXLINE( 501)			_hx_tmp1 = (inputLength >= (int)65536);
            		}
HXDLIN( 501)		if (_hx_tmp1) {
HXLINE( 501)			HX_VARI( Int,a) = (inputLength - (int)65536);
HXDLIN( 501)			HX_VARI( Int,b) = this->firstAudioPageOffset;
HXDLIN( 501)			HX_VARI_NAME( Bool,aNeg1,"aNeg") = (a < (int)0);
HXDLIN( 501)			if ((aNeg1 != (b < (int)0))) {
HXLINE( 501)				_hx_tmp = aNeg1;
            			}
            			else {
HXLINE( 501)				_hx_tmp = (a >= b);
            			}
            		}
            		else {
HXLINE( 501)			_hx_tmp = false;
            		}
HXDLIN( 501)		if (_hx_tmp) {
HXLINE( 501)			previousSafe = (inputLength - (int)65536);
            		}
            		else {
HXLINE( 501)			previousSafe = this->firstAudioPageOffset;
            		}
HXLINE( 507)		Int _hx_tmp2 = (this->inputPosition = previousSafe);
HXDLIN( 507)		seekFunc(_hx_tmp2);
HXLINE( 511)		HX_VARI( Int,end) = (int)0;
HXLINE( 512)		HX_VARI( Bool,last) = false;
HXLINE( 513)		{
HXLINE( 513)			HX_VARI( ::hx::EnumBase,_g) = this->findPage(seekFunc,inputLength);
HXDLIN( 513)			Int _hx_tmp3 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 513)			switch((int)(_hx_tmp3)){
            				case (int)0: {
HXLINE( 515)					end = _g->_hx_getInt(0);
HXLINE( 516)					last = _g->_hx_getBool(1);
            				}
            				break;
            				case (int)1: {
HXLINE( 518)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CANT_FIND_LAST_PAGE_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),518,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("getSampleNumber",49,2c,d1,08))));
            				}
            				break;
            			}
            		}
HXLINE( 522)		HX_VARI( Int,lastPageLoc) = this->inputPosition;
HXLINE( 527)		while(!(last)){
HXLINE( 528)			Int _hx_tmp4 = (this->inputPosition = end);
HXDLIN( 528)			seekFunc(_hx_tmp4);
HXLINE( 529)			{
HXLINE( 529)				HX_VARI( ::hx::EnumBase,_g1) = this->findPage(seekFunc,inputLength);
HXDLIN( 529)				Int _hx_tmp5 = ( ( ::hx::EnumBase)(_g1) )->_hx_getIndex();
HXDLIN( 529)				switch((int)(_hx_tmp5)){
            					case (int)0: {
HXLINE( 531)						end = _g1->_hx_getInt(0);
HXLINE( 532)						last = _g1->_hx_getBool(1);
            					}
            					break;
            					case (int)1: {
HXLINE( 536)						goto _hx_goto_10;
            					}
            					break;
            				}
            			}
HXLINE( 539)			previousSafe = (lastPageLoc + (int)1);
HXLINE( 540)			lastPageLoc = this->inputPosition;
            		}
            		_hx_goto_10:;
HXLINE( 543)		Int _hx_tmp6 = (this->inputPosition = lastPageLoc);
HXDLIN( 543)		seekFunc(_hx_tmp6);
HXLINE( 546)		hx::AddEq(this->inputPosition,(int)6);
HXDLIN( 546)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN( 546)		_hx_array_set_size_exact(this1,(int)6);
HXDLIN( 546)		HX_VARI( ::Array< Int >,vec) = this1;
HXDLIN( 546)		{
HXLINE( 546)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 546)			while((_g11 < (int)6)){
HXLINE( 546)				HX_VARI( Int,i) = _g11++;
HXDLIN( 546)				{
HXLINE( 546)					Int val = this->input->readByte();
HXDLIN( 546)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 549)		hx::AddEq(this->inputPosition,(int)4);
HXDLIN( 549)		HX_VARI( Int,lo) = this->input->readInt32();
HXLINE( 550)		hx::AddEq(this->inputPosition,(int)4);
HXDLIN( 550)		HX_VARI( Int,hi) = this->input->readInt32();
HXLINE( 551)		Bool _hx_tmp7;
HXDLIN( 551)		Bool _hx_tmp8;
HXDLIN( 551)		if ((lo == (int)-1)) {
HXLINE( 551)			_hx_tmp8 = (hi == (int)-1);
            		}
            		else {
HXLINE( 551)			_hx_tmp8 = false;
            		}
HXDLIN( 551)		if (!(_hx_tmp8)) {
HXLINE( 551)			_hx_tmp7 = (hi > (int)0);
            		}
            		else {
HXLINE( 551)			_hx_tmp7 = true;
            		}
HXDLIN( 551)		if (_hx_tmp7) {
HXLINE( 552)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CANT_FIND_LAST_PAGE_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),552,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("getSampleNumber",49,2c,d1,08))));
            		}
HXLINE( 555)		this->pLast =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__new();
HXLINE( 556)		this->pLast->pageStart = lastPageLoc;
HXLINE( 557)		this->pLast->pageEnd = end;
HXLINE( 558)		this->pLast->lastDecodedSample = lo;
HXLINE( 559)		this->pLast->firstDecodedSample = null();
HXLINE( 560)		this->pLast->afterPreviousPageStart = previousSafe;
HXLINE( 562)		Int _hx_tmp9 = (this->inputPosition = restoreOffset);
HXDLIN( 562)		seekFunc(_hx_tmp9);
HXLINE( 563)		return lo;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,getSampleNumber,return )

void VorbisDecodeState_obj::forcePageResync(){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","forcePageResync",0xba9c57d6,"kha.audio2.ogg.vorbis.VorbisDecodeState.forcePageResync","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",568,0x1d2e7902)
            	HX_STACK_THIS(this)
HXLINE( 568)		this->nextSeg = (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,forcePageResync,(void))

void VorbisDecodeState_obj::setInputOffset( ::Dynamic seekFunc,Int n){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","setInputOffset",0x153efbad,"kha.audio2.ogg.vorbis.VorbisDecodeState.setInputOffset","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",573,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seekFunc,"seekFunc")
            	HX_STACK_ARG(n,"n")
HXLINE( 573)		Int _hx_tmp = (this->inputPosition = n);
HXDLIN( 573)		seekFunc(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,setInputOffset,(void))

::hx::EnumBase VorbisDecodeState_obj::findPage( ::Dynamic seekFunc,Int inputLength){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","findPage",0xe472129a,"kha.audio2.ogg.vorbis.VorbisDecodeState.findPage","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",577,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seekFunc,"seekFunc")
            	HX_STACK_ARG(inputLength,"inputLength")
HXLINE( 577)		try {
            			HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 578)			while(true){
HXLINE( 579)				hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 579)				HX_VARI( Int,n) = this->input->readByte();
HXLINE( 580)				if ((n == (int)79)) {
HXLINE( 581)					HX_VARI( Int,retryLoc) = this->inputPosition;
HXLINE( 583)					if (((retryLoc - (int)25) > inputLength)) {
HXLINE( 584)						return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            					}
HXLINE( 587)					Bool _hx_tmp;
HXDLIN( 587)					Bool _hx_tmp1;
HXDLIN( 587)					hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 587)					Int _hx_tmp2 = this->input->readByte();
HXDLIN( 587)					if ((_hx_tmp2 == (int)103)) {
HXLINE( 587)						hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 587)						Int _hx_tmp3 = this->input->readByte();
HXDLIN( 587)						_hx_tmp1 = (_hx_tmp3 != (int)103);
            					}
            					else {
HXLINE( 587)						_hx_tmp1 = true;
            					}
HXDLIN( 587)					if (!(_hx_tmp1)) {
HXLINE( 587)						hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 587)						Int _hx_tmp4 = this->input->readByte();
HXDLIN( 587)						_hx_tmp = (_hx_tmp4 != (int)83);
            					}
            					else {
HXLINE( 587)						_hx_tmp = true;
            					}
HXDLIN( 587)					if (_hx_tmp) {
HXLINE( 588)						continue;
            					}
HXLINE( 591)					HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN( 591)					_hx_array_set_size_exact(this1,(int)27);
HXDLIN( 591)					HX_VARI( ::Array< Int >,header) = this1;
HXLINE( 592)					header->__unsafe_set((int)0,(int)79);
HXLINE( 593)					header->__unsafe_set((int)1,(int)103);
HXLINE( 594)					header->__unsafe_set((int)2,(int)103);
HXLINE( 595)					header->__unsafe_set((int)3,(int)83);
HXLINE( 596)					{
HXLINE( 596)						HX_VARI( Int,_g) = (int)4;
HXDLIN( 596)						while((_g < (int)27)){
HXLINE( 596)							HX_VARI( Int,i) = _g++;
HXLINE( 597)							{
HXLINE( 597)								hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 597)								Int val = this->input->readByte();
HXDLIN( 597)								header->__unsafe_set(i,val);
            							}
            						}
            					}
HXLINE( 600)					Int a = ( (Int)(_hx_array_unsafe_get(header,(int)4)) );
HXDLIN( 600)					if ((a != (int)0)) {
HXLINE( 601)						Int _hx_tmp5 = (this->inputPosition = retryLoc);
HXDLIN( 601)						seekFunc(_hx_tmp5);
HXLINE( 602)						continue;
            					}
HXLINE( 605)					Int a1 = ( (Int)(_hx_array_unsafe_get(header,(int)22)) );
HXDLIN( 605)					Int a2 = ( (Int)(_hx_array_unsafe_get(header,(int)23)) );
HXDLIN( 605)					Int a3 = (a1 + ((int)a2 << (int)(int)8));
HXDLIN( 605)					Int a4 = ( (Int)(_hx_array_unsafe_get(header,(int)24)) );
HXDLIN( 605)					Int a5 = (a3 + ((int)a4 << (int)(int)16));
HXDLIN( 605)					Int a6 = ( (Int)(_hx_array_unsafe_get(header,(int)25)) );
HXDLIN( 605)					HX_VARI( Int,goal) = (a5 + ((int)a6 << (int)(int)24));
HXLINE( 606)					{
HXLINE( 606)						HX_VARI_NAME( Int,_g1,"_g") = (int)22;
HXDLIN( 606)						while((_g1 < (int)26)){
HXLINE( 606)							HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 607)							header->__unsafe_set(i1,(int)0);
            						}
            					}
HXLINE( 610)					HX_VARI( Int,crc) = (int)0;
HXLINE( 611)					{
HXLINE( 611)						HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 611)						while((_g2 < (int)27)){
HXLINE( 611)							HX_VARI_NAME( Int,i2,"i") = _g2++;
HXLINE( 612)							Int byte = ( (Int)(_hx_array_unsafe_get(header,i2)) );
HXDLIN( 612)							Int b = ( (Int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,((int)byte ^ (int)hx::UShr(crc,(int)24)))) );
HXDLIN( 612)							crc = ((int)((int)crc << (int)(int)8) ^ (int)b);
            						}
            					}
HXLINE( 615)					HX_VARI( Int,len) = (int)0;
HXLINE( 616)					try {
            						HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 617)						{
HXLINE( 617)							HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 617)							HX_VARI_NAME( Int,_g3,"_g") = ( (Int)(_hx_array_unsafe_get(header,(int)26)) );
HXDLIN( 617)							while((_g11 < _g3)){
HXLINE( 617)								++_g11;
HXLINE( 618)								hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 618)								HX_VARI( Int,s) = this->input->readByte();
HXLINE( 619)								Int b1 = ( (Int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,((int)s ^ (int)hx::UShr(crc,(int)24)))) );
HXDLIN( 619)								Int _hx_tmp6 = ((int)((int)crc << (int)(int)8) ^ (int)b1);
HXDLIN( 619)								crc = _hx_tmp6;
HXLINE( 620)								hx::AddEq(len,s);
            							}
            						}
HXLINE( 622)						{
HXLINE( 622)							HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 622)							HX_VARI_NAME( Int,_g4,"_g") = len;
HXDLIN( 622)							while((_g12 < _g4)){
HXLINE( 622)								++_g12;
HXLINE( 623)								hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 623)								Int byte1 = this->input->readByte();
HXDLIN( 623)								Int b2 = ( (Int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,((int)byte1 ^ (int)hx::UShr(crc,(int)24)))) );
HXDLIN( 623)								crc = ((int)((int)crc << (int)(int)8) ^ (int)b2);
            							}
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::io::Eof e = _hx_e;
HXLINE( 626)							return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 630)					if ((crc == goal)) {
HXLINE( 639)						HX_VARI( Int,end) = this->inputPosition;
HXLINE( 640)						Int _hx_tmp7 = (this->inputPosition = (retryLoc - (int)1));
HXDLIN( 640)						seekFunc(_hx_tmp7);
HXLINE( 641)						Int a7 = ( (Int)(_hx_array_unsafe_get(header,(int)5)) );
HXDLIN( 641)						return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::Found(end,(((int)a7 & (int)(int)4) != (int)0));
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::io::Eof e1 = _hx_e;
HXLINE( 646)				return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 577)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,findPage,return )

 ::kha::audio2::ogg::vorbis::data::ProbedPage VorbisDecodeState_obj::analyzePage( ::Dynamic seekFunc, ::kha::audio2::ogg::vorbis::data::Header h){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","analyzePage",0xfe54df89,"kha.audio2.ogg.vorbis.VorbisDecodeState.analyzePage","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",651,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seekFunc,"seekFunc")
            	HX_STACK_ARG(h,"h")
HXLINE( 652)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::ProbedPage,z) =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__new();
HXLINE( 653)		HX_VARI_NAME( ::Array< Bool >,this1,"this") = ::Array_obj< Bool >::__new();
HXDLIN( 653)		_hx_array_set_size_exact(this1,(int)255);
HXDLIN( 653)		HX_VARI( ::Array< Bool >,packetType) = this1;
HXLINE( 656)		z->pageStart = this->inputPosition;
HXLINE( 659)		hx::AddEq(this->inputPosition,(int)27);
HXDLIN( 659)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new();
HXDLIN( 659)		_hx_array_set_size_exact(this2,(int)27);
HXDLIN( 659)		HX_VARI( ::Array< Int >,vec) = this2;
HXDLIN( 659)		{
HXLINE( 659)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 659)			while((_g1 < (int)27)){
HXLINE( 659)				HX_VARI( Int,i) = _g1++;
HXDLIN( 659)				{
HXLINE( 659)					Int val = this->input->readByte();
HXDLIN( 659)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 660)		{
HXLINE( 660)			Bool _hx_tmp;
HXDLIN( 660)			Bool _hx_tmp1;
HXDLIN( 660)			Bool _hx_tmp2 = (( (Int)(_hx_array_unsafe_get(vec,(int)0)) ) == (int)79);
HXDLIN( 660)			if (_hx_tmp2) {
HXLINE( 660)				_hx_tmp1 = (( (Int)(_hx_array_unsafe_get(vec,(int)1)) ) == (int)103);
            			}
            			else {
HXLINE( 660)				_hx_tmp1 = false;
            			}
HXDLIN( 660)			if (_hx_tmp1) {
HXLINE( 660)				_hx_tmp = (( (Int)(_hx_array_unsafe_get(vec,(int)2)) ) == (int)103);
            			}
            			else {
HXLINE( 660)				_hx_tmp = false;
            			}
HXDLIN( 660)			if (_hx_tmp) {
HXLINE( 660)				_hx_array_unsafe_get(vec,(int)3);
            			}
            		}
HXLINE( 661)		HX_VARI( Int,n) = ( (Int)(_hx_array_unsafe_get(vec,(int)26)) );
HXDLIN( 661)		hx::AddEq(this->inputPosition,n);
HXDLIN( 661)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new();
HXDLIN( 661)		_hx_array_set_size_exact(this3,n);
HXDLIN( 661)		HX_VARI_NAME( ::Array< Int >,vec1,"vec") = this3;
HXDLIN( 661)		{
HXLINE( 661)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 661)			while((_g11 < n)){
HXLINE( 661)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXDLIN( 661)				{
HXLINE( 661)					Int val1 = this->input->readByte();
HXDLIN( 661)					vec1->__unsafe_set(i1,val1);
            				}
            			}
            		}
HXLINE( 664)		HX_VARI( Int,len) = (int)0;
HXLINE( 665)		{
HXLINE( 665)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 665)			HX_VARI( Int,_g) = ( (Int)(_hx_array_unsafe_get(vec,(int)26)) );
HXDLIN( 665)			while((_g12 < _g)){
HXLINE( 665)				HX_VARI_NAME( Int,i2,"i") = _g12++;
HXLINE( 666)				hx::AddEq(len,( (Int)(_hx_array_unsafe_get(vec1,i2)) ));
            			}
            		}
HXLINE( 670)		Int _hx_tmp3 = (z->pageStart + (int)27);
HXDLIN( 670)		Int _hx_tmp4 = (_hx_tmp3 + ( (Int)(_hx_array_unsafe_get(vec,(int)26)) ));
HXDLIN( 670)		z->pageEnd = (_hx_tmp4 + len);
HXLINE( 673)		Int _hx_tmp5 = ( (Int)(_hx_array_unsafe_get(vec,(int)6)) );
HXDLIN( 673)		Int _hx_tmp6 = ((int)( (Int)(_hx_array_unsafe_get(vec,(int)7)) ) << (int)(int)8);
HXDLIN( 673)		Int _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXDLIN( 673)		Int _hx_tmp8 = ((int)( (Int)(_hx_array_unsafe_get(vec,(int)8)) ) << (int)(int)16);
HXDLIN( 673)		Int _hx_tmp9 = (_hx_tmp7 + _hx_tmp8);
HXDLIN( 673)		Int _hx_tmp10 = ((int)( (Int)(_hx_array_unsafe_get(vec,(int)9)) ) << (int)(int)16);
HXDLIN( 673)		z->lastDecodedSample = (_hx_tmp9 + _hx_tmp10);
HXLINE( 675)		Int _hx_tmp11 = ((int)( (Int)(_hx_array_unsafe_get(vec,(int)5)) ) & (int)(int)4);
HXDLIN( 675)		if ((_hx_tmp11 != (int)0)) {
HXLINE( 678)			z->firstDecodedSample = null();
HXLINE( 679)			{
HXLINE( 679)				Int n1 = z->pageStart;
HXDLIN( 679)				Int _hx_tmp12 = (this->inputPosition = n1);
HXDLIN( 679)				seekFunc(_hx_tmp12);
            			}
HXLINE( 680)			return z;
            		}
HXLINE( 687)		HX_VARI( Int,numPacket) = (int)0;
HXLINE( 688)		Int _hx_tmp13 = ((int)( (Int)(_hx_array_unsafe_get(vec,(int)5)) ) & (int)(int)1);
HXDLIN( 688)		HX_VARI( Bool,packetStart) = (_hx_tmp13 == (int)0);
HXLINE( 690)		HX_VARI( Int,modeCount) = h->modes->length;
HXLINE( 692)		{
HXLINE( 692)			HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 692)			HX_VARI_NAME( Int,_g2,"_g") = ( (Int)(_hx_array_unsafe_get(vec,(int)26)) );
HXDLIN( 692)			while((_g13 < _g2)){
HXLINE( 692)				HX_VARI_NAME( Int,i3,"i") = _g13++;
HXLINE( 693)				if (packetStart) {
HXLINE( 694)					Bool _hx_tmp14 = (( (Int)(_hx_array_unsafe_get(vec1,i3)) ) == (int)0);
HXDLIN( 694)					if (_hx_tmp14) {
HXLINE( 696)						{
HXLINE( 696)							Int n2 = z->pageStart;
HXDLIN( 696)							Int _hx_tmp15 = (this->inputPosition = n2);
HXDLIN( 696)							seekFunc(_hx_tmp15);
            						}
HXLINE( 697)						return null();
            					}
HXLINE( 699)					hx::AddEq(this->inputPosition,(int)1);
HXDLIN( 699)					HX_VARI_NAME( Int,n3,"n") = this->input->readByte();
HXLINE( 702)					if ((((int)n3 & (int)(int)1) != (int)0)) {
HXLINE( 703)						{
HXLINE( 703)							Int n4 = z->pageStart;
HXDLIN( 703)							Int _hx_tmp16 = (this->inputPosition = n4);
HXDLIN( 703)							seekFunc(_hx_tmp16);
            						}
HXLINE( 704)						return null();
            					}
HXLINE( 706)					hx::ShrEq(n3,(int)1);
HXLINE( 707)					HX_VARI_NAME( Int,n5,"n") = (modeCount - (int)1);
HXDLIN( 707)					HX_VARI( ::Array< Int >,log2_4) = ::Array_obj< Int >::fromData( _hx_array_data_25,16);
HXDLIN( 707)					HX_VAR( Int,b);
HXDLIN( 707)					if ((n5 < (int)16384)) {
HXLINE( 707)						if ((n5 < (int)16)) {
HXLINE( 707)							b = log2_4->__get(n5);
            						}
            						else {
HXLINE( 707)							if ((n5 < (int)512)) {
HXLINE( 707)								b = ((int)5 + log2_4->__get(((int)n5 >> (int)(int)5)));
            							}
            							else {
HXLINE( 707)								b = ((int)10 + log2_4->__get(((int)n5 >> (int)(int)10)));
            							}
            						}
            					}
            					else {
HXLINE( 707)						if ((n5 < (int)16777216)) {
HXLINE( 707)							if ((n5 < (int)524288)) {
HXLINE( 707)								b = ((int)15 + log2_4->__get(((int)n5 >> (int)(int)15)));
            							}
            							else {
HXLINE( 707)								b = ((int)20 + log2_4->__get(((int)n5 >> (int)(int)20)));
            							}
            						}
            						else {
HXLINE( 707)							if ((n5 < (int)536870912)) {
HXLINE( 707)								b = ((int)25 + log2_4->__get(((int)n5 >> (int)(int)25)));
            							}
            							else {
HXLINE( 707)								if ((n5 < (int)-2147483648)) {
HXLINE( 707)									b = ((int)30 + log2_4->__get(((int)n5 >> (int)(int)30)));
            								}
            								else {
HXLINE( 707)									b = (int)0;
            								}
            							}
            						}
            					}
HXLINE( 708)					hx::AndEq(n3,(((int)(int)1 << (int)b) - (int)1));
HXLINE( 709)					if ((n3 >= modeCount)) {
HXLINE( 710)						{
HXLINE( 710)							Int n6 = z->pageStart;
HXDLIN( 710)							Int _hx_tmp17 = (this->inputPosition = n6);
HXDLIN( 710)							seekFunc(_hx_tmp17);
            						}
HXLINE( 711)						return null();
            					}
HXLINE( 713)					{
HXLINE( 713)						Int index = numPacket++;
HXDLIN( 713)						Bool val2 = ( ( ::kha::audio2::ogg::vorbis::data::Mode)(_hx_array_unsafe_get(h->modes,n3)) )->blockflag;
HXDLIN( 713)						packetType->__unsafe_set(index,val2);
            					}
HXLINE( 714)					{
HXLINE( 714)						HX_VARI_NAME( Int,len1,"len") = (( (Int)(_hx_array_unsafe_get(vec1,i3)) ) - (int)1);
HXDLIN( 714)						{
HXLINE( 714)							hx::AddEq(this->inputPosition,len1);
HXDLIN( 714)							HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new();
HXDLIN( 714)							_hx_array_set_size_exact(this4,len1);
HXDLIN( 714)							HX_VARI_NAME( ::Array< Int >,vec2,"vec") = this4;
HXDLIN( 714)							{
HXLINE( 714)								HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN( 714)								while((_g14 < len1)){
HXLINE( 714)									HX_VARI_NAME( Int,i4,"i") = _g14++;
HXDLIN( 714)									{
HXLINE( 714)										Int val3 = this->input->readByte();
HXDLIN( 714)										vec2->__unsafe_set(i4,val3);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 716)					HX_VARI_NAME( Int,len2,"len") = ( (Int)(_hx_array_unsafe_get(vec1,i3)) );
HXDLIN( 716)					{
HXLINE( 716)						hx::AddEq(this->inputPosition,len2);
HXDLIN( 716)						HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new();
HXDLIN( 716)						_hx_array_set_size_exact(this5,len2);
HXDLIN( 716)						HX_VARI_NAME( ::Array< Int >,vec3,"vec") = this5;
HXDLIN( 716)						{
HXLINE( 716)							HX_VARI_NAME( Int,_g15,"_g1") = (int)0;
HXDLIN( 716)							while((_g15 < len2)){
HXLINE( 716)								HX_VARI_NAME( Int,i5,"i") = _g15++;
HXDLIN( 716)								{
HXLINE( 716)									Int val4 = this->input->readByte();
HXDLIN( 716)									vec3->__unsafe_set(i5,val4);
            								}
            							}
            						}
            					}
            				}
HXLINE( 718)				packetStart = (( (Int)(_hx_array_unsafe_get(vec1,i3)) ) < (int)255);
            			}
            		}
HXLINE( 723)		HX_VARI( Int,samples) = (int)0;
HXLINE( 731)		if ((numPacket > (int)1)) {
HXLINE( 732)			Int _hx_tmp18;
HXDLIN( 732)			Bool _hx_tmp19 = ( (Bool)(_hx_array_unsafe_get(packetType,(numPacket - (int)1))) );
HXDLIN( 732)			if (_hx_tmp19) {
HXLINE( 732)				_hx_tmp18 = h->blocksize1;
            			}
            			else {
HXLINE( 732)				_hx_tmp18 = h->blocksize0;
            			}
HXDLIN( 732)			samples = _hx_tmp18;
            		}
HXLINE( 735)		HX_VARI_NAME( Int,i6,"i") = (numPacket - (int)2);
HXLINE( 736)		while((i6 >= (int)1)){
HXLINE( 737)			--i6;
HXLINE( 740)			Bool _hx_tmp20 = ( (Bool)(_hx_array_unsafe_get(packetType,i6)) );
HXDLIN( 740)			if (_hx_tmp20) {
HXLINE( 741)				Bool _hx_tmp21 = ( (Bool)(_hx_array_unsafe_get(packetType,(i6 + (int)1))) );
HXDLIN( 741)				if (_hx_tmp21) {
HXLINE( 742)					hx::AddEq(samples,((int)h->blocksize1 >> (int)(int)1));
            				}
            				else {
HXLINE( 744)					hx::AddEq(samples,(((int)(h->blocksize1 - h->blocksize0) >> (int)(int)2) + ((int)h->blocksize0 >> (int)(int)1)));
            				}
            			}
            			else {
HXLINE( 747)				hx::AddEq(samples,((int)h->blocksize0 >> (int)(int)1));
            			}
HXLINE( 749)			--i6;
            		}
HXLINE( 775)		z->firstDecodedSample = (z->lastDecodedSample - samples);
HXLINE( 778)		{
HXLINE( 778)			Int n7 = z->pageStart;
HXDLIN( 778)			Int _hx_tmp22 = (this->inputPosition = n7);
HXDLIN( 778)			seekFunc(_hx_tmp22);
            		}
HXLINE( 779)		return z;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,analyzePage,return )

Int VorbisDecodeState_obj::decodeScalarRaw( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","decodeScalarRaw",0x3c61dddc,"kha.audio2.ogg.vorbis.VorbisDecodeState.decodeScalarRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",784,0x1d2e7902)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE( 785)		this->prepHuffman();
HXLINE( 790)		HX_VARI( ::Array< Int >,codewordLengths) = c->codewordLengths;
HXLINE( 791)		HX_VARI( ::Array< Int >,codewords) = c->codewords;
HXLINE( 792)		HX_VARI( ::Array< Int >,sortedCodewords) = c->sortedCodewords;
HXLINE( 794)		Bool _hx_tmp;
HXDLIN( 794)		if ((c->entries > (int)8)) {
HXLINE( 794)			_hx_tmp = hx::IsNotNull( sortedCodewords );
            		}
            		else {
HXLINE( 794)			_hx_tmp = hx::IsNotNull( codewords );
            		}
HXDLIN( 794)		if (_hx_tmp) {
HXLINE( 796)			HX_VARI( Int,n) = this->acc;
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-1431655766),(int)1) | (int)((int)((int)n & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-858993460),(int)2) | (int)((int)((int)n & (int)(int)858993459) << (int)(int)2));
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-252645136),(int)4) | (int)((int)((int)n & (int)(int)252645135) << (int)(int)4));
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-16711936),(int)8) | (int)((int)((int)n & (int)(int)16711935) << (int)(int)8));
HXDLIN( 796)			HX_VARI( Int,code) = ((int)hx::UShr(n,(int)16) | (int)((int)n << (int)(int)16));
HXLINE( 797)			HX_VARI( Int,x) = (int)0;
HXLINE( 798)			HX_VARI_NAME( Int,n1,"n") = c->sortedEntries;
HXLINE( 800)			while((n1 > (int)1)){
HXLINE( 802)				HX_VARI( Int,m) = (x + ((int)n1 >> (int)(int)1));
HXLINE( 803)				HX_VARI( Int,a) = sortedCodewords->__get(m);
HXDLIN( 803)				HX_VARI( Bool,aNeg) = (code < (int)0);
HXDLIN( 803)				HX_VARI( Bool,bNeg) = (a < (int)0);
HXDLIN( 803)				Bool _hx_tmp1;
HXDLIN( 803)				if ((aNeg != bNeg)) {
HXLINE( 803)					_hx_tmp1 = aNeg;
            				}
            				else {
HXLINE( 803)					_hx_tmp1 = (code >= a);
            				}
HXDLIN( 803)				if (_hx_tmp1) {
HXLINE( 804)					x = m;
HXLINE( 805)					Int _hx_tmp2 = ((int)n1 >> (int)(int)1);
HXDLIN( 805)					hx::SubEq(n1,_hx_tmp2);
            				}
            				else {
HXLINE( 807)					hx::ShrEq(n1,(int)1);
            				}
            			}
HXLINE( 812)			Bool _hx_tmp3 = !(c->sparse);
HXDLIN( 812)			if (_hx_tmp3) {
HXLINE( 813)				x = ( (Int)(_hx_array_unsafe_get(c->sortedValues,x)) );
            			}
HXLINE( 817)			HX_VARI( Int,len) = ( (Int)(_hx_array_unsafe_get(codewordLengths,x)) );
HXLINE( 818)			Bool _hx_tmp4 = (this->validBits >= len);
HXDLIN( 818)			if (_hx_tmp4) {
HXLINE( 819)				Int _hx_tmp5 = hx::UShr(this->acc,len);
HXDLIN( 819)				this->acc = _hx_tmp5;
HXLINE( 820)				hx::SubEq(this->validBits,len);
HXLINE( 821)				return x;
            			}
HXLINE( 824)			this->validBits = (int)0;
HXLINE( 825)			return (int)-1;
            		}
HXLINE( 830)		{
HXLINE( 830)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 830)			HX_VARI( Int,_g) = c->entries;
HXDLIN( 830)			while((_g1 < _g)){
HXLINE( 830)				HX_VARI( Int,i) = _g1++;
HXLINE( 831)				HX_VARI( Int,cl) = ( (Int)(_hx_array_unsafe_get(codewordLengths,i)) );
HXLINE( 832)				if ((cl == (int)255)) {
HXLINE( 833)					continue;
            				}
HXLINE( 835)				Int a1 = ( (Int)(_hx_array_unsafe_get(codewords,i)) );
HXDLIN( 835)				Int b = ((int)this->acc & (int)(((int)(int)1 << (int)cl) - (int)1));
HXDLIN( 835)				if ((a1 == b)) {
HXLINE( 836)					Bool _hx_tmp6 = (this->validBits >= cl);
HXDLIN( 836)					if (_hx_tmp6) {
HXLINE( 837)						Int _hx_tmp7 = hx::UShr(this->acc,cl);
HXDLIN( 837)						this->acc = _hx_tmp7;
HXLINE( 838)						hx::SubEq(this->validBits,cl);
HXLINE( 839)						return i;
            					}
HXLINE( 841)					this->validBits = (int)0;
HXLINE( 842)					return (int)-1;
            				}
            			}
            		}
HXLINE( 846)		this->error =  ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__new(::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),846,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("decodeScalarRaw",0e,d7,cb,48)));
HXLINE( 847)		this->validBits = (int)0;
HXLINE( 848)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decodeScalarRaw,return )

Int VorbisDecodeState_obj::INVALID_BITS;


VorbisDecodeState_obj::VorbisDecodeState_obj()
{
}

void VorbisDecodeState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VorbisDecodeState);
	HX_MARK_MEMBER_NAME(page,"page");
	HX_MARK_MEMBER_NAME(eof,"eof");
	HX_MARK_MEMBER_NAME(pFirst,"pFirst");
	HX_MARK_MEMBER_NAME(pLast,"pLast");
	HX_MARK_MEMBER_NAME(validBits,"validBits");
	HX_MARK_MEMBER_NAME(inputPosition,"inputPosition");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(discardSamplesDeferred,"discardSamplesDeferred");
	HX_MARK_MEMBER_NAME(segments,"segments");
	HX_MARK_MEMBER_NAME(bytesInSeg,"bytesInSeg");
	HX_MARK_MEMBER_NAME(channelBuffers,"channelBuffers");
	HX_MARK_MEMBER_NAME(channelBufferStart,"channelBufferStart");
	HX_MARK_MEMBER_NAME(channelBufferEnd,"channelBufferEnd");
	HX_MARK_MEMBER_NAME(currentSample,"currentSample");
	HX_MARK_MEMBER_NAME(previousWindow,"previousWindow");
	HX_MARK_MEMBER_NAME(previousLength,"previousLength");
	HX_MARK_MEMBER_NAME(finalY,"finalY");
	HX_MARK_MEMBER_NAME(firstDecode,"firstDecode");
	HX_MARK_MEMBER_NAME(nextSeg,"nextSeg");
	HX_MARK_MEMBER_NAME(acc,"acc");
	HX_MARK_MEMBER_NAME(lastSeg,"lastSeg");
	HX_MARK_MEMBER_NAME(lastSegWhich,"lastSegWhich");
	HX_MARK_MEMBER_NAME(endSegWithKnownLoc,"endSegWithKnownLoc");
	HX_MARK_MEMBER_NAME(knownLocForPacket,"knownLocForPacket");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(currentLoc,"currentLoc");
	HX_MARK_MEMBER_NAME(currentLocValid,"currentLocValid");
	HX_MARK_MEMBER_NAME(firstAudioPageOffset,"firstAudioPageOffset");
	HX_MARK_END_CLASS();
}

void VorbisDecodeState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(page,"page");
	HX_VISIT_MEMBER_NAME(eof,"eof");
	HX_VISIT_MEMBER_NAME(pFirst,"pFirst");
	HX_VISIT_MEMBER_NAME(pLast,"pLast");
	HX_VISIT_MEMBER_NAME(validBits,"validBits");
	HX_VISIT_MEMBER_NAME(inputPosition,"inputPosition");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(discardSamplesDeferred,"discardSamplesDeferred");
	HX_VISIT_MEMBER_NAME(segments,"segments");
	HX_VISIT_MEMBER_NAME(bytesInSeg,"bytesInSeg");
	HX_VISIT_MEMBER_NAME(channelBuffers,"channelBuffers");
	HX_VISIT_MEMBER_NAME(channelBufferStart,"channelBufferStart");
	HX_VISIT_MEMBER_NAME(channelBufferEnd,"channelBufferEnd");
	HX_VISIT_MEMBER_NAME(currentSample,"currentSample");
	HX_VISIT_MEMBER_NAME(previousWindow,"previousWindow");
	HX_VISIT_MEMBER_NAME(previousLength,"previousLength");
	HX_VISIT_MEMBER_NAME(finalY,"finalY");
	HX_VISIT_MEMBER_NAME(firstDecode,"firstDecode");
	HX_VISIT_MEMBER_NAME(nextSeg,"nextSeg");
	HX_VISIT_MEMBER_NAME(acc,"acc");
	HX_VISIT_MEMBER_NAME(lastSeg,"lastSeg");
	HX_VISIT_MEMBER_NAME(lastSegWhich,"lastSegWhich");
	HX_VISIT_MEMBER_NAME(endSegWithKnownLoc,"endSegWithKnownLoc");
	HX_VISIT_MEMBER_NAME(knownLocForPacket,"knownLocForPacket");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(currentLoc,"currentLoc");
	HX_VISIT_MEMBER_NAME(currentLocValid,"currentLocValid");
	HX_VISIT_MEMBER_NAME(firstAudioPageOffset,"firstAudioPageOffset");
}

hx::Val VorbisDecodeState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eof") ) { return hx::Val( eof); }
		if (HX_FIELD_EQ(inName,"acc") ) { return hx::Val( acc); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { return hx::Val( page); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		if (HX_FIELD_EQ(inName,"skip") ) { return hx::Val( skip_dyn()); }
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pLast") ) { return hx::Val( pLast); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error); }
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pFirst") ) { return hx::Val( pFirst); }
		if (HX_FIELD_EQ(inName,"finalY") ) { return hx::Val( finalY); }
		if (HX_FIELD_EQ(inName,"decode") ) { return hx::Val( decode_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nextSeg") ) { return hx::Val( nextSeg); }
		if (HX_FIELD_EQ(inName,"lastSeg") ) { return hx::Val( lastSeg); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segments") ) { return hx::Val( segments); }
		if (HX_FIELD_EQ(inName,"readBits") ) { return hx::Val( readBits_dyn()); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn()); }
		if (HX_FIELD_EQ(inName,"findPage") ) { return hx::Val( findPage_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"validBits") ) { return hx::Val( validBits); }
		if (HX_FIELD_EQ(inName,"decodeRaw") ) { return hx::Val( decodeRaw_dyn()); }
		if (HX_FIELD_EQ(inName,"readInt32") ) { return hx::Val( readInt32_dyn()); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesInSeg") ) { return hx::Val( bytesInSeg); }
		if (HX_FIELD_EQ(inName,"currentLoc") ) { return hx::Val( currentLoc); }
		if (HX_FIELD_EQ(inName,"readPacket") ) { return hx::Val( readPacket_dyn()); }
		if (HX_FIELD_EQ(inName,"isLastByte") ) { return hx::Val( isLastByte_dyn()); }
		if (HX_FIELD_EQ(inName,"readString") ) { return hx::Val( readString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstDecode") ) { return hx::Val( firstDecode); }
		if (HX_FIELD_EQ(inName,"startPacket") ) { return hx::Val( startPacket_dyn()); }
		if (HX_FIELD_EQ(inName,"flushPacket") ) { return hx::Val( flushPacket_dyn()); }
		if (HX_FIELD_EQ(inName,"prepHuffman") ) { return hx::Val( prepHuffman_dyn()); }
		if (HX_FIELD_EQ(inName,"analyzePage") ) { return hx::Val( analyzePage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastSegWhich") ) { return hx::Val( lastSegWhich); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPosition") ) { return hx::Val( inputPosition); }
		if (HX_FIELD_EQ(inName,"currentSample") ) { return hx::Val( currentSample); }
		if (HX_FIELD_EQ(inName,"readPacketRaw") ) { return hx::Val( readPacketRaw_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"channelBuffers") ) { return hx::Val( channelBuffers); }
		if (HX_FIELD_EQ(inName,"previousWindow") ) { return hx::Val( previousWindow); }
		if (HX_FIELD_EQ(inName,"previousLength") ) { return hx::Val( previousLength); }
		if (HX_FIELD_EQ(inName,"vorbisValidate") ) { return hx::Val( vorbisValidate_dyn()); }
		if (HX_FIELD_EQ(inName,"capturePattern") ) { return hx::Val( capturePattern_dyn()); }
		if (HX_FIELD_EQ(inName,"setInputOffset") ) { return hx::Val( setInputOffset_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentLocValid") ) { return hx::Val( currentLocValid); }
		if (HX_FIELD_EQ(inName,"getSampleNumber") ) { return hx::Val( getSampleNumber_dyn()); }
		if (HX_FIELD_EQ(inName,"forcePageResync") ) { return hx::Val( forcePageResync_dyn()); }
		if (HX_FIELD_EQ(inName,"decodeScalarRaw") ) { return hx::Val( decodeScalarRaw_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"channelBufferEnd") ) { return hx::Val( channelBufferEnd); }
		if (HX_FIELD_EQ(inName,"maybeStartPacket") ) { return hx::Val( maybeStartPacket_dyn()); }
		if (HX_FIELD_EQ(inName,"startFirstDecode") ) { return hx::Val( startFirstDecode_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"knownLocForPacket") ) { return hx::Val( knownLocForPacket); }
		if (HX_FIELD_EQ(inName,"firstPageValidate") ) { return hx::Val( firstPageValidate_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"channelBufferStart") ) { return hx::Val( channelBufferStart); }
		if (HX_FIELD_EQ(inName,"endSegWithKnownLoc") ) { return hx::Val( endSegWithKnownLoc); }
		if (HX_FIELD_EQ(inName,"finishDecodePacket") ) { return hx::Val( finishDecodePacket_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"firstAudioPageOffset") ) { return hx::Val( firstAudioPageOffset); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"discardSamplesDeferred") ) { return hx::Val( discardSamplesDeferred); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VorbisDecodeState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eof") ) { eof=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acc") ) { acc=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { page=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Page >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pLast") ) { pLast=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ProbedPage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ReaderError >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pFirst") ) { pFirst=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ProbedPage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finalY") ) { finalY=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nextSeg") ) { nextSeg=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSeg") ) { lastSeg=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segments") ) { segments=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"validBits") ) { validBits=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesInSeg") ) { bytesInSeg=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentLoc") ) { currentLoc=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstDecode") ) { firstDecode=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastSegWhich") ) { lastSegWhich=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPosition") ) { inputPosition=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSample") ) { currentSample=inValue.Cast< Int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"channelBuffers") ) { channelBuffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousWindow") ) { previousWindow=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousLength") ) { previousLength=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentLocValid") ) { currentLocValid=inValue.Cast< Int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"channelBufferEnd") ) { channelBufferEnd=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"knownLocForPacket") ) { knownLocForPacket=inValue.Cast< Int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"channelBufferStart") ) { channelBufferStart=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endSegWithKnownLoc") ) { endSegWithKnownLoc=inValue.Cast< Int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"firstAudioPageOffset") ) { firstAudioPageOffset=inValue.Cast< Int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"discardSamplesDeferred") ) { discardSamplesDeferred=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VorbisDecodeState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("page","\x4f","\xda","\x51","\x4a"));
	outFields->push(HX_HCSTRING("eof","\xbc","\x04","\x4d","\x00"));
	outFields->push(HX_HCSTRING("pFirst","\xa0","\x51","\xc3","\x5b"));
	outFields->push(HX_HCSTRING("pLast","\xe6","\x2e","\x67","\xaf"));
	outFields->push(HX_HCSTRING("validBits","\x22","\xca","\xec","\x2d"));
	outFields->push(HX_HCSTRING("inputPosition","\xd3","\x3a","\x9c","\x59"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("discardSamplesDeferred","\xca","\x30","\xf6","\x72"));
	outFields->push(HX_HCSTRING("segments","\x60","\xed","\x26","\x4e"));
	outFields->push(HX_HCSTRING("bytesInSeg","\x45","\xb8","\xaf","\xef"));
	outFields->push(HX_HCSTRING("channelBuffers","\xf0","\xb8","\xbc","\x61"));
	outFields->push(HX_HCSTRING("channelBufferStart","\x3f","\x1f","\xc8","\xba"));
	outFields->push(HX_HCSTRING("channelBufferEnd","\x78","\x4d","\xee","\xd4"));
	outFields->push(HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00"));
	outFields->push(HX_HCSTRING("previousWindow","\x87","\x47","\x23","\x41"));
	outFields->push(HX_HCSTRING("previousLength","\x7d","\x48","\x9e","\x8d"));
	outFields->push(HX_HCSTRING("finalY","\x23","\x28","\x79","\x86"));
	outFields->push(HX_HCSTRING("firstDecode","\x7e","\x8d","\x8f","\x49"));
	outFields->push(HX_HCSTRING("nextSeg","\x62","\x28","\x46","\xa5"));
	outFields->push(HX_HCSTRING("acc","\x41","\xf1","\x49","\x00"));
	outFields->push(HX_HCSTRING("lastSeg","\xdf","\xe2","\xac","\xd7"));
	outFields->push(HX_HCSTRING("lastSegWhich","\x7e","\x00","\xe0","\x06"));
	outFields->push(HX_HCSTRING("endSegWithKnownLoc","\x7d","\x01","\xc0","\x57"));
	outFields->push(HX_HCSTRING("knownLocForPacket","\xf4","\xab","\xab","\x3c"));
	outFields->push(HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"));
	outFields->push(HX_HCSTRING("currentLoc","\xc7","\x19","\x2d","\xc7"));
	outFields->push(HX_HCSTRING("currentLocValid","\xb5","\xf9","\xa2","\x57"));
	outFields->push(HX_HCSTRING("firstAudioPageOffset","\x68","\x75","\x67","\x0d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VorbisDecodeState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Page*/ ,(int)offsetof(VorbisDecodeState_obj,page),HX_HCSTRING("page","\x4f","\xda","\x51","\x4a")},
	{hx::fsBool,(int)offsetof(VorbisDecodeState_obj,eof),HX_HCSTRING("eof","\xbc","\x04","\x4d","\x00")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::ProbedPage*/ ,(int)offsetof(VorbisDecodeState_obj,pFirst),HX_HCSTRING("pFirst","\xa0","\x51","\xc3","\x5b")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::ProbedPage*/ ,(int)offsetof(VorbisDecodeState_obj,pLast),HX_HCSTRING("pLast","\xe6","\x2e","\x67","\xaf")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,validBits),HX_HCSTRING("validBits","\x22","\xca","\xec","\x2d")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,inputPosition),HX_HCSTRING("inputPosition","\xd3","\x3a","\x9c","\x59")},
	{hx::fsObject /*::haxe::io::Input*/ ,(int)offsetof(VorbisDecodeState_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,discardSamplesDeferred),HX_HCSTRING("discardSamplesDeferred","\xca","\x30","\xf6","\x72")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(VorbisDecodeState_obj,segments),HX_HCSTRING("segments","\x60","\xed","\x26","\x4e")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,bytesInSeg),HX_HCSTRING("bytesInSeg","\x45","\xb8","\xaf","\xef")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VorbisDecodeState_obj,channelBuffers),HX_HCSTRING("channelBuffers","\xf0","\xb8","\xbc","\x61")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,channelBufferStart),HX_HCSTRING("channelBufferStart","\x3f","\x1f","\xc8","\xba")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,channelBufferEnd),HX_HCSTRING("channelBufferEnd","\x78","\x4d","\xee","\xd4")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentSample),HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VorbisDecodeState_obj,previousWindow),HX_HCSTRING("previousWindow","\x87","\x47","\x23","\x41")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,previousLength),HX_HCSTRING("previousLength","\x7d","\x48","\x9e","\x8d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VorbisDecodeState_obj,finalY),HX_HCSTRING("finalY","\x23","\x28","\x79","\x86")},
	{hx::fsBool,(int)offsetof(VorbisDecodeState_obj,firstDecode),HX_HCSTRING("firstDecode","\x7e","\x8d","\x8f","\x49")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,nextSeg),HX_HCSTRING("nextSeg","\x62","\x28","\x46","\xa5")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,acc),HX_HCSTRING("acc","\x41","\xf1","\x49","\x00")},
	{hx::fsBool,(int)offsetof(VorbisDecodeState_obj,lastSeg),HX_HCSTRING("lastSeg","\xdf","\xe2","\xac","\xd7")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,lastSegWhich),HX_HCSTRING("lastSegWhich","\x7e","\x00","\xe0","\x06")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,endSegWithKnownLoc),HX_HCSTRING("endSegWithKnownLoc","\x7d","\x01","\xc0","\x57")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,knownLocForPacket),HX_HCSTRING("knownLocForPacket","\xf4","\xab","\xab","\x3c")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::ReaderError*/ ,(int)offsetof(VorbisDecodeState_obj,error),HX_HCSTRING("error","\xc8","\xcb","\x29","\x73")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentLoc),HX_HCSTRING("currentLoc","\xc7","\x19","\x2d","\xc7")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentLocValid),HX_HCSTRING("currentLocValid","\xb5","\xf9","\xa2","\x57")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,firstAudioPageOffset),HX_HCSTRING("firstAudioPageOffset","\x68","\x75","\x67","\x0d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo VorbisDecodeState_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &VorbisDecodeState_obj::INVALID_BITS,HX_HCSTRING("INVALID_BITS","\xae","\x04","\x71","\x11")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String VorbisDecodeState_obj_sMemberFields[] = {
	HX_HCSTRING("page","\x4f","\xda","\x51","\x4a"),
	HX_HCSTRING("eof","\xbc","\x04","\x4d","\x00"),
	HX_HCSTRING("pFirst","\xa0","\x51","\xc3","\x5b"),
	HX_HCSTRING("pLast","\xe6","\x2e","\x67","\xaf"),
	HX_HCSTRING("validBits","\x22","\xca","\xec","\x2d"),
	HX_HCSTRING("inputPosition","\xd3","\x3a","\x9c","\x59"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("discardSamplesDeferred","\xca","\x30","\xf6","\x72"),
	HX_HCSTRING("segments","\x60","\xed","\x26","\x4e"),
	HX_HCSTRING("bytesInSeg","\x45","\xb8","\xaf","\xef"),
	HX_HCSTRING("channelBuffers","\xf0","\xb8","\xbc","\x61"),
	HX_HCSTRING("channelBufferStart","\x3f","\x1f","\xc8","\xba"),
	HX_HCSTRING("channelBufferEnd","\x78","\x4d","\xee","\xd4"),
	HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00"),
	HX_HCSTRING("previousWindow","\x87","\x47","\x23","\x41"),
	HX_HCSTRING("previousLength","\x7d","\x48","\x9e","\x8d"),
	HX_HCSTRING("finalY","\x23","\x28","\x79","\x86"),
	HX_HCSTRING("firstDecode","\x7e","\x8d","\x8f","\x49"),
	HX_HCSTRING("nextSeg","\x62","\x28","\x46","\xa5"),
	HX_HCSTRING("acc","\x41","\xf1","\x49","\x00"),
	HX_HCSTRING("lastSeg","\xdf","\xe2","\xac","\xd7"),
	HX_HCSTRING("lastSegWhich","\x7e","\x00","\xe0","\x06"),
	HX_HCSTRING("endSegWithKnownLoc","\x7d","\x01","\xc0","\x57"),
	HX_HCSTRING("knownLocForPacket","\xf4","\xab","\xab","\x3c"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("currentLoc","\xc7","\x19","\x2d","\xc7"),
	HX_HCSTRING("currentLocValid","\xb5","\xf9","\xa2","\x57"),
	HX_HCSTRING("firstAudioPageOffset","\x68","\x75","\x67","\x0d"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("startPacket","\x8a","\xb5","\x7e","\x5b"),
	HX_HCSTRING("maybeStartPacket","\xc2","\x0a","\xad","\x2a"),
	HX_HCSTRING("readBits","\x7c","\xd5","\x0e","\x69"),
	HX_HCSTRING("readPacketRaw","\x0a","\x15","\x8a","\xda"),
	HX_HCSTRING("readPacket","\x7e","\x3b","\x14","\xdd"),
	HX_HCSTRING("flushPacket","\x6c","\x99","\xec","\x8e"),
	HX_HCSTRING("vorbisValidate","\x09","\x9b","\x51","\x16"),
	HX_HCSTRING("firstPageValidate","\x55","\x1a","\xec","\x1c"),
	HX_HCSTRING("startFirstDecode","\x3c","\x28","\x8b","\xc8"),
	HX_HCSTRING("capturePattern","\x6a","\x1a","\xb8","\x20"),
	HX_HCSTRING("skip","\x7f","\x16","\x55","\x4c"),
	HX_HCSTRING("prepHuffman","\xc0","\x3f","\x31","\xba"),
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	HX_HCSTRING("decodeRaw","\x5a","\x21","\xb1","\x44"),
	HX_HCSTRING("isLastByte","\x88","\x4a","\x1b","\x4f"),
	HX_HCSTRING("finishDecodePacket","\x49","\x7c","\xb3","\x7f"),
	HX_HCSTRING("readInt32","\x18","\xe0","\x07","\x8f"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("readString","\xc7","\x0c","\xac","\x0a"),
	HX_HCSTRING("getSampleNumber","\x49","\x2c","\xd1","\x08"),
	HX_HCSTRING("forcePageResync","\x08","\x51","\x06","\xc7"),
	HX_HCSTRING("setInputOffset","\xbb","\xae","\x31","\xfd"),
	HX_HCSTRING("findPage","\x28","\xe7","\xe5","\x9c"),
	HX_HCSTRING("analyzePage","\xbb","\xd7","\xd9","\x4e"),
	HX_HCSTRING("decodeScalarRaw","\x0e","\xd7","\xcb","\x48"),
	::String(null()) };

static void VorbisDecodeState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VorbisDecodeState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(VorbisDecodeState_obj::INVALID_BITS,"INVALID_BITS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VorbisDecodeState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VorbisDecodeState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(VorbisDecodeState_obj::INVALID_BITS,"INVALID_BITS");
};

#endif

hx::Class VorbisDecodeState_obj::__mClass;

static ::String VorbisDecodeState_obj_sStaticFields[] = {
	HX_HCSTRING("INVALID_BITS","\xae","\x04","\x71","\x11"),
	::String(null())
};

void VorbisDecodeState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.VorbisDecodeState","\x3c","\x6b","\x03","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VorbisDecodeState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VorbisDecodeState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VorbisDecodeState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VorbisDecodeState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VorbisDecodeState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VorbisDecodeState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VorbisDecodeState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VorbisDecodeState_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.audio2.ogg.vorbis.VorbisDecodeState","boot",0x46ac8ea4,"kha.audio2.ogg.vorbis.VorbisDecodeState.boot","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",29,0x1d2e7902)
HXLINE(  29)		INVALID_BITS = (int)-1;
            	}
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
