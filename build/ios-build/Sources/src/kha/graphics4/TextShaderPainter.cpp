// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "float32array.h"
#ifndef INCLUDED_kha_AlignedQuad
#include <kha/AlignedQuad.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Font
#include <kha/Font.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32Array
#include <kha/arrays/Float32Array.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_MipMapFilter
#include <kha/graphics4/MipMapFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextShaderPainter
#include <kha/graphics4/TextShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureAddressing
#include <kha/graphics4/TextureAddressing.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFilter
#include <kha/graphics4/TextureFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix3
#include <kha/math/FastMatrix3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

namespace kha{
namespace graphics4{

void TextShaderPainter_obj::__construct(::Dynamic g4){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","new",0x421e3fdc,"kha.graphics4.TextShaderPainter.new","kha/graphics4/Graphics2.hx",531,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g4,"g4")
HXLINE( 551)		this->destinationBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 550)		this->sourceBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 548)		this->bilinear = false;
HXLINE( 545)		this->myPipeline = null();
HXLINE( 554)		this->g = g4;
HXLINE( 555)		this->bufferIndex = (int)0;
HXLINE( 556)		::kha::graphics4::TextShaderPainter_obj::initShaders();
HXLINE( 557)		this->initBuffers();
HXLINE( 558)		this->projectionLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE( 559)		this->textureLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            	}

Dynamic TextShaderPainter_obj::__CreateEmpty() { return new TextShaderPainter_obj; }

hx::ObjectPtr< TextShaderPainter_obj > TextShaderPainter_obj::__new(::Dynamic g4)
{
	hx::ObjectPtr< TextShaderPainter_obj > _hx_result = new TextShaderPainter_obj();
	_hx_result->__construct(g4);
	return _hx_result;
}

Dynamic TextShaderPainter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextShaderPainter_obj > _hx_result = new TextShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::kha::graphics4::PipelineState TextShaderPainter_obj::get_pipeline(){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","get_pipeline",0xa39f302f,"kha.graphics4.TextShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",563,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 563)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,get_pipeline,return )

 ::kha::graphics4::PipelineState TextShaderPainter_obj::set_pipeline( ::kha::graphics4::PipelineState pipe){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","set_pipeline",0xb89853a3,"kha.graphics4.TextShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",566,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pipe,"pipe")
HXLINE( 567)		Bool _hx_tmp = hx::IsNull( pipe );
HXDLIN( 567)		if (_hx_tmp) {
HXLINE( 568)			this->projectionLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE( 569)			this->textureLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
            		else {
HXLINE( 572)			this->projectionLocation = pipe->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE( 573)			this->textureLocation = pipe->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
HXLINE( 575)		return (this->myPipeline = pipe);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,set_pipeline,return )

void TextShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","setProjection",0x648ae94d,"kha.graphics4.TextShaderPainter.setProjection","kha/graphics4/Graphics2.hx",579,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(projectionMatrix,"projectionMatrix")
HXLINE( 579)		this->projectionMatrix = projectionMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setProjection,(void))

void TextShaderPainter_obj::initBuffers(){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","initBuffers",0x5f3b5dbf,"kha.graphics4.TextShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",603,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 604)		Int _hx_tmp = (::kha::graphics4::TextShaderPainter_obj::bufferSize * (int)4);
HXDLIN( 604)		this->rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__new(_hx_tmp,::kha::graphics4::TextShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE( 605)		this->rectVertices = this->rectVertexBuffer->lock(null(),null());
HXLINE( 607)		Int _hx_tmp1 = ((::kha::graphics4::TextShaderPainter_obj::bufferSize * (int)3) * (int)2);
HXDLIN( 607)		this->indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__new(_hx_tmp1,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE( 608)		HX_VARI( ::Array< Int >,indices) = this->indexBuffer->lock();
HXLINE( 609)		{
HXLINE( 609)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 609)			HX_VARI( Int,_g) = ::kha::graphics4::TextShaderPainter_obj::bufferSize;
HXDLIN( 609)			while((_g1 < _g)){
HXLINE( 609)				HX_VARI( Int,i) = _g1++;
HXLINE( 610)				indices[((i * (int)3) * (int)2)] = (i * (int)4);
HXLINE( 611)				indices[(((i * (int)3) * (int)2) + (int)1)] = ((i * (int)4) + (int)1);
HXLINE( 612)				indices[(((i * (int)3) * (int)2) + (int)2)] = ((i * (int)4) + (int)2);
HXLINE( 613)				indices[(((i * (int)3) * (int)2) + (int)3)] = (i * (int)4);
HXLINE( 614)				indices[(((i * (int)3) * (int)2) + (int)4)] = ((i * (int)4) + (int)2);
HXLINE( 615)				indices[(((i * (int)3) * (int)2) + (int)5)] = ((i * (int)4) + (int)3);
            			}
            		}
HXLINE( 617)		this->indexBuffer->unlock();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,initBuffers,(void))

void TextShaderPainter_obj::setRectVertices(Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","setRectVertices",0x7c1e197b,"kha.graphics4.TextShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",624,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bottomleftx,"bottomleftx")
            	HX_STACK_ARG(bottomlefty,"bottomlefty")
            	HX_STACK_ARG(topleftx,"topleftx")
            	HX_STACK_ARG(toplefty,"toplefty")
            	HX_STACK_ARG(toprightx,"toprightx")
            	HX_STACK_ARG(toprighty,"toprighty")
            	HX_STACK_ARG(bottomrightx,"bottomrightx")
            	HX_STACK_ARG(bottomrighty,"bottomrighty")
HXLINE( 625)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * (int)9) * (int)4);
HXLINE( 626)		this->rectVertices->data.set(baseIndex,bottomleftx);
HXLINE( 627)		this->rectVertices->data.set((baseIndex + (int)1),bottomlefty);
HXLINE( 628)		this->rectVertices->data.set((baseIndex + (int)2),((Float)-5.0));
HXLINE( 630)		this->rectVertices->data.set((baseIndex + (int)9),topleftx);
HXLINE( 631)		this->rectVertices->data.set((baseIndex + (int)10),toplefty);
HXLINE( 632)		this->rectVertices->data.set((baseIndex + (int)11),((Float)-5.0));
HXLINE( 634)		this->rectVertices->data.set((baseIndex + (int)18),toprightx);
HXLINE( 635)		this->rectVertices->data.set((baseIndex + (int)19),toprighty);
HXLINE( 636)		this->rectVertices->data.set((baseIndex + (int)20),((Float)-5.0));
HXLINE( 638)		this->rectVertices->data.set((baseIndex + (int)27),bottomrightx);
HXLINE( 639)		this->rectVertices->data.set((baseIndex + (int)28),bottomrighty);
HXLINE( 640)		this->rectVertices->data.set((baseIndex + (int)29),((Float)-5.0));
            	}


HX_DEFINE_DYNAMIC_FUNC8(TextShaderPainter_obj,setRectVertices,(void))

void TextShaderPainter_obj::setRectTexCoords(Float left,Float top,Float right,Float bottom){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","setRectTexCoords",0x56b955a3,"kha.graphics4.TextShaderPainter.setRectTexCoords","kha/graphics4/Graphics2.hx",643,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(left,"left")
            	HX_STACK_ARG(top,"top")
            	HX_STACK_ARG(right,"right")
            	HX_STACK_ARG(bottom,"bottom")
HXLINE( 644)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * (int)9) * (int)4);
HXLINE( 645)		this->rectVertices->data.set((baseIndex + (int)3),left);
HXLINE( 646)		this->rectVertices->data.set((baseIndex + (int)4),bottom);
HXLINE( 648)		this->rectVertices->data.set((baseIndex + (int)12),left);
HXLINE( 649)		this->rectVertices->data.set((baseIndex + (int)13),top);
HXLINE( 651)		this->rectVertices->data.set((baseIndex + (int)21),right);
HXLINE( 652)		this->rectVertices->data.set((baseIndex + (int)22),top);
HXLINE( 654)		this->rectVertices->data.set((baseIndex + (int)30),right);
HXLINE( 655)		this->rectVertices->data.set((baseIndex + (int)31),bottom);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextShaderPainter_obj,setRectTexCoords,(void))

void TextShaderPainter_obj::setRectColors(float opacity,Int color){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","setRectColors",0x6bbe5ab2,"kha.graphics4.TextShaderPainter.setRectColors","kha/graphics4/Graphics2.hx",658,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
HXLINE( 659)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * (int)9) * (int)4);
HXLINE( 660)		HX_VARI( float,a) = (opacity * (hx::UShr(color,(int)24) * ((Float)0.00392156862745098)));
HXLINE( 661)		this->rectVertices->data.set((baseIndex + (int)5),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 662)		this->rectVertices->data.set((baseIndex + (int)6),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 663)		this->rectVertices->data.set((baseIndex + (int)7),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 664)		this->rectVertices->data.set((baseIndex + (int)8),a);
HXLINE( 666)		this->rectVertices->data.set((baseIndex + (int)14),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 667)		this->rectVertices->data.set((baseIndex + (int)15),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 668)		this->rectVertices->data.set((baseIndex + (int)16),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 669)		this->rectVertices->data.set((baseIndex + (int)17),a);
HXLINE( 671)		this->rectVertices->data.set((baseIndex + (int)23),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 672)		this->rectVertices->data.set((baseIndex + (int)24),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 673)		this->rectVertices->data.set((baseIndex + (int)25),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 674)		this->rectVertices->data.set((baseIndex + (int)26),a);
HXLINE( 676)		this->rectVertices->data.set((baseIndex + (int)32),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 677)		this->rectVertices->data.set((baseIndex + (int)33),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 678)		this->rectVertices->data.set((baseIndex + (int)34),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 679)		this->rectVertices->data.set((baseIndex + (int)35),a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextShaderPainter_obj,setRectColors,(void))

void TextShaderPainter_obj::drawBuffer(){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","drawBuffer",0x91b8f028,"kha.graphics4.TextShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",682,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 683)		this->rectVertexBuffer->unlock();
HXLINE( 684)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,this->rectVertexBuffer);
HXLINE( 685)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,this->indexBuffer);
HXLINE( 686)		 ::kha::graphics4::PipelineState _hx_tmp;
HXDLIN( 686)		 ::kha::graphics4::PipelineState _hx_tmp1 = this->get_pipeline();
HXDLIN( 686)		Bool _hx_tmp2 = hx::IsNull( _hx_tmp1 );
HXDLIN( 686)		if (_hx_tmp2) {
HXLINE( 686)			_hx_tmp = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 686)			_hx_tmp = this->get_pipeline();
            		}
HXDLIN( 686)		::kha::graphics4::Graphics_obj::setPipeline(this->g,_hx_tmp);
HXLINE( 687)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,this->lastTexture);
HXLINE( 688)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 689)		::hx::EnumBase _hx_tmp3;
HXDLIN( 689)		if (this->bilinear) {
HXLINE( 689)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 689)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 689)		::hx::EnumBase _hx_tmp4;
HXDLIN( 689)		if (this->bilinear) {
HXLINE( 689)			_hx_tmp4 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 689)			_hx_tmp4 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 689)		::kha::graphics4::Graphics_obj::setTextureParameters(this->g,this->textureLocation,::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),_hx_tmp3,_hx_tmp4,::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn());
HXLINE( 697)		Int _hx_tmp5 = ((this->bufferIndex * (int)2) * (int)3);
HXDLIN( 697)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,(int)0,_hx_tmp5);
HXLINE( 699)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,null());
HXLINE( 700)		this->bufferIndex = (int)0;
HXLINE( 701)		this->rectVertices = this->rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,drawBuffer,(void))

void TextShaderPainter_obj::setBilinearFilter(Bool bilinear){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","setBilinearFilter",0x674edb82,"kha.graphics4.TextShaderPainter.setBilinearFilter","kha/graphics4/Graphics2.hx",704,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bilinear,"bilinear")
HXLINE( 705)		this->end();
HXLINE( 706)		this->bilinear = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setBilinearFilter,(void))

void TextShaderPainter_obj::setFont(::Dynamic font){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","setFont",0xd8227c0d,"kha.graphics4.TextShaderPainter.setFont","kha/graphics4/Graphics2.hx",710,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(font,"font")
HXLINE( 710)		this->font = hx::TCast<  ::kha::Kravur >::cast(font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setFont,(void))

void TextShaderPainter_obj::startString(::String text){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","startString",0x7e56d24f,"kha.graphics4.TextShaderPainter.startString","kha/graphics4/Graphics2.hx",721,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
            	
		wtext = text.__WCStr();
	

HXLINE( 721)		this->text = text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,startString,(void))

Int TextShaderPainter_obj::charCodeAt(Int position){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","charCodeAt",0xb4b59efa,"kha.graphics4.TextShaderPainter.charCodeAt","kha/graphics4/Graphics2.hx",730,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
            	
		return wtext[position];
	

HXLINE( 730)		return this->text.charCodeAt(position);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,charCodeAt,return )

Int TextShaderPainter_obj::stringLength(){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","stringLength",0xd961e59b,"kha.graphics4.TextShaderPainter.stringLength","kha/graphics4/Graphics2.hx",739,0x0c1de808)
            	HX_STACK_THIS(this)
            	
		return wcslen(wtext);
	

HXLINE( 739)		return this->text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,stringLength,return )

void TextShaderPainter_obj::endString(){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","endString",0xf93fab88,"kha.graphics4.TextShaderPainter.endString","kha/graphics4/Graphics2.hx",748,0x0c1de808)
            	HX_STACK_THIS(this)
            	
		wtext = 0;
	

HXLINE( 748)		this->text = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,endString,(void))

void TextShaderPainter_obj::drawString(::String text,float opacity,Int color,Float x,Float y, ::kha::math::FastMatrix3 transformation,::Array< Int > fontGlyphs){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","drawString",0xd2545bf9,"kha.graphics4.TextShaderPainter.drawString","kha/graphics4/Graphics2.hx",759,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(transformation,"transformation")
            	HX_STACK_ARG(fontGlyphs,"fontGlyphs")
HXLINE( 760)		HX_VARI(  ::kha::KravurImage,font) = this->font->_get(this->fontSize,fontGlyphs);
HXLINE( 761)		HX_VARI(  ::kha::Image,tex) = font->getTexture();
HXLINE( 762)		Bool _hx_tmp;
HXDLIN( 762)		Bool _hx_tmp1 = hx::IsNotNull( this->lastTexture );
HXDLIN( 762)		if (_hx_tmp1) {
HXLINE( 762)			_hx_tmp = hx::IsNotEq( tex,this->lastTexture );
            		}
            		else {
HXLINE( 762)			_hx_tmp = false;
            		}
HXDLIN( 762)		if (_hx_tmp) {
HXLINE( 762)			this->drawBuffer();
            		}
HXLINE( 763)		this->lastTexture = tex;
HXLINE( 765)		HX_VARI( Float,xpos) = x;
HXLINE( 767)		this->startString(text);
HXLINE( 768)		{
HXLINE( 768)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 768)			HX_VARI( Int,_g) = this->stringLength();
HXDLIN( 768)			while((_g1 < _g)){
HXLINE( 768)				HX_VARI( Int,i) = _g1++;
HXLINE( 769)				Int _hx_tmp2 = this->charCodeAt(i);
HXDLIN( 769)				HX_VARI(  ::kha::AlignedQuad,q) = font->getBakedQuad(::kha::graphics4::TextShaderPainter_obj::findIndex(_hx_tmp2,fontGlyphs),xpos,y);
HXLINE( 770)				Bool _hx_tmp3 = hx::IsNotNull( q );
HXDLIN( 770)				if (_hx_tmp3) {
HXLINE( 771)					Bool _hx_tmp4 = ((this->bufferIndex + (int)1) >= ::kha::graphics4::TextShaderPainter_obj::bufferSize);
HXDLIN( 771)					if (_hx_tmp4) {
HXLINE( 771)						this->drawBuffer();
            					}
HXLINE( 772)					this->setRectColors(opacity,color);
HXLINE( 773)					Float _hx_tmp5 = q->s0;
HXDLIN( 773)					Int _hx_tmp6 = tex->get_width();
HXDLIN( 773)					Float _hx_tmp7 = (_hx_tmp5 * _hx_tmp6);
HXDLIN( 773)					Int _hx_tmp8 = tex->get_realWidth();
HXDLIN( 773)					Float _hx_tmp9 = ((Float)_hx_tmp7 / (Float)_hx_tmp8);
HXDLIN( 773)					Float _hx_tmp10 = q->t0;
HXDLIN( 773)					Int _hx_tmp11 = tex->get_height();
HXDLIN( 773)					Float _hx_tmp12 = (_hx_tmp10 * _hx_tmp11);
HXDLIN( 773)					Int _hx_tmp13 = tex->get_realHeight();
HXDLIN( 773)					Float _hx_tmp14 = ((Float)_hx_tmp12 / (Float)_hx_tmp13);
HXDLIN( 773)					Float _hx_tmp15 = q->s1;
HXDLIN( 773)					Int _hx_tmp16 = tex->get_width();
HXDLIN( 773)					Float _hx_tmp17 = (_hx_tmp15 * _hx_tmp16);
HXDLIN( 773)					Int _hx_tmp18 = tex->get_realWidth();
HXDLIN( 773)					Float _hx_tmp19 = ((Float)_hx_tmp17 / (Float)_hx_tmp18);
HXDLIN( 773)					Float _hx_tmp20 = q->t1;
HXDLIN( 773)					Int _hx_tmp21 = tex->get_height();
HXDLIN( 773)					Float _hx_tmp22 = (_hx_tmp20 * _hx_tmp21);
HXDLIN( 773)					Int _hx_tmp23 = tex->get_realHeight();
HXDLIN( 773)					this->setRectTexCoords(_hx_tmp9,_hx_tmp14,_hx_tmp19,((Float)_hx_tmp22 / (Float)_hx_tmp23));
HXLINE( 774)					float x1 = q->x0;
HXDLIN( 774)					float y1 = q->y1;
HXDLIN( 774)					HX_VARI( float,w) = (((transformation->_02 * x1) + (transformation->_12 * y1)) + transformation->_22);
HXDLIN( 774)					HX_VARI_NAME( Float,x2,"x") = ((Float)(((transformation->_00 * x1) + (transformation->_10 * y1)) + transformation->_20) / (Float)w);
HXDLIN( 774)					HX_VARI_NAME( Float,y2,"y") = ((Float)(((transformation->_01 * x1) + (transformation->_11 * y1)) + transformation->_21) / (Float)w);
HXLINE( 759)					HX_VARI( float,p0_x) = x2;
HXDLIN( 759)					HX_VARI( float,p0_y) = y2;
HXLINE( 775)					float x3 = q->x0;
HXDLIN( 775)					float y3 = q->y0;
HXDLIN( 775)					HX_VARI_NAME( float,w1,"w") = (((transformation->_02 * x3) + (transformation->_12 * y3)) + transformation->_22);
HXDLIN( 775)					HX_VARI_NAME( Float,x4,"x") = ((Float)(((transformation->_00 * x3) + (transformation->_10 * y3)) + transformation->_20) / (Float)w1);
HXDLIN( 775)					HX_VARI_NAME( Float,y4,"y") = ((Float)(((transformation->_01 * x3) + (transformation->_11 * y3)) + transformation->_21) / (Float)w1);
HXLINE( 759)					HX_VARI( float,p1_x) = x4;
HXDLIN( 759)					HX_VARI( float,p1_y) = y4;
HXLINE( 776)					float x5 = q->x1;
HXDLIN( 776)					float y5 = q->y0;
HXDLIN( 776)					HX_VARI_NAME( float,w2,"w") = (((transformation->_02 * x5) + (transformation->_12 * y5)) + transformation->_22);
HXDLIN( 776)					HX_VARI_NAME( Float,x6,"x") = ((Float)(((transformation->_00 * x5) + (transformation->_10 * y5)) + transformation->_20) / (Float)w2);
HXDLIN( 776)					HX_VARI_NAME( Float,y6,"y") = ((Float)(((transformation->_01 * x5) + (transformation->_11 * y5)) + transformation->_21) / (Float)w2);
HXLINE( 759)					HX_VARI( float,p2_x) = x6;
HXDLIN( 759)					HX_VARI( float,p2_y) = y6;
HXLINE( 777)					float x7 = q->x1;
HXDLIN( 777)					float y7 = q->y1;
HXDLIN( 777)					HX_VARI_NAME( float,w3,"w") = (((transformation->_02 * x7) + (transformation->_12 * y7)) + transformation->_22);
HXDLIN( 777)					HX_VARI_NAME( Float,x8,"x") = ((Float)(((transformation->_00 * x7) + (transformation->_10 * y7)) + transformation->_20) / (Float)w3);
HXDLIN( 777)					HX_VARI_NAME( Float,y8,"y") = ((Float)(((transformation->_01 * x7) + (transformation->_11 * y7)) + transformation->_21) / (Float)w3);
HXLINE( 759)					HX_VARI( float,p3_x) = x8;
HXDLIN( 759)					HX_VARI( float,p3_y) = y8;
HXLINE( 778)					this->setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
HXLINE( 779)					hx::AddEq(xpos,q->xadvance);
HXLINE( 780)					++this->bufferIndex;
            				}
            			}
            		}
HXLINE( 783)		this->endString();
            	}


HX_DEFINE_DYNAMIC_FUNC7(TextShaderPainter_obj,drawString,(void))

void TextShaderPainter_obj::end(){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","end",0x42177357,"kha.graphics4.TextShaderPainter.end","kha/graphics4/Graphics2.hx",786,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 787)		Bool _hx_tmp = (this->bufferIndex > (int)0);
HXDLIN( 787)		if (_hx_tmp) {
HXLINE( 787)			this->drawBuffer();
            		}
HXLINE( 788)		this->lastTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,end,(void))

 ::kha::graphics4::PipelineState TextShaderPainter_obj::shaderPipeline;

 ::kha::graphics4::VertexStructure TextShaderPainter_obj::structure;

Int TextShaderPainter_obj::bufferSize;

void TextShaderPainter_obj::initShaders(){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","initShaders",0x0d313bfa,"kha.graphics4.TextShaderPainter.initShaders","kha/graphics4/Graphics2.hx",582,0x0c1de808)
HXLINE( 583)		Bool _hx_tmp = hx::IsNotNull( ::kha::graphics4::TextShaderPainter_obj::shaderPipeline );
HXDLIN( 583)		if (_hx_tmp) {
HXLINE( 583)			return;
            		}
HXLINE( 585)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline =  ::kha::graphics4::PipelineState_obj::__new();
HXLINE( 586)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_text_frag;
HXLINE( 587)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_text_vert;
HXLINE( 589)		::kha::graphics4::TextShaderPainter_obj::structure =  ::kha::graphics4::VertexStructure_obj::__new();
HXLINE( 590)		::kha::graphics4::TextShaderPainter_obj::structure->add(HX_("vertexPosition",2d,3c,14,50),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE( 591)		::kha::graphics4::TextShaderPainter_obj::structure->add(HX_("texPosition",b0,79,ff,c7),::kha::graphics4::VertexData_obj::Float2_dyn());
HXLINE( 592)		::kha::graphics4::TextShaderPainter_obj::structure->add(HX_("vertexColor",5f,3b,98,5e),::kha::graphics4::VertexData_obj::Float4_dyn());
HXLINE( 593)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,::kha::graphics4::TextShaderPainter_obj::structure);
HXLINE( 595)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE( 596)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE( 597)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE( 598)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE( 600)		::kha::graphics4::TextShaderPainter_obj::shaderPipeline->compile();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,initShaders,(void))

Int TextShaderPainter_obj::findIndex(Int charcode,::Array< Int > fontGlyphs){
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","findIndex",0x55390095,"kha.graphics4.TextShaderPainter.findIndex","kha/graphics4/Graphics2.hx",752,0x0c1de808)
            	HX_STACK_ARG(charcode,"charcode")
            	HX_STACK_ARG(fontGlyphs,"fontGlyphs")
HXLINE( 753)		{
HXLINE( 753)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 753)			HX_VARI( Int,_g) = fontGlyphs->length;
HXDLIN( 753)			while((_g1 < _g)){
HXLINE( 753)				HX_VARI( Int,i) = _g1++;
HXLINE( 754)				if ((fontGlyphs->__get(i) == charcode)) {
HXLINE( 754)					return i;
            				}
            			}
            		}
HXLINE( 756)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TextShaderPainter_obj,findIndex,return )


TextShaderPainter_obj::TextShaderPainter_obj()
{
}

void TextShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(textureLocation,"textureLocation");
	HX_MARK_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(lastTexture,"lastTexture");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_MEMBER_NAME(fontSize,"fontSize");
	HX_MARK_MEMBER_NAME(bilinear,"bilinear");
	HX_MARK_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_MARK_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_END_CLASS();
}

void TextShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(textureLocation,"textureLocation");
	HX_VISIT_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(lastTexture,"lastTexture");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
	HX_VISIT_MEMBER_NAME(fontSize,"fontSize");
	HX_VISIT_MEMBER_NAME(bilinear,"bilinear");
	HX_VISIT_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_VISIT_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_VISIT_MEMBER_NAME(text,"text");
}

hx::Val TextShaderPainter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setFont") ) { return hx::Val( setFont_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_pipeline()); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return hx::Val( fontSize); }
		if (HX_FIELD_EQ(inName,"bilinear") ) { return hx::Val( bilinear); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endString") ) { return hx::Val( endString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return hx::Val( myPipeline); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return hx::Val( drawBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"charCodeAt") ) { return hx::Val( charCodeAt_dyn()); }
		if (HX_FIELD_EQ(inName,"drawString") ) { return hx::Val( drawString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { return hx::Val( bufferIndex); }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { return hx::Val( indexBuffer); }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { return hx::Val( lastTexture); }
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { return hx::Val( sourceBlend); }
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn()); }
		if (HX_FIELD_EQ(inName,"startString") ) { return hx::Val( startString_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { return hx::Val( rectVertices); }
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return hx::Val( get_pipeline_dyn()); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return hx::Val( set_pipeline_dyn()); }
		if (HX_FIELD_EQ(inName,"stringLength") ) { return hx::Val( stringLength_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn()); }
		if (HX_FIELD_EQ(inName,"setRectColors") ) { return hx::Val( setRectColors_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { return hx::Val( textureLocation); }
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return hx::Val( setRectVertices_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix); }
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { return hx::Val( rectVertexBuffer); }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { return hx::Val( destinationBlend); }
		if (HX_FIELD_EQ(inName,"setRectTexCoords") ) { return hx::Val( setRectTexCoords_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setBilinearFilter") ) { return hx::Val( setBilinearFilter_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return hx::Val( projectionLocation); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = structure; return true; }
		if (HX_FIELD_EQ(inName,"findIndex") ) { outValue = findIndex_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bufferSize") ) { outValue = bufferSize; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { outValue = shaderPipeline; return true; }
	}
	return false;
}

hx::Val TextShaderPainter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::kha::Kravur >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pipeline(inValue) ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { fontSize=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bilinear") ) { bilinear=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { myPipeline=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=inValue.Cast<  ::kha::graphics4::IndexBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=inValue.Cast<  ::kha::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { sourceBlend=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=inValue.Cast<  ::kha::arrays::Float32Array >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { textureLocation=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=inValue.Cast<  ::kha::graphics4::VertexBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { destinationBlend=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { projectionLocation=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bufferSize") ) { bufferSize=ioValue.Cast< Int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { shaderPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
	}
	return false;
}

void TextShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"));
	outFields->push(HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"));
	outFields->push(HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c"));
	outFields->push(HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b"));
	outFields->push(HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97"));
	outFields->push(HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54"));
	outFields->push(HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"));
	outFields->push(HX_HCSTRING("pipeline","\x22","\xbb","\x83","\x4b"));
	outFields->push(HX_HCSTRING("fontSize","\x30","\xbe","\xd1","\xce"));
	outFields->push(HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"));
	outFields->push(HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"));
	outFields->push(HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextShaderPainter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(TextShaderPainter_obj,projectionMatrix),HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0")},
	{hx::fsObject /*::kha::graphics4::ConstantLocation*/ ,(int)offsetof(TextShaderPainter_obj,projectionLocation),HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b")},
	{hx::fsObject /*::kha::graphics4::TextureUnit*/ ,(int)offsetof(TextShaderPainter_obj,textureLocation),HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c")},
	{hx::fsInt,(int)offsetof(TextShaderPainter_obj,bufferIndex),HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b")},
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(int)offsetof(TextShaderPainter_obj,rectVertexBuffer),HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97")},
	{hx::fsObject /*::kha::arrays::Float32Array*/ ,(int)offsetof(TextShaderPainter_obj,rectVertices),HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54")},
	{hx::fsObject /*::kha::graphics4::IndexBuffer*/ ,(int)offsetof(TextShaderPainter_obj,indexBuffer),HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5")},
	{hx::fsObject /*::kha::Kravur*/ ,(int)offsetof(TextShaderPainter_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(TextShaderPainter_obj,lastTexture),HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(TextShaderPainter_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(int)offsetof(TextShaderPainter_obj,myPipeline),HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9")},
	{hx::fsInt,(int)offsetof(TextShaderPainter_obj,fontSize),HX_HCSTRING("fontSize","\x30","\xbe","\xd1","\xce")},
	{hx::fsBool,(int)offsetof(TextShaderPainter_obj,bilinear),HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(TextShaderPainter_obj,sourceBlend),HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(TextShaderPainter_obj,destinationBlend),HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e")},
	{hx::fsString,(int)offsetof(TextShaderPainter_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextShaderPainter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &TextShaderPainter_obj::shaderPipeline,HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc")},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(void *) &TextShaderPainter_obj::structure,HX_HCSTRING("structure","\x33","\x54","\x4f","\x47")},
	{hx::fsInt,(void *) &TextShaderPainter_obj::bufferSize,HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextShaderPainter_obj_sMemberFields[] = {
	HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"),
	HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"),
	HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c"),
	HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b"),
	HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97"),
	HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54"),
	HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"),
	HX_HCSTRING("fontSize","\x30","\xbe","\xd1","\xce"),
	HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"),
	HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"),
	HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"),
	HX_HCSTRING("get_pipeline","\x2b","\x6f","\x9d","\x00"),
	HX_HCSTRING("set_pipeline","\x9f","\x92","\x96","\x15"),
	HX_HCSTRING("setProjection","\xd1","\xc6","\x03","\x66"),
	HX_HCSTRING("initBuffers","\x43","\x12","\xfb","\x69"),
	HX_HCSTRING("setRectVertices","\xff","\x5f","\xac","\x73"),
	HX_HCSTRING("setRectTexCoords","\x9f","\xc2","\xa8","\xfb"),
	HX_HCSTRING("setRectColors","\x36","\x38","\x37","\x6d"),
	HX_HCSTRING("drawBuffer","\x24","\x38","\x58","\x12"),
	HX_HCSTRING("setBilinearFilter","\x06","\xcb","\xde","\x13"),
	HX_HCSTRING("setFont","\x91","\x9e","\x44","\x09"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("startString","\xd3","\x86","\x16","\x89"),
	HX_HCSTRING("charCodeAt","\xf6","\xe6","\x54","\x35"),
	HX_HCSTRING("stringLength","\x97","\x24","\x60","\x36"),
	HX_HCSTRING("endString","\x0c","\x77","\x12","\x51"),
	HX_HCSTRING("drawString","\xf5","\xa3","\xf3","\x52"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	::String(null()) };

static void TextShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::bufferSize,"bufferSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::bufferSize,"bufferSize");
};

#endif

hx::Class TextShaderPainter_obj::__mClass;

static ::String TextShaderPainter_obj_sStaticFields[] = {
	HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc"),
	HX_HCSTRING("structure","\x33","\x54","\x4f","\x47"),
	HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d"),
	HX_HCSTRING("initShaders","\x7e","\xf0","\xf0","\x17"),
	HX_HCSTRING("findIndex","\x19","\xcc","\x0b","\xad"),
	::String(null())
};

void TextShaderPainter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.TextShaderPainter","\xea","\x61","\x5a","\x54");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &TextShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = TextShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextShaderPainter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextShaderPainter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextShaderPainter_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",533,0x0c1de808)
HXLINE( 533)		shaderPipeline = null();
            	}
{
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",534,0x0c1de808)
HXLINE( 534)		structure = null();
            	}
{
            	HX_STACK_FRAME("kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",537,0x0c1de808)
HXLINE( 537)		bufferSize = (int)100;
            	}
}

} // end namespace kha
} // end namespace graphics4
