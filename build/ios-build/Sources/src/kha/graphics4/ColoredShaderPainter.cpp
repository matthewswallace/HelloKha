// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "float32array.h"
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32Array
#include <kha/arrays/Float32Array.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

namespace kha{
namespace graphics4{

void ColoredShaderPainter_obj::__construct(::Dynamic g4){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","new",0x02e5b025,"kha.graphics4.ColoredShaderPainter.new","kha/graphics4/Graphics2.hx",266,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g4,"g4")
HXLINE( 289)		this->destinationBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 288)		this->sourceBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 285)		this->myPipeline = null();
HXLINE( 292)		this->g = g4;
HXLINE( 293)		this->bufferIndex = (int)0;
HXLINE( 294)		this->triangleBufferIndex = (int)0;
HXLINE( 295)		::kha::graphics4::ColoredShaderPainter_obj::initShaders();
HXLINE( 296)		this->initBuffers();
HXLINE( 297)		this->projectionLocation = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
            	}

Dynamic ColoredShaderPainter_obj::__CreateEmpty() { return new ColoredShaderPainter_obj; }

hx::ObjectPtr< ColoredShaderPainter_obj > ColoredShaderPainter_obj::__new(::Dynamic g4)
{
	hx::ObjectPtr< ColoredShaderPainter_obj > _hx_result = new ColoredShaderPainter_obj();
	_hx_result->__construct(g4);
	return _hx_result;
}

Dynamic ColoredShaderPainter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColoredShaderPainter_obj > _hx_result = new ColoredShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::kha::graphics4::PipelineState ColoredShaderPainter_obj::get_pipeline(){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","get_pipeline",0x7ba5eec6,"kha.graphics4.ColoredShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",301,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 301)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,get_pipeline,return )

 ::kha::graphics4::PipelineState ColoredShaderPainter_obj::set_pipeline( ::kha::graphics4::PipelineState pipe){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","set_pipeline",0x909f123a,"kha.graphics4.ColoredShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",304,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pipe,"pipe")
HXLINE( 305)		Bool _hx_tmp = hx::IsNull( pipe );
HXDLIN( 305)		if (_hx_tmp) {
HXLINE( 306)			this->projectionLocation = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
            		}
            		else {
HXLINE( 309)			this->projectionLocation = pipe->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
            		}
HXLINE( 311)		return (this->myPipeline = pipe);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,set_pipeline,return )

void ColoredShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","setProjection",0x926aeed6,"kha.graphics4.ColoredShaderPainter.setProjection","kha/graphics4/Graphics2.hx",315,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(projectionMatrix,"projectionMatrix")
HXLINE( 315)		this->projectionMatrix = projectionMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,setProjection,(void))

void ColoredShaderPainter_obj::initBuffers(){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","initBuffers",0x83c9bf08,"kha.graphics4.ColoredShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",338,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 339)		Int _hx_tmp = (::kha::graphics4::ColoredShaderPainter_obj::bufferSize * (int)4);
HXDLIN( 339)		this->rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__new(_hx_tmp,::kha::graphics4::ColoredShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE( 340)		this->rectVertices = this->rectVertexBuffer->lock(null(),null());
HXLINE( 342)		Int _hx_tmp1 = ((::kha::graphics4::ColoredShaderPainter_obj::bufferSize * (int)3) * (int)2);
HXDLIN( 342)		this->indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__new(_hx_tmp1,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE( 343)		HX_VARI( ::Array< Int >,indices) = this->indexBuffer->lock();
HXLINE( 344)		{
HXLINE( 344)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 344)			HX_VARI( Int,_g) = ::kha::graphics4::ColoredShaderPainter_obj::bufferSize;
HXDLIN( 344)			while((_g1 < _g)){
HXLINE( 344)				HX_VARI( Int,i) = _g1++;
HXLINE( 345)				indices[((i * (int)3) * (int)2)] = (i * (int)4);
HXLINE( 346)				indices[(((i * (int)3) * (int)2) + (int)1)] = ((i * (int)4) + (int)1);
HXLINE( 347)				indices[(((i * (int)3) * (int)2) + (int)2)] = ((i * (int)4) + (int)2);
HXLINE( 348)				indices[(((i * (int)3) * (int)2) + (int)3)] = (i * (int)4);
HXLINE( 349)				indices[(((i * (int)3) * (int)2) + (int)4)] = ((i * (int)4) + (int)2);
HXLINE( 350)				indices[(((i * (int)3) * (int)2) + (int)5)] = ((i * (int)4) + (int)3);
            			}
            		}
HXLINE( 352)		this->indexBuffer->unlock();
HXLINE( 354)		Int _hx_tmp2 = (::kha::graphics4::ColoredShaderPainter_obj::triangleBufferSize * (int)3);
HXDLIN( 354)		this->triangleVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__new(_hx_tmp2,::kha::graphics4::ColoredShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE( 355)		this->triangleVertices = this->triangleVertexBuffer->lock(null(),null());
HXLINE( 357)		Int _hx_tmp3 = (::kha::graphics4::ColoredShaderPainter_obj::triangleBufferSize * (int)3);
HXDLIN( 357)		this->triangleIndexBuffer =  ::kha::graphics4::IndexBuffer_obj::__new(_hx_tmp3,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE( 358)		HX_VARI( ::Array< Int >,triIndices) = this->triangleIndexBuffer->lock();
HXLINE( 359)		{
HXLINE( 359)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 359)			HX_VARI_NAME( Int,_g2,"_g") = ::kha::graphics4::ColoredShaderPainter_obj::bufferSize;
HXDLIN( 359)			while((_g11 < _g2)){
HXLINE( 359)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 360)				triIndices[(i1 * (int)3)] = (i1 * (int)3);
HXLINE( 361)				triIndices[((i1 * (int)3) + (int)1)] = ((i1 * (int)3) + (int)1);
HXLINE( 362)				triIndices[((i1 * (int)3) + (int)2)] = ((i1 * (int)3) + (int)2);
            			}
            		}
HXLINE( 364)		this->triangleIndexBuffer->unlock();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initBuffers,(void))

void ColoredShaderPainter_obj::setRectVertices(Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","setRectVertices",0xe6315344,"kha.graphics4.ColoredShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",371,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bottomleftx,"bottomleftx")
            	HX_STACK_ARG(bottomlefty,"bottomlefty")
            	HX_STACK_ARG(topleftx,"topleftx")
            	HX_STACK_ARG(toplefty,"toplefty")
            	HX_STACK_ARG(toprightx,"toprightx")
            	HX_STACK_ARG(toprighty,"toprighty")
            	HX_STACK_ARG(bottomrightx,"bottomrightx")
            	HX_STACK_ARG(bottomrighty,"bottomrighty")
HXLINE( 372)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * (int)7) * (int)4);
HXLINE( 373)		this->rectVertices->data.set(baseIndex,bottomleftx);
HXLINE( 374)		this->rectVertices->data.set((baseIndex + (int)1),bottomlefty);
HXLINE( 375)		this->rectVertices->data.set((baseIndex + (int)2),((Float)-5.0));
HXLINE( 377)		this->rectVertices->data.set((baseIndex + (int)7),topleftx);
HXLINE( 378)		this->rectVertices->data.set((baseIndex + (int)8),toplefty);
HXLINE( 379)		this->rectVertices->data.set((baseIndex + (int)9),((Float)-5.0));
HXLINE( 381)		this->rectVertices->data.set((baseIndex + (int)14),toprightx);
HXLINE( 382)		this->rectVertices->data.set((baseIndex + (int)15),toprighty);
HXLINE( 383)		this->rectVertices->data.set((baseIndex + (int)16),((Float)-5.0));
HXLINE( 385)		this->rectVertices->data.set((baseIndex + (int)21),bottomrightx);
HXLINE( 386)		this->rectVertices->data.set((baseIndex + (int)22),bottomrighty);
HXLINE( 387)		this->rectVertices->data.set((baseIndex + (int)23),((Float)-5.0));
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,setRectVertices,(void))

void ColoredShaderPainter_obj::setRectColors(float opacity,Int color){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","setRectColors",0x999e603b,"kha.graphics4.ColoredShaderPainter.setRectColors","kha/graphics4/Graphics2.hx",390,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
HXLINE( 391)		HX_VARI( Int,baseIndex) = ((this->bufferIndex * (int)7) * (int)4);
HXLINE( 392)		HX_VARI( float,a) = (opacity * (hx::UShr(color,(int)24) * ((Float)0.00392156862745098)));
HXLINE( 393)		this->rectVertices->data.set((baseIndex + (int)3),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 394)		this->rectVertices->data.set((baseIndex + (int)4),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 395)		this->rectVertices->data.set((baseIndex + (int)5),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 396)		this->rectVertices->data.set((baseIndex + (int)6),a);
HXLINE( 398)		this->rectVertices->data.set((baseIndex + (int)10),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 399)		this->rectVertices->data.set((baseIndex + (int)11),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 400)		this->rectVertices->data.set((baseIndex + (int)12),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 401)		this->rectVertices->data.set((baseIndex + (int)13),a);
HXLINE( 403)		this->rectVertices->data.set((baseIndex + (int)17),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 404)		this->rectVertices->data.set((baseIndex + (int)18),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 405)		this->rectVertices->data.set((baseIndex + (int)19),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 406)		this->rectVertices->data.set((baseIndex + (int)20),a);
HXLINE( 408)		this->rectVertices->data.set((baseIndex + (int)24),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 409)		this->rectVertices->data.set((baseIndex + (int)25),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 410)		this->rectVertices->data.set((baseIndex + (int)26),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 411)		this->rectVertices->data.set((baseIndex + (int)27),a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setRectColors,(void))

void ColoredShaderPainter_obj::setTriVertices(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","setTriVertices",0x2457a01d,"kha.graphics4.ColoredShaderPainter.setTriVertices","kha/graphics4/Graphics2.hx",414,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE( 415)		HX_VARI( Int,baseIndex) = ((this->triangleBufferIndex * (int)7) * (int)3);
HXLINE( 416)		this->triangleVertices->data.set(baseIndex,x1);
HXLINE( 417)		this->triangleVertices->data.set((baseIndex + (int)1),y1);
HXLINE( 418)		this->triangleVertices->data.set((baseIndex + (int)2),((Float)-5.0));
HXLINE( 420)		this->triangleVertices->data.set((baseIndex + (int)7),x2);
HXLINE( 421)		this->triangleVertices->data.set((baseIndex + (int)8),y2);
HXLINE( 422)		this->triangleVertices->data.set((baseIndex + (int)9),((Float)-5.0));
HXLINE( 424)		this->triangleVertices->data.set((baseIndex + (int)14),x3);
HXLINE( 425)		this->triangleVertices->data.set((baseIndex + (int)15),y3);
HXLINE( 426)		this->triangleVertices->data.set((baseIndex + (int)16),((Float)-5.0));
            	}


HX_DEFINE_DYNAMIC_FUNC6(ColoredShaderPainter_obj,setTriVertices,(void))

void ColoredShaderPainter_obj::setTriColors(float opacity,Int color){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","setTriColors",0xb69b94d4,"kha.graphics4.ColoredShaderPainter.setTriColors","kha/graphics4/Graphics2.hx",429,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
HXLINE( 430)		HX_VARI( Int,baseIndex) = ((this->triangleBufferIndex * (int)7) * (int)3);
HXLINE( 431)		HX_VARI( float,a) = (opacity * (hx::UShr(color,(int)24) * ((Float)0.00392156862745098)));
HXLINE( 432)		this->triangleVertices->data.set((baseIndex + (int)3),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 433)		this->triangleVertices->data.set((baseIndex + (int)4),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 434)		this->triangleVertices->data.set((baseIndex + (int)5),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 435)		this->triangleVertices->data.set((baseIndex + (int)6),a);
HXLINE( 437)		this->triangleVertices->data.set((baseIndex + (int)10),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 438)		this->triangleVertices->data.set((baseIndex + (int)11),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 439)		this->triangleVertices->data.set((baseIndex + (int)12),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 440)		this->triangleVertices->data.set((baseIndex + (int)13),a);
HXLINE( 442)		this->triangleVertices->data.set((baseIndex + (int)17),(hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098)));
HXLINE( 443)		this->triangleVertices->data.set((baseIndex + (int)18),(hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098)));
HXLINE( 444)		this->triangleVertices->data.set((baseIndex + (int)19),(((int)color & (int)(int)255) * ((Float)0.00392156862745098)));
HXLINE( 445)		this->triangleVertices->data.set((baseIndex + (int)20),a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setTriColors,(void))

void ColoredShaderPainter_obj::drawBuffer(Bool trisDone){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","drawBuffer",0xe9220aff,"kha.graphics4.ColoredShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",448,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(trisDone,"trisDone")
HXLINE( 449)		if (!(trisDone)) {
HXLINE( 449)			Bool _hx_tmp = (this->triangleBufferIndex > (int)0);
HXDLIN( 449)			if (_hx_tmp) {
HXLINE( 449)				this->drawTriBuffer(true);
            			}
            		}
HXLINE( 451)		this->rectVertexBuffer->unlock();
HXLINE( 452)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,this->rectVertexBuffer);
HXLINE( 453)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,this->indexBuffer);
HXLINE( 454)		 ::kha::graphics4::PipelineState _hx_tmp1;
HXDLIN( 454)		 ::kha::graphics4::PipelineState _hx_tmp2 = this->get_pipeline();
HXDLIN( 454)		Bool _hx_tmp3 = hx::IsNull( _hx_tmp2 );
HXDLIN( 454)		if (_hx_tmp3) {
HXLINE( 454)			_hx_tmp1 = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 454)			_hx_tmp1 = this->get_pipeline();
            		}
HXDLIN( 454)		::kha::graphics4::Graphics_obj::setPipeline(this->g,_hx_tmp1);
HXLINE( 455)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 463)		Int _hx_tmp4 = ((this->bufferIndex * (int)2) * (int)3);
HXDLIN( 463)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,(int)0,_hx_tmp4);
HXLINE( 465)		this->bufferIndex = (int)0;
HXLINE( 466)		this->rectVertices = this->rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawBuffer,(void))

void ColoredShaderPainter_obj::drawTriBuffer(Bool rectsDone){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","drawTriBuffer",0xacdf87ec,"kha.graphics4.ColoredShaderPainter.drawTriBuffer","kha/graphics4/Graphics2.hx",469,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rectsDone,"rectsDone")
HXLINE( 470)		if (!(rectsDone)) {
HXLINE( 470)			Bool _hx_tmp = (this->bufferIndex > (int)0);
HXDLIN( 470)			if (_hx_tmp) {
HXLINE( 470)				this->drawBuffer(true);
            			}
            		}
HXLINE( 472)		this->triangleVertexBuffer->unlock();
HXLINE( 473)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,this->triangleVertexBuffer);
HXLINE( 474)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,this->triangleIndexBuffer);
HXLINE( 475)		 ::kha::graphics4::PipelineState _hx_tmp1;
HXDLIN( 475)		 ::kha::graphics4::PipelineState _hx_tmp2 = this->get_pipeline();
HXDLIN( 475)		Bool _hx_tmp3 = hx::IsNull( _hx_tmp2 );
HXDLIN( 475)		if (_hx_tmp3) {
HXLINE( 475)			_hx_tmp1 = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 475)			_hx_tmp1 = this->get_pipeline();
            		}
HXDLIN( 475)		::kha::graphics4::Graphics_obj::setPipeline(this->g,_hx_tmp1);
HXLINE( 476)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 484)		Int _hx_tmp4 = (this->triangleBufferIndex * (int)3);
HXDLIN( 484)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,(int)0,_hx_tmp4);
HXLINE( 486)		this->triangleBufferIndex = (int)0;
HXLINE( 487)		this->triangleVertices = this->triangleVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawTriBuffer,(void))

void ColoredShaderPainter_obj::fillRect(float opacity,Int color,Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","fillRect",0xd64d1b62,"kha.graphics4.ColoredShaderPainter.fillRect","kha/graphics4/Graphics2.hx",494,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(bottomleftx,"bottomleftx")
            	HX_STACK_ARG(bottomlefty,"bottomlefty")
            	HX_STACK_ARG(topleftx,"topleftx")
            	HX_STACK_ARG(toplefty,"toplefty")
            	HX_STACK_ARG(toprightx,"toprightx")
            	HX_STACK_ARG(toprighty,"toprighty")
            	HX_STACK_ARG(bottomrightx,"bottomrightx")
            	HX_STACK_ARG(bottomrighty,"bottomrighty")
HXLINE( 495)		Bool _hx_tmp = (this->triangleBufferIndex > (int)0);
HXDLIN( 495)		if (_hx_tmp) {
HXLINE( 495)			this->drawTriBuffer(true);
            		}
HXLINE( 497)		Bool _hx_tmp1 = ((this->bufferIndex + (int)1) >= ::kha::graphics4::ColoredShaderPainter_obj::bufferSize);
HXDLIN( 497)		if (_hx_tmp1) {
HXLINE( 497)			this->drawBuffer(false);
            		}
HXLINE( 499)		this->setRectColors(opacity,color);
HXLINE( 500)		this->setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
HXLINE( 501)		++this->bufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC10(ColoredShaderPainter_obj,fillRect,(void))

void ColoredShaderPainter_obj::fillTriangle(float opacity,Int color,Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","fillTriangle",0x0d428406,"kha.graphics4.ColoredShaderPainter.fillTriangle","kha/graphics4/Graphics2.hx",504,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(opacity,"opacity")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE( 505)		Bool _hx_tmp = (this->bufferIndex > (int)0);
HXDLIN( 505)		if (_hx_tmp) {
HXLINE( 505)			this->drawBuffer(true);
            		}
HXLINE( 507)		Bool _hx_tmp1 = ((this->triangleBufferIndex + (int)1) >= ::kha::graphics4::ColoredShaderPainter_obj::triangleBufferSize);
HXDLIN( 507)		if (_hx_tmp1) {
HXLINE( 507)			this->drawTriBuffer(false);
            		}
HXLINE( 509)		this->setTriColors(opacity,color);
HXLINE( 510)		this->setTriVertices(x1,y1,x2,y2,x3,y3);
HXLINE( 511)		++this->triangleBufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,fillTriangle,(void))

void ColoredShaderPainter_obj::endTris(Bool rectsDone){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","endTris",0x1785fca8,"kha.graphics4.ColoredShaderPainter.endTris","kha/graphics4/Graphics2.hx",515,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rectsDone,"rectsDone")
HXLINE( 515)		Bool _hx_tmp = (this->triangleBufferIndex > (int)0);
HXDLIN( 515)		if (_hx_tmp) {
HXLINE( 515)			this->drawTriBuffer(rectsDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endTris,(void))

void ColoredShaderPainter_obj::endRects(Bool trisDone){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","endRects",0x4e4d9b0f,"kha.graphics4.ColoredShaderPainter.endRects","kha/graphics4/Graphics2.hx",519,0x0c1de808)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(trisDone,"trisDone")
HXLINE( 519)		Bool _hx_tmp = (this->bufferIndex > (int)0);
HXDLIN( 519)		if (_hx_tmp) {
HXLINE( 519)			this->drawBuffer(trisDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endRects,(void))

void ColoredShaderPainter_obj::end(){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","end",0x02dee3a0,"kha.graphics4.ColoredShaderPainter.end","kha/graphics4/Graphics2.hx",522,0x0c1de808)
            	HX_STACK_THIS(this)
HXLINE( 523)		Bool _hx_tmp = (this->triangleBufferIndex > (int)0);
HXDLIN( 523)		if (_hx_tmp) {
HXLINE( 523)			this->drawTriBuffer(false);
            		}
HXLINE( 524)		Bool _hx_tmp1 = (this->bufferIndex > (int)0);
HXDLIN( 524)		if (_hx_tmp1) {
HXLINE( 524)			this->drawBuffer(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,end,(void))

 ::kha::graphics4::PipelineState ColoredShaderPainter_obj::shaderPipeline;

 ::kha::graphics4::VertexStructure ColoredShaderPainter_obj::structure;

Int ColoredShaderPainter_obj::bufferSize;

Int ColoredShaderPainter_obj::triangleBufferSize;

void ColoredShaderPainter_obj::initShaders(){
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","initShaders",0x31bf9d43,"kha.graphics4.ColoredShaderPainter.initShaders","kha/graphics4/Graphics2.hx",318,0x0c1de808)
HXLINE( 319)		Bool _hx_tmp = hx::IsNotNull( ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline );
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 319)			return;
            		}
HXLINE( 321)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline =  ::kha::graphics4::PipelineState_obj::__new();
HXLINE( 322)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_colored_frag;
HXLINE( 323)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_colored_vert;
HXLINE( 325)		::kha::graphics4::ColoredShaderPainter_obj::structure =  ::kha::graphics4::VertexStructure_obj::__new();
HXLINE( 326)		::kha::graphics4::ColoredShaderPainter_obj::structure->add(HX_("vertexPosition",2d,3c,14,50),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE( 327)		::kha::graphics4::ColoredShaderPainter_obj::structure->add(HX_("vertexColor",5f,3b,98,5e),::kha::graphics4::VertexData_obj::Float4_dyn());
HXLINE( 328)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,::kha::graphics4::ColoredShaderPainter_obj::structure);
HXLINE( 330)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE( 331)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE( 332)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE( 333)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE( 335)		::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->compile();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initShaders,(void))


ColoredShaderPainter_obj::ColoredShaderPainter_obj()
{
}

void ColoredShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColoredShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(triangleBufferIndex,"triangleBufferIndex");
	HX_MARK_MEMBER_NAME(triangleVertexBuffer,"triangleVertexBuffer");
	HX_MARK_MEMBER_NAME(triangleVertices,"triangleVertices");
	HX_MARK_MEMBER_NAME(triangleIndexBuffer,"triangleIndexBuffer");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_MARK_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_MARK_END_CLASS();
}

void ColoredShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(triangleBufferIndex,"triangleBufferIndex");
	HX_VISIT_MEMBER_NAME(triangleVertexBuffer,"triangleVertexBuffer");
	HX_VISIT_MEMBER_NAME(triangleVertices,"triangleVertices");
	HX_VISIT_MEMBER_NAME(triangleIndexBuffer,"triangleIndexBuffer");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
	HX_VISIT_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_VISIT_MEMBER_NAME(destinationBlend,"destinationBlend");
}

hx::Val ColoredShaderPainter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endTris") ) { return hx::Val( endTris_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_pipeline()); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"endRects") ) { return hx::Val( endRects_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return hx::Val( myPipeline); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return hx::Val( drawBuffer_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { return hx::Val( bufferIndex); }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { return hx::Val( indexBuffer); }
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { return hx::Val( sourceBlend); }
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { return hx::Val( rectVertices); }
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return hx::Val( get_pipeline_dyn()); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return hx::Val( set_pipeline_dyn()); }
		if (HX_FIELD_EQ(inName,"setTriColors") ) { return hx::Val( setTriColors_dyn()); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return hx::Val( fillTriangle_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn()); }
		if (HX_FIELD_EQ(inName,"setRectColors") ) { return hx::Val( setRectColors_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriBuffer") ) { return hx::Val( drawTriBuffer_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setTriVertices") ) { return hx::Val( setTriVertices_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return hx::Val( setRectVertices_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix); }
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { return hx::Val( rectVertexBuffer); }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { return hx::Val( triangleVertices); }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { return hx::Val( destinationBlend); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return hx::Val( projectionLocation); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { return hx::Val( triangleBufferIndex); }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { return hx::Val( triangleIndexBuffer); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { return hx::Val( triangleVertexBuffer); }
	}
	return super::__Field(inName,inCallProp);
}

bool ColoredShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = structure; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bufferSize") ) { outValue = bufferSize; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { outValue = shaderPipeline; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"triangleBufferSize") ) { outValue = triangleBufferSize; return true; }
	}
	return false;
}

hx::Val ColoredShaderPainter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pipeline(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { myPipeline=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=inValue.Cast<  ::kha::graphics4::IndexBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { sourceBlend=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=inValue.Cast<  ::kha::arrays::Float32Array >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=inValue.Cast<  ::kha::graphics4::VertexBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { triangleVertices=inValue.Cast<  ::kha::arrays::Float32Array >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { destinationBlend=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { projectionLocation=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { triangleBufferIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { triangleIndexBuffer=inValue.Cast<  ::kha::graphics4::IndexBuffer >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { triangleVertexBuffer=inValue.Cast<  ::kha::graphics4::VertexBuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ColoredShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bufferSize") ) { bufferSize=ioValue.Cast< Int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { shaderPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"triangleBufferSize") ) { triangleBufferSize=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void ColoredShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"));
	outFields->push(HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"));
	outFields->push(HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b"));
	outFields->push(HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97"));
	outFields->push(HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54"));
	outFields->push(HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"));
	outFields->push(HX_HCSTRING("triangleBufferIndex","\x0a","\x6c","\xd7","\x9e"));
	outFields->push(HX_HCSTRING("triangleVertexBuffer","\x6c","\xc6","\x88","\x35"));
	outFields->push(HX_HCSTRING("triangleVertices","\xe1","\x42","\x15","\x97"));
	outFields->push(HX_HCSTRING("triangleIndexBuffer","\xca","\xa3","\x1d","\x39"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"));
	outFields->push(HX_HCSTRING("pipeline","\x22","\xbb","\x83","\x4b"));
	outFields->push(HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"));
	outFields->push(HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ColoredShaderPainter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(ColoredShaderPainter_obj,projectionMatrix),HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0")},
	{hx::fsObject /*::kha::graphics4::ConstantLocation*/ ,(int)offsetof(ColoredShaderPainter_obj,projectionLocation),HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b")},
	{hx::fsInt,(int)offsetof(ColoredShaderPainter_obj,bufferIndex),HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b")},
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(int)offsetof(ColoredShaderPainter_obj,rectVertexBuffer),HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97")},
	{hx::fsObject /*::kha::arrays::Float32Array*/ ,(int)offsetof(ColoredShaderPainter_obj,rectVertices),HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54")},
	{hx::fsObject /*::kha::graphics4::IndexBuffer*/ ,(int)offsetof(ColoredShaderPainter_obj,indexBuffer),HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5")},
	{hx::fsInt,(int)offsetof(ColoredShaderPainter_obj,triangleBufferIndex),HX_HCSTRING("triangleBufferIndex","\x0a","\x6c","\xd7","\x9e")},
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(int)offsetof(ColoredShaderPainter_obj,triangleVertexBuffer),HX_HCSTRING("triangleVertexBuffer","\x6c","\xc6","\x88","\x35")},
	{hx::fsObject /*::kha::arrays::Float32Array*/ ,(int)offsetof(ColoredShaderPainter_obj,triangleVertices),HX_HCSTRING("triangleVertices","\xe1","\x42","\x15","\x97")},
	{hx::fsObject /*::kha::graphics4::IndexBuffer*/ ,(int)offsetof(ColoredShaderPainter_obj,triangleIndexBuffer),HX_HCSTRING("triangleIndexBuffer","\xca","\xa3","\x1d","\x39")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(ColoredShaderPainter_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(int)offsetof(ColoredShaderPainter_obj,myPipeline),HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(ColoredShaderPainter_obj,sourceBlend),HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(ColoredShaderPainter_obj,destinationBlend),HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ColoredShaderPainter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &ColoredShaderPainter_obj::shaderPipeline,HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc")},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(void *) &ColoredShaderPainter_obj::structure,HX_HCSTRING("structure","\x33","\x54","\x4f","\x47")},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::bufferSize,HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d")},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::triangleBufferSize,HX_HCSTRING("triangleBufferSize","\xc9","\x16","\x78","\xab")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ColoredShaderPainter_obj_sMemberFields[] = {
	HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"),
	HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"),
	HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b"),
	HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97"),
	HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54"),
	HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"),
	HX_HCSTRING("triangleBufferIndex","\x0a","\x6c","\xd7","\x9e"),
	HX_HCSTRING("triangleVertexBuffer","\x6c","\xc6","\x88","\x35"),
	HX_HCSTRING("triangleVertices","\xe1","\x42","\x15","\x97"),
	HX_HCSTRING("triangleIndexBuffer","\xca","\xa3","\x1d","\x39"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"),
	HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"),
	HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"),
	HX_HCSTRING("get_pipeline","\x2b","\x6f","\x9d","\x00"),
	HX_HCSTRING("set_pipeline","\x9f","\x92","\x96","\x15"),
	HX_HCSTRING("setProjection","\xd1","\xc6","\x03","\x66"),
	HX_HCSTRING("initBuffers","\x43","\x12","\xfb","\x69"),
	HX_HCSTRING("setRectVertices","\xff","\x5f","\xac","\x73"),
	HX_HCSTRING("setRectColors","\x36","\x38","\x37","\x6d"),
	HX_HCSTRING("setTriVertices","\xc2","\xc3","\x7b","\x76"),
	HX_HCSTRING("setTriColors","\x39","\x15","\x93","\x3b"),
	HX_HCSTRING("drawBuffer","\x24","\x38","\x58","\x12"),
	HX_HCSTRING("drawTriBuffer","\xe7","\x5f","\x78","\x80"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("fillTriangle","\x6b","\x04","\x3a","\x92"),
	HX_HCSTRING("endTris","\x63","\x56","\x28","\x2f"),
	HX_HCSTRING("endRects","\xf4","\xc4","\xb9","\xe4"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	::String(null()) };

static void ColoredShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColoredShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
};

#endif

hx::Class ColoredShaderPainter_obj::__mClass;

static ::String ColoredShaderPainter_obj_sStaticFields[] = {
	HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc"),
	HX_HCSTRING("structure","\x33","\x54","\x4f","\x47"),
	HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d"),
	HX_HCSTRING("triangleBufferSize","\xc9","\x16","\x78","\xab"),
	HX_HCSTRING("initShaders","\x7e","\xf0","\xf0","\x17"),
	::String(null())
};

void ColoredShaderPainter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.ColoredShaderPainter","\xb3","\xb9","\x9f","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColoredShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ColoredShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ColoredShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColoredShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColoredShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColoredShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColoredShaderPainter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColoredShaderPainter_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",268,0x0c1de808)
HXLINE( 268)		shaderPipeline = null();
            	}
{
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",269,0x0c1de808)
HXLINE( 269)		structure = null();
            	}
{
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",272,0x0c1de808)
HXLINE( 272)		bufferSize = (int)100;
            	}
{
            	HX_STACK_FRAME("kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",278,0x0c1de808)
HXLINE( 278)		triangleBufferSize = (int)100;
            	}
}

} // end namespace kha
} // end namespace graphics4
