// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexElement
#include <kha/graphics4/VertexElement.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif

namespace kha{
namespace graphics4{

void VertexStructure_obj::__construct(){
            	HX_STACK_FRAME("kha.graphics4.VertexStructure","new",0x4962dad2,"kha.graphics4.VertexStructure.new","kha/graphics4/VertexStructure.hx",7,0xec7e48a0)
            	HX_STACK_THIS(this)
HXLINE(   7)		this->elements = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic VertexStructure_obj::__CreateEmpty() { return new VertexStructure_obj; }

hx::ObjectPtr< VertexStructure_obj > VertexStructure_obj::__new()
{
	hx::ObjectPtr< VertexStructure_obj > _hx_result = new VertexStructure_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic VertexStructure_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexStructure_obj > _hx_result = new VertexStructure_obj();
	_hx_result->__construct();
	return _hx_result;
}

void VertexStructure_obj::add(::String name,::hx::EnumBase data){
            	HX_STACK_FRAME("kha.graphics4.VertexStructure","add",0x4958fc93,"kha.graphics4.VertexStructure.add","kha/graphics4/VertexStructure.hx",11,0xec7e48a0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(data,"data")
HXLINE(  11)		this->elements->push( ::kha::graphics4::VertexElement_obj::__new(name,data));
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexStructure_obj,add,(void))

Int VertexStructure_obj::size(){
            	HX_STACK_FRAME("kha.graphics4.VertexStructure","size",0xf06dba0f,"kha.graphics4.VertexStructure.size","kha/graphics4/VertexStructure.hx",15,0xec7e48a0)
            	HX_STACK_THIS(this)
HXLINE(  15)		return this->elements->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexStructure_obj,size,return )

Int VertexStructure_obj::byteSize(){
            	HX_STACK_FRAME("kha.graphics4.VertexStructure","byteSize",0xf3dbe837,"kha.graphics4.VertexStructure.byteSize","kha/graphics4/VertexStructure.hx",18,0xec7e48a0)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI( Int,byteSize) = (int)0;
HXLINE(  21)		{
HXLINE(  21)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  21)			HX_VARI( Int,_g) = this->elements->length;
HXDLIN(  21)			while((_g1 < _g)){
HXLINE(  21)				HX_VARI( Int,i) = _g1++;
HXLINE(  22)				Int _hx_tmp = this->dataByteSize(this->elements->__get(i).StaticCast<  ::kha::graphics4::VertexElement >()->data);
HXDLIN(  22)				hx::AddEq(byteSize,_hx_tmp);
            			}
            		}
HXLINE(  25)		return byteSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexStructure_obj,byteSize,return )

Int VertexStructure_obj::dataByteSize(::hx::EnumBase data){
            	HX_STACK_FRAME("kha.graphics4.VertexStructure","dataByteSize",0xdfdf7381,"kha.graphics4.VertexStructure.dataByteSize","kha/graphics4/VertexStructure.hx",28,0xec7e48a0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(  29)		Int _hx_tmp = ( ( ::hx::EnumBase)(data) )->_hx_getIndex();
HXDLIN(  29)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  31)				return (int)4;
            			}
            			break;
            			case (int)1: {
HXLINE(  33)				return (int)8;
            			}
            			break;
            			case (int)2: {
HXLINE(  35)				return (int)12;
            			}
            			break;
            			case (int)3: {
HXLINE(  37)				return (int)16;
            			}
            			break;
            			case (int)4: {
HXLINE(  39)				return (int)64;
            			}
            			break;
            		}
HXLINE(  29)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexStructure_obj,dataByteSize,return )

 ::kha::graphics4::VertexElement VertexStructure_obj::get(Int index){
            	HX_STACK_FRAME("kha.graphics4.VertexStructure","get",0x495d8b08,"kha.graphics4.VertexStructure.get","kha/graphics4/VertexStructure.hx",45,0xec7e48a0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(  45)		return this->elements->__get(index).StaticCast<  ::kha::graphics4::VertexElement >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexStructure_obj,get,return )


VertexStructure_obj::VertexStructure_obj()
{
}

void VertexStructure_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexStructure);
	HX_MARK_MEMBER_NAME(elements,"elements");
	HX_MARK_END_CLASS();
}

void VertexStructure_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(elements,"elements");
}

hx::Val VertexStructure_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { return hx::Val( elements); }
		if (HX_FIELD_EQ(inName,"byteSize") ) { return hx::Val( byteSize_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dataByteSize") ) { return hx::Val( dataByteSize_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VertexStructure_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { elements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VertexStructure_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexStructure_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VertexStructure_obj,elements),HX_HCSTRING("elements","\x37","\x36","\xc4","\x83")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VertexStructure_obj_sStaticStorageInfo = 0;
#endif

static ::String VertexStructure_obj_sMemberFields[] = {
	HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("byteSize","\xe9","\x0f","\x00","\x4d"),
	HX_HCSTRING("dataByteSize","\x33","\x5c","\xf6","\xb8"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void VertexStructure_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexStructure_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexStructure_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexStructure_obj::__mClass,"__mClass");
};

#endif

hx::Class VertexStructure_obj::__mClass;

void VertexStructure_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.VertexStructure","\xe0","\xc9","\x4c","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VertexStructure_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexStructure_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexStructure_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexStructure_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexStructure_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexStructure_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
