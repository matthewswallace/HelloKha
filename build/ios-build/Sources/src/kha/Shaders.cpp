// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Blob
#include <kha/Blob.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif

namespace kha{

void Shaders_obj::__construct() { }

Dynamic Shaders_obj::__CreateEmpty() { return new Shaders_obj; }

hx::ObjectPtr< Shaders_obj > Shaders_obj::__new()
{
	hx::ObjectPtr< Shaders_obj > _hx_result = new Shaders_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Shaders_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shaders_obj > _hx_result = new Shaders_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String Shaders_obj::painter_colored_fragData;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_colored_frag;

::String Shaders_obj::painter_colored_vertData;

 ::kha::graphics4::VertexShader Shaders_obj::painter_colored_vert;

::String Shaders_obj::painter_image_fragData;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_image_frag;

::String Shaders_obj::painter_image_vertData;

 ::kha::graphics4::VertexShader Shaders_obj::painter_image_vert;

::String Shaders_obj::painter_text_fragData;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_text_frag;

::String Shaders_obj::painter_text_vertData;

 ::kha::graphics4::VertexShader Shaders_obj::painter_text_vert;

::String Shaders_obj::painter_video_fragData;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_video_frag;

::String Shaders_obj::painter_video_vertData;

 ::kha::graphics4::VertexShader Shaders_obj::painter_video_vert;

void Shaders_obj::init(){
            	HX_STACK_FRAME("kha.Shaders","init",0xd438187a,"kha.Shaders.init","kha/internal/ShadersBuilder.hx",123,0xb403e06a)
HXLINE( 142)		{
HXLINE( 123)			{
HXLINE( 142)				{
HXLINE( 123)					{
HXLINE( 142)						{
HXLINE( 123)							{
HXLINE( 144)								{
HXLINE( 145)									HX_VARI( ::String,data) = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_colored_fragData",8d,d9,25,8d))) );
HXLINE( 146)									HX_VARI(  ::haxe::io::Bytes,bytes) = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data)) );
HXLINE( 147)									::kha::Shaders_obj::painter_colored_frag =  ::kha::graphics4::FragmentShader_obj::__new(::kha::Blob_obj::fromBytes(bytes),HX_("painter_colored_frag",c3,b9,f5,d8));
            								}
HXLINE( 125)								{
HXLINE( 126)									HX_VARI_NAME( ::String,data1,"data") = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_colored_vertData",8c,a0,fc,4b))) );
HXLINE( 127)									HX_VARI_NAME(  ::haxe::io::Bytes,bytes1,"bytes") = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data1)) );
HXLINE( 128)									::kha::Shaders_obj::painter_colored_vert =  ::kha::graphics4::VertexShader_obj::__new(::kha::Blob_obj::fromBytes(bytes1),HX_("painter_colored_vert",42,55,7f,e3));
            								}
            							}
HXLINE( 144)							{
HXLINE( 145)								HX_VARI_NAME( ::String,data2,"data") = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_image_fragData",94,7a,37,e2))) );
HXLINE( 146)								HX_VARI_NAME(  ::haxe::io::Bytes,bytes2,"bytes") = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data2)) );
HXLINE( 147)								::kha::Shaders_obj::painter_image_frag =  ::kha::graphics4::FragmentShader_obj::__new(::kha::Blob_obj::fromBytes(bytes2),HX_("painter_image_frag",4a,8b,b2,a5));
            							}
            						}
HXLINE( 125)						{
HXLINE( 126)							HX_VARI_NAME( ::String,data3,"data") = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_image_vertData",93,41,0e,a1))) );
HXLINE( 127)							HX_VARI_NAME(  ::haxe::io::Bytes,bytes3,"bytes") = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data3)) );
HXLINE( 128)							::kha::Shaders_obj::painter_image_vert =  ::kha::graphics4::VertexShader_obj::__new(::kha::Blob_obj::fromBytes(bytes3),HX_("painter_image_vert",c9,26,3c,b0));
            						}
            					}
HXLINE( 144)					{
HXLINE( 145)						HX_VARI_NAME( ::String,data4,"data") = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_text_fragData",9a,ea,65,f3))) );
HXLINE( 146)						HX_VARI_NAME(  ::haxe::io::Bytes,bytes4,"bytes") = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data4)) );
HXLINE( 147)						::kha::Shaders_obj::painter_text_frag =  ::kha::graphics4::FragmentShader_obj::__new(::kha::Blob_obj::fromBytes(bytes4),HX_("painter_text_frag",50,00,9b,cc));
            					}
            				}
HXLINE( 125)				{
HXLINE( 126)					HX_VARI_NAME( ::String,data5,"data") = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_text_vertData",99,b1,3c,b2))) );
HXLINE( 127)					HX_VARI_NAME(  ::haxe::io::Bytes,bytes5,"bytes") = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data5)) );
HXLINE( 128)					::kha::Shaders_obj::painter_text_vert =  ::kha::graphics4::VertexShader_obj::__new(::kha::Blob_obj::fromBytes(bytes5),HX_("painter_text_vert",cf,9b,24,d7));
            				}
            			}
HXLINE( 144)			{
HXLINE( 145)				HX_VARI_NAME( ::String,data6,"data") = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_video_fragData",74,e1,6c,f4))) );
HXLINE( 146)				HX_VARI_NAME(  ::haxe::io::Bytes,bytes6,"bytes") = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data6)) );
HXLINE( 147)				::kha::Shaders_obj::painter_video_frag =  ::kha::graphics4::FragmentShader_obj::__new(::kha::Blob_obj::fromBytes(bytes6),HX_("painter_video_frag",2a,02,b3,75));
            			}
            		}
HXLINE( 125)		{
HXLINE( 126)			HX_VARI_NAME( ::String,data7,"data") = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),HX_("painter_video_vertData",73,a8,43,b3))) );
HXLINE( 127)			HX_VARI_NAME(  ::haxe::io::Bytes,bytes7,"bytes") = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data7)) );
HXLINE( 128)			::kha::Shaders_obj::painter_video_vert =  ::kha::graphics4::VertexShader_obj::__new(::kha::Blob_obj::fromBytes(bytes7),HX_("painter_video_vert",a9,9d,3c,80));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Shaders_obj,init,(void))


Shaders_obj::Shaders_obj()
{
}

bool Shaders_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"painter_text_frag") ) { outValue = painter_text_frag; return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vert") ) { outValue = painter_text_vert; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"painter_image_frag") ) { outValue = painter_image_frag; return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vert") ) { outValue = painter_image_vert; return true; }
		if (HX_FIELD_EQ(inName,"painter_video_frag") ) { outValue = painter_video_frag; return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vert") ) { outValue = painter_video_vert; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"painter_colored_frag") ) { outValue = painter_colored_frag; return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vert") ) { outValue = painter_colored_vert; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"painter_text_fragData") ) { outValue = painter_text_fragData; return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vertData") ) { outValue = painter_text_vertData; return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"painter_image_fragData") ) { outValue = painter_image_fragData; return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vertData") ) { outValue = painter_image_vertData; return true; }
		if (HX_FIELD_EQ(inName,"painter_video_fragData") ) { outValue = painter_video_fragData; return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vertData") ) { outValue = painter_video_vertData; return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"painter_colored_fragData") ) { outValue = painter_colored_fragData; return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vertData") ) { outValue = painter_colored_vertData; return true; }
	}
	return false;
}

bool Shaders_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"painter_text_frag") ) { painter_text_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vert") ) { painter_text_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"painter_image_frag") ) { painter_image_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vert") ) { painter_image_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_frag") ) { painter_video_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vert") ) { painter_video_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"painter_colored_frag") ) { painter_colored_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vert") ) { painter_colored_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"painter_text_fragData") ) { painter_text_fragData=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vertData") ) { painter_text_vertData=ioValue.Cast< ::String >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"painter_image_fragData") ) { painter_image_fragData=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vertData") ) { painter_image_vertData=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_fragData") ) { painter_video_fragData=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vertData") ) { painter_video_vertData=ioValue.Cast< ::String >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"painter_colored_fragData") ) { painter_colored_fragData=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vertData") ) { painter_colored_vertData=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Shaders_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Shaders_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Shaders_obj::painter_colored_fragData,HX_HCSTRING("painter_colored_fragData","\x8d","\xd9","\x25","\x8d")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_colored_frag,HX_HCSTRING("painter_colored_frag","\xc3","\xb9","\xf5","\xd8")},
	{hx::fsString,(void *) &Shaders_obj::painter_colored_vertData,HX_HCSTRING("painter_colored_vertData","\x8c","\xa0","\xfc","\x4b")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_colored_vert,HX_HCSTRING("painter_colored_vert","\x42","\x55","\x7f","\xe3")},
	{hx::fsString,(void *) &Shaders_obj::painter_image_fragData,HX_HCSTRING("painter_image_fragData","\x94","\x7a","\x37","\xe2")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_image_frag,HX_HCSTRING("painter_image_frag","\x4a","\x8b","\xb2","\xa5")},
	{hx::fsString,(void *) &Shaders_obj::painter_image_vertData,HX_HCSTRING("painter_image_vertData","\x93","\x41","\x0e","\xa1")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_image_vert,HX_HCSTRING("painter_image_vert","\xc9","\x26","\x3c","\xb0")},
	{hx::fsString,(void *) &Shaders_obj::painter_text_fragData,HX_HCSTRING("painter_text_fragData","\x9a","\xea","\x65","\xf3")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_text_frag,HX_HCSTRING("painter_text_frag","\x50","\x00","\x9b","\xcc")},
	{hx::fsString,(void *) &Shaders_obj::painter_text_vertData,HX_HCSTRING("painter_text_vertData","\x99","\xb1","\x3c","\xb2")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_text_vert,HX_HCSTRING("painter_text_vert","\xcf","\x9b","\x24","\xd7")},
	{hx::fsString,(void *) &Shaders_obj::painter_video_fragData,HX_HCSTRING("painter_video_fragData","\x74","\xe1","\x6c","\xf4")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_video_frag,HX_HCSTRING("painter_video_frag","\x2a","\x02","\xb3","\x75")},
	{hx::fsString,(void *) &Shaders_obj::painter_video_vertData,HX_HCSTRING("painter_video_vertData","\x73","\xa8","\x43","\xb3")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_video_vert,HX_HCSTRING("painter_video_vert","\xa9","\x9d","\x3c","\x80")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Shaders_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shaders_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_fragData,"painter_colored_fragData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_frag,"painter_colored_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_vertData,"painter_colored_vertData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_vert,"painter_colored_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_fragData,"painter_image_fragData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_frag,"painter_image_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_vertData,"painter_image_vertData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_vert,"painter_image_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_fragData,"painter_text_fragData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_frag,"painter_text_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_vertData,"painter_text_vertData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_vert,"painter_text_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_fragData,"painter_video_fragData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_frag,"painter_video_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_vertData,"painter_video_vertData");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_vert,"painter_video_vert");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shaders_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shaders_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_fragData,"painter_colored_fragData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_frag,"painter_colored_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_vertData,"painter_colored_vertData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_vert,"painter_colored_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_fragData,"painter_image_fragData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_frag,"painter_image_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_vertData,"painter_image_vertData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_vert,"painter_image_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_fragData,"painter_text_fragData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_frag,"painter_text_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_vertData,"painter_text_vertData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_vert,"painter_text_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_fragData,"painter_video_fragData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_frag,"painter_video_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_vertData,"painter_video_vertData");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_vert,"painter_video_vert");
};

#endif

hx::Class Shaders_obj::__mClass;

static ::String Shaders_obj_sStaticFields[] = {
	HX_HCSTRING("painter_colored_fragData","\x8d","\xd9","\x25","\x8d"),
	HX_HCSTRING("painter_colored_frag","\xc3","\xb9","\xf5","\xd8"),
	HX_HCSTRING("painter_colored_vertData","\x8c","\xa0","\xfc","\x4b"),
	HX_HCSTRING("painter_colored_vert","\x42","\x55","\x7f","\xe3"),
	HX_HCSTRING("painter_image_fragData","\x94","\x7a","\x37","\xe2"),
	HX_HCSTRING("painter_image_frag","\x4a","\x8b","\xb2","\xa5"),
	HX_HCSTRING("painter_image_vertData","\x93","\x41","\x0e","\xa1"),
	HX_HCSTRING("painter_image_vert","\xc9","\x26","\x3c","\xb0"),
	HX_HCSTRING("painter_text_fragData","\x9a","\xea","\x65","\xf3"),
	HX_HCSTRING("painter_text_frag","\x50","\x00","\x9b","\xcc"),
	HX_HCSTRING("painter_text_vertData","\x99","\xb1","\x3c","\xb2"),
	HX_HCSTRING("painter_text_vert","\xcf","\x9b","\x24","\xd7"),
	HX_HCSTRING("painter_video_fragData","\x74","\xe1","\x6c","\xf4"),
	HX_HCSTRING("painter_video_frag","\x2a","\x02","\xb3","\x75"),
	HX_HCSTRING("painter_video_vertData","\x73","\xa8","\x43","\xb3"),
	HX_HCSTRING("painter_video_vert","\xa9","\x9d","\x3c","\x80"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null())
};

void Shaders_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Shaders","\x44","\x7b","\x98","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Shaders_obj::__GetStatic;
	__mClass->mSetStaticField = &Shaders_obj::__SetStatic;
	__mClass->mMarkFunc = Shaders_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Shaders_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Shaders_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shaders_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shaders_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shaders_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Shaders_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_colored_fragData = HX_("s190:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg",94,90,11,e4);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",138,0xb403e06a)
HXLINE( 138)		painter_colored_frag = null();
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_colored_vertData = HX_("s334:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IChwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKSk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg",e9,cf,85,57);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",119,0xb403e06a)
HXLINE( 119)		painter_colored_vert = null();
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_image_fragData = HX_("s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBtZWRpdW1wIHNhbXBsZXIyRCB0ZXg7Cgp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CnZhcnlpbmcgdmVjNCBjb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgdGV4Y29sb3IgPSAodGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3IpOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK",4e,74,71,b9);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",138,0xb403e06a)
HXLINE( 138)		painter_image_frag = null();
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_image_vertData = HX_("s418:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSAocHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCkpOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGNvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg",0a,41,a8,35);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",119,0xb403e06a)
HXLINE( 119)		painter_image_vert = null();
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_text_fragData = HX_("s340:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBtZWRpdW1wIHNhbXBsZXIyRCB0ZXg7Cgp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKdmFyeWluZyB2ZWMyIHRleENvb3JkOwoKdm9pZCBtYWluKCkKewogICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCAodGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpKTsKfQoK",7f,68,bf,d6);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",138,0xb403e06a)
HXLINE( 138)		painter_text_frag = null();
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_text_vertData = HX_("s439:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IChwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKSk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo",c7,9c,14,2a);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",119,0xb403e06a)
HXLINE( 119)		painter_text_vert = null();
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_video_fragData = HX_("s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBtZWRpdW1wIHNhbXBsZXIyRCB0ZXg7Cgp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CnZhcnlpbmcgdmVjNCBjb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgdGV4Y29sb3IgPSAodGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3IpOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK",4e,74,71,b9);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",138,0xb403e06a)
HXLINE( 138)		painter_video_frag = null();
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",33,0xb403e06a)
HXLINE(  33)		painter_video_vertData = HX_("s418:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSAocHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCkpOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGNvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg",0a,41,a8,35);
            	}
{
            	HX_STACK_FRAME("kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",119,0xb403e06a)
HXLINE( 119)		painter_video_vert = null();
            	}
}

} // end namespace kha
