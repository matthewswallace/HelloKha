// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_SystemImpl
#include <kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif
#ifndef INCLUDED_kha_network_Session
#include <kha/network/Session.h>
#endif

namespace kha{
namespace input{

void Mouse_obj::__construct(){
            	HX_STACK_FRAME("kha.input.Mouse","new",0xc4b103c9,"kha.input.Mouse.new","kha/input/Mouse.hx",158,0x8b3f5089)
            	HX_STACK_THIS(this)
HXLINE( 159)		super::__construct();
HXLINE( 160)		::kha::input::Mouse_obj::instance = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic Mouse_obj::__CreateEmpty() { return new Mouse_obj; }

hx::ObjectPtr< Mouse_obj > Mouse_obj::__new()
{
	hx::ObjectPtr< Mouse_obj > _hx_result = new Mouse_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Mouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mouse_obj > _hx_result = new Mouse_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Mouse_obj::notify( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener){
            	HX_STACK_FRAME("kha.input.Mouse","notify",0xc0c4ef00,"kha.input.Mouse.notify","kha/input/Mouse.hx",13,0x8b3f5089)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(downListener,"downListener")
            	HX_STACK_ARG(upListener,"upListener")
            	HX_STACK_ARG(moveListener,"moveListener")
            	HX_STACK_ARG(wheelListener,"wheelListener")
HXLINE(  13)		this->notifyWindowed((int)0,downListener,upListener,moveListener,wheelListener);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,notify,(void))

void Mouse_obj::remove( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener){
            	HX_STACK_FRAME("kha.input.Mouse","remove",0x9394b07b,"kha.input.Mouse.remove","kha/input/Mouse.hx",17,0x8b3f5089)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(downListener,"downListener")
            	HX_STACK_ARG(upListener,"upListener")
            	HX_STACK_ARG(moveListener,"moveListener")
            	HX_STACK_ARG(wheelListener,"wheelListener")
HXLINE(  17)		this->removeWindowed((int)0,downListener,upListener,moveListener,wheelListener);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,remove,(void))

void Mouse_obj::notifyWindowed(Int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener){
            	HX_STACK_FRAME("kha.input.Mouse","notifyWindowed",0xdd4b736f,"kha.input.Mouse.notifyWindowed","kha/input/Mouse.hx",20,0x8b3f5089)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(downListener,"downListener")
            	HX_STACK_ARG(upListener,"upListener")
            	HX_STACK_ARG(moveListener,"moveListener")
            	HX_STACK_ARG(wheelListener,"wheelListener")
HXLINE(  21)		Bool _hx_tmp = hx::IsNotNull( downListener );
HXDLIN(  21)		if (_hx_tmp) {
HXLINE(  22)			Bool _hx_tmp1 = hx::IsNull( this->windowDownListeners );
HXDLIN(  22)			if (_hx_tmp1) {
HXLINE(  23)				this->windowDownListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  26)			while((this->windowDownListeners->length <= windowId)){
HXLINE(  27)				this->windowDownListeners->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  30)			this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(downListener);
            		}
HXLINE(  33)		Bool _hx_tmp2 = hx::IsNotNull( upListener );
HXDLIN(  33)		if (_hx_tmp2) {
HXLINE(  34)			Bool _hx_tmp3 = hx::IsNull( this->windowUpListeners );
HXDLIN(  34)			if (_hx_tmp3) {
HXLINE(  35)				this->windowUpListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  38)			while((this->windowUpListeners->length <= windowId)){
HXLINE(  39)				this->windowUpListeners->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  42)			this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(upListener);
            		}
HXLINE(  45)		Bool _hx_tmp4 = hx::IsNotNull( moveListener );
HXDLIN(  45)		if (_hx_tmp4) {
HXLINE(  46)			Bool _hx_tmp5 = hx::IsNull( this->windowMoveListeners );
HXDLIN(  46)			if (_hx_tmp5) {
HXLINE(  47)				this->windowMoveListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  50)			while((this->windowMoveListeners->length <= windowId)){
HXLINE(  51)				this->windowMoveListeners->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  54)			this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(moveListener);
            		}
HXLINE(  57)		Bool _hx_tmp6 = hx::IsNotNull( wheelListener );
HXDLIN(  57)		if (_hx_tmp6) {
HXLINE(  58)			Bool _hx_tmp7 = hx::IsNull( this->windowWheelListeners );
HXDLIN(  58)			if (_hx_tmp7) {
HXLINE(  59)				this->windowWheelListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  62)			while((this->windowWheelListeners->length <= windowId)){
HXLINE(  63)				this->windowWheelListeners->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  66)			this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(wheelListener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,notifyWindowed,(void))

void Mouse_obj::removeWindowed(Int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener){
            	HX_STACK_FRAME("kha.input.Mouse","removeWindowed",0xf141a7ea,"kha.input.Mouse.removeWindowed","kha/input/Mouse.hx",70,0x8b3f5089)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(downListener,"downListener")
            	HX_STACK_ARG(upListener,"upListener")
            	HX_STACK_ARG(moveListener,"moveListener")
            	HX_STACK_ARG(wheelListener,"wheelListener")
HXLINE(  71)		Bool _hx_tmp = hx::IsNotNull( downListener );
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  72)			Bool _hx_tmp1 = hx::IsNotNull( this->windowDownListeners );
HXDLIN(  72)			if (_hx_tmp1) {
HXLINE(  73)				Bool _hx_tmp2 = (windowId < this->windowDownListeners->length);
HXDLIN(  73)				if (_hx_tmp2) {
HXLINE(  74)					this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(downListener);
            				}
            				else {
HXLINE(  76)					::haxe::Log_obj::trace(((HX_("no downListeners for window \"",ab,54,8f,21) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),76,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE(  79)				::haxe::Log_obj::trace(HX_("no downListeners were ever registered",27,5b,f0,02),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),79,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE(  83)		Bool _hx_tmp3 = hx::IsNotNull( upListener );
HXDLIN(  83)		if (_hx_tmp3) {
HXLINE(  84)			Bool _hx_tmp4 = hx::IsNotNull( this->windowUpListeners );
HXDLIN(  84)			if (_hx_tmp4) {
HXLINE(  85)				Bool _hx_tmp5 = (windowId < this->windowUpListeners->length);
HXDLIN(  85)				if (_hx_tmp5) {
HXLINE(  86)					this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(upListener);
            				}
            				else {
HXLINE(  88)					::haxe::Log_obj::trace(((HX_("no upListeners for window \"",a4,97,3e,e5) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),88,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE(  91)				::haxe::Log_obj::trace(HX_("no upListeners were ever registered",20,bf,80,f7),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),91,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE(  95)		Bool _hx_tmp6 = hx::IsNotNull( moveListener );
HXDLIN(  95)		if (_hx_tmp6) {
HXLINE(  96)			Bool _hx_tmp7 = hx::IsNotNull( this->windowMoveListeners );
HXDLIN(  96)			if (_hx_tmp7) {
HXLINE(  97)				Bool _hx_tmp8 = (windowId < this->windowMoveListeners->length);
HXDLIN(  97)				if (_hx_tmp8) {
HXLINE(  98)					this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(moveListener);
            				}
            				else {
HXLINE( 100)					::haxe::Log_obj::trace(((HX_("no moveListeners for window \"",9a,fa,38,bb) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),100,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 103)				::haxe::Log_obj::trace(HX_("no moveListeners were ever registered",16,08,a8,75),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),103,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 107)		Bool _hx_tmp9 = hx::IsNotNull( wheelListener );
HXDLIN( 107)		if (_hx_tmp9) {
HXLINE( 108)			Bool _hx_tmp10 = hx::IsNotNull( this->windowWheelListeners );
HXDLIN( 108)			if (_hx_tmp10) {
HXLINE( 109)				Bool _hx_tmp11 = (windowId < this->windowWheelListeners->length);
HXDLIN( 109)				if (_hx_tmp11) {
HXLINE( 110)					this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(wheelListener);
            				}
            				else {
HXLINE( 112)					::haxe::Log_obj::trace(((HX_("no wheelListeners for window \"",c6,3b,5b,bf) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),112,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 115)				::haxe::Log_obj::trace(HX_("no wheelListeners were ever registered",42,55,f1,f8),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),115,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,removeWindowed,(void))

void Mouse_obj::lock(){
            	HX_STACK_FRAME("kha.input.Mouse","lock",0x54e76462,"kha.input.Mouse.lock","kha/input/Mouse.hx",120,0x8b3f5089)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,lock,(void))

void Mouse_obj::unlock(){
            	HX_STACK_FRAME("kha.input.Mouse","unlock",0xf498b6fb,"kha.input.Mouse.unlock","kha/input/Mouse.hx",124,0x8b3f5089)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,unlock,(void))

Bool Mouse_obj::canLock(){
            	HX_STACK_FRAME("kha.input.Mouse","canLock",0x01952004,"kha.input.Mouse.canLock","kha/input/Mouse.hx",129,0x8b3f5089)
            	HX_STACK_THIS(this)
HXLINE( 129)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,canLock,return )

Bool Mouse_obj::isLocked(){
            	HX_STACK_FRAME("kha.input.Mouse","isLocked",0x2b93708b,"kha.input.Mouse.isLocked","kha/input/Mouse.hx",133,0x8b3f5089)
            	HX_STACK_THIS(this)
HXLINE( 133)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,isLocked,return )

void Mouse_obj::notifyOnLockChange( ::Dynamic func, ::Dynamic error){
            	HX_STACK_FRAME("kha.input.Mouse","notifyOnLockChange",0x2e5e40da,"kha.input.Mouse.notifyOnLockChange","kha/input/Mouse.hx",136,0x8b3f5089)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(error,"error")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,notifyOnLockChange,(void))

void Mouse_obj::removeFromLockChange( ::Dynamic func, ::Dynamic error){
            	HX_STACK_FRAME("kha.input.Mouse","removeFromLockChange",0x65e93ba0,"kha.input.Mouse.removeFromLockChange","kha/input/Mouse.hx",140,0x8b3f5089)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(error,"error")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,removeFromLockChange,(void))

void Mouse_obj::hideSystemCursor(){
            	HX_STACK_FRAME("kha.input.Mouse","hideSystemCursor",0xe7b1b1fe,"kha.input.Mouse.hideSystemCursor","kha/input/Mouse.hx",144,0x8b3f5089)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,hideSystemCursor,(void))

void Mouse_obj::showSystemCursor(){
            	HX_STACK_FRAME("kha.input.Mouse","showSystemCursor",0x26c33eb9,"kha.input.Mouse.showSystemCursor","kha/input/Mouse.hx",148,0x8b3f5089)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,showSystemCursor,(void))

void Mouse_obj::sendDownEvent(Int windowId,Int button,Int x,Int y){
            	HX_STACK_FRAME("kha.input.Mouse","sendDownEvent",0xd589f699,"kha.input.Mouse.sendDownEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  98)		Bool _hx_tmp = hx::IsNotNull( ::kha::network::Session_obj::the() );
HXDLIN(  98)		if (_hx_tmp) {
HXLINE(  49)			HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((int)20);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)0;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				bytes->b[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = button;
HXDLIN(  61)				bytes->b[(int)9] = ((int)button >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)10] = ((int)button >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)11] = hx::UShr(button,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)12] = x;
HXDLIN(  61)				bytes->b[(int)13] = ((int)x >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)14] = ((int)x >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)15] = hx::UShr(x,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)16] = y;
HXDLIN(  61)				bytes->b[(int)17] = ((int)y >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)18] = ((int)y >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)19] = hx::UShr(y,(int)24);
            			}
HXLINE( 100)			Int _hx_tmp1 = this->_id();
HXDLIN( 100)			::kha::network::Session_obj::the()->sendControllerUpdate(_hx_tmp1,bytes);
            		}
HXLINE( 165)		Bool _hx_tmp2 = hx::IsNotNull( this->windowDownListeners );
HXDLIN( 165)		if (_hx_tmp2) {
HXLINE( 166)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 166)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 166)			while((_g < _g1->length)){
HXLINE( 166)				HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 166)				++_g;
HXLINE( 167)				listener(button,x,y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,sendDownEvent,(void))

void Mouse_obj::sendUpEvent(Int windowId,Int button,Int x,Int y){
            	HX_STACK_FRAME("kha.input.Mouse","sendUpEvent",0xe2927fc0,"kha.input.Mouse.sendUpEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(button,"button")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  98)		Bool _hx_tmp = hx::IsNotNull( ::kha::network::Session_obj::the() );
HXDLIN(  98)		if (_hx_tmp) {
HXLINE(  49)			HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((int)20);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)1;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				bytes->b[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = button;
HXDLIN(  61)				bytes->b[(int)9] = ((int)button >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)10] = ((int)button >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)11] = hx::UShr(button,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)12] = x;
HXDLIN(  61)				bytes->b[(int)13] = ((int)x >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)14] = ((int)x >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)15] = hx::UShr(x,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)16] = y;
HXDLIN(  61)				bytes->b[(int)17] = ((int)y >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)18] = ((int)y >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)19] = hx::UShr(y,(int)24);
            			}
HXLINE( 100)			Int _hx_tmp1 = this->_id();
HXDLIN( 100)			::kha::network::Session_obj::the()->sendControllerUpdate(_hx_tmp1,bytes);
            		}
HXLINE( 174)		Bool _hx_tmp2 = hx::IsNotNull( this->windowUpListeners );
HXDLIN( 174)		if (_hx_tmp2) {
HXLINE( 175)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 175)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 175)			while((_g < _g1->length)){
HXLINE( 175)				HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 175)				++_g;
HXLINE( 176)				listener(button,x,y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,sendUpEvent,(void))

void Mouse_obj::sendMoveEvent(Int windowId,Int x,Int y,Int movementX,Int movementY){
            	HX_STACK_FRAME("kha.input.Mouse","sendMoveEvent",0x7d3af18a,"kha.input.Mouse.sendMoveEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(movementX,"movementX")
            	HX_STACK_ARG(movementY,"movementY")
HXLINE(  98)		Bool _hx_tmp = hx::IsNotNull( ::kha::network::Session_obj::the() );
HXDLIN(  98)		if (_hx_tmp) {
HXLINE(  49)			HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((int)24);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)2;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				bytes->b[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = x;
HXDLIN(  61)				bytes->b[(int)9] = ((int)x >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)10] = ((int)x >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)11] = hx::UShr(x,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)12] = y;
HXDLIN(  61)				bytes->b[(int)13] = ((int)y >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)14] = ((int)y >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)15] = hx::UShr(y,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)16] = movementX;
HXDLIN(  61)				bytes->b[(int)17] = ((int)movementX >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)18] = ((int)movementX >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)19] = hx::UShr(movementX,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)20] = movementY;
HXDLIN(  61)				bytes->b[(int)21] = ((int)movementY >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)22] = ((int)movementY >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)23] = hx::UShr(movementY,(int)24);
            			}
HXLINE( 100)			Int _hx_tmp1 = this->_id();
HXDLIN( 100)			::kha::network::Session_obj::the()->sendControllerUpdate(_hx_tmp1,bytes);
            		}
HXLINE( 183)		Bool _hx_tmp2 = hx::IsNotNull( this->windowMoveListeners );
HXDLIN( 183)		if (_hx_tmp2) {
HXLINE( 184)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 184)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 184)			while((_g < _g1->length)){
HXLINE( 184)				HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 184)				++_g;
HXLINE( 185)				listener(x,y,movementX,movementY);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,sendMoveEvent,(void))

void Mouse_obj::sendWheelEvent(Int windowId,Int delta){
            	HX_STACK_FRAME("kha.input.Mouse","sendWheelEvent",0x74cc101e,"kha.input.Mouse.sendWheelEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(windowId,"windowId")
            	HX_STACK_ARG(delta,"delta")
HXLINE(  98)		Bool _hx_tmp = hx::IsNotNull( ::kha::network::Session_obj::the() );
HXDLIN(  98)		if (_hx_tmp) {
HXLINE(  49)			HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((int)12);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)3;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				bytes->b[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = delta;
HXDLIN(  61)				bytes->b[(int)9] = ((int)delta >> (int)(int)8);
HXDLIN(  61)				bytes->b[(int)10] = ((int)delta >> (int)(int)16);
HXDLIN(  61)				bytes->b[(int)11] = hx::UShr(delta,(int)24);
            			}
HXLINE( 100)			Int _hx_tmp1 = this->_id();
HXDLIN( 100)			::kha::network::Session_obj::the()->sendControllerUpdate(_hx_tmp1,bytes);
            		}
HXLINE( 192)		Bool _hx_tmp2 = hx::IsNotNull( this->windowWheelListeners );
HXDLIN( 192)		if (_hx_tmp2) {
HXLINE( 193)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 193)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 193)			while((_g < _g1->length)){
HXLINE( 193)				HX_VARI(  ::Dynamic,listener) = _g1->__get(_g);
HXDLIN( 193)				++_g;
HXLINE( 194)				listener(delta);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,sendWheelEvent,(void))

void Mouse_obj::_receive( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("kha.input.Mouse","_receive",0xdd738b5b,"kha.input.Mouse._receive","kha/network/ControllerBuilder.hx",271,0x77f946ab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	}


 ::kha::input::Mouse Mouse_obj::get(hx::Null< Int >  __o_num){
Int num = __o_num.Default(0);
            	HX_STACK_FRAME("kha.input.Mouse","get",0xc4abb3ff,"kha.input.Mouse.get","kha/input/Mouse.hx",9,0x8b3f5089)
            	HX_STACK_ARG(num,"num")
HXLINE(   9)		return ::kha::SystemImpl_obj::getMouse(num);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,get,return )

 ::kha::input::Mouse Mouse_obj::instance;


Mouse_obj::Mouse_obj()
{
}

void Mouse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mouse);
	HX_MARK_MEMBER_NAME(windowDownListeners,"windowDownListeners");
	HX_MARK_MEMBER_NAME(windowUpListeners,"windowUpListeners");
	HX_MARK_MEMBER_NAME(windowMoveListeners,"windowMoveListeners");
	HX_MARK_MEMBER_NAME(windowWheelListeners,"windowWheelListeners");
	 ::kha::network::Controller_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mouse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(windowDownListeners,"windowDownListeners");
	HX_VISIT_MEMBER_NAME(windowUpListeners,"windowUpListeners");
	HX_VISIT_MEMBER_NAME(windowMoveListeners,"windowMoveListeners");
	HX_VISIT_MEMBER_NAME(windowWheelListeners,"windowWheelListeners");
	 ::kha::network::Controller_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mouse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"notify") ) { return hx::Val( notify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canLock") ) { return hx::Val( canLock_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isLocked") ) { return hx::Val( isLocked_dyn()); }
		if (HX_FIELD_EQ(inName,"_receive") ) { return hx::Val( _receive_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sendUpEvent") ) { return hx::Val( sendUpEvent_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sendDownEvent") ) { return hx::Val( sendDownEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"sendMoveEvent") ) { return hx::Val( sendMoveEvent_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"notifyWindowed") ) { return hx::Val( notifyWindowed_dyn()); }
		if (HX_FIELD_EQ(inName,"removeWindowed") ) { return hx::Val( removeWindowed_dyn()); }
		if (HX_FIELD_EQ(inName,"sendWheelEvent") ) { return hx::Val( sendWheelEvent_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hideSystemCursor") ) { return hx::Val( hideSystemCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"showSystemCursor") ) { return hx::Val( showSystemCursor_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"windowUpListeners") ) { return hx::Val( windowUpListeners); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"notifyOnLockChange") ) { return hx::Val( notifyOnLockChange_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"windowDownListeners") ) { return hx::Val( windowDownListeners); }
		if (HX_FIELD_EQ(inName,"windowMoveListeners") ) { return hx::Val( windowMoveListeners); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"removeFromLockChange") ) { return hx::Val( removeFromLockChange_dyn()); }
		if (HX_FIELD_EQ(inName,"windowWheelListeners") ) { return hx::Val( windowWheelListeners); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mouse_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = instance; return true; }
	}
	return false;
}

hx::Val Mouse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"windowUpListeners") ) { windowUpListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"windowDownListeners") ) { windowDownListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowMoveListeners") ) { windowMoveListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"windowWheelListeners") ) { windowWheelListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Mouse_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::kha::input::Mouse >(); return true; }
	}
	return false;
}

void Mouse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("windowDownListeners","\xad","\x36","\x38","\x35"));
	outFields->push(HX_HCSTRING("windowUpListeners","\x94","\x65","\x2c","\xf0"));
	outFields->push(HX_HCSTRING("windowMoveListeners","\x1e","\xfe","\x7f","\x65"));
	outFields->push(HX_HCSTRING("windowWheelListeners","\x74","\x51","\x5a","\x54"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mouse_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowDownListeners),HX_HCSTRING("windowDownListeners","\xad","\x36","\x38","\x35")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowUpListeners),HX_HCSTRING("windowUpListeners","\x94","\x65","\x2c","\xf0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowMoveListeners),HX_HCSTRING("windowMoveListeners","\x1e","\xfe","\x7f","\x65")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowWheelListeners),HX_HCSTRING("windowWheelListeners","\x74","\x51","\x5a","\x54")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Mouse_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::input::Mouse*/ ,(void *) &Mouse_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Mouse_obj_sMemberFields[] = {
	HX_HCSTRING("notify","\xc9","\xda","\xb8","\x31"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("notifyWindowed","\x38","\xd0","\x2d","\x34"),
	HX_HCSTRING("removeWindowed","\xb3","\x04","\x24","\x48"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("canLock","\x1b","\x84","\x0f","\x66"),
	HX_HCSTRING("isLocked","\x94","\xa0","\x30","\xb2"),
	HX_HCSTRING("notifyOnLockChange","\x23","\x36","\x29","\x37"),
	HX_HCSTRING("removeFromLockChange","\x29","\xd5","\x52","\x6f"),
	HX_HCSTRING("hideSystemCursor","\x07","\x93","\x7b","\x81"),
	HX_HCSTRING("showSystemCursor","\xc2","\x1f","\x8d","\xc0"),
	HX_HCSTRING("windowDownListeners","\xad","\x36","\x38","\x35"),
	HX_HCSTRING("windowUpListeners","\x94","\x65","\x2c","\xf0"),
	HX_HCSTRING("windowMoveListeners","\x1e","\xfe","\x7f","\x65"),
	HX_HCSTRING("windowWheelListeners","\x74","\x51","\x5a","\x54"),
	HX_HCSTRING("sendDownEvent","\xf0","\x05","\x55","\xf0"),
	HX_HCSTRING("sendUpEvent","\x57","\x3b","\x46","\x5c"),
	HX_HCSTRING("sendMoveEvent","\xe1","\x00","\x06","\x98"),
	HX_HCSTRING("sendWheelEvent","\xe7","\x6c","\xae","\xcb"),
	HX_HCSTRING("_receive","\x64","\xbb","\x10","\x64"),
	::String(null()) };

static void Mouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Mouse_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Mouse_obj::instance,"instance");
};

#endif

hx::Class Mouse_obj::__mClass;

static ::String Mouse_obj_sStaticFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	::String(null())
};

void Mouse_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.input.Mouse","\x57","\x6b","\x87","\x5e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mouse_obj::__GetStatic;
	__mClass->mSetStaticField = &Mouse_obj::__SetStatic;
	__mClass->mMarkFunc = Mouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mouse_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mouse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mouse_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.input.Mouse","boot",0x4e4b4ca9,"kha.input.Mouse.boot","kha/input/Mouse.hx",7,0x8b3f5089)
HXLINE(   7)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("sendMoveEvent",e1,00,06,98), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(1,HX_("sendWheelEvent",e7,6c,ae,cb), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(2,HX_("sendDownEvent",f0,05,55,f0), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(3,HX_("sendUpEvent",57,3b,46,5c), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null()))))));
            	}
}

} // end namespace kha
} // end namespace input
