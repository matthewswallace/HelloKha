// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Video
#include <kha/Video.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics1_Graphics
#include <kha/graphics1/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics1
#include <kha/graphics2/Graphics1.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_kore_Video
#include <kha/kore/Video.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics
#include <kha/kore/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics2
#include <kha/kore/graphics4/Graphics2.h>
#endif

namespace kha{

void Image_obj::__construct(Bool readable){
            	HX_STACK_FRAME("kha.Image","new",0xf6cb14e3,"kha.Image.new","kha/Image.hx",15,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(readable,"readable")
HXLINE( 235)		this->bytes = null();
HXLINE(  47)		this->readable = readable;
            	}

Dynamic Image_obj::__CreateEmpty() { return new Image_obj; }

hx::ObjectPtr< Image_obj > Image_obj::__new(Bool readable)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(readable);
	return _hx_result;
}

Dynamic Image_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::kha::Canvas_obj _hx_kha_Image__hx_kha_Canvas= {
	( Int (hx::Object::*)())&::kha::Image_obj::get_width,
	( Int (hx::Object::*)())&::kha::Image_obj::get_height,
	( ::Dynamic (hx::Object::*)())&::kha::Image_obj::get_g1,
	(  ::kha::graphics2::Graphics (hx::Object::*)())&::kha::Image_obj::get_g2,
	( ::Dynamic (hx::Object::*)())&::kha::Image_obj::get_g4,
};

static ::kha::Resource_obj _hx_kha_Image__hx_kha_Resource= {
	( void (hx::Object::*)())&::kha::Image_obj::unload,
};

void *Image_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x36d1dbdc: return &_hx_kha_Image__hx_kha_Canvas;
		case (int)0xf962acd2: return &_hx_kha_Image__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Image_obj::initRenderTarget(Int width,Int height,Int depthBufferBits,Int format,Int stencilBufferBits,Int contextId){
            	HX_STACK_FRAME("kha.Image","initRenderTarget",0x9d84bc14,"kha.Image.initRenderTarget","kha/Image.hx",112,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(depthBufferBits,"depthBufferBits")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(stencilBufferBits,"stencilBufferBits")
            	HX_STACK_ARG(contextId,"contextId")
            	renderTarget = new Kore::RenderTarget(width, height, depthBufferBits, false, (Kore::RenderTargetFormat)format, stencilBufferBits, contextId); texture = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC6(Image_obj,initRenderTarget,(void))

void Image_obj::init(Int width,Int height,Int format){
            	HX_STACK_FRAME("kha.Image","init",0xf79fe92d,"kha.Image.init","kha/Image.hx",117,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	texture = new Kore::Texture(width, height, (Kore::Image::Format)format, readable); renderTarget = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,init,(void))

void Image_obj::init3D(Int width,Int height,Int depth,Int format){
            	HX_STACK_FRAME("kha.Image","init3D",0x0e4e7b1e,"kha.Image.init3D","kha/Image.hx",122,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(format,"format")
            	texture = new Kore::Texture(width, height, depth, (Kore::Image::Format)format, readable); renderTarget = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,init3D,(void))

void Image_obj::initVideo( ::kha::kore::Video video){
            	HX_STACK_FRAME("kha.Image","initVideo",0xf74c380e,"kha.Image.initVideo","kha/Image.hx",127,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(video,"video")
            	texture = video->video->currentImage(); renderTarget = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,initVideo,(void))

void Image_obj::initFromFile(::String filename){
            	HX_STACK_FRAME("kha.Image","initFromFile",0x76d9b753,"kha.Image.initFromFile","kha/Image.hx",140,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filename,"filename")
            	texture = new Kore::Texture(filename.c_str(), readable);

            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,initFromFile,(void))

::Dynamic Image_obj::get_g1(){
            	HX_STACK_FRAME("kha.Image","get_g1",0x1a322090,"kha.Image.get_g1","kha/Image.hx",146,0xc9b7c0ee)
            	HX_STACK_THIS(this)
HXLINE( 147)		Bool _hx_tmp = hx::IsNull( this->graphics1 );
HXDLIN( 147)		if (_hx_tmp) {
HXLINE( 148)			this->graphics1 =  ::kha::graphics2::Graphics1_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 150)		return this->graphics1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_g1,return )

 ::kha::graphics2::Graphics Image_obj::get_g2(){
            	HX_STACK_FRAME("kha.Image","get_g2",0x1a322091,"kha.Image.get_g2","kha/Image.hx",155,0xc9b7c0ee)
            	HX_STACK_THIS(this)
HXLINE( 156)		Bool _hx_tmp = hx::IsNull( this->graphics2 );
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 157)			this->graphics2 =  ::kha::kore::graphics4::Graphics2_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 159)		return this->graphics2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_g2,return )

::Dynamic Image_obj::get_g4(){
            	HX_STACK_FRAME("kha.Image","get_g4",0x1a322093,"kha.Image.get_g4","kha/Image.hx",164,0xc9b7c0ee)
            	HX_STACK_THIS(this)
HXLINE( 165)		Bool _hx_tmp = hx::IsNull( this->graphics4 );
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 166)			this->graphics4 =  ::kha::kore::graphics4::Graphics_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 168)		return this->graphics4;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_g4,return )

Int Image_obj::get_width(){
            	HX_STACK_FRAME("kha.Image","get_width",0xb2ca1b20,"kha.Image.get_width","kha/Image.hx",190,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	if (texture != nullptr) return texture->width; else return renderTarget->width;

HXLINE( 190)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_width,return )

Int Image_obj::get_height(){
            	HX_STACK_FRAME("kha.Image","get_height",0x745d198d,"kha.Image.get_height","kha/Image.hx",195,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	if (texture != nullptr) return texture->height; else return renderTarget->height;

HXLINE( 195)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_height,return )

Int Image_obj::get_depth(){
            	HX_STACK_FRAME("kha.Image","get_depth",0xbf91561d,"kha.Image.get_depth","kha/Image.hx",200,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	if (texture != nullptr) return texture->depth; else return 0;

HXLINE( 200)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_depth,return )

Int Image_obj::get_realWidth(){
            	HX_STACK_FRAME("kha.Image","get_realWidth",0xe70ddfe2,"kha.Image.get_realWidth","kha/Image.hx",208,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	if (texture != nullptr) return texture->texWidth; else return renderTarget->texWidth;

HXLINE( 208)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_realWidth,return )

Int Image_obj::get_realHeight(){
            	HX_STACK_FRAME("kha.Image","get_realHeight",0xfb657e8b,"kha.Image.get_realHeight","kha/Image.hx",213,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	if (texture != nullptr) return texture->texHeight; else return renderTarget->texHeight;

HXLINE( 213)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_realHeight,return )

Bool Image_obj::isOpaque(Int x,Int y){
            	HX_STACK_FRAME("kha.Image","isOpaque",0x56cdf908,"kha.Image.isOpaque","kha/Image.hx",218,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	return (texture->at(x, y) & 0xff) != 0;

HXLINE( 218)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,isOpaque,return )

Int Image_obj::atInternal(Int x,Int y){
            	HX_STACK_FRAME("kha.Image","atInternal",0xf54cc52d,"kha.Image.atInternal","kha/Image.hx",223,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	return texture->at(x, y);

HXLINE( 223)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,atInternal,return )

Int Image_obj::at(Int x,Int y){
            	HX_STACK_FRAME("kha.Image","at",0xf6c651d0,"kha.Image.at","kha/Image.hx",227,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 227)		Int value = this->atInternal(x,y);
HXDLIN( 227)		return ::kha::_Color::Color_Impl__obj::_new(value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,at,return )

void Image_obj::unload(){
            	HX_STACK_FRAME("kha.Image","unload",0xdc8ed05c,"kha.Image.unload","kha/Image.hx",231,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	delete texture; texture = nullptr; delete renderTarget; renderTarget = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,unload,(void))

 ::haxe::io::Bytes Image_obj::lock(hx::Null< Int >  __o_level){
Int level = __o_level.Default(0);
            	HX_STACK_FRAME("kha.Image","lock",0xf99c4a08,"kha.Image.lock","kha/Image.hx",237,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(level,"level")
HXLINE( 238)		Int _hx_tmp;
HXDLIN( 238)		if (hx::IsEq( this->format,::kha::graphics4::TextureFormat_obj::RGBA32_dyn() )) {
HXLINE( 238)			Int _hx_tmp1 = this->get_width();
HXDLIN( 238)			Int _hx_tmp2 = ((int)4 * _hx_tmp1);
HXDLIN( 238)			Int _hx_tmp3 = this->get_height();
HXDLIN( 238)			_hx_tmp = (_hx_tmp2 * _hx_tmp3);
            		}
            		else {
HXLINE( 238)			Int _hx_tmp4 = this->get_width();
HXDLIN( 238)			Int _hx_tmp5 = this->get_height();
HXDLIN( 238)			_hx_tmp = (_hx_tmp4 * _hx_tmp5);
            		}
HXDLIN( 238)		this->bytes = ::haxe::io::Bytes_obj::alloc(_hx_tmp);
HXLINE( 239)		return this->bytes;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,lock,return )

void Image_obj::unlock(){
            	HX_STACK_FRAME("kha.Image","unlock",0xdc8ed221,"kha.Image.unlock","kha/Image.hx",249,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	
		Kore::u8* b = bytes->b->Pointer();
		Kore::u8* tex = texture->lock();
		for (int i = 0; i < ((texture->format == Kore::Image::RGBA32) ? (4 * texture->width * texture->height) : (texture->width * texture->height)); ++i) tex[i] = b[i];
		texture->unlock();
	

HXLINE( 249)		this->bytes = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,unlock,(void))

void Image_obj::generateMipmaps(Int levels){
            	HX_STACK_FRAME("kha.Image","generateMipmaps",0x70db7039,"kha.Image.generateMipmaps","kha/Image.hx",253,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(levels,"levels")
HXLINE( 253)		texture->generateMipmaps(levels);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,generateMipmaps,(void))

void Image_obj::setMipmaps(::Array< ::Dynamic> mipmaps){
            	HX_STACK_FRAME("kha.Image","setMipmaps",0x49bc7046,"kha.Image.setMipmaps","kha/Image.hx",257,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mipmaps,"mipmaps")
HXLINE( 257)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 257)		HX_VARI( Int,_g) = mipmaps->length;
HXDLIN( 257)		while((_g1 < _g)){
HXLINE( 257)			HX_VARI( Int,i) = _g1++;
HXLINE( 258)			HX_VARI(  ::kha::Image,image) = mipmaps->__get(i).StaticCast<  ::kha::Image >();
HXLINE( 259)			HX_VARI( Int,level) = (i + (int)1);
HXLINE( 260)			texture->setMipmap(image->texture, level);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,setMipmaps,(void))

void Image_obj::setDepthStencilFrom( ::kha::Image image){
            	HX_STACK_FRAME("kha.Image","setDepthStencilFrom",0x899de388,"kha.Image.setDepthStencilFrom","kha/Image.hx",265,0xc9b7c0ee)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(image,"image")
HXLINE( 265)		renderTarget->setDepthStencilFrom(image->renderTarget);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,setDepthStencilFrom,(void))

 ::kha::Image Image_obj::createFromVideo( ::kha::Video video){
            	HX_STACK_FRAME("kha.Image","createFromVideo",0xac473518,"kha.Image.createFromVideo","kha/Image.hx",23,0xc9b7c0ee)
            	HX_STACK_ARG(video,"video")
HXLINE(  24)		HX_VARI(  ::kha::Image,image) =  ::kha::Image_obj::__new(false);
HXLINE(  25)		image->format = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXLINE(  26)		image->initVideo(video);
HXLINE(  27)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,createFromVideo,return )

 ::kha::Image Image_obj::create(Int width,Int height,::hx::EnumBase format,::hx::EnumBase usage){
            	HX_STACK_FRAME("kha.Image","create",0xf3119659,"kha.Image.create","kha/Image.hx",31,0xc9b7c0ee)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(usage,"usage")
HXLINE(  31)		::hx::EnumBase _hx_tmp;
HXDLIN(  31)		Bool _hx_tmp1 = hx::IsNull( format );
HXDLIN(  31)		if (_hx_tmp1) {
HXLINE(  31)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		else {
HXLINE(  31)			_hx_tmp = format;
            		}
HXDLIN(  31)		return ::kha::Image_obj::create2(width,height,_hx_tmp,false,false,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_obj,create,return )

 ::kha::Image Image_obj::create3D(Int width,Int height,Int depth,::hx::EnumBase format,::hx::EnumBase usage){
            	HX_STACK_FRAME("kha.Image","create3D",0x0b66cb4a,"kha.Image.create3D","kha/Image.hx",35,0xc9b7c0ee)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(usage,"usage")
HXLINE(  35)		::hx::EnumBase _hx_tmp;
HXDLIN(  35)		Bool _hx_tmp1 = hx::IsNull( format );
HXDLIN(  35)		if (_hx_tmp1) {
HXLINE(  35)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		else {
HXLINE(  35)			_hx_tmp = format;
            		}
HXDLIN(  35)		return ::kha::Image_obj::create3(width,height,depth,_hx_tmp,false,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_obj,create3D,return )

 ::kha::Image Image_obj::createRenderTarget(Int width,Int height,::hx::EnumBase format,hx::Null< Int >  __o_depthStencil,hx::Null< Int >  __o_antiAliasingSamples,hx::Null< Int >  __o_contextId){
Int depthStencil = __o_depthStencil.Default(0);
Int antiAliasingSamples = __o_antiAliasingSamples.Default(1);
Int contextId = __o_contextId.Default(0);
            	HX_STACK_FRAME("kha.Image","createRenderTarget",0x905b7b40,"kha.Image.createRenderTarget","kha/Image.hx",39,0xc9b7c0ee)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(depthStencil,"depthStencil")
            	HX_STACK_ARG(antiAliasingSamples,"antiAliasingSamples")
            	HX_STACK_ARG(contextId,"contextId")
HXLINE(  39)		::hx::EnumBase _hx_tmp;
HXDLIN(  39)		Bool _hx_tmp1 = hx::IsNull( format );
HXDLIN(  39)		if (_hx_tmp1) {
HXLINE(  39)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		else {
HXLINE(  39)			_hx_tmp = format;
            		}
HXDLIN(  39)		return ::kha::Image_obj::create2(width,height,_hx_tmp,false,true,depthStencil,contextId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_obj,createRenderTarget,return )

 ::kha::Image Image_obj::fromBytes( ::haxe::io::Bytes bytes,Int width,Int height,::hx::EnumBase format,::hx::EnumBase usage){
            	HX_STACK_FRAME("kha.Image","fromBytes",0x16defb64,"kha.Image.fromBytes","kha/Image.hx",43,0xc9b7c0ee)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(usage,"usage")
HXLINE(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_obj,fromBytes,return )

Int Image_obj::getRenderTargetFormat(::hx::EnumBase format){
            	HX_STACK_FRAME("kha.Image","getRenderTargetFormat",0x52514d57,"kha.Image.getRenderTargetFormat","kha/Image.hx",51,0xc9b7c0ee)
            	HX_STACK_ARG(format,"format")
HXLINE(  51)		Int _hx_tmp = ( ( ::hx::EnumBase)(format) )->_hx_getIndex();
HXDLIN(  51)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  53)				return (int)0;
            			}
            			break;
            			case (int)2: {
HXLINE(  57)				return (int)3;
            			}
            			break;
            			case (int)3: {
HXLINE(  59)				return (int)4;
            			}
            			break;
            			case (int)4: {
HXLINE(  55)				return (int)1;
            			}
            			break;
            			default:{
HXLINE(  61)				return (int)0;
            			}
            		}
HXLINE(  51)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getRenderTargetFormat,return )

Int Image_obj::getDepthBufferBits(Int depthAndStencil){
            	HX_STACK_FRAME("kha.Image","getDepthBufferBits",0x8594c1f0,"kha.Image.getDepthBufferBits","kha/Image.hx",66,0xc9b7c0ee)
            	HX_STACK_ARG(depthAndStencil,"depthAndStencil")
HXLINE(  66)		switch((int)(depthAndStencil)){
            			case (int)0: {
HXLINE(  66)				return (int)-1;
            			}
            			break;
            			case (int)1: {
HXLINE(  66)				return (int)24;
            			}
            			break;
            			case (int)2: {
HXLINE(  66)				return (int)24;
            			}
            			break;
            			case (int)3: {
HXLINE(  66)				return (int)24;
            			}
            			break;
            			case (int)4: {
HXLINE(  66)				return (int)32;
            			}
            			break;
            		}
HXDLIN(  66)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getDepthBufferBits,return )

Int Image_obj::getStencilBufferBits(Int depthAndStencil){
            	HX_STACK_FRAME("kha.Image","getStencilBufferBits",0xca70a7e9,"kha.Image.getStencilBufferBits","kha/Image.hx",76,0xc9b7c0ee)
            	HX_STACK_ARG(depthAndStencil,"depthAndStencil")
HXLINE(  76)		switch((int)(depthAndStencil)){
            			case (int)0: {
HXLINE(  76)				return (int)-1;
            			}
            			break;
            			case (int)1: {
HXLINE(  76)				return (int)-1;
            			}
            			break;
            			case (int)2: {
HXLINE(  76)				return (int)8;
            			}
            			break;
            			case (int)3: {
HXLINE(  76)				return (int)8;
            			}
            			break;
            			case (int)4: {
HXLINE(  76)				return (int)8;
            			}
            			break;
            		}
HXDLIN(  76)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getStencilBufferBits,return )

Int Image_obj::getTextureFormat(::hx::EnumBase format){
            	HX_STACK_FRAME("kha.Image","getTextureFormat",0xaec6f199,"kha.Image.getTextureFormat","kha/Image.hx",86,0xc9b7c0ee)
            	HX_STACK_ARG(format,"format")
HXLINE(  86)		Int _hx_tmp = ( ( ::hx::EnumBase)(format) )->_hx_getIndex();
HXDLIN(  86)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  88)				return (int)0;
            			}
            			break;
            			case (int)2: {
HXLINE(  90)				return (int)3;
            			}
            			break;
            			default:{
HXLINE(  92)				return (int)1;
            			}
            		}
HXLINE(  86)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getTextureFormat,return )

 ::kha::Image Image_obj::create2(Int width,Int height,::hx::EnumBase format,Bool readable,Bool renderTarget,Int depthStencil,Int contextId){
            	HX_STACK_FRAME("kha.Image","create2",0xbc51f7b9,"kha.Image.create2","kha/Image.hx",96,0xc9b7c0ee)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(readable,"readable")
            	HX_STACK_ARG(renderTarget,"renderTarget")
            	HX_STACK_ARG(depthStencil,"depthStencil")
            	HX_STACK_ARG(contextId,"contextId")
HXLINE(  97)		HX_VARI(  ::kha::Image,image) =  ::kha::Image_obj::__new(readable);
HXLINE(  98)		image->format = format;
HXLINE(  99)		if (renderTarget) {
HXLINE(  99)			Int _hx_tmp = ::kha::Image_obj::getDepthBufferBits(depthStencil);
HXDLIN(  99)			Int _hx_tmp1 = ::kha::Image_obj::getRenderTargetFormat(format);
HXDLIN(  99)			image->initRenderTarget(width,height,_hx_tmp,_hx_tmp1,::kha::Image_obj::getStencilBufferBits(depthStencil),contextId);
            		}
            		else {
HXLINE( 100)			Int _hx_tmp2 = ::kha::Image_obj::getTextureFormat(format);
HXDLIN( 100)			image->init(width,height,_hx_tmp2);
            		}
HXLINE( 101)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Image_obj,create2,return )

 ::kha::Image Image_obj::create3(Int width,Int height,Int depth,::hx::EnumBase format,Bool readable,Int contextId){
            	HX_STACK_FRAME("kha.Image","create3",0xbc51f7ba,"kha.Image.create3","kha/Image.hx",104,0xc9b7c0ee)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(readable,"readable")
            	HX_STACK_ARG(contextId,"contextId")
HXLINE( 105)		HX_VARI(  ::kha::Image,image) =  ::kha::Image_obj::__new(readable);
HXLINE( 106)		image->format = format;
HXLINE( 107)		Int _hx_tmp = ::kha::Image_obj::getTextureFormat(format);
HXDLIN( 107)		image->init3D(width,height,depth,_hx_tmp);
HXLINE( 108)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_obj,create3,return )

 ::kha::Image Image_obj::fromFile(::String filename,Bool readable){
            	HX_STACK_FRAME("kha.Image","fromFile",0x80fa1da3,"kha.Image.fromFile","kha/Image.hx",131,0xc9b7c0ee)
            	HX_STACK_ARG(filename,"filename")
            	HX_STACK_ARG(readable,"readable")
HXLINE( 132)		HX_VARI(  ::kha::Image,image) =  ::kha::Image_obj::__new(readable);
HXLINE( 133)		HX_VARI( Bool,isFloat) = ::StringTools_obj::endsWith(filename,HX_(".hdr",88,12,b7,1e));
HXLINE( 134)		::hx::EnumBase _hx_tmp;
HXDLIN( 134)		if (isFloat) {
HXLINE( 134)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
            		}
            		else {
HXLINE( 134)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
HXDLIN( 134)		image->format = _hx_tmp;
HXLINE( 135)		image->initFromFile(filename);
HXLINE( 136)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,fromFile,return )

Int Image_obj::maxSize;

Int Image_obj::get_maxSize(){
            	HX_STACK_FRAME("kha.Image","get_maxSize",0x2962591f,"kha.Image.get_maxSize","kha/Image.hx",174,0xc9b7c0ee)
HXLINE( 174)		return (int)4096;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_maxSize,return )

Bool Image_obj::nonPow2Supported;

Bool Image_obj::get_nonPow2Supported(){
            	HX_STACK_FRAME("kha.Image","get_nonPow2Supported",0xb7e34b0d,"kha.Image.get_nonPow2Supported","kha/Image.hx",181,0xc9b7c0ee)
            	return Kore::Graphics::nonPow2TexturesSupported();

HXLINE( 181)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_nonPow2Supported,return )


Image_obj::Image_obj()
{
}

void Image_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Image);
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(graphics1,"graphics1");
	HX_MARK_MEMBER_NAME(graphics2,"graphics2");
	HX_MARK_MEMBER_NAME(graphics4,"graphics4");
	HX_MARK_MEMBER_NAME(g1,"g1");
	HX_MARK_MEMBER_NAME(g2,"g2");
	HX_MARK_MEMBER_NAME(g4,"g4");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(realWidth,"realWidth");
	HX_MARK_MEMBER_NAME(realHeight,"realHeight");
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_END_CLASS();
}

void Image_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(graphics1,"graphics1");
	HX_VISIT_MEMBER_NAME(graphics2,"graphics2");
	HX_VISIT_MEMBER_NAME(graphics4,"graphics4");
	HX_VISIT_MEMBER_NAME(g1,"g1");
	HX_VISIT_MEMBER_NAME(g2,"g2");
	HX_VISIT_MEMBER_NAME(g4,"g4");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(realWidth,"realWidth");
	HX_VISIT_MEMBER_NAME(realHeight,"realHeight");
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
}

hx::Val Image_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"g1") ) { return hx::Val( inCallProp == hx::paccAlways ? get_g1() : g1); }
		if (HX_FIELD_EQ(inName,"g2") ) { return hx::Val( inCallProp == hx::paccAlways ? get_g2() : g2); }
		if (HX_FIELD_EQ(inName,"g4") ) { return hx::Val( inCallProp == hx::paccAlways ? get_g4() : g4); }
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( inCallProp == hx::paccAlways ? get_width() : width); }
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_depth() : depth); }
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format); }
		if (HX_FIELD_EQ(inName,"init3D") ) { return hx::Val( init3D_dyn()); }
		if (HX_FIELD_EQ(inName,"get_g1") ) { return hx::Val( get_g1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_g2") ) { return hx::Val( get_g2_dyn()); }
		if (HX_FIELD_EQ(inName,"get_g4") ) { return hx::Val( get_g4_dyn()); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable); }
		if (HX_FIELD_EQ(inName,"isOpaque") ) { return hx::Val( isOpaque_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"graphics1") ) { return hx::Val( graphics1); }
		if (HX_FIELD_EQ(inName,"graphics2") ) { return hx::Val( graphics2); }
		if (HX_FIELD_EQ(inName,"graphics4") ) { return hx::Val( graphics4); }
		if (HX_FIELD_EQ(inName,"initVideo") ) { return hx::Val( initVideo_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"get_depth") ) { return hx::Val( get_depth_dyn()); }
		if (HX_FIELD_EQ(inName,"realWidth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_realWidth() : realWidth); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"realHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_realHeight() : realHeight); }
		if (HX_FIELD_EQ(inName,"atInternal") ) { return hx::Val( atInternal_dyn()); }
		if (HX_FIELD_EQ(inName,"setMipmaps") ) { return hx::Val( setMipmaps_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"initFromFile") ) { return hx::Val( initFromFile_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_realWidth") ) { return hx::Val( get_realWidth_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_realHeight") ) { return hx::Val( get_realHeight_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"generateMipmaps") ) { return hx::Val( generateMipmaps_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initRenderTarget") ) { return hx::Val( initRenderTarget_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setDepthStencilFrom") ) { return hx::Val( setDepthStencilFrom_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Image_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"create2") ) { outValue = create2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create3") ) { outValue = create3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxSize") ) { outValue = inCallProp == hx::paccAlways ? get_maxSize() : maxSize; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"create3D") ) { outValue = create3D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_maxSize") ) { outValue = get_maxSize_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createFromVideo") ) { outValue = createFromVideo_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getTextureFormat") ) { outValue = getTextureFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nonPow2Supported") ) { outValue = inCallProp == hx::paccAlways ? get_nonPow2Supported() : nonPow2Supported; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createRenderTarget") ) { outValue = createRenderTarget_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDepthBufferBits") ) { outValue = getDepthBufferBits_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getStencilBufferBits") ) { outValue = getStencilBufferBits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_nonPow2Supported") ) { outValue = get_nonPow2Supported_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getRenderTargetFormat") ) { outValue = getRenderTargetFormat_dyn(); return true; }
	}
	return false;
}

hx::Val Image_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"g1") ) { g1=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g2") ) { g2=inValue.Cast<  ::kha::graphics2::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g4") ) { g4=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"graphics1") ) { graphics1=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graphics2") ) { graphics2=inValue.Cast<  ::kha::graphics2::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graphics4") ) { graphics4=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realWidth") ) { realWidth=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"realHeight") ) { realHeight=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Image_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"maxSize") ) { maxSize=ioValue.Cast< Int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nonPow2Supported") ) { nonPow2Supported=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

void Image_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"));
	outFields->push(HX_HCSTRING("graphics1","\x06","\xb9","\x91","\x08"));
	outFields->push(HX_HCSTRING("graphics2","\x07","\xb9","\x91","\x08"));
	outFields->push(HX_HCSTRING("graphics4","\x09","\xb9","\x91","\x08"));
	outFields->push(HX_HCSTRING("g1","\xea","\x59","\x00","\x00"));
	outFields->push(HX_HCSTRING("g2","\xeb","\x59","\x00","\x00"));
	outFields->push(HX_HCSTRING("g4","\xed","\x59","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	outFields->push(HX_HCSTRING("realWidth","\xc8","\xe5","\x24","\xce"));
	outFields->push(HX_HCSTRING("realHeight","\xe5","\xa1","\x73","\x48"));
	outFields->push(HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Image_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::TextureFormat*/ ,(int)offsetof(Image_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{hx::fsBool,(int)offsetof(Image_obj,readable),HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d")},
	{hx::fsObject /*::kha::graphics1::Graphics*/ ,(int)offsetof(Image_obj,graphics1),HX_HCSTRING("graphics1","\x06","\xb9","\x91","\x08")},
	{hx::fsObject /*::kha::graphics2::Graphics*/ ,(int)offsetof(Image_obj,graphics2),HX_HCSTRING("graphics2","\x07","\xb9","\x91","\x08")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(Image_obj,graphics4),HX_HCSTRING("graphics4","\x09","\xb9","\x91","\x08")},
	{hx::fsObject /*::kha::graphics1::Graphics*/ ,(int)offsetof(Image_obj,g1),HX_HCSTRING("g1","\xea","\x59","\x00","\x00")},
	{hx::fsObject /*::kha::graphics2::Graphics*/ ,(int)offsetof(Image_obj,g2),HX_HCSTRING("g2","\xeb","\x59","\x00","\x00")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(Image_obj,g4),HX_HCSTRING("g4","\xed","\x59","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Image_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(Image_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(Image_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{hx::fsInt,(int)offsetof(Image_obj,realWidth),HX_HCSTRING("realWidth","\xc8","\xe5","\x24","\xce")},
	{hx::fsInt,(int)offsetof(Image_obj,realHeight),HX_HCSTRING("realHeight","\xe5","\xa1","\x73","\x48")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Image_obj,bytes),HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Image_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Image_obj::maxSize,HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc")},
	{hx::fsBool,(void *) &Image_obj::nonPow2Supported,HX_HCSTRING("nonPow2Supported","\xe7","\x6d","\x39","\x51")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Image_obj_sMemberFields[] = {
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"),
	HX_HCSTRING("graphics1","\x06","\xb9","\x91","\x08"),
	HX_HCSTRING("graphics2","\x07","\xb9","\x91","\x08"),
	HX_HCSTRING("graphics4","\x09","\xb9","\x91","\x08"),
	HX_HCSTRING("initRenderTarget","\x77","\xd6","\x84","\xe9"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("init3D","\xc1","\x4b","\x4c","\x97"),
	HX_HCSTRING("initVideo","\x4b","\x2f","\x8e","\x52"),
	HX_HCSTRING("initFromFile","\x36","\x24","\x3e","\x46"),
	HX_HCSTRING("g1","\xea","\x59","\x00","\x00"),
	HX_HCSTRING("get_g1","\x33","\xf1","\x2f","\xa3"),
	HX_HCSTRING("g2","\xeb","\x59","\x00","\x00"),
	HX_HCSTRING("get_g2","\x34","\xf1","\x2f","\xa3"),
	HX_HCSTRING("g4","\xed","\x59","\x00","\x00"),
	HX_HCSTRING("get_g4","\x36","\xf1","\x2f","\xa3"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_depth","\x5a","\x4d","\xd3","\x1a"),
	HX_HCSTRING("realWidth","\xc8","\xe5","\x24","\xce"),
	HX_HCSTRING("realHeight","\xe5","\xa1","\x73","\x48"),
	HX_HCSTRING("get_realWidth","\x9f","\xb9","\x88","\x8f"),
	HX_HCSTRING("get_realHeight","\x2e","\x2a","\x69","\xbe"),
	HX_HCSTRING("isOpaque","\x6b","\x78","\x5b","\x77"),
	HX_HCSTRING("atInternal","\x50","\x23","\xc3","\x73"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("generateMipmaps","\x36","\xf3","\x0d","\x51"),
	HX_HCSTRING("setMipmaps","\x69","\xce","\x32","\xc8"),
	HX_HCSTRING("setDepthStencilFrom","\x05","\x29","\x9a","\x2e"),
	::String(null()) };

static void Image_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Image_obj::maxSize,"maxSize");
	HX_MARK_MEMBER_NAME(Image_obj::nonPow2Supported,"nonPow2Supported");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Image_obj::maxSize,"maxSize");
	HX_VISIT_MEMBER_NAME(Image_obj::nonPow2Supported,"nonPow2Supported");
};

#endif

hx::Class Image_obj::__mClass;

static ::String Image_obj_sStaticFields[] = {
	HX_HCSTRING("createFromVideo","\x15","\xb8","\x79","\x8c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("create3D","\xad","\x4a","\xf4","\x2b"),
	HX_HCSTRING("createRenderTarget","\x63","\x34","\x61","\xf0"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("getRenderTargetFormat","\x14","\xac","\x07","\x63"),
	HX_HCSTRING("getDepthBufferBits","\x13","\x7b","\x9a","\xe5"),
	HX_HCSTRING("getStencilBufferBits","\xcc","\x2f","\x31","\x82"),
	HX_HCSTRING("getTextureFormat","\xfc","\x0b","\xc7","\xfa"),
	HX_HCSTRING("create2","\xb6","\xb5","\x6a","\x11"),
	HX_HCSTRING("create3","\xb7","\xb5","\x6a","\x11"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"),
	HX_HCSTRING("get_maxSize","\x9c","\x59","\x7e","\x52"),
	HX_HCSTRING("nonPow2Supported","\xe7","\x6d","\x39","\x51"),
	HX_HCSTRING("get_nonPow2Supported","\xf0","\xd2","\xa3","\x6f"),
	::String(null())
};

void Image_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Image","\x71","\x67","\x08","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_obj::__GetStatic;
	__mClass->mSetStaticField = &Image_obj::__SetStatic;
	__mClass->mMarkFunc = Image_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Image_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Image_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Image_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
