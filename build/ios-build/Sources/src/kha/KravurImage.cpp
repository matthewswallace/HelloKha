// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_AlignedQuad
#include <kha/AlignedQuad.h>
#endif
#ifndef INCLUDED_kha_Blob
#include <kha/Blob.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha__SuperString_SuperString_Impl_
#include <kha/_SuperString/SuperString_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_bakedchar
#include <kha/graphics2/truetype/Stbtt_bakedchar.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif

namespace kha{

void KravurImage_obj::__construct(Int size,Int ascent,Int descent,Int lineGap,Int width,Int height,::Array< ::Dynamic> chars, ::kha::Blob pixels){
            	HX_STACK_FRAME("kha.KravurImage","new",0x4fe7ca6a,"kha.KravurImage.new","kha/Kravur.hx",36,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(ascent,"ascent")
            	HX_STACK_ARG(descent,"descent")
            	HX_STACK_ARG(lineGap,"lineGap")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(chars,"chars")
            	HX_STACK_ARG(pixels,"pixels")
HXLINE(  37)		this->mySize = size;
HXLINE(  38)		this->width = width;
HXLINE(  39)		this->height = height;
HXLINE(  40)		this->chars = chars;
HXLINE(  41)		this->baseline = ascent;
HXLINE(  42)		{
HXLINE(  42)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  42)			while((_g < chars->length)){
HXLINE(  42)				HX_VARI_NAME(  ::kha::graphics2::truetype::Stbtt_bakedchar,_hx_char,"char") = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chars,_g)) );
HXDLIN(  42)				++_g;
HXLINE(  43)				hx::AddEq(_hx_char->yoff,this->baseline);
            			}
            		}
HXLINE(  45)		this->texture = ::kha::Image_obj::create(width,height,::kha::graphics4::TextureFormat_obj::L8_dyn(),null());
HXLINE(  46)		HX_VARI(  ::haxe::io::Bytes,bytes) = this->texture->lock(null());
HXLINE(  47)		HX_VARI( Int,pos) = (int)0;
HXLINE(  48)		{
HXLINE(  48)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  48)			while((_g1 < height)){
HXLINE(  48)				++_g1;
HXDLIN(  48)				{
HXLINE(  48)					HX_VARI( Int,_g3) = (int)0;
HXDLIN(  48)					while((_g3 < width)){
HXLINE(  48)						++_g3;
HXLINE(  49)						{
HXLINE(  49)							Int v = pixels->readU8(pos);
HXDLIN(  49)							bytes->b[pos] = v;
            						}
HXLINE(  50)						++pos;
            					}
            				}
            			}
            		}
HXLINE(  52)		this->texture->unlock();
            	}

Dynamic KravurImage_obj::__CreateEmpty() { return new KravurImage_obj; }

hx::ObjectPtr< KravurImage_obj > KravurImage_obj::__new(Int size,Int ascent,Int descent,Int lineGap,Int width,Int height,::Array< ::Dynamic> chars, ::kha::Blob pixels)
{
	hx::ObjectPtr< KravurImage_obj > _hx_result = new KravurImage_obj();
	_hx_result->__construct(size,ascent,descent,lineGap,width,height,chars,pixels);
	return _hx_result;
}

Dynamic KravurImage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KravurImage_obj > _hx_result = new KravurImage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

 ::kha::Image KravurImage_obj::getTexture(){
            	HX_STACK_FRAME("kha.KravurImage","getTexture",0x867a0a1b,"kha.KravurImage.getTexture","kha/Kravur.hx",56,0xdd7a3f9a)
            	HX_STACK_THIS(this)
HXLINE(  56)		return this->texture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getTexture,return )

 ::kha::AlignedQuad KravurImage_obj::getBakedQuad(Int char_index,Float xpos,Float ypos){
            	HX_STACK_FRAME("kha.KravurImage","getBakedQuad",0xeb5cfcd2,"kha.KravurImage.getBakedQuad","kha/Kravur.hx",59,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(char_index,"char_index")
            	HX_STACK_ARG(xpos,"xpos")
            	HX_STACK_ARG(ypos,"ypos")
HXLINE(  60)		if ((char_index >= this->chars->length)) {
HXLINE(  60)			return null();
            		}
HXLINE(  61)		HX_VARI( Float,ipw) = ((Float)((Float)1.0) / (Float)this->width);
HXLINE(  62)		HX_VARI( Float,iph) = ((Float)((Float)1.0) / (Float)this->height);
HXLINE(  63)		HX_VARI(  ::kha::graphics2::truetype::Stbtt_bakedchar,b) = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,char_index)) );
HXLINE(  64)		Bool _hx_tmp = hx::IsNull( b );
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  64)			return null();
            		}
HXLINE(  65)		Float _hx_tmp1 = (xpos + b->xoff);
HXDLIN(  65)		HX_VARI( Int,round_x) = ::Math_obj::round(_hx_tmp1);
HXLINE(  66)		Float _hx_tmp2 = (ypos + b->yoff);
HXDLIN(  66)		HX_VARI( Int,round_y) = ::Math_obj::round(_hx_tmp2);
HXLINE(  68)		HX_VARI(  ::kha::AlignedQuad,q) =  ::kha::AlignedQuad_obj::__new();
HXLINE(  69)		q->x0 = round_x;
HXLINE(  70)		q->y0 = round_y;
HXLINE(  71)		Int _hx_tmp3 = (round_x + b->x1);
HXDLIN(  71)		q->x1 = (_hx_tmp3 - b->x0);
HXLINE(  72)		Int _hx_tmp4 = (round_y + b->y1);
HXDLIN(  72)		q->y1 = (_hx_tmp4 - b->y0);
HXLINE(  74)		q->s0 = (b->x0 * ipw);
HXLINE(  75)		q->t0 = (b->y0 * iph);
HXLINE(  76)		q->s1 = (b->x1 * ipw);
HXLINE(  77)		q->t1 = (b->y1 * iph);
HXLINE(  79)		q->xadvance = b->xadvance;
HXLINE(  81)		return q;
            	}


HX_DEFINE_DYNAMIC_FUNC3(KravurImage_obj,getBakedQuad,return )

Float KravurImage_obj::getCharWidth(Int charIndex){
            	HX_STACK_FRAME("kha.KravurImage","getCharWidth",0x75175090,"kha.KravurImage.getCharWidth","kha/Kravur.hx",84,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE(  85)		if ((charIndex < (int)32)) {
HXLINE(  85)			return (int)0;
            		}
HXLINE(  86)		if (((charIndex - (int)32) >= this->chars->length)) {
HXLINE(  86)			return (int)0;
            		}
HXLINE(  87)		return ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,(charIndex - (int)32))) )->xadvance;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KravurImage_obj,getCharWidth,return )

Float KravurImage_obj::getHeight(){
            	HX_STACK_FRAME("kha.KravurImage","getHeight",0xd444aea7,"kha.KravurImage.getHeight","kha/Kravur.hx",91,0xdd7a3f9a)
            	HX_STACK_THIS(this)
HXLINE(  91)		return this->mySize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getHeight,return )

Float KravurImage_obj::stringWidth(::String string){
            	HX_STACK_FRAME("kha.KravurImage","stringWidth",0x6df17b7f,"kha.KravurImage.stringWidth","kha/Kravur.hx",94,0xdd7a3f9a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(string,"string")
HXLINE(  95)		HX_VARI( ::String,str) = string;
HXLINE(  96)		HX_VARI( Float,width) = (int)0;
HXLINE(  97)		{
HXLINE(  97)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  97)			HX_VARI( Int,_g) = ::kha::_SuperString::SuperString_Impl__obj::get_length(str);
HXDLIN(  97)			while((_g1 < _g)){
HXLINE(  97)				HX_VARI( Int,c) = _g1++;
HXLINE(  98)				Int _hx_tmp = ::kha::_SuperString::SuperString_Impl__obj::charCodeAt(str,c);
HXDLIN(  98)				Float _hx_tmp1 = this->getCharWidth(_hx_tmp);
HXDLIN(  98)				hx::AddEq(width,_hx_tmp1);
            			}
            		}
HXLINE( 100)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KravurImage_obj,stringWidth,return )

Float KravurImage_obj::getBaselinePosition(){
            	HX_STACK_FRAME("kha.KravurImage","getBaselinePosition",0x9ad05d0e,"kha.KravurImage.getBaselinePosition","kha/Kravur.hx",104,0xdd7a3f9a)
            	HX_STACK_THIS(this)
HXLINE( 104)		return this->baseline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getBaselinePosition,return )


KravurImage_obj::KravurImage_obj()
{
}

void KravurImage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KravurImage);
	HX_MARK_MEMBER_NAME(mySize,"mySize");
	HX_MARK_MEMBER_NAME(chars,"chars");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(baseline,"baseline");
	HX_MARK_END_CLASS();
}

void KravurImage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mySize,"mySize");
	HX_VISIT_MEMBER_NAME(chars,"chars");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(baseline,"baseline");
}

hx::Val KravurImage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { return hx::Val( chars); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mySize") ) { return hx::Val( mySize); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { return hx::Val( baseline); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeight") ) { return hx::Val( getHeight_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stringWidth") ) { return hx::Val( stringWidth_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getBakedQuad") ) { return hx::Val( getBakedQuad_dyn()); }
		if (HX_FIELD_EQ(inName,"getCharWidth") ) { return hx::Val( getCharWidth_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getBaselinePosition") ) { return hx::Val( getBaselinePosition_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val KravurImage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { chars=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mySize") ) { mySize=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::kha::Image >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { baseline=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KravurImage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mySize","\x4d","\x52","\x8f","\x77"));
	outFields->push(HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo KravurImage_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(KravurImage_obj,mySize),HX_HCSTRING("mySize","\x4d","\x52","\x8f","\x77")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(KravurImage_obj,chars),HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45")},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(KravurImage_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsInt,(int)offsetof(KravurImage_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(KravurImage_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(KravurImage_obj,baseline),HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *KravurImage_obj_sStaticStorageInfo = 0;
#endif

static ::String KravurImage_obj_sMemberFields[] = {
	HX_HCSTRING("mySize","\x4d","\x52","\x8f","\x77"),
	HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getBakedQuad","\x1c","\x88","\x57","\x09"),
	HX_HCSTRING("getCharWidth","\xda","\xdb","\x11","\x93"),
	HX_HCSTRING("getHeight","\x1d","\x91","\xa2","\x7e"),
	HX_HCSTRING("stringWidth","\x75","\x67","\x65","\xd5"),
	HX_HCSTRING("getBaselinePosition","\x04","\x2f","\xa2","\x7c"),
	::String(null()) };

static void KravurImage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KravurImage_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KravurImage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KravurImage_obj::__mClass,"__mClass");
};

#endif

hx::Class KravurImage_obj::__mClass;

void KravurImage_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.KravurImage","\x78","\x0d","\x8c","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = KravurImage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(KravurImage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< KravurImage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KravurImage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KravurImage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KravurImage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
