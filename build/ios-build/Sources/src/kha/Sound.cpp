// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <kha/Sound.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_Reader
#include <kha/audio2/ogg/vorbis/Reader.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif

namespace kha{

void Sound_obj::__construct(){
            	HX_STACK_FRAME("kha.Sound","new",0x1f644c57,"kha.Sound.new","kha/Sound.hx",15,0x5f2333fa)
            	HX_STACK_THIS(this)
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

hx::ObjectPtr< Sound_obj > Sound_obj::__new()
{
	hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Sound_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::kha::Resource_obj _hx_kha_Sound__hx_kha_Resource= {
	( void (hx::Object::*)())&::kha::Sound_obj::unload,
};

void *Sound_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf962acd2: return &_hx_kha_Sound__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Sound_obj::uncompress( ::Dynamic done){
            	HX_STACK_FRAME("kha.Sound","uncompress",0x58f42fe4,"kha.Sound.uncompress","kha/Sound.hx",17,0x5f2333fa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(done,"done")
HXLINE(  18)		HX_VARI(  ::haxe::io::BytesOutput,output) =  ::haxe::io::BytesOutput_obj::__new();
HXLINE(  19)		HX_VARI(  ::kha::audio2::ogg::vorbis::data::Header,header) = ::kha::audio2::ogg::vorbis::Reader_obj::readAll(this->compressedData,output,true);
HXLINE(  20)		HX_VARI(  ::haxe::io::Bytes,soundBytes) = output->getBytes();
HXLINE(  21)		Float _hx_tmp = ((Float)soundBytes->length / (Float)(int)4);
HXDLIN(  21)		HX_VARI( Int,count) = ::Std_obj::_hx_int(_hx_tmp);
HXLINE(  22)		Bool _hx_tmp1 = (header->channel == (int)1);
HXDLIN(  22)		if (_hx_tmp1) {
HXLINE(  23)			HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN(  23)			_hx_array_set_size_exact(this1,(count * (int)2));
HXDLIN(  23)			this->uncompressedData = this1;
HXLINE(  24)			{
HXLINE(  24)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(  24)				while((_g1 < count)){
HXLINE(  24)					HX_VARI( Int,i) = _g1++;
HXLINE(  25)					{
HXLINE(  25)						HX_VARI( Int,pos) = (i * (int)4);
HXDLIN(  25)						Bool _hx_tmp2;
HXDLIN(  25)						if ((pos >= (int)0)) {
HXLINE(  25)							_hx_tmp2 = ((pos + (int)4) > soundBytes->length);
            						}
            						else {
HXLINE(  25)							_hx_tmp2 = true;
            						}
HXDLIN(  25)						if (_hx_tmp2) {
HXLINE(  25)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  25)						Float val = ::__hxcpp_memory_get_float(soundBytes->b,pos);
HXDLIN(  25)						this->uncompressedData->__unsafe_set((i * (int)2),val);
            					}
HXLINE(  26)					{
HXLINE(  26)						HX_VARI_NAME( Int,pos1,"pos") = (i * (int)4);
HXDLIN(  26)						Bool _hx_tmp3;
HXDLIN(  26)						if ((pos1 >= (int)0)) {
HXLINE(  26)							_hx_tmp3 = ((pos1 + (int)4) > soundBytes->length);
            						}
            						else {
HXLINE(  26)							_hx_tmp3 = true;
            						}
HXDLIN(  26)						if (_hx_tmp3) {
HXLINE(  26)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  26)						Float val1 = ::__hxcpp_memory_get_float(soundBytes->b,pos1);
HXDLIN(  26)						this->uncompressedData->__unsafe_set(((i * (int)2) + (int)1),val1);
            					}
            				}
            			}
            		}
            		else {
HXLINE(  30)			HX_VARI_NAME( ::Array< Float >,this2,"this") = ::Array_obj< Float >::__new();
HXDLIN(  30)			_hx_array_set_size_exact(this2,count);
HXDLIN(  30)			this->uncompressedData = this2;
HXLINE(  31)			{
HXLINE(  31)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  31)				while((_g11 < count)){
HXLINE(  31)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE(  32)					{
HXLINE(  32)						HX_VARI_NAME( Int,pos2,"pos") = (i1 * (int)4);
HXDLIN(  32)						Bool _hx_tmp4;
HXDLIN(  32)						if ((pos2 >= (int)0)) {
HXLINE(  32)							_hx_tmp4 = ((pos2 + (int)4) > soundBytes->length);
            						}
            						else {
HXLINE(  32)							_hx_tmp4 = true;
            						}
HXDLIN(  32)						if (_hx_tmp4) {
HXLINE(  32)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  32)						Float val2 = ::__hxcpp_memory_get_float(soundBytes->b,pos2);
HXDLIN(  32)						this->uncompressedData->__unsafe_set(i1,val2);
            					}
            				}
            			}
            		}
HXLINE(  35)		this->compressedData = null();
HXLINE(  36)		done();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,uncompress,(void))

void Sound_obj::unload(){
            	HX_STACK_FRAME("kha.Sound","unload",0x00feb968,"kha.Sound.unload","kha/Sound.hx",39,0x5f2333fa)
            	HX_STACK_THIS(this)
HXLINE(  40)		this->compressedData = null();
HXLINE(  41)		this->uncompressedData = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,unload,(void))


Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(compressedData,"compressedData");
	HX_MARK_MEMBER_NAME(uncompressedData,"uncompressedData");
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(compressedData,"compressedData");
	HX_VISIT_MEMBER_NAME(uncompressedData,"uncompressedData");
}

hx::Val Sound_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uncompress") ) { return hx::Val( uncompress_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { return hx::Val( compressedData); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { return hx::Val( uncompressedData); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Sound_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { compressedData=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { uncompressedData=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("compressedData","\x4b","\xa3","\xdd","\x44"));
	outFields->push(HX_HCSTRING("uncompressedData","\x64","\x13","\xff","\x51"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Sound_obj,compressedData),HX_HCSTRING("compressedData","\x4b","\xa3","\xdd","\x44")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Sound_obj,uncompressedData),HX_HCSTRING("uncompressedData","\x64","\x13","\xff","\x51")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Sound_obj_sStaticStorageInfo = 0;
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_HCSTRING("compressedData","\x4b","\xa3","\xdd","\x44"),
	HX_HCSTRING("uncompressedData","\x64","\x13","\xff","\x51"),
	HX_HCSTRING("uncompress","\xfb","\x2e","\x83","\x09"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	::String(null()) };

static void Sound_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sound_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
};

#endif

hx::Class Sound_obj::__mClass;

void Sound_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Sound","\xe5","\xd4","\x6b","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Sound_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sound_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sound_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
