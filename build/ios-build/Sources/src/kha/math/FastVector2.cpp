// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_kha_math_FastVector2
#include <kha/math/FastVector2.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <kha/math/Vector2.h>
#endif

namespace kha{
namespace math{

void FastVector2_obj::__construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y){
float x = __o_x.Default(0);
float y = __o_y.Default(0);
            	HX_STACK_FRAME("kha.math.FastVector2","new",0x8298c309,"kha.math.FastVector2.new","kha/math/FastVector2.hx",4,0x343674e7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(   5)		this->x = x;
HXLINE(   6)		this->y = y;
            	}

Dynamic FastVector2_obj::__CreateEmpty() { return new FastVector2_obj; }

hx::ObjectPtr< FastVector2_obj > FastVector2_obj::__new(hx::Null< float >  __o_x,hx::Null< float >  __o_y)
{
	hx::ObjectPtr< FastVector2_obj > _hx_result = new FastVector2_obj();
	_hx_result->__construct(__o_x,__o_y);
	return _hx_result;
}

Dynamic FastVector2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FastVector2_obj > _hx_result = new FastVector2_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

float FastVector2_obj::get_length(){
            	HX_STACK_FRAME("kha.math.FastVector2","get_length",0x0ff9a926,"kha.math.FastVector2.get_length","kha/math/FastVector2.hx",18,0x343674e7)
            	HX_STACK_THIS(this)
HXLINE(  18)		float _hx_tmp = ((this->x * this->x) + (this->y * this->y));
HXDLIN(  18)		return ::Math_obj::sqrt(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FastVector2_obj,get_length,return )

float FastVector2_obj::set_length(float length){
            	HX_STACK_FRAME("kha.math.FastVector2","set_length",0x1377479a,"kha.math.FastVector2.set_length","kha/math/FastVector2.hx",21,0x343674e7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
HXLINE(  22)		HX_VARI( float,currentLength) = this->get_length();
HXLINE(  23)		if ((currentLength == (int)0)) {
HXLINE(  23)			return (int)0;
            		}
HXLINE(  24)		HX_VARI( Float,mul) = ((Float)length / (Float)currentLength);
HXLINE(  25)		hx::MultEq(this->x,mul);
HXLINE(  26)		hx::MultEq(this->y,mul);
HXLINE(  27)		return length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FastVector2_obj,set_length,return )

::String FastVector2_obj::toString(){
            	HX_STACK_FRAME("kha.math.FastVector2","toString",0xef4c9963,"kha.math.FastVector2.toString","kha/math/FastVector2.hx",56,0x343674e7)
            	HX_STACK_THIS(this)
HXLINE(  56)		::String _hx_tmp = ::Std_obj::string(this->x);
HXDLIN(  56)		::String _hx_tmp1 = ((HX_("FastVector2(",15,9a,e5,0d) + _hx_tmp) + HX_(", ",74,26,00,00));
HXDLIN(  56)		::String _hx_tmp2 = ::Std_obj::string(this->y);
HXDLIN(  56)		return ((_hx_tmp1 + _hx_tmp2) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FastVector2_obj,toString,return )

 ::kha::math::FastVector2 FastVector2_obj::fromVector2( ::kha::math::Vector2 v){
            	HX_STACK_FRAME("kha.math.FastVector2","fromVector2",0x4fc2a16e,"kha.math.FastVector2.fromVector2","kha/math/FastVector2.hx",10,0x343674e7)
            	HX_STACK_ARG(v,"v")
HXLINE(  10)		return  ::kha::math::FastVector2_obj::__new(v->x,v->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FastVector2_obj,fromVector2,return )


FastVector2_obj::FastVector2_obj()
{
}

hx::Val FastVector2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FastVector2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"fromVector2") ) { outValue = fromVector2_dyn(); return true; }
	}
	return false;
}

hx::Val FastVector2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FastVector2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FastVector2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastVector2_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastVector2_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FastVector2_obj_sStaticStorageInfo = 0;
#endif

static ::String FastVector2_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FastVector2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FastVector2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FastVector2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FastVector2_obj::__mClass,"__mClass");
};

#endif

hx::Class FastVector2_obj::__mClass;

static ::String FastVector2_obj_sStaticFields[] = {
	HX_HCSTRING("fromVector2","\xc5","\x5d","\xdd","\x72"),
	::String(null())
};

void FastVector2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.math.FastVector2","\x97","\x8a","\x4e","\x67");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FastVector2_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FastVector2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FastVector2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FastVector2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FastVector2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FastVector2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FastVector2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FastVector2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace math
