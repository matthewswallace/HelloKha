// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_kha_math_Matrix4
#include <kha/math/Matrix4.h>
#endif
#ifndef INCLUDED_kha_math_Vector3
#include <kha/math/Vector3.h>
#endif

namespace kha{
namespace math{

void Matrix4_obj::__construct(Float _00,Float _10,Float _20,Float _30,Float _01,Float _11,Float _21,Float _31,Float _02,Float _12,Float _22,Float _32,Float _03,Float _13,Float _23,Float _33){
            	HX_STACK_FRAME("kha.math.Matrix4","new",0xbeb4a909,"kha.math.Matrix4.new","kha/math/Matrix4.hx",15,0x5b479ee7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_00,"_00")
            	HX_STACK_ARG(_10,"_10")
            	HX_STACK_ARG(_20,"_20")
            	HX_STACK_ARG(_30,"_30")
            	HX_STACK_ARG(_01,"_01")
            	HX_STACK_ARG(_11,"_11")
            	HX_STACK_ARG(_21,"_21")
            	HX_STACK_ARG(_31,"_31")
            	HX_STACK_ARG(_02,"_02")
            	HX_STACK_ARG(_12,"_12")
            	HX_STACK_ARG(_22,"_22")
            	HX_STACK_ARG(_32,"_32")
            	HX_STACK_ARG(_03,"_03")
            	HX_STACK_ARG(_13,"_13")
            	HX_STACK_ARG(_23,"_23")
            	HX_STACK_ARG(_33,"_33")
HXLINE(  16)		this->_00 = _00;
HXDLIN(  16)		this->_10 = _10;
HXDLIN(  16)		this->_20 = _20;
HXDLIN(  16)		this->_30 = _30;
HXLINE(  17)		this->_01 = _01;
HXDLIN(  17)		this->_11 = _11;
HXDLIN(  17)		this->_21 = _21;
HXDLIN(  17)		this->_31 = _31;
HXLINE(  18)		this->_02 = _02;
HXDLIN(  18)		this->_12 = _12;
HXDLIN(  18)		this->_22 = _22;
HXDLIN(  18)		this->_32 = _32;
HXLINE(  19)		this->_03 = _03;
HXDLIN(  19)		this->_13 = _13;
HXDLIN(  19)		this->_23 = _23;
HXDLIN(  19)		this->_33 = _33;
            	}

Dynamic Matrix4_obj::__CreateEmpty() { return new Matrix4_obj; }

hx::ObjectPtr< Matrix4_obj > Matrix4_obj::__new(Float _00,Float _10,Float _20,Float _30,Float _01,Float _11,Float _21,Float _31,Float _02,Float _12,Float _22,Float _32,Float _03,Float _13,Float _23,Float _33)
{
	hx::ObjectPtr< Matrix4_obj > _hx_result = new Matrix4_obj();
	_hx_result->__construct(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33);
	return _hx_result;
}

Dynamic Matrix4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix4_obj > _hx_result = new Matrix4_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15]);
	return _hx_result;
}

Int Matrix4_obj::width;

Int Matrix4_obj::height;

 ::kha::math::Matrix4 Matrix4_obj::orthogonalProjection(Float left,Float right,Float bottom,Float top,Float zn,Float zf){
            	HX_STACK_FRAME("kha.math.Matrix4","orthogonalProjection",0x6c87509f,"kha.math.Matrix4.orthogonalProjection","kha/math/Matrix4.hx",111,0x5b479ee7)
            	HX_STACK_ARG(left,"left")
            	HX_STACK_ARG(right,"right")
            	HX_STACK_ARG(bottom,"bottom")
            	HX_STACK_ARG(top,"top")
            	HX_STACK_ARG(zn,"zn")
            	HX_STACK_ARG(zf,"zf")
HXLINE( 111)		return  ::kha::math::Matrix4_obj::__new(((Float)(int)2 / (Float)(right - left)),(int)0,(int)0,((Float)-((right + left)) / (Float)(right - left)),(int)0,((Float)(int)2 / (Float)(top - bottom)),(int)0,((Float)-((top + bottom)) / (Float)(top - bottom)),(int)0,(int)0,((Float)(int)-2 / (Float)(zf - zn)),((Float)-((zf + zn)) / (Float)(zf - zn)),(int)0,(int)0,(int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix4_obj,orthogonalProjection,return )

 ::kha::math::Matrix4 Matrix4_obj::perspectiveProjection(Float fovY,Float aspect,Float zn,Float zf){
            	HX_STACK_FRAME("kha.math.Matrix4","perspectiveProjection",0x0a33dc14,"kha.math.Matrix4.perspectiveProjection","kha/math/Matrix4.hx",119,0x5b479ee7)
            	HX_STACK_ARG(fovY,"fovY")
            	HX_STACK_ARG(aspect,"aspect")
            	HX_STACK_ARG(zn,"zn")
            	HX_STACK_ARG(zf,"zf")
HXLINE( 120)		Float _hx_tmp = ::Math_obj::tan(((Float)fovY / (Float)(int)2));
HXDLIN( 120)		HX_VARI( Float,uh) = ((Float)((Float)1.0) / (Float)_hx_tmp);
HXLINE( 122)		return  ::kha::math::Matrix4_obj::__new(((Float)uh / (Float)aspect),(int)0,(int)0,(int)0,(int)0,uh,(int)0,(int)0,(int)0,(int)0,((Float)(zf + zn) / (Float)(zn - zf)),((Float)(((int)2 * zf) * zn) / (Float)(zn - zf)),(int)0,(int)0,(int)-1,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_obj,perspectiveProjection,return )

 ::kha::math::Matrix4 Matrix4_obj::lookAt( ::kha::math::Vector3 eye, ::kha::math::Vector3 at, ::kha::math::Vector3 up){
            	HX_STACK_FRAME("kha.math.Matrix4","lookAt",0x1520ac29,"kha.math.Matrix4.lookAt","kha/math/Matrix4.hx",130,0x5b479ee7)
            	HX_STACK_ARG(eye,"eye")
            	HX_STACK_ARG(at,"at")
            	HX_STACK_ARG(up,"up")
HXLINE( 131)		HX_VARI(  ::kha::math::Vector3,zaxis) =  ::kha::math::Vector3_obj::__new((at->x - eye->x),(at->y - eye->y),(at->z - eye->z));
HXLINE( 132)		zaxis->set_length((int)1);
HXLINE( 133)		HX_VARI(  ::kha::math::Vector3,xaxis) =  ::kha::math::Vector3_obj::__new(((zaxis->y * up->z) - (zaxis->z * up->y)),((zaxis->z * up->x) - (zaxis->x * up->z)),((zaxis->x * up->y) - (zaxis->y * up->x)));
HXLINE( 134)		xaxis->set_length((int)1);
HXLINE( 135)		HX_VARI( Float,_x) = ((xaxis->y * zaxis->z) - (xaxis->z * zaxis->y));
HXDLIN( 135)		HX_VARI( Float,_y) = ((xaxis->z * zaxis->x) - (xaxis->x * zaxis->z));
HXDLIN( 135)		HX_VARI( Float,_z) = ((xaxis->x * zaxis->y) - (xaxis->y * zaxis->x));
HXLINE( 137)		return  ::kha::math::Matrix4_obj::__new(xaxis->x,xaxis->y,xaxis->z,-((((xaxis->x * eye->x) + (xaxis->y * eye->y)) + (xaxis->z * eye->z))),_x,_y,_z,-((((_x * eye->x) + (_y * eye->y)) + (_z * eye->z))),-(zaxis->x),-(zaxis->y),-(zaxis->z),(((zaxis->x * eye->x) + (zaxis->y * eye->y)) + (zaxis->z * eye->z)),(int)0,(int)0,(int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_obj,lookAt,return )


Matrix4_obj::Matrix4_obj()
{
}

hx::Val Matrix4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_00") ) { return hx::Val( _00); }
		if (HX_FIELD_EQ(inName,"_10") ) { return hx::Val( _10); }
		if (HX_FIELD_EQ(inName,"_20") ) { return hx::Val( _20); }
		if (HX_FIELD_EQ(inName,"_30") ) { return hx::Val( _30); }
		if (HX_FIELD_EQ(inName,"_01") ) { return hx::Val( _01); }
		if (HX_FIELD_EQ(inName,"_11") ) { return hx::Val( _11); }
		if (HX_FIELD_EQ(inName,"_21") ) { return hx::Val( _21); }
		if (HX_FIELD_EQ(inName,"_31") ) { return hx::Val( _31); }
		if (HX_FIELD_EQ(inName,"_02") ) { return hx::Val( _02); }
		if (HX_FIELD_EQ(inName,"_12") ) { return hx::Val( _12); }
		if (HX_FIELD_EQ(inName,"_22") ) { return hx::Val( _22); }
		if (HX_FIELD_EQ(inName,"_32") ) { return hx::Val( _32); }
		if (HX_FIELD_EQ(inName,"_03") ) { return hx::Val( _03); }
		if (HX_FIELD_EQ(inName,"_13") ) { return hx::Val( _13); }
		if (HX_FIELD_EQ(inName,"_23") ) { return hx::Val( _23); }
		if (HX_FIELD_EQ(inName,"_33") ) { return hx::Val( _33); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix4_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"lookAt") ) { outValue = lookAt_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"orthogonalProjection") ) { outValue = orthogonalProjection_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"perspectiveProjection") ) { outValue = perspectiveProjection_dyn(); return true; }
	}
	return false;
}

hx::Val Matrix4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_00") ) { _00=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_10") ) { _10=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_20") ) { _20=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_30") ) { _30=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_01") ) { _01=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_11") ) { _11=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_21") ) { _21=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_31") ) { _31=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_02") ) { _02=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_12") ) { _12=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_22") ) { _22=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_32") ) { _32=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_03") ) { _03=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_13") ) { _13=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_23") ) { _23=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_33") ) { _33=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_00","\x1f","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_10","\xfe","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_20","\xdd","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_30","\xbc","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_01","\x20","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_11","\xff","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_21","\xde","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_31","\xbd","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_02","\x21","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_12","\x00","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_22","\xdf","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_32","\xbe","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_03","\x22","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_13","\x01","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_23","\xe0","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_33","\xbf","\x42","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix4_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_00),HX_HCSTRING("_00","\x1f","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_10),HX_HCSTRING("_10","\xfe","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_20),HX_HCSTRING("_20","\xdd","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_30),HX_HCSTRING("_30","\xbc","\x42","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_01),HX_HCSTRING("_01","\x20","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_11),HX_HCSTRING("_11","\xff","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_21),HX_HCSTRING("_21","\xde","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_31),HX_HCSTRING("_31","\xbd","\x42","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_02),HX_HCSTRING("_02","\x21","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_12),HX_HCSTRING("_12","\x00","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_22),HX_HCSTRING("_22","\xdf","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_32),HX_HCSTRING("_32","\xbe","\x42","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_03),HX_HCSTRING("_03","\x22","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_13),HX_HCSTRING("_13","\x01","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_23),HX_HCSTRING("_23","\xe0","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_33),HX_HCSTRING("_33","\xbf","\x42","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Matrix4_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Matrix4_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &Matrix4_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Matrix4_obj_sMemberFields[] = {
	HX_HCSTRING("_00","\x1f","\x40","\x48","\x00"),
	HX_HCSTRING("_10","\xfe","\x40","\x48","\x00"),
	HX_HCSTRING("_20","\xdd","\x41","\x48","\x00"),
	HX_HCSTRING("_30","\xbc","\x42","\x48","\x00"),
	HX_HCSTRING("_01","\x20","\x40","\x48","\x00"),
	HX_HCSTRING("_11","\xff","\x40","\x48","\x00"),
	HX_HCSTRING("_21","\xde","\x41","\x48","\x00"),
	HX_HCSTRING("_31","\xbd","\x42","\x48","\x00"),
	HX_HCSTRING("_02","\x21","\x40","\x48","\x00"),
	HX_HCSTRING("_12","\x00","\x41","\x48","\x00"),
	HX_HCSTRING("_22","\xdf","\x41","\x48","\x00"),
	HX_HCSTRING("_32","\xbe","\x42","\x48","\x00"),
	HX_HCSTRING("_03","\x22","\x40","\x48","\x00"),
	HX_HCSTRING("_13","\x01","\x41","\x48","\x00"),
	HX_HCSTRING("_23","\xe0","\x41","\x48","\x00"),
	HX_HCSTRING("_33","\xbf","\x42","\x48","\x00"),
	::String(null()) };

static void Matrix4_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix4_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix4_obj::width,"width");
	HX_MARK_MEMBER_NAME(Matrix4_obj::height,"height");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix4_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix4_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix4_obj::width,"width");
	HX_VISIT_MEMBER_NAME(Matrix4_obj::height,"height");
};

#endif

hx::Class Matrix4_obj::__mClass;

static ::String Matrix4_obj_sStaticFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("orthogonalProjection","\x68","\x77","\x62","\xe1"),
	HX_HCSTRING("perspectiveProjection","\x2b","\xa5","\x1a","\xd5"),
	HX_HCSTRING("lookAt","\x32","\x75","\xb5","\x61"),
	::String(null())
};

void Matrix4_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.math.Matrix4","\x97","\x70","\xff","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix4_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix4_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix4_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix4_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix4_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix4_obj::__boot()
{
{
            	HX_STACK_FRAME("kha.math.Matrix4","boot",0x17783f69,"kha.math.Matrix4.boot","kha/math/Matrix4.hx",4,0x5b479ee7)
HXLINE(   4)		width = (int)4;
            	}
{
            	HX_STACK_FRAME("kha.math.Matrix4","boot",0x17783f69,"kha.math.Matrix4.boot","kha/math/Matrix4.hx",5,0x5b479ee7)
HXLINE(   5)		height = (int)4;
            	}
}

} // end namespace kha
} // end namespace math
