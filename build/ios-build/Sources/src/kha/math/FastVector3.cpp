// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_kha_math_FastVector3
#include <kha/math/FastVector3.h>
#endif
#ifndef INCLUDED_kha_math_Vector3
#include <kha/math/Vector3.h>
#endif

namespace kha{
namespace math{

void FastVector3_obj::__construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z){
float x = __o_x.Default(0);
float y = __o_y.Default(0);
float z = __o_z.Default(0);
            	HX_STACK_FRAME("kha.math.FastVector3","new",0x15ff578a,"kha.math.FastVector3.new","kha/math/FastVector3.hx",4,0x34dfab86)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(   5)		this->x = x;
HXLINE(   6)		this->y = y;
HXLINE(   7)		this->z = z;
            	}

Dynamic FastVector3_obj::__CreateEmpty() { return new FastVector3_obj; }

hx::ObjectPtr< FastVector3_obj > FastVector3_obj::__new(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z)
{
	hx::ObjectPtr< FastVector3_obj > _hx_result = new FastVector3_obj();
	_hx_result->__construct(__o_x,__o_y,__o_z);
	return _hx_result;
}

Dynamic FastVector3_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FastVector3_obj > _hx_result = new FastVector3_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

float FastVector3_obj::get_length(){
            	HX_STACK_FRAME("kha.math.FastVector3","get_length",0x51b916c5,"kha.math.FastVector3.get_length","kha/math/FastVector3.hx",20,0x34dfab86)
            	HX_STACK_THIS(this)
HXLINE(  20)		float _hx_tmp = (((this->x * this->x) + (this->y * this->y)) + (this->z * this->z));
HXDLIN(  20)		return ::Math_obj::sqrt(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FastVector3_obj,get_length,return )

float FastVector3_obj::set_length(float length){
            	HX_STACK_FRAME("kha.math.FastVector3","set_length",0x5536b539,"kha.math.FastVector3.set_length","kha/math/FastVector3.hx",23,0x34dfab86)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
HXLINE(  24)		HX_VARI( float,currentLength) = this->get_length();
HXLINE(  25)		if ((currentLength == (int)0)) {
HXLINE(  25)			return (int)0;
            		}
HXLINE(  26)		HX_VARI( Float,mul) = ((Float)length / (Float)currentLength);
HXLINE(  27)		hx::MultEq(this->x,mul);
HXLINE(  28)		hx::MultEq(this->y,mul);
HXLINE(  29)		hx::MultEq(this->z,mul);
HXLINE(  30)		return length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FastVector3_obj,set_length,return )

::String FastVector3_obj::toString(){
            	HX_STACK_FRAME("kha.math.FastVector3","toString",0xaf971142,"kha.math.FastVector3.toString","kha/math/FastVector3.hx",62,0x34dfab86)
            	HX_STACK_THIS(this)
HXLINE(  62)		::String _hx_tmp = ::Std_obj::string(this->x);
HXDLIN(  62)		::String _hx_tmp1 = ((HX_("FastVector3(",f4,9a,e5,0d) + _hx_tmp) + HX_(", ",74,26,00,00));
HXDLIN(  62)		::String _hx_tmp2 = ::Std_obj::string(this->y);
HXDLIN(  62)		::String _hx_tmp3 = ((_hx_tmp1 + _hx_tmp2) + HX_(", ",74,26,00,00));
HXDLIN(  62)		::String _hx_tmp4 = ::Std_obj::string(this->z);
HXDLIN(  62)		return ((_hx_tmp3 + _hx_tmp4) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FastVector3_obj,toString,return )

 ::kha::math::FastVector3 FastVector3_obj::fromVector3( ::kha::math::Vector3 v){
            	HX_STACK_FRAME("kha.math.FastVector3","fromVector3",0x95831ef0,"kha.math.FastVector3.fromVector3","kha/math/FastVector3.hx",11,0x34dfab86)
            	HX_STACK_ARG(v,"v")
HXLINE(  11)		return  ::kha::math::FastVector3_obj::__new(v->x,v->y,v->z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FastVector3_obj,fromVector3,return )


FastVector3_obj::FastVector3_obj()
{
}

hx::Val FastVector3_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FastVector3_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"fromVector3") ) { outValue = fromVector3_dyn(); return true; }
	}
	return false;
}

hx::Val FastVector3_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FastVector3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FastVector3_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastVector3_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastVector3_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastVector3_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FastVector3_obj_sStaticStorageInfo = 0;
#endif

static ::String FastVector3_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FastVector3_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FastVector3_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FastVector3_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FastVector3_obj::__mClass,"__mClass");
};

#endif

hx::Class FastVector3_obj::__mClass;

static ::String FastVector3_obj_sStaticFields[] = {
	HX_HCSTRING("fromVector3","\xc6","\x5d","\xdd","\x72"),
	::String(null())
};

void FastVector3_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.math.FastVector3","\x98","\x8a","\x4e","\x67");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FastVector3_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FastVector3_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FastVector3_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FastVector3_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FastVector3_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FastVector3_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FastVector3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FastVector3_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace math
