// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <kha/Sound.h>
#endif
#ifndef INCLUDED_kha_kore_Sound
#include <kha/kore/Sound.h>
#endif

namespace kha{
namespace kore{

void Sound_obj::__construct(::String filename){
            	HX_STACK_FRAME("kha.kore.Sound","new",0x4b148154,"kha.kore.Sound.new","kha/kore/Sound.hx",16,0x7012c0fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filename,"filename")
HXLINE(  17)		super::__construct();
HXLINE(  18)		this->filename = filename;
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

hx::ObjectPtr< Sound_obj > Sound_obj::__new(::String filename)
{
	hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct(filename);
	return _hx_result;
}

Dynamic Sound_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Sound_obj::uncompress2(){
            	HX_STACK_FRAME("kha.kore.Sound","uncompress2",0x5a4eb1cb,"kha.kore.Sound.uncompress2","kha/kore/Sound.hx",62,0x7012c0fc)
            	HX_STACK_THIS(this)
            	
		sound = new Kore::Sound(filename.c_str());
		if (sound->format.channels == 1) {
			if (sound->format.bitsPerSample == 8) {
				this->_createData(sound->size * 2);
				for (int i = 0; i < sound->size; ++i) {
					uncompressedData[i * 2 + 0] = sound->data[i] / 255.0 * 2.0 - 1.0;
					uncompressedData[i * 2 + 1] = sound->data[i] / 255.0 * 2.0 - 1.0;
				}
			}
			else if (sound->format.bitsPerSample == 16) {
				this->_createData(sound->size);
				Kore::s16* sdata = (Kore::s16*)&sound->data[0];
				for (int i = 0; i < sound->size / 2; ++i) {
					uncompressedData[i * 2 + 0] = sdata[i] / 32767.0;
					uncompressedData[i * 2 + 1] = sdata[i] / 32767.0;
				}
			}
			else {
				this->_createData(2);
			}
		}
		else {
			if (sound->format.bitsPerSample == 8) {
				this->_createData(sound->size);
				for (int i = 0; i < sound->size; ++i) {
					uncompressedData[i] = sound->data[i] / 255.0 * 2.0 - 1.0;
				}
			}
			else if (sound->format.bitsPerSample == 16) {
				this->_createData(sound->size / 2);
				Kore::s16* sdata = (Kore::s16*)&sound->data[0];
				for (int i = 0; i < sound->size / 2; ++i) {
					uncompressedData[i] = sdata[i] / 32767.0;
				}
			}
			else {
				this->_createData(2);
			}
		}
	

            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,uncompress2,(void))

void Sound_obj::uncompress( ::Dynamic done){
            	HX_STACK_FRAME("kha.kore.Sound","uncompress",0xc94d4487,"kha.kore.Sound.uncompress","kha/kore/Sound.hx",66,0x7012c0fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(done,"done")
HXLINE(  67)		this->uncompress2();
HXLINE(  68)		this->compressedData = null();
HXLINE(  69)		done();
            	}


void Sound_obj::unload2(){
            	HX_STACK_FRAME("kha.kore.Sound","unload2",0x241e7947,"kha.kore.Sound.unload2","kha/kore/Sound.hx",84,0x7012c0fc)
            	HX_STACK_THIS(this)
            	delete sound; sound = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,unload2,(void))

void Sound_obj::unload(){
            	HX_STACK_FRAME("kha.kore.Sound","unload",0x49a2008b,"kha.kore.Sound.unload","kha/kore/Sound.hx",88,0x7012c0fc)
            	HX_STACK_THIS(this)
HXLINE(  89)		this->super::unload();
HXLINE(  90)		this->unload2();
            	}


void Sound_obj::_createData(Int size){
            	HX_STACK_FRAME("kha.kore.Sound","_createData",0x3883a959,"kha.kore.Sound._createData","kha/kore/Sound.hx",94,0x7012c0fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
HXLINE(  94)		HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN(  94)		_hx_array_set_size_exact(this1,size);
HXDLIN(  94)		this->uncompressedData = this1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,_createData,(void))


Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(filename,"filename");
	 ::kha::Sound_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(filename,"filename");
	 ::kha::Sound_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Sound_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unload2") ) { return hx::Val( unload2_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"filename") ) { return hx::Val( filename); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uncompress") ) { return hx::Val( uncompress_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"uncompress2") ) { return hx::Val( uncompress2_dyn()); }
		if (HX_FIELD_EQ(inName,"_createData") ) { return hx::Val( _createData_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Sound_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"filename") ) { filename=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("filename","\xc7","\x2e","\x6a","\x77"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Sound_obj,filename),HX_HCSTRING("filename","\xc7","\x2e","\x6a","\x77")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Sound_obj_sStaticStorageInfo = 0;
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_HCSTRING("filename","\xc7","\x2e","\x6a","\x77"),
	HX_HCSTRING("uncompress2","\xd7","\xec","\x45","\x49"),
	HX_HCSTRING("uncompress","\xfb","\x2e","\x83","\x09"),
	HX_HCSTRING("unload2","\x53","\x3e","\x80","\x75"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("_createData","\x65","\xe4","\x7a","\x27"),
	::String(null()) };

static void Sound_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sound_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
};

#endif

hx::Class Sound_obj::__mClass;

void Sound_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.kore.Sound","\x62","\x87","\xc4","\xf4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Sound_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sound_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sound_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace kore
