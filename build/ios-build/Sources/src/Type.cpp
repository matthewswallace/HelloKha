// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif


void Type_obj::__construct() { }

Dynamic Type_obj::__CreateEmpty() { return new Type_obj; }

hx::ObjectPtr< Type_obj > Type_obj::__new()
{
	hx::ObjectPtr< Type_obj > _hx_result = new Type_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Type_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Type_obj > _hx_result = new Type_obj();
	_hx_result->__construct();
	return _hx_result;
}

hx::Class Type_obj::resolveClass(::String name){
            	HX_STACK_FRAME("Type","resolveClass",0x23b06bc0,"Type.resolveClass","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Type.hx",67,0x0d3ab963)
            	HX_STACK_ARG(name,"name")
HXLINE(  68)		HX_VARI( hx::Class,result) = ::hx::Class_obj::Resolve(name);
HXLINE(  69)		Bool _hx_tmp;
HXDLIN(  69)		Bool _hx_tmp1 = hx::IsNotNull( result );
HXDLIN(  69)		if (_hx_tmp1) {
HXLINE(  69)			_hx_tmp = ( (Bool)(result->__IsEnum()) );
            		}
            		else {
HXLINE(  69)			_hx_tmp = false;
            		}
HXDLIN(  69)		if (_hx_tmp) {
HXLINE(  70)			return null();
            		}
HXLINE(  71)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,resolveClass,return )

hx::Class Type_obj::resolveEnum(::String name){
            	HX_STACK_FRAME("Type","resolveEnum",0x26394079,"Type.resolveEnum","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Type.hx",74,0x0d3ab963)
            	HX_STACK_ARG(name,"name")
HXLINE(  75)		HX_VARI( hx::Class,result) = ::hx::Class_obj::Resolve(name);
HXLINE(  76)		Bool _hx_tmp;
HXDLIN(  76)		Bool _hx_tmp1 = hx::IsNotNull( result );
HXDLIN(  76)		if (_hx_tmp1) {
HXLINE(  76)			_hx_tmp = !(( (Bool)(result->__IsEnum()) ));
            		}
            		else {
HXLINE(  76)			_hx_tmp = false;
            		}
HXDLIN(  76)		if (_hx_tmp) {
HXLINE(  77)			return null();
            		}
HXLINE(  78)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,resolveEnum,return )

 ::Dynamic Type_obj::createEmptyInstance(hx::Class cl){
            	HX_STACK_FRAME("Type","createEmptyInstance",0xcb752312,"Type.createEmptyInstance","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Type.hx",88,0x0d3ab963)
            	HX_STACK_ARG(cl,"cl")
HXLINE(  88)		return cl->ConstructEmpty();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,createEmptyInstance,return )

 ::Dynamic Type_obj::createEnum(hx::Class e,::String constr,::cpp::VirtualArray params){
            	HX_STACK_FRAME("Type","createEnum",0xd8d56d31,"Type.createEnum","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Type.hx",92,0x0d3ab963)
            	HX_STACK_ARG(e,"e")
            	HX_STACK_ARG(constr,"constr")
            	HX_STACK_ARG(params,"params")
HXLINE(  92)		return e->ConstructEnum(constr,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Type_obj,createEnum,return )

::Array< ::String > Type_obj::getInstanceFields(hx::Class c){
            	HX_STACK_FRAME("Type","getInstanceFields",0xe970f890,"Type.getInstanceFields","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Type.hx",102,0x0d3ab963)
            	HX_STACK_ARG(c,"c")
HXLINE( 102)		return ( (::Array< ::String >)(c->GetInstanceFields()) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,getInstanceFields,return )

::Array< ::String > Type_obj::getEnumConstructs(hx::Class e){
            	HX_STACK_FRAME("Type","getEnumConstructs",0x7f46cf7f,"Type.getEnumConstructs","/usr/local/lib/haxe/lib/kha/git/Tools/haxe/std/cpp/_std/Type.hx",110,0x0d3ab963)
            	HX_STACK_ARG(e,"e")
HXLINE( 110)		return ( (::Array< ::String >)(e->GetClassFields()) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,getEnumConstructs,return )


Type_obj::Type_obj()
{
}

bool Type_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"createEnum") ) { outValue = createEnum_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resolveEnum") ) { outValue = resolveEnum_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getInstanceFields") ) { outValue = getInstanceFields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getEnumConstructs") ) { outValue = getEnumConstructs_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createEmptyInstance") ) { outValue = createEmptyInstance_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Type_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Type_obj_sStaticStorageInfo = 0;
#endif

static void Type_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Type_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Type_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Type_obj::__mClass,"__mClass");
};

#endif

hx::Class Type_obj::__mClass;

static ::String Type_obj_sStaticFields[] = {
	HX_HCSTRING("resolveClass","\xac","\xbd","\xdd","\x80"),
	HX_HCSTRING("resolveEnum","\x0d","\x90","\x51","\xde"),
	HX_HCSTRING("createEmptyInstance","\xa6","\x26","\x85","\xce"),
	HX_HCSTRING("createEnum","\x1d","\x2c","\xa4","\x55"),
	HX_HCSTRING("getInstanceFields","\x24","\x2f","\x97","\xed"),
	HX_HCSTRING("getEnumConstructs","\x13","\x06","\x6d","\x83"),
	::String(null())
};

void Type_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Type","\xda","\x1e","\xe2","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Type_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Type_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Type_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Type_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Type_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Type_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Type_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

