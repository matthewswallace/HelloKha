// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#define INCLUDED_kha_graphics4_ImageShaderPainter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,arrays,Float32Array)
HX_DECLARE_CLASS2(kha,graphics4,BlendingFactor)
HX_DECLARE_CLASS2(kha,graphics4,ConstantLocation)
HX_DECLARE_CLASS2(kha,graphics4,Graphics)
HX_DECLARE_CLASS2(kha,graphics4,ImageShaderPainter)
HX_DECLARE_CLASS2(kha,graphics4,IndexBuffer)
HX_DECLARE_CLASS2(kha,graphics4,PipelineState)
HX_DECLARE_CLASS2(kha,graphics4,PipelineStateBase)
HX_DECLARE_CLASS2(kha,graphics4,TextureUnit)
HX_DECLARE_CLASS2(kha,graphics4,VertexBuffer)
HX_DECLARE_CLASS2(kha,graphics4,VertexStructure)
HX_DECLARE_CLASS2(kha,math,FastMatrix4)

namespace kha{
namespace graphics4{


class HXCPP_CLASS_ATTRIBUTES ImageShaderPainter_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ImageShaderPainter_obj OBJ_;
		ImageShaderPainter_obj();

	public:
		void __construct(::Dynamic g4);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.graphics4.ImageShaderPainter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.graphics4.ImageShaderPainter"); }
		static hx::ObjectPtr< ImageShaderPainter_obj > __new(::Dynamic g4);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ImageShaderPainter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("ImageShaderPainter","\xab","\x12","\xe2","\xb4"); }

		static void __boot();
		static  ::kha::graphics4::PipelineState shaderPipeline;
		static  ::kha::graphics4::VertexStructure structure;
		static Int bufferSize;
		static Int vertexSize;
		static void initShaders();
		static ::Dynamic initShaders_dyn();

		 ::kha::math::FastMatrix4 projectionMatrix;
		::Dynamic projectionLocation;
		::Dynamic textureLocation;
		Int bufferIndex;
		 ::kha::graphics4::VertexBuffer rectVertexBuffer;
		 ::kha::arrays::Float32Array rectVertices;
		 ::kha::graphics4::IndexBuffer indexBuffer;
		 ::kha::Image lastTexture;
		Bool bilinear;
		Bool bilinearMipmaps;
		::Dynamic g;
		 ::kha::graphics4::PipelineState myPipeline;
		::hx::EnumBase sourceBlend;
		::hx::EnumBase destinationBlend;
		 ::kha::graphics4::PipelineState get_pipeline();
		::Dynamic get_pipeline_dyn();

		 ::kha::graphics4::PipelineState set_pipeline( ::kha::graphics4::PipelineState pipe);
		::Dynamic set_pipeline_dyn();

		void setProjection( ::kha::math::FastMatrix4 projectionMatrix);
		::Dynamic setProjection_dyn();

		void initBuffers();
		::Dynamic initBuffers_dyn();

		void setRectVertices(float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty);
		::Dynamic setRectVertices_dyn();

		void setRectTexCoords(float left,float top,float right,float bottom);
		::Dynamic setRectTexCoords_dyn();

		void setRectColor(float r,float g,float b,float a);
		::Dynamic setRectColor_dyn();

		void drawBuffer();
		::Dynamic drawBuffer_dyn();

		void setBilinearFilter(Bool bilinear);
		::Dynamic setBilinearFilter_dyn();

		void setBilinearMipmapFilter(Bool bilinear);
		::Dynamic setBilinearMipmapFilter_dyn();

		void drawImage( ::kha::Image img,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,Int color);
		::Dynamic drawImage_dyn();

		void drawImage2( ::kha::Image img,float sx,float sy,float sw,float sh,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,Int color);
		::Dynamic drawImage2_dyn();

		void drawImageScale( ::kha::Image img,float sx,float sy,float sw,float sh,float left,float top,float right,float bottom,float opacity,Int color);
		::Dynamic drawImageScale_dyn();

		void end();
		::Dynamic end_dyn();

};

} // end namespace kha
} // end namespace graphics4

#endif /* INCLUDED_kha_graphics4_ImageShaderPainter */ 
