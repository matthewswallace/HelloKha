// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_input_Mouse
#define INCLUDED_kha_input_Mouse

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(kha,input,Mouse)
HX_DECLARE_CLASS2(kha,network,Controller)

namespace kha{
namespace input{


class HXCPP_CLASS_ATTRIBUTES Mouse_obj : public  ::kha::network::Controller_obj
{
	public:
		typedef  ::kha::network::Controller_obj super;
		typedef Mouse_obj OBJ_;
		Mouse_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.input.Mouse")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.input.Mouse"); }
		static hx::ObjectPtr< Mouse_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mouse_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Mouse","\x05","\x86","\x92","\x9f"); }

		static void __boot();
		static  ::Dynamic __meta__;
		static  ::kha::input::Mouse get(hx::Null< Int >  num);
		static ::Dynamic get_dyn();

		static  ::kha::input::Mouse instance;
		void notify( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener);
		::Dynamic notify_dyn();

		void remove( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener);
		::Dynamic remove_dyn();

		void notifyWindowed(Int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener);
		::Dynamic notifyWindowed_dyn();

		void removeWindowed(Int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener);
		::Dynamic removeWindowed_dyn();

		void lock();
		::Dynamic lock_dyn();

		void unlock();
		::Dynamic unlock_dyn();

		Bool canLock();
		::Dynamic canLock_dyn();

		Bool isLocked();
		::Dynamic isLocked_dyn();

		void notifyOnLockChange( ::Dynamic func, ::Dynamic error);
		::Dynamic notifyOnLockChange_dyn();

		void removeFromLockChange( ::Dynamic func, ::Dynamic error);
		::Dynamic removeFromLockChange_dyn();

		void hideSystemCursor();
		::Dynamic hideSystemCursor_dyn();

		void showSystemCursor();
		::Dynamic showSystemCursor_dyn();

		::Array< ::Dynamic> windowDownListeners;
		::Array< ::Dynamic> windowUpListeners;
		::Array< ::Dynamic> windowMoveListeners;
		::Array< ::Dynamic> windowWheelListeners;
		void sendDownEvent(Int windowId,Int button,Int x,Int y);
		::Dynamic sendDownEvent_dyn();

		void sendUpEvent(Int windowId,Int button,Int x,Int y);
		::Dynamic sendUpEvent_dyn();

		void sendMoveEvent(Int windowId,Int x,Int y,Int movementX,Int movementY);
		::Dynamic sendMoveEvent_dyn();

		void sendWheelEvent(Int windowId,Int delta);
		::Dynamic sendWheelEvent_dyn();

		void _receive( ::haxe::io::Bytes bytes);

};

} // end namespace kha
} // end namespace input

#endif /* INCLUDED_kha_input_Mouse */ 
