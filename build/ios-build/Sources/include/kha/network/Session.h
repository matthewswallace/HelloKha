// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_network_Session
#define INCLUDED_kha_network_Session

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(kha,network,Client)
HX_DECLARE_CLASS2(kha,network,Controller)
HX_DECLARE_CLASS2(kha,network,Entity)
HX_DECLARE_CLASS2(kha,network,Network)
HX_DECLARE_CLASS2(kha,network,Session)

namespace kha{
namespace network{


class HXCPP_CLASS_ATTRIBUTES Session_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Session_obj OBJ_;
		Session_obj();

	public:
		void __construct(Int maxPlayers,::String address,Int port);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.network.Session")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.network.Session"); }
		static hx::ObjectPtr< Session_obj > __new(Int maxPlayers,::String address,Int port);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Session_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Session","\x36","\x3f","\xe9","\x60"); }

		static void __boot();
		static Int START;
		static Int ENTITY_UPDATES;
		static Int CONTROLLER_UPDATES;
		static Int REMOTE_CALL;
		static Int PING;
		static Int ERROR;
		static Int PLAYER_UPDATES;
		static Int RPC_SERVER;
		static Int RPC_ALL;
		static  ::kha::network::Session instance;
		static  ::kha::network::Session the();
		static ::Dynamic the_dyn();

		 ::haxe::ds::IntMap entities;
		 ::haxe::ds::IntMap controllers;
		Int maxPlayers;
		Int currentPlayers;
		Float ping;
		::String address;
		Int port;
		 ::Dynamic startCallback;
		 ::Dynamic &startCallback_dyn() { return startCallback;}
		 ::Dynamic refusedCallback;
		 ::Dynamic &refusedCallback_dyn() { return refusedCallback;}
		 ::Dynamic resetCallback;
		 ::Dynamic &resetCallback_dyn() { return resetCallback;}
		::Dynamic localClient;
		 ::kha::network::Network network;
		Int updateTaskId;
		Int pingTaskId;
		::Dynamic me;
		::Dynamic get_me();
		::Dynamic get_me_dyn();

		void addEntity(::Dynamic entity);
		::Dynamic addEntity_dyn();

		void addController( ::kha::network::Controller controller);
		::Dynamic addController_dyn();

		void sendControllerUpdate(Int id, ::haxe::io::Bytes bytes);
		::Dynamic sendControllerUpdate_dyn();

		void sendPing();
		::Dynamic sendPing_dyn();

		void sendPlayerUpdate();
		::Dynamic sendPlayerUpdate_dyn();

		void receive( ::haxe::io::Bytes bytes,::Dynamic client);
		::Dynamic receive_dyn();

		void executeRPC( ::haxe::io::Bytes bytes);
		::Dynamic executeRPC_dyn();

		void waitForStart( ::Dynamic callback, ::Dynamic refuseCallback, ::Dynamic errorCallback, ::Dynamic closeCallback, ::Dynamic resCallback);
		::Dynamic waitForStart_dyn();

		void reset();
		::Dynamic reset_dyn();

		void update();
		::Dynamic update_dyn();

		void sendToServer( ::haxe::io::Bytes bytes);
		::Dynamic sendToServer_dyn();

};

} // end namespace kha
} // end namespace network

#endif /* INCLUDED_kha_network_Session */ 
