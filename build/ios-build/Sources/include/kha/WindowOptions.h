// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_WindowOptions
#define INCLUDED_kha_WindowOptions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Mode)
HX_DECLARE_CLASS1(kha,Position)
HX_DECLARE_CLASS1(kha,RendererOptions)
HX_DECLARE_CLASS1(kha,TargetDisplay)
HX_DECLARE_CLASS1(kha,WindowOptions)
HX_DECLARE_CLASS1(kha,WindowedModeOptions)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES WindowOptions_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef WindowOptions_obj OBJ_;
		WindowOptions_obj();

	public:
		void __construct(Int width,Int height,::hx::EnumBase mode,::String title,::hx::EnumBase x,::hx::EnumBase y,::hx::EnumBase targetDisplay, ::kha::RendererOptions rendererOptions, ::kha::WindowedModeOptions windowedModeOptions);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.WindowOptions")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.WindowOptions"); }
		static hx::ObjectPtr< WindowOptions_obj > __new(Int width,Int height,::hx::EnumBase mode,::String title,::hx::EnumBase x,::hx::EnumBase y,::hx::EnumBase targetDisplay, ::kha::RendererOptions rendererOptions, ::kha::WindowedModeOptions windowedModeOptions);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~WindowOptions_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("WindowOptions","\x2e","\x75","\x06","\xe3"); }

		Int width;
		Int height;
		::hx::EnumBase mode;
		::String title;
		::hx::EnumBase x;
		::hx::EnumBase y;
		::hx::EnumBase targetDisplay;
		 ::kha::RendererOptions rendererOptions;
		 ::kha::WindowedModeOptions windowedModeOptions;
};

} // end namespace kha

#endif /* INCLUDED_kha_WindowOptions */ 
