// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_FontList
#define INCLUDED_kha_FontList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Font)
HX_DECLARE_CLASS1(kha,FontList)
HX_DECLARE_CLASS1(kha,Resource)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES FontList_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FontList_obj OBJ_;
		FontList_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.FontList")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.FontList"); }
		static hx::ObjectPtr< FontList_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FontList_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FontList","\xed","\xf5","\xe2","\xa3"); }

		::Dynamic OpenSans_Bold;
		::String OpenSans_BoldName;
		 ::Dynamic OpenSans_BoldDescription;
		void OpenSans_BoldLoad( ::Dynamic done);
		::Dynamic OpenSans_BoldLoad_dyn();

		void OpenSans_BoldUnload();
		::Dynamic OpenSans_BoldUnload_dyn();

		::Dynamic OpenSans_BoldItalic;
		::String OpenSans_BoldItalicName;
		 ::Dynamic OpenSans_BoldItalicDescription;
		void OpenSans_BoldItalicLoad( ::Dynamic done);
		::Dynamic OpenSans_BoldItalicLoad_dyn();

		void OpenSans_BoldItalicUnload();
		::Dynamic OpenSans_BoldItalicUnload_dyn();

		::Dynamic OpenSans_ExtraBold;
		::String OpenSans_ExtraBoldName;
		 ::Dynamic OpenSans_ExtraBoldDescription;
		void OpenSans_ExtraBoldLoad( ::Dynamic done);
		::Dynamic OpenSans_ExtraBoldLoad_dyn();

		void OpenSans_ExtraBoldUnload();
		::Dynamic OpenSans_ExtraBoldUnload_dyn();

		::Dynamic OpenSans_ExtraBoldItalic;
		::String OpenSans_ExtraBoldItalicName;
		 ::Dynamic OpenSans_ExtraBoldItalicDescription;
		void OpenSans_ExtraBoldItalicLoad( ::Dynamic done);
		::Dynamic OpenSans_ExtraBoldItalicLoad_dyn();

		void OpenSans_ExtraBoldItalicUnload();
		::Dynamic OpenSans_ExtraBoldItalicUnload_dyn();

		::Dynamic OpenSans_Italic;
		::String OpenSans_ItalicName;
		 ::Dynamic OpenSans_ItalicDescription;
		void OpenSans_ItalicLoad( ::Dynamic done);
		::Dynamic OpenSans_ItalicLoad_dyn();

		void OpenSans_ItalicUnload();
		::Dynamic OpenSans_ItalicUnload_dyn();

		::Dynamic OpenSans_Light;
		::String OpenSans_LightName;
		 ::Dynamic OpenSans_LightDescription;
		void OpenSans_LightLoad( ::Dynamic done);
		::Dynamic OpenSans_LightLoad_dyn();

		void OpenSans_LightUnload();
		::Dynamic OpenSans_LightUnload_dyn();

		::Dynamic OpenSans_Regular;
		::String OpenSans_RegularName;
		 ::Dynamic OpenSans_RegularDescription;
		void OpenSans_RegularLoad( ::Dynamic done);
		::Dynamic OpenSans_RegularLoad_dyn();

		void OpenSans_RegularUnload();
		::Dynamic OpenSans_RegularUnload_dyn();

		::Dynamic OpenSans_LightItalic;
		::String OpenSans_LightItalicName;
		 ::Dynamic OpenSans_LightItalicDescription;
		void OpenSans_LightItalicLoad( ::Dynamic done);
		::Dynamic OpenSans_LightItalicLoad_dyn();

		void OpenSans_LightItalicUnload();
		::Dynamic OpenSans_LightItalicUnload_dyn();

		::Dynamic OpenSans_Semibold;
		::String OpenSans_SemiboldName;
		 ::Dynamic OpenSans_SemiboldDescription;
		void OpenSans_SemiboldLoad( ::Dynamic done);
		::Dynamic OpenSans_SemiboldLoad_dyn();

		void OpenSans_SemiboldUnload();
		::Dynamic OpenSans_SemiboldUnload_dyn();

		::Dynamic OpenSans_SemiboldItalic;
		::String OpenSans_SemiboldItalicName;
		 ::Dynamic OpenSans_SemiboldItalicDescription;
		void OpenSans_SemiboldItalicLoad( ::Dynamic done);
		::Dynamic OpenSans_SemiboldItalicLoad_dyn();

		void OpenSans_SemiboldItalicUnload();
		::Dynamic OpenSans_SemiboldItalicUnload_dyn();

		::Array< ::String > names;
};

} // end namespace kha

#endif /* INCLUDED_kha_FontList */ 
