// Generated by Haxe 3.3.0
#ifndef INCLUDED_kha_SystemImpl
#define INCLUDED_kha_SystemImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Framebuffer)
HX_DECLARE_CLASS1(kha,Mode)
HX_DECLARE_CLASS1(kha,Position)
HX_DECLARE_CLASS1(kha,ScreenRotation)
HX_DECLARE_CLASS1(kha,SystemImpl)
HX_DECLARE_CLASS1(kha,TargetDisplay)
HX_DECLARE_CLASS1(kha,WindowOptions)
HX_DECLARE_CLASS2(kha,graphics4,TextureFormat)
HX_DECLARE_CLASS2(kha,input,Gamepad)
HX_DECLARE_CLASS2(kha,input,Keyboard)
HX_DECLARE_CLASS2(kha,input,Mouse)
HX_DECLARE_CLASS2(kha,input,Surface)
HX_DECLARE_CLASS2(kha,network,Controller)


#include <Kore/pch.h>
#include <Kore/System.h>
#include <Kore/Input/Mouse.h>
#include <Kore/Window.h>

void init_kore(const char* name, int width, int height, int antialiasing);
void init_kore_ex(const char* name);
void post_kore_init();
void run_kore();
int init_window(Kore::WindowOptions windowOptions);

namespace kha{


class HXCPP_CLASS_ATTRIBUTES SystemImpl_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SystemImpl_obj OBJ_;
		SystemImpl_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.SystemImpl")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"kha.SystemImpl"); }
		static hx::ObjectPtr< SystemImpl_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SystemImpl_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("SystemImpl","\x8f","\xe9","\xee","\xea"); }

		static void __boot();
		static Bool needs3d;
		static  ::kha::input::Mouse getMouse(Int num);
		static ::Dynamic getMouse_dyn();

		static  ::kha::input::Keyboard getKeyboard(Int num);
		static ::Dynamic getKeyboard_dyn();

		static Float getTime();
		static ::Dynamic getTime_dyn();

		static Int windowWidth(Int windowId);
		static ::Dynamic windowWidth_dyn();

		static Int windowHeight(Int windowId);
		static ::Dynamic windowHeight_dyn();

		static Int screenDpi();
		static ::Dynamic screenDpi_dyn();

		static Bool getVsync();
		static ::Dynamic getVsync_dyn();

		static Int getRefreshRate();
		static ::Dynamic getRefreshRate_dyn();

		static ::hx::EnumBase getScreenRotation();
		static ::Dynamic getScreenRotation_dyn();

		static ::String getSystemId();
		static ::Dynamic getSystemId_dyn();

		static void requestShutdown();
		static ::Dynamic requestShutdown_dyn();

		static ::Array< ::Dynamic> framebuffers;
		static  ::kha::input::Keyboard keyboard;
		static  ::kha::input::Mouse mouse;
		static  ::kha::input::Gamepad gamepad1;
		static  ::kha::input::Gamepad gamepad2;
		static  ::kha::input::Gamepad gamepad3;
		static  ::kha::input::Gamepad gamepad4;
		static  ::kha::input::Surface surface;
		static ::Array< ::Dynamic> mouseLockListeners;
		static void init( ::Dynamic options, ::Dynamic callback);
		static ::Dynamic init_dyn();

		static void initEx(::String title,::Array< ::Dynamic> options, ::Dynamic windowCallback, ::Dynamic callback);
		static ::Dynamic initEx_dyn();

		static void postInit( ::Dynamic callback);
		static ::Dynamic postInit_dyn();

		static void loadFinished();
		static ::Dynamic loadFinished_dyn();

		static void lockMouse(hx::Null< Int >  windowId);
		static ::Dynamic lockMouse_dyn();

		static void unlockMouse(hx::Null< Int >  windowId);
		static ::Dynamic unlockMouse_dyn();

		static Bool canLockMouse(hx::Null< Int >  windowId);
		static ::Dynamic canLockMouse_dyn();

		static Bool isMouseLocked(hx::Null< Int >  windowId);
		static ::Dynamic isMouseLocked_dyn();

		static void notifyOfMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< Int >  windowId);
		static ::Dynamic notifyOfMouseLockChange_dyn();

		static void removeFromMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< Int >  windowId);
		static ::Dynamic removeFromMouseLockChange_dyn();

		static void frame(Int id);
		static ::Dynamic frame_dyn();

		static void pushUp();
		static ::Dynamic pushUp_dyn();

		static void pushDown();
		static ::Dynamic pushDown_dyn();

		static void pushLeft();
		static ::Dynamic pushLeft_dyn();

		static void pushRight();
		static ::Dynamic pushRight_dyn();

		static void releaseUp();
		static ::Dynamic releaseUp_dyn();

		static void releaseDown();
		static ::Dynamic releaseDown_dyn();

		static void releaseLeft();
		static ::Dynamic releaseLeft_dyn();

		static void releaseRight();
		static ::Dynamic releaseRight_dyn();

		static void pushChar(Int charCode);
		static ::Dynamic pushChar_dyn();

		static void releaseChar(Int charCode);
		static ::Dynamic releaseChar_dyn();

		static void pushShift();
		static ::Dynamic pushShift_dyn();

		static void releaseShift();
		static ::Dynamic releaseShift_dyn();

		static void pushBackspace();
		static ::Dynamic pushBackspace_dyn();

		static void releaseBackspace();
		static ::Dynamic releaseBackspace_dyn();

		static void pushTab();
		static ::Dynamic pushTab_dyn();

		static void releaseTab();
		static ::Dynamic releaseTab_dyn();

		static void pushEnter();
		static ::Dynamic pushEnter_dyn();

		static void releaseEnter();
		static ::Dynamic releaseEnter_dyn();

		static void pushControl();
		static ::Dynamic pushControl_dyn();

		static void releaseControl();
		static ::Dynamic releaseControl_dyn();

		static void pushAlt();
		static ::Dynamic pushAlt_dyn();

		static void releaseAlt();
		static ::Dynamic releaseAlt_dyn();

		static void pushEscape();
		static ::Dynamic pushEscape_dyn();

		static void releaseEscape();
		static ::Dynamic releaseEscape_dyn();

		static void pushDelete();
		static ::Dynamic pushDelete_dyn();

		static void releaseDelete();
		static ::Dynamic releaseDelete_dyn();

		static void pushBack();
		static ::Dynamic pushBack_dyn();

		static void releaseBack();
		static ::Dynamic releaseBack_dyn();

		static Int mouseX;
		static Int mouseY;
		static void mouseDown(Int windowId,Int button,Int x,Int y);
		static ::Dynamic mouseDown_dyn();

		static void mouseUp(Int windowId,Int button,Int x,Int y);
		static ::Dynamic mouseUp_dyn();

		static void mouseMove(Int windowId,Int x,Int y,Int movementX,Int movementY);
		static ::Dynamic mouseMove_dyn();

		static void mouseWheel(Int windowId,Int delta);
		static ::Dynamic mouseWheel_dyn();

		static void gamepad1Axis(Int axis,Float value);
		static ::Dynamic gamepad1Axis_dyn();

		static void gamepad1Button(Int button,Float value);
		static ::Dynamic gamepad1Button_dyn();

		static void gamepad2Axis(Int axis,Float value);
		static ::Dynamic gamepad2Axis_dyn();

		static void gamepad2Button(Int button,Float value);
		static ::Dynamic gamepad2Button_dyn();

		static void gamepad3Axis(Int axis,Float value);
		static ::Dynamic gamepad3Axis_dyn();

		static void gamepad3Button(Int button,Float value);
		static ::Dynamic gamepad3Button_dyn();

		static void gamepad4Axis(Int axis,Float value);
		static ::Dynamic gamepad4Axis_dyn();

		static void gamepad4Button(Int button,Float value);
		static ::Dynamic gamepad4Button_dyn();

		static void touchStart(Int index,Int x,Int y);
		static ::Dynamic touchStart_dyn();

		static void touchEnd(Int index,Int x,Int y);
		static ::Dynamic touchEnd_dyn();

		static void touchMove(Int index,Int x,Int y);
		static ::Dynamic touchMove_dyn();

		static void foreground();
		static ::Dynamic foreground_dyn();

		static void resume();
		static ::Dynamic resume_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void background();
		static ::Dynamic background_dyn();

		static void shutdown();
		static ::Dynamic shutdown_dyn();

		static void initKore(::String name,Int width,Int height,Int antialiasing);
		static ::Dynamic initKore_dyn();

		static Int translatePosition(::hx::EnumBase value);
		static ::Dynamic translatePosition_dyn();

		static Int translateDisplay(::hx::EnumBase value);
		static ::Dynamic translateDisplay_dyn();

		static Int translateWindowMode(::hx::EnumBase value);
		static ::Dynamic translateWindowMode_dyn();

		static Int translateDepthBufferFormat( ::Dynamic value);
		static ::Dynamic translateDepthBufferFormat_dyn();

		static Int translateStencilBufferFormat( ::Dynamic value);
		static ::Dynamic translateStencilBufferFormat_dyn();

		static Int translateTextureFormat(::hx::EnumBase value);
		static ::Dynamic translateTextureFormat_dyn();

		static void initWindow( ::kha::WindowOptions options, ::Dynamic callback);
		static ::Dynamic initWindow_dyn();

		static ::Array< ::Dynamic> fullscreenListeners;
		static Int previousWidth;
		static Int previousHeight;
		static Bool canSwitchFullscreen();
		static ::Dynamic canSwitchFullscreen_dyn();

		static Bool isFullscreen();
		static ::Dynamic isFullscreen_dyn();

		static void requestFullscreen();
		static ::Dynamic requestFullscreen_dyn();

		static void exitFullscreen();
		static ::Dynamic exitFullscreen_dyn();

		static void changeResolution(Int width,Int height);
		static ::Dynamic changeResolution_dyn();

		static void setKeepScreenOn(Bool on);
		static ::Dynamic setKeepScreenOn_dyn();

		void notifyOfFullscreenChange( ::Dynamic func, ::Dynamic error);
		::Dynamic notifyOfFullscreenChange_dyn();

		void removeFromFullscreenChange( ::Dynamic func, ::Dynamic error);
		::Dynamic removeFromFullscreenChange_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_SystemImpl */ 
