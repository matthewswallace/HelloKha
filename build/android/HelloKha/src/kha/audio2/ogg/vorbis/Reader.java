// Generated by Haxe 3.3.0
package kha.audio2.ogg.vorbis;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Reader extends haxe.lang.HxObject
{
	public Reader(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Reader(haxe.io.Input input, haxe.lang.Function seekFunc, int inputLength)
	{
		//line 76 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		kha.audio2.ogg.vorbis.Reader.__hx_ctor_kha_audio2_ogg_vorbis_Reader(this, input, seekFunc, inputLength);
	}
	
	
	public static void __hx_ctor_kha_audio2_ogg_vorbis_Reader(kha.audio2.ogg.vorbis.Reader __temp_me120, haxe.io.Input input, haxe.lang.Function seekFunc, int inputLength)
	{
		//line 77 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		__temp_me120.seekFunc = seekFunc;
		//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		__temp_me120.inputLength = inputLength;
		//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		__temp_me120.decoder = kha.audio2.ogg.vorbis.VorbisDecoder.start(input);
		//line 80 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		__temp_me120.decoder.setupSampleNumber(seekFunc, inputLength);
		//line 81 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		__temp_me120.loopStart = __temp_me120.get_header().comment.get_loopStart();
		//line 82 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		__temp_me120.loopLength = __temp_me120.get_header().comment.get_loopLength();
	}
	
	
	public static kha.audio2.ogg.vorbis.Reader openFromBytes(haxe.io.Bytes bytes)
	{
		//line 86 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		haxe.io.BytesInput input = new haxe.io.BytesInput(bytes, null, null);
		//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		haxe.io.BytesInput a1 = input;
		//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return new kha.audio2.ogg.vorbis.Reader(input, new kha.audio2.ogg.vorbis.Reader_openFromBytes_87__Fun(a1), bytes.length);
	}
	
	
	public static void seekBytes(haxe.io.BytesInput bytes, int pos)
	{
		//line 91 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		bytes.set_position(pos);
	}
	
	
	public static kha.audio2.ogg.vorbis.Reader openFromFile(java.lang.String fileName)
	{
		//line 96 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		sys.io.FileInput file = sys.io.File.read(fileName, true);
		//line 97 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		java.lang.Object stat = sys.FileSystem.stat(fileName);
		//line 98 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(file, "seek")) );
		//line 98 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return new kha.audio2.ogg.vorbis.Reader(file, new kha.audio2.ogg.vorbis.Reader_openFromFile_98__Fun(f), ((int) (haxe.lang.Runtime.getField_f(stat, "size", true)) ));
	}
	
	
	public static kha.audio2.ogg.vorbis.data.Header readAll(haxe.io.Bytes bytes, haxe.io.Output output, java.lang.Object useFloat)
	{
		//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		boolean __temp_useFloat119 = ( (haxe.lang.Runtime.eq(useFloat, null)) ? (false) : (haxe.lang.Runtime.toBool(useFloat)) );
		//line 103 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		haxe.io.BytesInput input = new haxe.io.BytesInput(bytes, null, null);
		//line 104 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		kha.audio2.ogg.vorbis.VorbisDecoder decoder = kha.audio2.ogg.vorbis.VorbisDecoder.start(input);
		//line 105 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		haxe.io.BytesInput a1 = input;
		//line 105 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		decoder.setupSampleNumber(new kha.audio2.ogg.vorbis.Reader_readAll_105__Fun(a1), bytes.length);
		//line 106 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		kha.audio2.ogg.vorbis.data.Header header = decoder.header;
		//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		double[] this1 = new double[( 4096 * header.channel )];
		//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		double[] buffer = ((double[]) (this1) );
		//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		while (true)
		{
			//line 111 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			int n = decoder.read(buffer, 4096, header.channel, header.sampleRate, __temp_useFloat119);
			//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			{
				//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				int _g1 = 0;
				//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				int _g = ( n * header.channel );
				//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				while (( _g1 < _g ))
				{
					//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					int i = _g1++;
					//line 113 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					output.writeInt32(haxe.io.FPHelper.floatToI32(((double) (((double[]) (buffer) )[i]) )));
				}
				
			}
			
			//line 115 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			if (( n == 0 )) 
			{
				//line 115 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				break;
			}
			
		}
		
		//line 118 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return decoder.header;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return new kha.audio2.ogg.vorbis.Reader(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return new kha.audio2.ogg.vorbis.Reader(((haxe.io.Input) (arr.__get(0)) ), ((haxe.lang.Function) (arr.__get(1)) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(2))) ));
	}
	
	
	public kha.audio2.ogg.vorbis.VorbisDecoder decoder;
	
	
	
	public kha.audio2.ogg.vorbis.data.Header get_header()
	{
		//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return this.decoder.header;
	}
	
	
	
	
	public int get_totalSample()
	{
		//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return ((int) (haxe.lang.Runtime.toInt(this.decoder.totalSample)) );
	}
	
	
	
	
	public double get_totalMillisecond()
	{
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int samples = ((int) (haxe.lang.Runtime.toInt(this.decoder.totalSample)) );
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int b = this.get_header().sampleRate;
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		double tmp = ( (( samples < 0 )) ? (( 4294967296.0 + samples )) : (( samples + 0.0 )) );
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int _int = ((int) (b) );
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return ( ( tmp / (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) ) * 1000 );
	}
	
	
	
	
	public int get_currentSample()
	{
		//line 50 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return this.decoder.currentSample;
	}
	
	
	public int set_currentSample(int value)
	{
		//line 54 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		this.decoder.seek(this.seekFunc, this.inputLength, value);
		//line 55 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return this.decoder.currentSample;
	}
	
	
	
	
	public double get_currentMillisecond()
	{
		//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int samples = this.get_currentSample();
		//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int b = this.get_header().sampleRate;
		//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		double tmp = ( (( samples < 0 )) ? (( 4294967296.0 + samples )) : (( samples + 0.0 )) );
		//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int _int = ((int) (b) );
		//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return ( ( tmp / (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) ) * 1000 );
	}
	
	
	public double set_currentMillisecond(double value)
	{
		//line 66 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		double _g = ( value / 1000 );
		//line 66 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int _g1 = this.get_header().sampleRate;
		//line 66 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int _int = ((int) (_g1) );
		//line 66 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		this.set_currentSample(((int) (java.lang.Math.floor(( (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) * _g ))) ));
		//line 67 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return this.get_currentMillisecond();
	}
	
	
	public java.lang.Object loopStart;
	
	public java.lang.Object loopLength;
	
	public haxe.lang.Function seekFunc;
	
	public int inputLength;
	
	public int read(double[] output, java.lang.Object samples, java.lang.Object channels, java.lang.Object sampleRate, java.lang.Object useFloat)
	{
		//line 121 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		boolean __temp_useFloat118 = ( (haxe.lang.Runtime.eq(useFloat, null)) ? (false) : (haxe.lang.Runtime.toBool(useFloat)) );
		//line 122 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		this.decoder.ensurePosition(this.seekFunc);
		//line 124 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		boolean tmp = haxe.lang.Runtime.eq(samples, null);
		//line 124 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		if (tmp) 
		{
			//line 125 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			samples = this.decoder.totalSample;
		}
		
		//line 127 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		boolean tmp1 = haxe.lang.Runtime.eq(channels, null);
		//line 127 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		if (tmp1) 
		{
			//line 128 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			channels = this.get_header().channel;
		}
		
		//line 130 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		boolean tmp2 = haxe.lang.Runtime.eq(sampleRate, null);
		//line 130 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		if (tmp2) 
		{
			//line 131 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			sampleRate = this.get_header().sampleRate;
		}
		
		//line 133 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return this.decoder.read(output, ((int) (haxe.lang.Runtime.toInt(samples)) ), ((int) (haxe.lang.Runtime.toInt(channels)) ), ((int) (haxe.lang.Runtime.toInt(sampleRate)) ), __temp_useFloat118);
	}
	
	
	public kha.audio2.ogg.vorbis.Reader clone()
	{
		//line 137 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		kha.audio2.ogg.vorbis.Reader reader = ((kha.audio2.ogg.vorbis.Reader) (haxe.root.Type.createEmptyInstance(((java.lang.Class) (kha.audio2.ogg.vorbis.Reader.class) ))) );
		//line 138 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		reader.seekFunc = this.seekFunc;
		//line 139 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		reader.inputLength = this.inputLength;
		//line 140 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		reader.decoder = this.decoder.clone(this.seekFunc);
		//line 141 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		reader.loopStart = this.loopStart;
		//line 142 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		reader.loopLength = this.loopLength;
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return reader;
	}
	
	
	public final double sampleToMillisecond(int samples)
	{
		//line 148 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int b = this.get_header().sampleRate;
		//line 148 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		double tmp = ( (( samples < 0 )) ? (( 4294967296.0 + samples )) : (( samples + 0.0 )) );
		//line 148 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int _int = ((int) (b) );
		//line 148 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return ( ( tmp / (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) ) * 1000 );
	}
	
	
	public final int millisecondToSample(double millseconds)
	{
		//line 152 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		double _g = ( millseconds / 1000 );
		//line 152 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int _g1 = this.get_header().sampleRate;
		//line 152 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		int _int = ((int) (_g1) );
		//line 152 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		return ((int) (java.lang.Math.floor(( (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) * _g ))) );
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		{
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			switch (field.hashCode())
			{
				case -520356016:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("inputLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.inputLength = ((int) (value) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -2069340029:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.set_currentSample(((int) (value) ));
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 259482282:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.loopLength = ((java.lang.Object) (value) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1161022280:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.set_currentMillisecond(value);
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1262195742:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopStart")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.loopStart = ((java.lang.Object) (value) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
			}
			
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		{
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			switch (field.hashCode())
			{
				case -520356016:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("inputLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.inputLength = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1542433860:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("decoder")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.decoder = ((kha.audio2.ogg.vorbis.VorbisDecoder) (value) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 995846492:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("seekFunc")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.seekFunc = ((haxe.lang.Function) (value) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -2069340029:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.set_currentSample(((int) (haxe.lang.Runtime.toInt(value)) ));
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 259482282:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.loopLength = ((java.lang.Object) (value) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1161022280:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.set_currentMillisecond(((double) (haxe.lang.Runtime.toDouble(value)) ));
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1262195742:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopStart")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						this.loopStart = ((java.lang.Object) (value) );
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return value;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
			}
			
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		{
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			switch (field.hashCode())
			{
				case -772828762:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("millisecondToSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "millisecondToSample")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1542433860:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("decoder")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.decoder;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1547428732:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("sampleToMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "sampleToMillisecond")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -1221270899:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("header")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_header();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 94756189:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("clone")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "clone")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 859407254:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_header")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_header")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 3496342:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("read")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "read")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -753223154:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("totalSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_totalSample();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -520356016:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("inputLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.inputLength;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 86922917:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_totalSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_totalSample")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 995846492:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("seekFunc")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.seekFunc;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -92098403:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("totalMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_totalMillisecond();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 259482282:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.loopLength;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1375492710:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_totalMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_totalMillisecond")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1262195742:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopStart")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.loopStart;
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -2069340029:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_currentSample();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -215030203:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("set_currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "set_currentMillisecond")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -2142817446:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_currentSample")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -1528158511:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_currentMillisecond")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1211997030:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("set_currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "set_currentSample")) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1161022280:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_currentMillisecond();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
			}
			
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		{
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			switch (field.hashCode())
			{
				case -520356016:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("inputLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((double) (this.inputLength) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -753223154:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("totalSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((double) (this.get_totalSample()) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 259482282:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopLength")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((double) (haxe.lang.Runtime.toDouble(this.loopLength)) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -92098403:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("totalMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_totalMillisecond();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1262195742:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("loopStart")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((double) (haxe.lang.Runtime.toDouble(this.loopStart)) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -2069340029:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return ((double) (this.get_currentSample()) );
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1161022280:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_currentMillisecond();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
			}
			
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		{
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			switch (field.hashCode())
			{
				case -772828762:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("millisecondToSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.millisecondToSample(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ));
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 859407254:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_header")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_header();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1547428732:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("sampleToMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.sampleToMillisecond(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 86922917:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_totalSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_totalSample();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 94756189:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("clone")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.clone();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1375492710:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_totalMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_totalMillisecond();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 3496342:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("read")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.read(((double[]) (dynargs.__get(0)) ), dynargs.__get(1), dynargs.__get(2), dynargs.__get(3), dynargs.__get(4));
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -2142817446:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_currentSample();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -215030203:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("set_currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.set_currentMillisecond(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ));
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case 1211997030:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("set_currentSample")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.set_currentSample(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
				case -1528158511:
				{
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					if (field.equals("get_currentMillisecond")) 
					{
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						__temp_executeDef1 = false;
						//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
						return this.get_currentMillisecond();
					}
					
					//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
					break;
				}
				
				
			}
			
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			else
			{
				//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("inputLength");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("seekFunc");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("loopLength");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("loopStart");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("currentMillisecond");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("currentSample");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("totalMillisecond");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("totalSample");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("header");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		baseArr.push("decoder");
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
		{
			//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/Reader.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


