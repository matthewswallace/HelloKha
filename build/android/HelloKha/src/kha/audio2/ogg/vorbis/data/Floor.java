// Generated by Haxe 3.3.0
package kha.audio2.ogg.vorbis.data;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Floor extends haxe.lang.HxObject
{
	public Floor(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Floor()
	{
		//line 17 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		kha.audio2.ogg.vorbis.data.Floor.__hx_ctor_kha_audio2_ogg_vorbis_data_Floor(this);
	}
	
	
	public static void __hx_ctor_kha_audio2_ogg_vorbis_data_Floor(kha.audio2.ogg.vorbis.data.Floor __temp_me126)
	{
	}
	
	
	public static kha.audio2.ogg.vorbis.data.Floor read(kha.audio2.ogg.vorbis.VorbisDecodeState decodeState, kha.audio2.ogg.vorbis.data.Codebook[] codebooks)
	{
		//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		kha.audio2.ogg.vorbis.data.Floor floor = new kha.audio2.ogg.vorbis.data.Floor();
		//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		int tmp = 0;
		//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		if (( decodeState.validBits < 0 )) 
		{
			//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			tmp = 0;
		}
		else
		{
			//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 16 )) 
			{
				//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits == 0 )) 
				{
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = 0;
				}
				
				//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (true)
				{
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
					{
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits = -1;
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						break;
					}
					else
					{
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.bytesInSeg--;
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int a = decodeState.acc;
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.inputPosition += 1;
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (a) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits += 8;
					}
					
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if ( ! ((( decodeState.validBits < 16 ))) ) 
					{
						//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						break;
					}
					
				}
				
				//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 0 )) 
				{
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp = 0;
				}
				else
				{
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z = ( ((int) (decodeState.acc) ) & ((int) (65535) ) );
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 16 );
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 16;
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp = z;
				}
				
			}
			else
			{
				//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int z1 = ( ((int) (decodeState.acc) ) & ((int) (65535) ) );
				//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				decodeState.acc = ( ((int) (decodeState.acc) ) >>> 16 );
				//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				decodeState.validBits -= 16;
				//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp = z1;
			}
			
		}
		
		//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		floor.type = tmp;
		//line 27 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		if (( floor.type > 1 )) 
		{
			//line 28 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			throw haxe.lang.HaxeException.wrap(new kha.audio2.ogg.vorbis.data.ReaderError(kha.audio2.ogg.vorbis.data.ReaderErrorType.INVALID_SETUP, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"kha.audio2.ogg.vorbis.data.Floor", "Floor.hx", "read"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )})));
		}
		
		//line 30 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		if (( floor.type == 0 )) 
		{
			//line 31 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			kha.audio2.ogg.vorbis.data.Floor0 g = floor.floor0 = new kha.audio2.ogg.vorbis.data.Floor0();
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp1 = 0;
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp1 = 0;
			}
			else
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 8 )) 
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a1 = decodeState.acc;
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a1) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 8 ))) ) 
						{
							//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp1 = 0;
					}
					else
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z2 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 8;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp1 = z2;
					}
					
				}
				else
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z3 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 8;
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp1 = z3;
				}
				
			}
			
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g.order = tmp1;
			//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp2 = 0;
			//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp2 = 0;
			}
			else
			{
				//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 16 )) 
				{
					//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a2 = decodeState.acc;
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a2) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 16 ))) ) 
						{
							//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp2 = 0;
					}
					else
					{
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z4 = ( ((int) (decodeState.acc) ) & ((int) (65535) ) );
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 16 );
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 16;
						//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp2 = z4;
					}
					
				}
				else
				{
					//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z5 = ( ((int) (decodeState.acc) ) & ((int) (65535) ) );
					//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 16 );
					//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 16;
					//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp2 = z5;
				}
				
			}
			
			//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g.rate = tmp2;
			//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp3 = 0;
			//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp3 = 0;
			}
			else
			{
				//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 16 )) 
				{
					//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a3 = decodeState.acc;
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a3) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 16 ))) ) 
						{
							//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp3 = 0;
					}
					else
					{
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z6 = ( ((int) (decodeState.acc) ) & ((int) (65535) ) );
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 16 );
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 16;
						//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp3 = z6;
					}
					
				}
				else
				{
					//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z7 = ( ((int) (decodeState.acc) ) & ((int) (65535) ) );
					//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 16 );
					//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 16;
					//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp3 = z7;
				}
				
			}
			
			//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g.barkMapSize = tmp3;
			//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp4 = 0;
			//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp4 = 0;
			}
			else
			{
				//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 6 )) 
				{
					//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a4 = decodeState.acc;
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a4) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 6 ))) ) 
						{
							//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp4 = 0;
					}
					else
					{
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z8 = ( ((int) (decodeState.acc) ) & ((int) (63) ) );
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 6 );
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 6;
						//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp4 = z8;
					}
					
				}
				else
				{
					//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z9 = ( ((int) (decodeState.acc) ) & ((int) (63) ) );
					//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 6 );
					//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 6;
					//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp4 = z9;
				}
				
			}
			
			//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g.amplitudeBits = tmp4;
			//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp5 = 0;
			//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp5 = 0;
			}
			else
			{
				//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 8 )) 
				{
					//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a5 = decodeState.acc;
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a5) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 8 ))) ) 
						{
							//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp5 = 0;
					}
					else
					{
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z10 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 8;
						//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp5 = z10;
					}
					
				}
				else
				{
					//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z11 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
					//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
					//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 8;
					//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp5 = z11;
				}
				
			}
			
			//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g.amplitudeOffset = tmp5;
			//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp6 = 0;
			//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp6 = 0;
			}
			else
			{
				//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 4 )) 
				{
					//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a6 = decodeState.acc;
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a6) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 4 ))) ) 
						{
							//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp6 = 0;
					}
					else
					{
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z12 = ( ((int) (decodeState.acc) ) & ((int) (15) ) );
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 4 );
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 4;
						//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp6 = z12;
					}
					
				}
				else
				{
					//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z13 = ( ((int) (decodeState.acc) ) & ((int) (15) ) );
					//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 4 );
					//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 4;
					//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp6 = z13;
				}
				
			}
			
			//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g.numberOfBooks = ( tmp6 + 1 );
			//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			{
				//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g1 = 0;
				//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g = g.numberOfBooks;
				//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (( _g1 < _g ))
				{
					//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int j = _g1++;
					//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int val = 0;
						//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( decodeState.validBits < 0 )) 
						{
							//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							val = 0;
						}
						else
						{
							//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							if (( decodeState.validBits < 8 )) 
							{
								//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits == 0 )) 
								{
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = 0;
								}
								
								//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								while (true)
								{
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
									{
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits = -1;
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									else
									{
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.bytesInSeg--;
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										int a7 = decodeState.acc;
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.inputPosition += 1;
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = ( ((int) (a7) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits += 8;
									}
									
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if ( ! ((( decodeState.validBits < 8 ))) ) 
									{
										//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									
								}
								
								//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits < 0 )) 
								{
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val = 0;
								}
								else
								{
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									int z14 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.validBits -= 8;
									//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val = z14;
								}
								
							}
							else
							{
								//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int z15 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
								//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
								//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.validBits -= 8;
								//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								val = z15;
							}
							
						}
						
						//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						((int[]) (g.bookList) )[j] = val;
					}
					
				}
				
			}
			
			//line 41 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			throw haxe.lang.HaxeException.wrap(new kha.audio2.ogg.vorbis.data.ReaderError(kha.audio2.ogg.vorbis.data.ReaderErrorType.FEATURE_NOT_SUPPORTED, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"kha.audio2.ogg.vorbis.data.Floor", "Floor.hx", "read"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )})));
		}
		else
		{
			//line 43 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			haxe.root.Array<kha.audio2.ogg.vorbis.data.IntPoint> p = new haxe.root.Array<kha.audio2.ogg.vorbis.data.IntPoint>();
			//line 44 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			kha.audio2.ogg.vorbis.data.Floor1 g1 = floor.floor1 = new kha.audio2.ogg.vorbis.data.Floor1();
			//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int maxClass = -1;
			//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp7 = 0;
			//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp7 = 0;
			}
			else
			{
				//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 5 )) 
				{
					//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a8 = decodeState.acc;
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a8) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 5 ))) ) 
						{
							//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp7 = 0;
					}
					else
					{
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z16 = ( ((int) (decodeState.acc) ) & ((int) (31) ) );
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 5 );
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 5;
						//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp7 = z16;
					}
					
				}
				else
				{
					//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z17 = ( ((int) (decodeState.acc) ) & ((int) (31) ) );
					//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 5 );
					//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 5;
					//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp7 = z17;
				}
				
			}
			
			//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.partitions = tmp7;
			//line 47 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[] this1 = new int[g1.partitions];
			//line 47 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.partitionClassList = ((int[]) (this1) );
			//line 48 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			{
				//line 48 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g11 = 0;
				//line 48 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g2 = g1.partitions;
				//line 48 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (( _g11 < _g2 ))
				{
					//line 48 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int j1 = _g11++;
					//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int val1 = 0;
						//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( decodeState.validBits < 0 )) 
						{
							//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							val1 = 0;
						}
						else
						{
							//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							if (( decodeState.validBits < 4 )) 
							{
								//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits == 0 )) 
								{
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = 0;
								}
								
								//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								while (true)
								{
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
									{
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits = -1;
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									else
									{
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.bytesInSeg--;
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										int a9 = decodeState.acc;
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.inputPosition += 1;
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = ( ((int) (a9) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits += 8;
									}
									
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if ( ! ((( decodeState.validBits < 4 ))) ) 
									{
										//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									
								}
								
								//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits < 0 )) 
								{
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val1 = 0;
								}
								else
								{
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									int z18 = ( ((int) (decodeState.acc) ) & ((int) (15) ) );
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = ( ((int) (decodeState.acc) ) >>> 4 );
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.validBits -= 4;
									//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val1 = z18;
								}
								
							}
							else
							{
								//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int z19 = ( ((int) (decodeState.acc) ) & ((int) (15) ) );
								//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.acc = ( ((int) (decodeState.acc) ) >>> 4 );
								//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.validBits -= 4;
								//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								val1 = z19;
							}
							
						}
						
						//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						((int[]) (g1.partitionClassList) )[j1] = val1;
					}
					
					//line 50 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( ((int) (((int[]) (g1.partitionClassList) )[j1]) ) > maxClass )) 
					{
						//line 51 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						maxClass = ((int) (((int[]) (g1.partitionClassList) )[j1]) );
					}
					
				}
				
			}
			
			//line 54 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[] this2 = new int[( maxClass + 1 )];
			//line 54 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.classDimensions = ((int[]) (this2) );
			//line 55 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[] this3 = new int[( maxClass + 1 )];
			//line 55 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.classMasterbooks = ((int[]) (this3) );
			//line 56 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[] this4 = new int[( maxClass + 1 )];
			//line 56 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.classSubclasses = ((int[]) (this4) );
			//line 57 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[][] this5 = new int[( maxClass + 1 )][];
			//line 57 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.subclassBooks = ((int[][]) (this5) );
			//line 58 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			{
				//line 58 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g12 = 0;
				//line 58 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g3 = ( maxClass + 1 );
				//line 58 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (( _g12 < _g3 ))
				{
					//line 58 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int j2 = _g12++;
					//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int tmp8 = 0;
						//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( decodeState.validBits < 0 )) 
						{
							//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							tmp8 = 0;
						}
						else
						{
							//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							if (( decodeState.validBits < 3 )) 
							{
								//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits == 0 )) 
								{
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = 0;
								}
								
								//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								while (true)
								{
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
									{
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits = -1;
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									else
									{
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.bytesInSeg--;
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										int a10 = decodeState.acc;
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.inputPosition += 1;
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = ( ((int) (a10) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits += 8;
									}
									
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if ( ! ((( decodeState.validBits < 3 ))) ) 
									{
										//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									
								}
								
								//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits < 0 )) 
								{
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									tmp8 = 0;
								}
								else
								{
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									int z20 = ( ((int) (decodeState.acc) ) & ((int) (7) ) );
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = ( ((int) (decodeState.acc) ) >>> 3 );
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.validBits -= 3;
									//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									tmp8 = z20;
								}
								
							}
							else
							{
								//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int z21 = ( ((int) (decodeState.acc) ) & ((int) (7) ) );
								//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.acc = ( ((int) (decodeState.acc) ) >>> 3 );
								//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.validBits -= 3;
								//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								tmp8 = z21;
							}
							
						}
						
						//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						((int[]) (g1.classDimensions) )[j2] = ( tmp8 + 1 );
					}
					
					//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int val2 = 0;
						//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( decodeState.validBits < 0 )) 
						{
							//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							val2 = 0;
						}
						else
						{
							//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							if (( decodeState.validBits < 2 )) 
							{
								//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits == 0 )) 
								{
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = 0;
								}
								
								//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								while (true)
								{
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
									{
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits = -1;
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									else
									{
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.bytesInSeg--;
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										int a11 = decodeState.acc;
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.inputPosition += 1;
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = ( ((int) (a11) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits += 8;
									}
									
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if ( ! ((( decodeState.validBits < 2 ))) ) 
									{
										//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										break;
									}
									
								}
								
								//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits < 0 )) 
								{
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val2 = 0;
								}
								else
								{
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									int z22 = ( ((int) (decodeState.acc) ) & ((int) (3) ) );
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = ( ((int) (decodeState.acc) ) >>> 2 );
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.validBits -= 2;
									//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val2 = z22;
								}
								
							}
							else
							{
								//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int z23 = ( ((int) (decodeState.acc) ) & ((int) (3) ) );
								//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.acc = ( ((int) (decodeState.acc) ) >>> 2 );
								//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								decodeState.validBits -= 2;
								//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								val2 = z23;
							}
							
						}
						
						//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						((int[]) (g1.classSubclasses) )[j2] = val2;
					}
					
					//line 61 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( ((int) (((int[]) (g1.classSubclasses) )[j2]) ) != 0 )) 
					{
						//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						{
							//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int val3 = 0;
							//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							if (( decodeState.validBits < 0 )) 
							{
								//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								val3 = 0;
							}
							else
							{
								//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits < 8 )) 
								{
									//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( decodeState.validBits == 0 )) 
									{
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = 0;
									}
									
									//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									while (true)
									{
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
										{
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.validBits = -1;
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											break;
										}
										else
										{
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.bytesInSeg--;
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											int a12 = decodeState.acc;
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.inputPosition += 1;
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.acc = ( ((int) (a12) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.validBits += 8;
										}
										
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										if ( ! ((( decodeState.validBits < 8 ))) ) 
										{
											//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											break;
										}
										
									}
									
									//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( decodeState.validBits < 0 )) 
									{
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										val3 = 0;
									}
									else
									{
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										int z24 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits -= 8;
										//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										val3 = z24;
									}
									
								}
								else
								{
									//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									int z25 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
									//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
									//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									decodeState.validBits -= 8;
									//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val3 = z25;
								}
								
							}
							
							//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							((int[]) (g1.classMasterbooks) )[j2] = val3;
						}
						
						//line 63 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ((int) (((int[]) (g1.classMasterbooks) )[j2]) ) >= ((kha.audio2.ogg.vorbis.data.Codebook[]) (codebooks) ).length )) 
						{
							//line 64 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							throw haxe.lang.HaxeException.wrap(new kha.audio2.ogg.vorbis.data.ReaderError(kha.audio2.ogg.vorbis.data.ReaderErrorType.INVALID_SETUP, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"kha.audio2.ogg.vorbis.data.Floor", "Floor.hx", "read"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )})));
						}
						
					}
					
					//line 68 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int kl = ( 1 << ((int) (((int[]) (g1.classSubclasses) )[j2]) ) );
					//line 69 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 69 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int[] this6 = new int[kl];
						//line 69 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						((int[][]) (g1.subclassBooks) )[j2] = ((int[]) (this6) );
					}
					
					//line 70 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 70 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int _g31 = 0;
						//line 70 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						while (( _g31 < kl ))
						{
							//line 70 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int k = _g31++;
							//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							{
								//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int tmp9 = 0;
								//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits < 0 )) 
								{
									//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									tmp9 = 0;
								}
								else
								{
									//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( decodeState.validBits < 8 )) 
									{
										//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										if (( decodeState.validBits == 0 )) 
										{
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.acc = 0;
										}
										
										//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										while (true)
										{
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
											{
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.validBits = -1;
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												break;
											}
											else
											{
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.bytesInSeg--;
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												int a13 = decodeState.acc;
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.inputPosition += 1;
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.acc = ( ((int) (a13) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.validBits += 8;
											}
											
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											if ( ! ((( decodeState.validBits < 8 ))) ) 
											{
												//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												break;
											}
											
										}
										
										//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										if (( decodeState.validBits < 0 )) 
										{
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											tmp9 = 0;
										}
										else
										{
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											int z26 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											decodeState.validBits -= 8;
											//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											tmp9 = z26;
										}
										
									}
									else
									{
										//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										int z27 = ( ((int) (decodeState.acc) ) & ((int) (255) ) );
										//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = ( ((int) (decodeState.acc) ) >>> 8 );
										//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits -= 8;
										//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										tmp9 = z27;
									}
									
								}
								
								//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								((int[]) (((int[][]) (g1.subclassBooks) )[j2]) )[k] = ( tmp9 - 1 );
							}
							
							//line 72 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							if (( ((int) (((int[]) (((int[][]) (g1.subclassBooks) )[j2]) )[k]) ) >= ((kha.audio2.ogg.vorbis.data.Codebook[]) (codebooks) ).length )) 
							{
								//line 73 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								throw haxe.lang.HaxeException.wrap(new kha.audio2.ogg.vorbis.data.ReaderError(kha.audio2.ogg.vorbis.data.ReaderErrorType.INVALID_SETUP, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"kha.audio2.ogg.vorbis.data.Floor", "Floor.hx", "read"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )})));
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp10 = 0;
			//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp10 = 0;
			}
			else
			{
				//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 2 )) 
				{
					//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a14 = decodeState.acc;
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a14) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 2 ))) ) 
						{
							//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp10 = 0;
					}
					else
					{
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z28 = ( ((int) (decodeState.acc) ) & ((int) (3) ) );
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 2 );
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 2;
						//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp10 = z28;
					}
					
				}
				else
				{
					//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z29 = ( ((int) (decodeState.acc) ) & ((int) (3) ) );
					//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 2 );
					//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 2;
					//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp10 = z29;
				}
				
			}
			
			//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.floor1Multiplier = ( tmp10 + 1 );
			//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int tmp11 = 0;
			//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (( decodeState.validBits < 0 )) 
			{
				//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				tmp11 = 0;
			}
			else
			{
				//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				if (( decodeState.validBits < 4 )) 
				{
					//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits == 0 )) 
					{
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = 0;
					}
					
					//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (true)
					{
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
						{
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits = -1;
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						else
						{
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.bytesInSeg--;
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							int a15 = decodeState.acc;
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.inputPosition += 1;
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.acc = ( ((int) (a15) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							decodeState.validBits += 8;
						}
						
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if ( ! ((( decodeState.validBits < 4 ))) ) 
						{
							//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							break;
						}
						
					}
					
					//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (( decodeState.validBits < 0 )) 
					{
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp11 = 0;
					}
					else
					{
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int z30 = ( ((int) (decodeState.acc) ) & ((int) (15) ) );
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.acc = ( ((int) (decodeState.acc) ) >>> 4 );
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						decodeState.validBits -= 4;
						//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						tmp11 = z30;
					}
					
				}
				else
				{
					//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int z31 = ( ((int) (decodeState.acc) ) & ((int) (15) ) );
					//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.acc = ( ((int) (decodeState.acc) ) >>> 4 );
					//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					decodeState.validBits -= 4;
					//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					tmp11 = z31;
				}
				
			}
			
			//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.rangebits = tmp11;
			//line 80 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[] this7 = new int[250];
			//line 80 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.xlist = ((int[]) (this7) );
			//line 81 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			((int[]) (g1.xlist) )[0] = 0;
			//line 82 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			((int[]) (g1.xlist) )[1] = ( 1 << g1.rangebits );
			//line 83 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.values = 2;
			//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			{
				//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g13 = 0;
				//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g4 = g1.partitions;
				//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (( _g13 < _g4 ))
				{
					//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int j3 = _g13++;
					//line 85 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int c = ((int) (((int[]) (g1.partitionClassList) )[j3]) );
					//line 86 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 86 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int _g32 = 0;
						//line 86 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int _g21 = ((int) (((int[]) (g1.classDimensions) )[c]) );
						//line 86 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						while (( _g32 < _g21 ))
						{
							//line 86 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							 ++ _g32;
							//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							{
								//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int index = g1.values;
								//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int n = g1.rangebits;
								//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								int val4 = 0;
								//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								if (( decodeState.validBits < 0 )) 
								{
									//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									val4 = 0;
								}
								else
								{
									//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
									if (( decodeState.validBits < n )) 
									{
										//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										if (( n > 24 )) 
										{
											//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											val4 = ( decodeState.readBits(24) + (( decodeState.readBits(( n - 24 )) << 24 )) );
										}
										else
										{
											//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											if (( decodeState.validBits == 0 )) 
											{
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.acc = 0;
											}
											
											//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											while (true)
											{
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												if (( ( decodeState.bytesInSeg == 0 ) && (( decodeState.lastSeg || ( decodeState.next() == 0 ) )) )) 
												{
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													decodeState.validBits = -1;
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													break;
												}
												else
												{
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													decodeState.bytesInSeg--;
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													int a16 = decodeState.acc;
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													decodeState.inputPosition += 1;
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													decodeState.acc = ( ((int) (a16) ) + (((int) (( decodeState.input.readByte() << decodeState.validBits )) )) );
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													decodeState.validBits += 8;
												}
												
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												if ( ! ((( decodeState.validBits < n ))) ) 
												{
													//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
													break;
												}
												
											}
											
											//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
											if (( decodeState.validBits < 0 )) 
											{
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												val4 = 0;
											}
											else
											{
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												int z32 = ( ((int) (decodeState.acc) ) & ((int) (( (( 1 << n )) - 1 )) ) );
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.acc = ( ((int) (decodeState.acc) ) >>> n );
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												decodeState.validBits -= n;
												//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
												val4 = z32;
											}
											
										}
										
									}
									else
									{
										//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										int z33 = ( ((int) (decodeState.acc) ) & ((int) (( (( 1 << n )) - 1 )) ) );
										//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.acc = ( ((int) (decodeState.acc) ) >>> n );
										//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										decodeState.validBits -= n;
										//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
										val4 = z33;
									}
									
								}
								
								//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
								((int[]) (g1.xlist) )[index] = val4;
							}
							
							//line 88 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							g1.values++;
						}
						
					}
					
				}
				
			}
			
			//line 93 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			{
				//line 93 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g14 = 0;
				//line 93 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g5 = g1.values;
				//line 93 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (( _g14 < _g5 ))
				{
					//line 93 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int j4 = _g14++;
					//line 94 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					p.push(new kha.audio2.ogg.vorbis.data.IntPoint());
					//line 95 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					p.__get(j4).x = ((int) (((int[]) (g1.xlist) )[j4]) );
					//line 96 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					p.__get(j4).y = j4;
				}
				
			}
			
			//line 99 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			p.sort(((haxe.lang.Function) (new haxe.lang.Closure(kha.audio2.ogg.vorbis.VorbisTools.class, "pointCompare")) ));
			//line 101 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[] this8 = new int[g1.values];
			//line 101 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.sortedOrder = ((int[]) (this8) );
			//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			{
				//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g15 = 0;
				//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g6 = g1.values;
				//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (( _g15 < _g6 ))
				{
					//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int j5 = _g15++;
					//line 103 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					((int[]) (g1.sortedOrder) )[j5] = p.__get(j5).y;
				}
				
			}
			
			//line 106 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			int[][] this9 = new int[g1.values][];
			//line 106 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			g1.neighbors = ((int[][]) (this9) );
			//line 108 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			{
				//line 108 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g16 = 2;
				//line 108 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				int _g7 = g1.values;
				//line 108 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				while (( _g16 < _g7 ))
				{
					//line 108 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int j6 = _g16++;
					//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int[] x = g1.xlist;
					//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int low = -1;
					//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int high = 65536;
					//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int plow = 0;
					//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int phigh = 0;
					//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int _g17 = 0;
					//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					while (( _g17 < j6 ))
					{
						//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int i = _g17++;
						//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( ((int) (((int[]) (x) )[i]) ) > low ) && ( ((int) (((int[]) (x) )[i]) ) < ((int) (((int[]) (x) )[j6]) ) ) )) 
						{
							//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							plow = i;
							//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							low = ((int) (((int[]) (x) )[i]) );
						}
						
						//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						if (( ( ((int) (((int[]) (x) )[i]) ) < high ) && ( ((int) (((int[]) (x) )[i]) ) > ((int) (((int[]) (x) )[j6]) ) ) )) 
						{
							//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							phigh = i;
							//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
							high = ((int) (((int[]) (x) )[i]) );
						}
						
					}
					
					//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int ne_low = plow;
					//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					int ne_high = phigh;
					//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					{
						//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						int[] this10 = new int[g1.values];
						//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						((int[][]) (g1.neighbors) )[j6] = ((int[]) (this10) );
					}
					
					//line 111 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					((int[]) (((int[][]) (g1.neighbors) )[j6]) )[0] = ne_low;
					//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					((int[]) (((int[][]) (g1.neighbors) )[j6]) )[1] = ne_high;
				}
				
			}
			
		}
		
		//line 116 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		return floor;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		return new kha.audio2.ogg.vorbis.data.Floor(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		return new kha.audio2.ogg.vorbis.data.Floor();
	}
	
	
	public kha.audio2.ogg.vorbis.data.Floor0 floor0;
	
	public kha.audio2.ogg.vorbis.data.Floor1 floor1;
	
	public int type;
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			switch (field.hashCode())
			{
				case 3575610:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("type")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						this.type = ((int) (value) );
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return value;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
			}
			
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			switch (field.hashCode())
			{
				case 3575610:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("type")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						this.type = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return value;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
				case -1271636572:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("floor0")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						this.floor0 = ((kha.audio2.ogg.vorbis.data.Floor0) (value) );
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return value;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
				case -1271636571:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("floor1")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						this.floor1 = ((kha.audio2.ogg.vorbis.data.Floor1) (value) );
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return value;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
			}
			
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			switch (field.hashCode())
			{
				case 3575610:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("type")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return this.type;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
				case -1271636572:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("floor0")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return this.floor0;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
				case -1271636571:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("floor1")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return this.floor1;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
			}
			
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			switch (field.hashCode())
			{
				case 3575610:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					if (field.equals("type")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
						return ((double) (this.type) );
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
					break;
				}
				
				
			}
			
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		baseArr.push("type");
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		baseArr.push("floor1");
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		baseArr.push("floor0");
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/audio2/ogg/vorbis/data/Floor.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


