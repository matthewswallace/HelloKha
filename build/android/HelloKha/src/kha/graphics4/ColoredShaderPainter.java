// Generated by Haxe 3.3.0
package kha.graphics4;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class ColoredShaderPainter extends haxe.lang.HxObject
{
	static
	{
		//line 268 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline = null;
		//line 269 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.structure = null;
		//line 272 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.bufferSize = 100;
		//line 278 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.triangleBufferSize = 100;
	}
	
	public ColoredShaderPainter(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public ColoredShaderPainter(kha.graphics4.Graphics g4)
	{
		//line 291 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.__hx_ctor_kha_graphics4_ColoredShaderPainter(this, g4);
	}
	
	
	public static void __hx_ctor_kha_graphics4_ColoredShaderPainter(kha.graphics4.ColoredShaderPainter __temp_me172, kha.graphics4.Graphics g4)
	{
		//line 289 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.destinationBlend = kha.graphics4.BlendingFactor.Undefined;
		//line 288 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.sourceBlend = kha.graphics4.BlendingFactor.Undefined;
		//line 285 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.myPipeline = null;
		//line 292 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.g = g4;
		//line 293 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.bufferIndex = 0;
		//line 294 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.triangleBufferIndex = 0;
		//line 295 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.initShaders();
		//line 296 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.initBuffers();
		//line 297 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me172.projectionLocation = kha.graphics4.ColoredShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
	}
	
	
	public static kha.graphics4.PipelineState shaderPipeline;
	
	public static kha.graphics4.VertexStructure structure;
	
	public static int bufferSize;
	
	public static int triangleBufferSize;
	
	public static void initShaders()
	{
		//line 319 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp = ( kha.graphics4.ColoredShaderPainter.shaderPipeline != null );
		//line 319 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp) 
		{
			//line 319 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			return ;
		}
		
		//line 321 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline = new kha.graphics4.PipelineState();
		//line 322 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.fragmentShader = kha.Shaders.painter_colored_frag;
		//line 323 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.vertexShader = kha.Shaders.painter_colored_vert;
		//line 325 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.structure = new kha.graphics4.VertexStructure();
		//line 326 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.structure.add("vertexPosition", kha.graphics4.VertexData.Float3);
		//line 327 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.structure.add("vertexColor", kha.graphics4.VertexData.Float4);
		//line 328 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.inputLayout = new haxe.root.Array<kha.graphics4.VertexStructure>(new kha.graphics4.VertexStructure[]{kha.graphics4.ColoredShaderPainter.structure});
		//line 330 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.blendSource = kha.graphics4.BlendingFactor.SourceAlpha;
		//line 331 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.blendDestination = kha.graphics4.BlendingFactor.InverseSourceAlpha;
		//line 332 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.alphaBlendSource = kha.graphics4.BlendingFactor.SourceAlpha;
		//line 333 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.alphaBlendDestination = kha.graphics4.BlendingFactor.InverseSourceAlpha;
		//line 335 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ColoredShaderPainter.shaderPipeline.compile();
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return new kha.graphics4.ColoredShaderPainter(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return new kha.graphics4.ColoredShaderPainter(((kha.graphics4.Graphics) (arr.__get(0)) ));
	}
	
	
	public kha.math.FastMatrix4 projectionMatrix;
	
	public kha.graphics4.ConstantLocation projectionLocation;
	
	public int bufferIndex;
	
	public kha.graphics4.VertexBuffer rectVertexBuffer;
	
	public java.nio.FloatBuffer rectVertices;
	
	public kha.graphics4.IndexBuffer indexBuffer;
	
	public int triangleBufferIndex;
	
	public kha.graphics4.VertexBuffer triangleVertexBuffer;
	
	public java.nio.FloatBuffer triangleVertices;
	
	public kha.graphics4.IndexBuffer triangleIndexBuffer;
	
	public kha.graphics4.Graphics g;
	
	public kha.graphics4.PipelineState myPipeline;
	
	
	
	public kha.graphics4.BlendingFactor sourceBlend;
	
	public kha.graphics4.BlendingFactor destinationBlend;
	
	public kha.graphics4.PipelineState get_pipeline()
	{
		//line 301 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return this.myPipeline;
	}
	
	
	public kha.graphics4.PipelineState set_pipeline(kha.graphics4.PipelineState pipe)
	{
		//line 305 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp = ( pipe == null );
		//line 305 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp) 
		{
			//line 306 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.projectionLocation = kha.graphics4.ColoredShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
		}
		else
		{
			//line 309 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
		}
		
		//line 311 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return this.myPipeline = pipe;
	}
	
	
	public void setProjection(kha.math.FastMatrix4 projectionMatrix)
	{
		//line 315 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.projectionMatrix = projectionMatrix;
	}
	
	
	public void initBuffers()
	{
		//line 339 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertexBuffer = new kha.graphics4.VertexBuffer(( kha.graphics4.ColoredShaderPainter.bufferSize * 4 ), kha.graphics4.ColoredShaderPainter.structure, kha.graphics4.Usage.DynamicUsage, null);
		//line 340 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertices = this.rectVertexBuffer.lock(null, null);
		//line 342 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.indexBuffer = new kha.graphics4.IndexBuffer(( ( kha.graphics4.ColoredShaderPainter.bufferSize * 3 ) * 2 ), kha.graphics4.Usage.StaticUsage, null);
		//line 343 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		haxe.root.Array<java.lang.Object> indices = this.indexBuffer.lock();
		//line 344 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 344 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int _g1 = 0;
			//line 344 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int _g = kha.graphics4.ColoredShaderPainter.bufferSize;
			//line 344 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			while (( _g1 < _g ))
			{
				//line 344 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				int i = _g1++;
				//line 345 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( i * 3 ) * 2 ), ( i * 4 ));
				//line 346 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 1 ), ( ( i * 4 ) + 1 ));
				//line 347 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 2 ), ( ( i * 4 ) + 2 ));
				//line 348 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 3 ), ( i * 4 ));
				//line 349 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 4 ), ( ( i * 4 ) + 2 ));
				//line 350 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 5 ), ( ( i * 4 ) + 3 ));
			}
			
		}
		
		//line 352 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.indexBuffer.unlock();
		//line 354 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.triangleVertexBuffer = new kha.graphics4.VertexBuffer(( kha.graphics4.ColoredShaderPainter.triangleBufferSize * 3 ), kha.graphics4.ColoredShaderPainter.structure, kha.graphics4.Usage.DynamicUsage, null);
		//line 355 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.triangleVertices = this.triangleVertexBuffer.lock(null, null);
		//line 357 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.triangleIndexBuffer = new kha.graphics4.IndexBuffer(( kha.graphics4.ColoredShaderPainter.triangleBufferSize * 3 ), kha.graphics4.Usage.StaticUsage, null);
		//line 358 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		haxe.root.Array<java.lang.Object> triIndices = this.triangleIndexBuffer.lock();
		//line 359 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 359 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int _g11 = 0;
			//line 359 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int _g2 = kha.graphics4.ColoredShaderPainter.bufferSize;
			//line 359 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			while (( _g11 < _g2 ))
			{
				//line 359 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				int i1 = _g11++;
				//line 360 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				triIndices.__set(( i1 * 3 ), ( i1 * 3 ));
				//line 361 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				triIndices.__set(( ( i1 * 3 ) + 1 ), ( ( i1 * 3 ) + 1 ));
				//line 362 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				triIndices.__set(( ( i1 * 3 ) + 2 ), ( ( i1 * 3 ) + 2 ));
			}
			
		}
		
		//line 364 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.triangleIndexBuffer.unlock();
	}
	
	
	public void setRectVertices(double bottomleftx, double bottomlefty, double topleftx, double toplefty, double toprightx, double toprighty, double bottomrightx, double bottomrighty)
	{
		//line 372 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		int baseIndex = ( ( this.bufferIndex * 7 ) * 4 );
		//line 373 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, baseIndex, bottomleftx);
		//line 374 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 1 ), bottomlefty);
		//line 375 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 2 ), -5.0);
		//line 377 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 7 ), topleftx);
		//line 378 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 8 ), toplefty);
		//line 379 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 9 ), -5.0);
		//line 381 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 14 ), toprightx);
		//line 382 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 15 ), toprighty);
		//line 383 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 16 ), -5.0);
		//line 385 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 21 ), bottomrightx);
		//line 386 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 22 ), bottomrighty);
		//line 387 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 23 ), -5.0);
	}
	
	
	public void setRectColors(double opacity, int color)
	{
		//line 391 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		int baseIndex = ( ( this.bufferIndex * 7 ) * 4 );
		//line 392 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		double a = ( opacity * (( (( ((int) (color) ) >>> 24 )) * 0.00392156862745098 )) );
		//line 393 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 3 ), ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ));
		//line 394 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 4 ), ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ));
		//line 395 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 5 ), ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 ));
		//line 396 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 6 ), a);
		//line 398 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 10 ), ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ));
		//line 399 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 11 ), ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ));
		//line 400 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 12 ), ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 ));
		//line 401 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 13 ), a);
		//line 403 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 17 ), ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ));
		//line 404 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 18 ), ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ));
		//line 405 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 19 ), ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 ));
		//line 406 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 20 ), a);
		//line 408 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 24 ), ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ));
		//line 409 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 25 ), ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ));
		//line 410 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 26 ), ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 ));
		//line 411 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 27 ), a);
	}
	
	
	public void setTriVertices(double x1, double y1, double x2, double y2, double x3, double y3)
	{
		//line 415 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		int baseIndex = ( ( this.triangleBufferIndex * 7 ) * 3 );
		//line 416 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, baseIndex, x1);
		//line 417 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 1 ), y1);
		//line 418 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 2 ), -5.0);
		//line 420 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 7 ), x2);
		//line 421 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 8 ), y2);
		//line 422 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 9 ), -5.0);
		//line 424 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 14 ), x3);
		//line 425 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 15 ), y3);
		//line 426 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 16 ), -5.0);
	}
	
	
	public void setTriColors(double opacity, int color)
	{
		//line 430 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		int baseIndex = ( ( this.triangleBufferIndex * 7 ) * 3 );
		//line 431 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		double a = ( opacity * (( (( ((int) (color) ) >>> 24 )) * 0.00392156862745098 )) );
		//line 432 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 3 ), ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ));
		//line 433 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 4 ), ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ));
		//line 434 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 5 ), ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 ));
		//line 435 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 6 ), a);
		//line 437 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 10 ), ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ));
		//line 438 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 11 ), ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ));
		//line 439 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 12 ), ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 ));
		//line 440 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 13 ), a);
		//line 442 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 17 ), ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ));
		//line 443 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 18 ), ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ));
		//line 444 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 19 ), ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 ));
		//line 445 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.triangleVertices, ( baseIndex + 20 ), a);
	}
	
	
	public void drawBuffer(boolean trisDone)
	{
		//line 449 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if ( ! (trisDone) ) 
		{
			//line 449 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (( this.triangleBufferIndex > 0 )) 
			{
				//line 449 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				this.drawTriBuffer(true);
			}
			
		}
		
		//line 451 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertexBuffer.unlock();
		//line 452 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setVertexBuffer(this.rectVertexBuffer);
		//line 453 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setIndexBuffer(this.indexBuffer);
		//line 454 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.PipelineState tmp = null;
		//line 454 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp1 = ( this.get_pipeline() == null );
		//line 454 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp1) 
		{
			//line 454 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = kha.graphics4.ColoredShaderPainter.shaderPipeline;
		}
		else
		{
			//line 454 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = this.get_pipeline();
		}
		
		//line 454 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setPipeline(tmp);
		//line 455 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setMatrix(this.projectionLocation, this.projectionMatrix);
		//line 463 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.drawIndexedVertices(0, ( ( this.bufferIndex * 2 ) * 3 ));
		//line 465 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.bufferIndex = 0;
		//line 466 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertices = this.rectVertexBuffer.lock(null, null);
	}
	
	
	public void drawTriBuffer(boolean rectsDone)
	{
		//line 470 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if ( ! (rectsDone) ) 
		{
			//line 470 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (( this.bufferIndex > 0 )) 
			{
				//line 470 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				this.drawBuffer(true);
			}
			
		}
		
		//line 472 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.triangleVertexBuffer.unlock();
		//line 473 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setVertexBuffer(this.triangleVertexBuffer);
		//line 474 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setIndexBuffer(this.triangleIndexBuffer);
		//line 475 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.PipelineState tmp = null;
		//line 475 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp1 = ( this.get_pipeline() == null );
		//line 475 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp1) 
		{
			//line 475 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = kha.graphics4.ColoredShaderPainter.shaderPipeline;
		}
		else
		{
			//line 475 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = this.get_pipeline();
		}
		
		//line 475 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setPipeline(tmp);
		//line 476 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setMatrix(this.projectionLocation, this.projectionMatrix);
		//line 484 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.drawIndexedVertices(0, ( this.triangleBufferIndex * 3 ));
		//line 486 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.triangleBufferIndex = 0;
		//line 487 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.triangleVertices = this.triangleVertexBuffer.lock(null, null);
	}
	
	
	public void fillRect(double opacity, int color, double bottomleftx, double bottomlefty, double topleftx, double toplefty, double toprightx, double toprighty, double bottomrightx, double bottomrighty)
	{
		//line 495 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( this.triangleBufferIndex > 0 )) 
		{
			//line 495 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawTriBuffer(true);
		}
		
		//line 497 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( ( this.bufferIndex + 1 ) >= kha.graphics4.ColoredShaderPainter.bufferSize )) 
		{
			//line 497 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer(false);
		}
		
		//line 499 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.setRectColors(opacity, color);
		//line 500 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.setRectVertices(bottomleftx, bottomlefty, topleftx, toplefty, toprightx, toprighty, bottomrightx, bottomrighty);
		//line 501 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		 ++ this.bufferIndex;
	}
	
	
	public void fillTriangle(double opacity, int color, double x1, double y1, double x2, double y2, double x3, double y3)
	{
		//line 505 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( this.bufferIndex > 0 )) 
		{
			//line 505 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer(true);
		}
		
		//line 507 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( ( this.triangleBufferIndex + 1 ) >= kha.graphics4.ColoredShaderPainter.triangleBufferSize )) 
		{
			//line 507 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawTriBuffer(false);
		}
		
		//line 509 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.setTriColors(opacity, color);
		//line 510 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.setTriVertices(x1, y1, x2, y2, x3, y3);
		//line 511 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		 ++ this.triangleBufferIndex;
	}
	
	
	public final void endTris(boolean rectsDone)
	{
		//line 515 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( this.triangleBufferIndex > 0 )) 
		{
			//line 515 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawTriBuffer(rectsDone);
		}
		
	}
	
	
	public final void endRects(boolean trisDone)
	{
		//line 519 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( this.bufferIndex > 0 )) 
		{
			//line 519 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer(trisDone);
		}
		
	}
	
	
	public final void end()
	{
		//line 523 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( this.triangleBufferIndex > 0 )) 
		{
			//line 523 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawTriBuffer(false);
		}
		
		//line 524 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( this.bufferIndex > 0 )) 
		{
			//line 524 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer(false);
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case -1844062902:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleBufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.triangleBufferIndex = ((int) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1045476238:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.bufferIndex = ((int) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case 1178387683:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("destinationBlend")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.destinationBlend = ((kha.graphics4.BlendingFactor) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -766241040:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionMatrix")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.projectionMatrix = ((kha.math.FastMatrix4) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -111664906:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("sourceBlend")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.sourceBlend = ((kha.graphics4.BlendingFactor) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -328003804:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionLocation")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.projectionLocation = ((kha.graphics4.ConstantLocation) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -372069726:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("pipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.set_pipeline(((kha.graphics4.PipelineState) (value) ));
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1045476238:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.bufferIndex = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 88780910:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("myPipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.myPipeline = ((kha.graphics4.PipelineState) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -582263032:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.rectVertexBuffer = ((kha.graphics4.VertexBuffer) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 103:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("g")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.g = ((kha.graphics4.Graphics) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1616249341:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.rectVertices = ((java.nio.FloatBuffer) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 58772618:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleIndexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.triangleIndexBuffer = ((kha.graphics4.IndexBuffer) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 857359282:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("indexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.indexBuffer = ((kha.graphics4.IndexBuffer) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1890169311:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.triangleVertices = ((java.nio.FloatBuffer) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1844062902:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleBufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.triangleBufferIndex = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1119815380:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleVertexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.triangleVertexBuffer = ((kha.graphics4.VertexBuffer) (value) );
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case 100571:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("end")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "end")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -766241040:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionMatrix")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.projectionMatrix;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1713093364:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("endRects")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "endRects")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -328003804:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionLocation")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.projectionLocation;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1607234653:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("endTris")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "endTris")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1045476238:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.bufferIndex;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 462434475:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("fillTriangle")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "fillTriangle")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -582263032:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.rectVertexBuffer;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -729134585:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("fillRect")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "fillRect")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1616249341:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.rectVertices;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1551977241:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawTriBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "drawTriBuffer")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 857359282:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("indexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.indexBuffer;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -574510428:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "drawBuffer")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1844062902:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleBufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.triangleBufferIndex;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -132419399:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setTriColors")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setTriColors")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1119815380:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleVertexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.triangleVertexBuffer;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 238644482:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setTriVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setTriVertices")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1890169311:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.triangleVertices;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 19140214:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectColors")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setRectColors")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 58772618:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleIndexBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.triangleIndexBuffer;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -141455489:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setRectVertices")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 103:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("g")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.g;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1548047619:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("initBuffers")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "initBuffers")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 88780910:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("myPipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.myPipeline;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1493577647:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setProjection")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setProjection")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -372069726:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("pipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.get_pipeline();
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -746132001:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("set_pipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "set_pipeline")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -111664906:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("sourceBlend")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.sourceBlend;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1999842667:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("get_pipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_pipeline")) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1178387683:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("destinationBlend")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.destinationBlend;
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case -1844062902:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("triangleBufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((double) (this.triangleBufferIndex) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1045476238:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((double) (this.bufferIndex) );
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case 100571:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("end")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.end();
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1999842667:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("get_pipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.get_pipeline();
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1713093364:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("endRects")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.endRects(haxe.lang.Runtime.toBool(dynargs.__get(0)));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -746132001:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("set_pipeline")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.set_pipeline(((kha.graphics4.PipelineState) (dynargs.__get(0)) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1607234653:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("endTris")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.endTris(haxe.lang.Runtime.toBool(dynargs.__get(0)));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1493577647:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setProjection")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setProjection(((kha.math.FastMatrix4) (dynargs.__get(0)) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 462434475:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("fillTriangle")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.fillTriangle(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(6))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(7))) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1548047619:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("initBuffers")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.initBuffers();
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -729134585:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("fillRect")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.fillRect(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(6))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(7))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(8))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(9))) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -141455489:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setRectVertices(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(6))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(7))) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1551977241:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawTriBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.drawTriBuffer(haxe.lang.Runtime.toBool(dynargs.__get(0)));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 19140214:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectColors")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setRectColors(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -574510428:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawBuffer")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.drawBuffer(haxe.lang.Runtime.toBool(dynargs.__get(0)));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 238644482:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setTriVertices")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setTriVertices(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -132419399:
				{
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setTriColors")) 
					{
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setTriColors(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ));
					}
					
					//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("destinationBlend");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("sourceBlend");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("pipeline");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("myPipeline");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("g");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("triangleIndexBuffer");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("triangleVertices");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("triangleVertexBuffer");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("triangleBufferIndex");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("indexBuffer");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("rectVertices");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("rectVertexBuffer");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("bufferIndex");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("projectionLocation");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("projectionMatrix");
		//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 266 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


