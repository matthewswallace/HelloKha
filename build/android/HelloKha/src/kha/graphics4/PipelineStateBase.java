// Generated by Haxe 3.3.0
package kha.graphics4;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class PipelineStateBase extends haxe.lang.HxObject
{
	public PipelineStateBase(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public PipelineStateBase()
	{
		//line 4 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		kha.graphics4.PipelineStateBase.__hx_ctor_kha_graphics4_PipelineStateBase(this);
	}
	
	
	public static void __hx_ctor_kha_graphics4_PipelineStateBase(kha.graphics4.PipelineStateBase __temp_me180)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.inputLayout = null;
		//line 6 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.vertexShader = null;
		//line 7 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.fragmentShader = null;
		//line 8 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.geometryShader = null;
		//line 9 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.tessellationControlShader = null;
		//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.tessellationEvaluationShader = null;
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.cullMode = kha.graphics4.CullMode.None;
		//line 14 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.depthWrite = false;
		//line 15 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.depthMode = kha.graphics4.CompareMode.Always;
		//line 17 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.stencilMode = kha.graphics4.CompareMode.Always;
		//line 18 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.stencilBothPass = kha.graphics4.StencilAction.Keep;
		//line 19 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.stencilDepthFail = kha.graphics4.StencilAction.Keep;
		//line 20 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.stencilFail = kha.graphics4.StencilAction.Keep;
		//line 21 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.stencilReferenceValue = 0;
		//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.stencilReadMask = 255;
		//line 23 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.stencilWriteMask = 255;
		//line 25 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.blendSource = kha.graphics4.BlendingFactor.BlendOne;
		//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.blendDestination = kha.graphics4.BlendingFactor.BlendZero;
		//line 27 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.blendOperation = kha.graphics4.BlendingOperation.Add;
		//line 28 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.alphaBlendSource = kha.graphics4.BlendingFactor.BlendOne;
		//line 29 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.alphaBlendDestination = kha.graphics4.BlendingFactor.BlendZero;
		//line 30 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.alphaBlendOperation = kha.graphics4.BlendingOperation.Add;
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		__temp_me180.colorWriteMaskRed = __temp_me180.colorWriteMaskBlue = __temp_me180.colorWriteMaskGreen = __temp_me180.colorWriteMaskAlpha = true;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		return new kha.graphics4.PipelineStateBase(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		return new kha.graphics4.PipelineStateBase();
	}
	
	
	public haxe.root.Array<kha.graphics4.VertexStructure> inputLayout;
	
	public kha.graphics4.VertexShader vertexShader;
	
	public kha.graphics4.FragmentShader fragmentShader;
	
	public kha.graphics4.GeometryShader geometryShader;
	
	public kha.graphics4.TessellationControlShader tessellationControlShader;
	
	public kha.graphics4.TessellationEvaluationShader tessellationEvaluationShader;
	
	public kha.graphics4.CullMode cullMode;
	
	public boolean depthWrite;
	
	public kha.graphics4.CompareMode depthMode;
	
	public kha.graphics4.CompareMode stencilMode;
	
	public kha.graphics4.StencilAction stencilBothPass;
	
	public kha.graphics4.StencilAction stencilDepthFail;
	
	public kha.graphics4.StencilAction stencilFail;
	
	public int stencilReferenceValue;
	
	public int stencilReadMask;
	
	public int stencilWriteMask;
	
	public kha.graphics4.BlendingFactor blendSource;
	
	public kha.graphics4.BlendingFactor blendDestination;
	
	public kha.graphics4.BlendingOperation blendOperation;
	
	public kha.graphics4.BlendingFactor alphaBlendSource;
	
	public kha.graphics4.BlendingFactor alphaBlendDestination;
	
	public kha.graphics4.BlendingOperation alphaBlendOperation;
	
	
	
	public boolean colorWriteMaskRed;
	
	public boolean colorWriteMaskGreen;
	
	public boolean colorWriteMaskBlue;
	
	public boolean colorWriteMaskAlpha;
	
	public final boolean set_colorWriteMask(boolean value)
	{
		//line 70 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		return this.colorWriteMaskRed = this.colorWriteMaskBlue = this.colorWriteMaskGreen = this.colorWriteMaskAlpha = value;
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		{
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			switch (field.hashCode())
			{
				case -489156337:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilWriteMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilWriteMask = ((int) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 713611714:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReferenceValue")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilReferenceValue = ((int) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1101500286:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReadMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilReadMask = ((int) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		{
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			switch (field.hashCode())
			{
				case 161755894:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskAlpha")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.colorWriteMaskAlpha = haxe.lang.Runtime.toBool(value);
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -523714668:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("inputLayout")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.inputLayout = ((haxe.root.Array<kha.graphics4.VertexStructure>) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -2072962110:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskBlue")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.colorWriteMaskBlue = haxe.lang.Runtime.toBool(value);
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1658893655:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("vertexShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.vertexShader = ((kha.graphics4.VertexShader) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 167465115:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskGreen")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.colorWriteMaskGreen = haxe.lang.Runtime.toBool(value);
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1209185707:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("fragmentShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.fragmentShader = ((kha.graphics4.FragmentShader) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -343949271:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskRed")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.colorWriteMaskRed = haxe.lang.Runtime.toBool(value);
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 468831991:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("geometryShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.geometryShader = ((kha.graphics4.GeometryShader) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 2113952584:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.set_colorWriteMask(haxe.lang.Runtime.toBool(value));
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 2105685025:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("tessellationControlShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.tessellationControlShader = ((kha.graphics4.TessellationControlShader) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -102899436:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("alphaBlendOperation")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.alphaBlendOperation = ((kha.graphics4.BlendingOperation) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1686919838:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("tessellationEvaluationShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.tessellationEvaluationShader = ((kha.graphics4.TessellationEvaluationShader) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1661659013:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("alphaBlendDestination")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.alphaBlendDestination = ((kha.graphics4.BlendingFactor) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 397371957:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("cullMode")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.cullMode = ((kha.graphics4.CullMode) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -754990194:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("alphaBlendSource")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.alphaBlendSource = ((kha.graphics4.BlendingFactor) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 217964252:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("depthWrite")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.depthWrite = haxe.lang.Runtime.toBool(value);
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1623597078:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("blendOperation")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.blendOperation = ((kha.graphics4.BlendingOperation) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -686006522:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("depthMode")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.depthMode = ((kha.graphics4.CompareMode) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -355885315:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("blendDestination")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.blendDestination = ((kha.graphics4.BlendingFactor) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -468648577:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilMode")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilMode = ((kha.graphics4.CompareMode) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1848488908:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("blendSource")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.blendSource = ((kha.graphics4.BlendingFactor) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -180821746:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilBothPass")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilBothPass = ((kha.graphics4.StencilAction) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -489156337:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilWriteMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilWriteMask = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 231162405:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilDepthFail")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilDepthFail = ((kha.graphics4.StencilAction) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1101500286:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReadMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilReadMask = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -468870406:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilFail")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilFail = ((kha.graphics4.StencilAction) (value) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 713611714:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReferenceValue")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						this.stencilReferenceValue = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return value;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		{
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			switch (field.hashCode())
			{
				case 756186309:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("set_colorWriteMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "set_colorWriteMask")) );
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -523714668:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("inputLayout")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.inputLayout;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 161755894:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskAlpha")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.colorWriteMaskAlpha;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1658893655:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("vertexShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.vertexShader;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -2072962110:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskBlue")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.colorWriteMaskBlue;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1209185707:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("fragmentShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.fragmentShader;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 167465115:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskGreen")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.colorWriteMaskGreen;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 468831991:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("geometryShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.geometryShader;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -343949271:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("colorWriteMaskRed")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.colorWriteMaskRed;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 2105685025:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("tessellationControlShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.tessellationControlShader;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -102899436:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("alphaBlendOperation")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.alphaBlendOperation;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1686919838:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("tessellationEvaluationShader")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.tessellationEvaluationShader;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -1661659013:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("alphaBlendDestination")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.alphaBlendDestination;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 397371957:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("cullMode")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.cullMode;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -754990194:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("alphaBlendSource")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.alphaBlendSource;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 217964252:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("depthWrite")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.depthWrite;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1623597078:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("blendOperation")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.blendOperation;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -686006522:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("depthMode")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.depthMode;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -355885315:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("blendDestination")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.blendDestination;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -468648577:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilMode")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.stencilMode;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1848488908:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("blendSource")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.blendSource;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -180821746:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilBothPass")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.stencilBothPass;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -489156337:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilWriteMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.stencilWriteMask;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 231162405:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilDepthFail")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.stencilDepthFail;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1101500286:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReadMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.stencilReadMask;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case -468870406:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilFail")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.stencilFail;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 713611714:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReferenceValue")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.stencilReferenceValue;
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		{
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			switch (field.hashCode())
			{
				case -489156337:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilWriteMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return ((double) (this.stencilWriteMask) );
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 713611714:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReferenceValue")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return ((double) (this.stencilReferenceValue) );
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
				case 1101500286:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("stencilReadMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return ((double) (this.stencilReadMask) );
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		{
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			switch (field.hashCode())
			{
				case 756186309:
				{
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					if (field.equals("set_colorWriteMask")) 
					{
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
						return this.set_colorWriteMask(haxe.lang.Runtime.toBool(dynargs.__get(0)));
					}
					
					//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			else
			{
				//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("colorWriteMaskAlpha");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("colorWriteMaskBlue");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("colorWriteMaskGreen");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("colorWriteMaskRed");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("colorWriteMask");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("alphaBlendOperation");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("alphaBlendDestination");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("alphaBlendSource");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("blendOperation");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("blendDestination");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("blendSource");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("stencilWriteMask");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("stencilReadMask");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("stencilReferenceValue");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("stencilFail");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("stencilDepthFail");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("stencilBothPass");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("stencilMode");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("depthMode");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("depthWrite");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("cullMode");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("tessellationEvaluationShader");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("tessellationControlShader");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("geometryShader");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("fragmentShader");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("vertexShader");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		baseArr.push("inputLayout");
		//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
		{
			//line 3 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/PipelineStateBase.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


