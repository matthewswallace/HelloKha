// Generated by Haxe 3.3.0
package kha.graphics4;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class ImageShaderPainter extends haxe.lang.HxObject
{
	static
	{
		//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline = null;
		//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.structure = null;
		//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.bufferSize = 1500;
		//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.vertexSize = 9;
	}
	
	public ImageShaderPainter(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public ImageShaderPainter(kha.graphics4.Graphics g4)
	{
		//line 54 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.__hx_ctor_kha_graphics4_ImageShaderPainter(this, g4);
	}
	
	
	public static void __hx_ctor_kha_graphics4_ImageShaderPainter(kha.graphics4.ImageShaderPainter __temp_me171, kha.graphics4.Graphics g4)
	{
		//line 52 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.destinationBlend = kha.graphics4.BlendingFactor.Undefined;
		//line 51 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.sourceBlend = kha.graphics4.BlendingFactor.Undefined;
		//line 48 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.myPipeline = null;
		//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.bilinearMipmaps = false;
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.bilinear = false;
		//line 55 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.g = g4;
		//line 56 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.bufferIndex = 0;
		//line 57 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.initShaders();
		//line 58 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.initBuffers();
		//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.projectionLocation = kha.graphics4.ImageShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
		//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		__temp_me171.textureLocation = kha.graphics4.ImageShaderPainter.shaderPipeline.getTextureUnit("tex");
	}
	
	
	public static kha.graphics4.PipelineState shaderPipeline;
	
	public static kha.graphics4.VertexStructure structure;
	
	public static int bufferSize;
	
	public static int vertexSize;
	
	public static void initShaders()
	{
		//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp = ( kha.graphics4.ImageShaderPainter.shaderPipeline != null );
		//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp) 
		{
			//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			return ;
		}
		
		//line 86 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline = new kha.graphics4.PipelineState();
		//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.fragmentShader = kha.Shaders.painter_image_frag;
		//line 88 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.vertexShader = kha.Shaders.painter_image_vert;
		//line 90 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.structure = new kha.graphics4.VertexStructure();
		//line 91 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.structure.add("vertexPosition", kha.graphics4.VertexData.Float3);
		//line 92 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.structure.add("texPosition", kha.graphics4.VertexData.Float2);
		//line 93 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.structure.add("vertexColor", kha.graphics4.VertexData.Float4);
		//line 94 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.inputLayout = new haxe.root.Array<kha.graphics4.VertexStructure>(new kha.graphics4.VertexStructure[]{kha.graphics4.ImageShaderPainter.structure});
		//line 96 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.blendSource = kha.graphics4.BlendingFactor.BlendOne;
		//line 97 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.blendDestination = kha.graphics4.BlendingFactor.InverseSourceAlpha;
		//line 98 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.alphaBlendSource = kha.graphics4.BlendingFactor.SourceAlpha;
		//line 99 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.alphaBlendDestination = kha.graphics4.BlendingFactor.InverseSourceAlpha;
		//line 101 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.ImageShaderPainter.shaderPipeline.compile();
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return new kha.graphics4.ImageShaderPainter(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return new kha.graphics4.ImageShaderPainter(((kha.graphics4.Graphics) (arr.__get(0)) ));
	}
	
	
	public kha.math.FastMatrix4 projectionMatrix;
	
	public kha.graphics4.ConstantLocation projectionLocation;
	
	public kha.graphics4.TextureUnit textureLocation;
	
	public int bufferIndex;
	
	public kha.graphics4.VertexBuffer rectVertexBuffer;
	
	public java.nio.FloatBuffer rectVertices;
	
	public kha.graphics4.IndexBuffer indexBuffer;
	
	public kha.Image lastTexture;
	
	public boolean bilinear;
	
	public boolean bilinearMipmaps;
	
	public kha.graphics4.Graphics g;
	
	public kha.graphics4.PipelineState myPipeline;
	
	
	
	public kha.graphics4.BlendingFactor sourceBlend;
	
	public kha.graphics4.BlendingFactor destinationBlend;
	
	public kha.graphics4.PipelineState get_pipeline()
	{
		//line 64 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return this.myPipeline;
	}
	
	
	public kha.graphics4.PipelineState set_pipeline(kha.graphics4.PipelineState pipe)
	{
		//line 68 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp = ( pipe == null );
		//line 68 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp) 
		{
			//line 69 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.projectionLocation = kha.graphics4.ImageShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
			//line 70 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.textureLocation = kha.graphics4.ImageShaderPainter.shaderPipeline.getTextureUnit("tex");
		}
		else
		{
			//line 73 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
			//line 74 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.textureLocation = pipe.getTextureUnit("tex");
		}
		
		//line 76 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return this.myPipeline = pipe;
	}
	
	
	public void setProjection(kha.math.FastMatrix4 projectionMatrix)
	{
		//line 80 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.projectionMatrix = projectionMatrix;
	}
	
	
	public void initBuffers()
	{
		//line 105 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertexBuffer = new kha.graphics4.VertexBuffer(( kha.graphics4.ImageShaderPainter.bufferSize * 4 ), kha.graphics4.ImageShaderPainter.structure, kha.graphics4.Usage.DynamicUsage, null);
		//line 106 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertices = this.rectVertexBuffer.lock(null, null);
		//line 108 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.indexBuffer = new kha.graphics4.IndexBuffer(( ( kha.graphics4.ImageShaderPainter.bufferSize * 3 ) * 2 ), kha.graphics4.Usage.StaticUsage, null);
		//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		haxe.root.Array<java.lang.Object> indices = this.indexBuffer.lock();
		//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int _g1 = 0;
			//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int _g = kha.graphics4.ImageShaderPainter.bufferSize;
			//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			while (( _g1 < _g ))
			{
				//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				int i = _g1++;
				//line 111 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( i * 3 ) * 2 ), ( i * 4 ));
				//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 1 ), ( ( i * 4 ) + 1 ));
				//line 113 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 2 ), ( ( i * 4 ) + 2 ));
				//line 114 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 3 ), ( i * 4 ));
				//line 115 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 4 ), ( ( i * 4 ) + 2 ));
				//line 116 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				indices.__set(( ( ( i * 3 ) * 2 ) + 5 ), ( ( i * 4 ) + 3 ));
			}
			
		}
		
		//line 118 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.indexBuffer.unlock();
	}
	
	
	public final void setRectVertices(double bottomleftx, double bottomlefty, double topleftx, double toplefty, double toprightx, double toprighty, double bottomrightx, double bottomrighty)
	{
		//line 126 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		int baseIndex = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
		//line 127 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, baseIndex, bottomleftx);
		//line 128 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 1 ), bottomlefty);
		//line 129 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 2 ), -5.0);
		//line 131 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 9 ), topleftx);
		//line 132 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 10 ), toplefty);
		//line 133 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 11 ), -5.0);
		//line 135 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 18 ), toprightx);
		//line 136 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 19 ), toprighty);
		//line 137 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 20 ), -5.0);
		//line 139 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 27 ), bottomrightx);
		//line 140 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 28 ), bottomrighty);
		//line 141 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 29 ), -5.0);
	}
	
	
	public final void setRectTexCoords(double left, double top, double right, double bottom)
	{
		//line 145 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		int baseIndex = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
		//line 146 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 3 ), left);
		//line 147 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 4 ), bottom);
		//line 149 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 12 ), left);
		//line 150 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 13 ), top);
		//line 152 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 21 ), right);
		//line 153 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 22 ), top);
		//line 155 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 30 ), right);
		//line 156 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 31 ), bottom);
	}
	
	
	public final void setRectColor(double r, double g, double b, double a)
	{
		//line 160 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		int baseIndex = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
		//line 161 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 5 ), r);
		//line 162 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 6 ), g);
		//line 163 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 7 ), b);
		//line 164 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 8 ), a);
		//line 166 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 14 ), r);
		//line 167 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 15 ), g);
		//line 168 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 16 ), b);
		//line 169 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 17 ), a);
		//line 171 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 23 ), r);
		//line 172 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 24 ), g);
		//line 173 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 25 ), b);
		//line 174 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 26 ), a);
		//line 176 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 32 ), r);
		//line 177 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 33 ), g);
		//line 178 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 34 ), b);
		//line 179 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 35 ), a);
	}
	
	
	public void drawBuffer()
	{
		//line 183 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertexBuffer.unlock();
		//line 184 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setVertexBuffer(this.rectVertexBuffer);
		//line 185 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setIndexBuffer(this.indexBuffer);
		//line 186 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		kha.graphics4.PipelineState tmp = null;
		//line 186 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp1 = ( this.get_pipeline() == null );
		//line 186 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp1) 
		{
			//line 186 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = kha.graphics4.ImageShaderPainter.shaderPipeline;
		}
		else
		{
			//line 186 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = this.get_pipeline();
		}
		
		//line 186 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setPipeline(tmp);
		//line 187 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setTexture(this.textureLocation, this.lastTexture);
		//line 188 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setTextureParameters(this.textureLocation, kha.graphics4.TextureAddressing.Clamp, kha.graphics4.TextureAddressing.Clamp, ( (this.bilinear) ? (kha.graphics4.TextureFilter.LinearFilter) : (kha.graphics4.TextureFilter.PointFilter) ), ( (this.bilinear) ? (kha.graphics4.TextureFilter.LinearFilter) : (kha.graphics4.TextureFilter.PointFilter) ), ( (this.bilinearMipmaps) ? (kha.graphics4.MipMapFilter.LinearMipFilter) : (kha.graphics4.MipMapFilter.NoMipFilter) ));
		//line 189 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setMatrix(this.projectionLocation, this.projectionMatrix);
		//line 197 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.drawIndexedVertices(0, ( ( this.bufferIndex * 2 ) * 3 ));
		//line 199 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.g.setTexture(this.textureLocation, null);
		//line 200 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.bufferIndex = 0;
		//line 201 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.rectVertices = this.rectVertexBuffer.lock(null, null);
	}
	
	
	public void setBilinearFilter(boolean bilinear)
	{
		//line 205 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.end();
		//line 206 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.bilinear = bilinear;
	}
	
	
	public void setBilinearMipmapFilter(boolean bilinear)
	{
		//line 210 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.end();
		//line 211 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.bilinearMipmaps = bilinear;
	}
	
	
	public final void drawImage(kha.Image img, double bottomleftx, double bottomlefty, double topleftx, double toplefty, double toprightx, double toprighty, double bottomrightx, double bottomrighty, double opacity, int color)
	{
		//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp = false;
		//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( ( this.bufferIndex + 1 ) < kha.graphics4.ImageShaderPainter.bufferSize )) 
		{
			//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean tmp1 = ( this.lastTexture != null );
			//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (tmp1) 
			{
				//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				tmp = ( img != this.lastTexture );
			}
			else
			{
				//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				tmp = false;
			}
			
		}
		else
		{
			//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = true;
		}
		
		//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp) 
		{
			//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer();
		}
		
		//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double r = ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 );
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double g = ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 );
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double b = ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 );
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double a = ( ( (( ((int) (color) ) >>> 24 )) * 0.00392156862745098 ) * opacity );
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 5 ), r);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 6 ), g);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 7 ), b);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 8 ), a);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 14 ), r);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 15 ), g);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 16 ), b);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 17 ), a);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 23 ), r);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 24 ), g);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 25 ), b);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 26 ), a);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 32 ), r);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 33 ), g);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 34 ), b);
			//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 35 ), a);
		}
		
		//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double right = ( ((double) (img.get_width()) ) / img.get_realWidth() );
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double bottom = ( ((double) (img.get_height()) ) / img.get_realHeight() );
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex1 = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 3 ), ((double) (0) ));
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 4 ), bottom);
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 12 ), ((double) (0) ));
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 13 ), ((double) (0) ));
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 21 ), right);
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 22 ), ((double) (0) ));
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 30 ), right);
			//line 224 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 31 ), bottom);
		}
		
		//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex2 = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, baseIndex2, bottomleftx);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 1 ), bottomlefty);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 2 ), -5.0);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 9 ), topleftx);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 10 ), toplefty);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 11 ), -5.0);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 18 ), toprightx);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 19 ), toprighty);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 20 ), -5.0);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 27 ), bottomrightx);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 28 ), bottomrighty);
			//line 225 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 29 ), -5.0);
		}
		
		//line 227 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		 ++ this.bufferIndex;
		//line 228 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.lastTexture = img;
	}
	
	
	public final void drawImage2(kha.Image img, double sx, double sy, double sw, double sh, double bottomleftx, double bottomlefty, double topleftx, double toplefty, double toprightx, double toprighty, double bottomrightx, double bottomrighty, double opacity, int color)
	{
		//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp = false;
		//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( ( this.bufferIndex + 1 ) < kha.graphics4.ImageShaderPainter.bufferSize )) 
		{
			//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean tmp1 = ( this.lastTexture != null );
			//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (tmp1) 
			{
				//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				tmp = ( img != this.lastTexture );
			}
			else
			{
				//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				tmp = false;
			}
			
		}
		else
		{
			//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = true;
		}
		
		//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp) 
		{
			//line 238 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer();
		}
		
		//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double left = ( sx / img.get_realWidth() );
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double top = ( sy / img.get_realHeight() );
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double right = ( (( sx + sw )) / img.get_realWidth() );
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double bottom = ( (( sy + sh )) / img.get_realHeight() );
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 3 ), left);
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 4 ), bottom);
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 12 ), left);
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 13 ), top);
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 21 ), right);
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 22 ), top);
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 30 ), right);
			//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 31 ), bottom);
		}
		
		//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double r = ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 );
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double g = ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 );
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double b = ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 );
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double a = ( ( (( ((int) (color) ) >>> 24 )) * 0.00392156862745098 ) * opacity );
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex1 = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 5 ), r);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 6 ), g);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 7 ), b);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 8 ), a);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 14 ), r);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 15 ), g);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 16 ), b);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 17 ), a);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 23 ), r);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 24 ), g);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 25 ), b);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 26 ), a);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 32 ), r);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 33 ), g);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 34 ), b);
			//line 241 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 35 ), a);
		}
		
		//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex2 = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, baseIndex2, bottomleftx);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 1 ), bottomlefty);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 2 ), -5.0);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 9 ), topleftx);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 10 ), toplefty);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 11 ), -5.0);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 18 ), toprightx);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 19 ), toprighty);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 20 ), -5.0);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 27 ), bottomrightx);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 28 ), bottomrighty);
			//line 242 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 29 ), -5.0);
		}
		
		//line 244 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		 ++ this.bufferIndex;
		//line 245 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.lastTexture = img;
	}
	
	
	public final void drawImageScale(kha.Image img, double sx, double sy, double sw, double sh, double left, double top, double right, double bottom, double opacity, int color)
	{
		//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		boolean tmp = false;
		//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( ( this.bufferIndex + 1 ) < kha.graphics4.ImageShaderPainter.bufferSize )) 
		{
			//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean tmp1 = ( this.lastTexture != null );
			//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (tmp1) 
			{
				//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				tmp = ( img != this.lastTexture );
			}
			else
			{
				//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				tmp = false;
			}
			
		}
		else
		{
			//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			tmp = true;
		}
		
		//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (tmp) 
		{
			//line 250 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer();
		}
		
		//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double left1 = ( sx / img.get_realWidth() );
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double top1 = ( sy / img.get_realHeight() );
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double right1 = ( (( sx + sw )) / img.get_realWidth() );
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double bottom1 = ( (( sy + sh )) / img.get_realHeight() );
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 3 ), left1);
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 4 ), bottom1);
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 12 ), left1);
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 13 ), top1);
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 21 ), right1);
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 22 ), top1);
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 30 ), right1);
			//line 252 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex + 31 ), bottom1);
		}
		
		//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double r = ( (( (( ((int) (color) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 );
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double g = ( (( (( ((int) (color) ) & 65280 )) >>> 8 )) * 0.00392156862745098 );
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			double b = ( (( ((int) (color) ) & 255 )) * 0.00392156862745098 );
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex1 = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 5 ), r);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 6 ), g);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 7 ), b);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 8 ), opacity);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 14 ), r);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 15 ), g);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 16 ), b);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 17 ), opacity);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 23 ), r);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 24 ), g);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 25 ), b);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 26 ), opacity);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 32 ), r);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 33 ), g);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 34 ), b);
			//line 253 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex1 + 35 ), opacity);
		}
		
		//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			int baseIndex2 = ( ( this.bufferIndex * kha.graphics4.ImageShaderPainter.vertexSize ) * 4 );
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, baseIndex2, left);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 1 ), bottom);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 2 ), -5.0);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 9 ), left);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 10 ), top);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 11 ), -5.0);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 18 ), right);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 19 ), top);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 20 ), -5.0);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 27 ), right);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 28 ), bottom);
			//line 254 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			kha.arrays._Float32Array.Float32Array_Impl_.set(this.rectVertices, ( baseIndex2 + 29 ), -5.0);
		}
		
		//line 256 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		 ++ this.bufferIndex;
		//line 257 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.lastTexture = img;
	}
	
	
	public void end()
	{
		//line 261 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		if (( this.bufferIndex > 0 )) 
		{
			//line 261 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			this.drawBuffer();
		}
		
		//line 262 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		this.lastTexture = null;
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case -1045476238:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.bufferIndex = ((int) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case 1178387683:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("destinationBlend")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.destinationBlend = ((kha.graphics4.BlendingFactor) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -766241040:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionMatrix")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.projectionMatrix = ((kha.math.FastMatrix4) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -111664906:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("sourceBlend")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.sourceBlend = ((kha.graphics4.BlendingFactor) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -328003804:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionLocation")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.projectionLocation = ((kha.graphics4.ConstantLocation) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -372069726:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("pipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.set_pipeline(((kha.graphics4.PipelineState) (value) ));
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -415592976:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("textureLocation")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.textureLocation = ((kha.graphics4.TextureUnit) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 88780910:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("myPipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.myPipeline = ((kha.graphics4.PipelineState) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1045476238:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.bufferIndex = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 103:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("g")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.g = ((kha.graphics4.Graphics) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -582263032:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertexBuffer")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.rectVertexBuffer = ((kha.graphics4.VertexBuffer) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1062627103:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bilinearMipmaps")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.bilinearMipmaps = haxe.lang.Runtime.toBool(value);
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1616249341:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertices")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.rectVertices = ((java.nio.FloatBuffer) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 887622188:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bilinear")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.bilinear = haxe.lang.Runtime.toBool(value);
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 857359282:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("indexBuffer")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.indexBuffer = ((kha.graphics4.IndexBuffer) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 466347429:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("lastTexture")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.lastTexture = ((kha.Image) (value) );
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return value;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case 100571:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("end")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "end")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -766241040:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionMatrix")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.projectionMatrix;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1313057517:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawImageScale")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "drawImageScale")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -328003804:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("projectionLocation")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.projectionLocation;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -381642597:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawImage2")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "drawImage2")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -415592976:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("textureLocation")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.textureLocation;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 126236279:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawImage")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "drawImage")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1045476238:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.bufferIndex;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1077442578:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setBilinearMipmapFilter")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setBilinearMipmapFilter")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -582263032:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertexBuffer")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.rectVertexBuffer;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 818324934:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setBilinearFilter")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setBilinearFilter")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1616249341:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("rectVertices")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.rectVertices;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -574510428:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawBuffer")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "drawBuffer")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 857359282:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("indexBuffer")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.indexBuffer;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1661950563:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectColor")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setRectColor")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 466347429:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("lastTexture")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.lastTexture;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1137074081:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectTexCoords")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setRectTexCoords")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 887622188:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bilinear")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.bilinear;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -141455489:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectVertices")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setRectVertices")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1062627103:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bilinearMipmaps")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.bilinearMipmaps;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1548047619:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("initBuffers")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "initBuffers")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 103:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("g")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.g;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1493577647:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setProjection")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setProjection")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 88780910:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("myPipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.myPipeline;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -746132001:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("set_pipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "set_pipeline")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -372069726:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("pipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.get_pipeline();
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1999842667:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("get_pipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_pipeline")) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -111664906:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("sourceBlend")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.sourceBlend;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1178387683:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("destinationBlend")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.destinationBlend;
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case -1045476238:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("bufferIndex")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return ((double) (this.bufferIndex) );
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			switch (field.hashCode())
			{
				case 100571:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("end")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.end();
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1999842667:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("get_pipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.get_pipeline();
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1313057517:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawImageScale")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.drawImageScale(((kha.Image) (dynargs.__get(0)) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(6))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(7))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(8))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(9))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(10))) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -746132001:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("set_pipeline")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						return this.set_pipeline(((kha.graphics4.PipelineState) (dynargs.__get(0)) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -381642597:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawImage2")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.drawImage2(((kha.Image) (dynargs.__get(0)) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(6))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(7))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(8))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(9))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(10))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(11))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(12))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(13))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(14))) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1493577647:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setProjection")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setProjection(((kha.math.FastMatrix4) (dynargs.__get(0)) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 126236279:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawImage")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.drawImage(((kha.Image) (dynargs.__get(0)) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(6))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(7))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(8))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(9))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(10))) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 1548047619:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("initBuffers")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.initBuffers();
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1077442578:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setBilinearMipmapFilter")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setBilinearMipmapFilter(haxe.lang.Runtime.toBool(dynargs.__get(0)));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -141455489:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectVertices")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setRectVertices(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(4))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(5))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(6))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(7))) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case 818324934:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setBilinearFilter")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setBilinearFilter(haxe.lang.Runtime.toBool(dynargs.__get(0)));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1137074081:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectTexCoords")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setRectTexCoords(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -574510428:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("drawBuffer")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.drawBuffer();
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
				case -1661950563:
				{
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					if (field.equals("setRectColor")) 
					{
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
						this.setRectColor(((double) (haxe.lang.Runtime.toDouble(dynargs.__get(0))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(1))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(2))) ), ((double) (haxe.lang.Runtime.toDouble(dynargs.__get(3))) ));
					}
					
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("destinationBlend");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("sourceBlend");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("pipeline");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("myPipeline");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("g");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("bilinearMipmaps");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("bilinear");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("lastTexture");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("indexBuffer");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("rectVertices");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("rectVertexBuffer");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("bufferIndex");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("textureLocation");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("projectionLocation");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		baseArr.push("projectionMatrix");
		//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
		{
			//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/graphics4/Graphics2.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


