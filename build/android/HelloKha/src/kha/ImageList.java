// Generated by Haxe 3.3.0
package kha;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class ImageList extends haxe.lang.HxObject
{
	public ImageList(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public ImageList()
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		kha.ImageList.__hx_ctor_kha_ImageList(this);
	}
	
	
	public static void __hx_ctor_kha_ImageList(kha.ImageList __temp_me49)
	{
		//line 9 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		__temp_me49.names = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		return new kha.ImageList(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		return new kha.ImageList();
	}
	
	
	public haxe.root.Array<java.lang.String> names;
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		{
			//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
			switch (field.hashCode())
			{
				case 104585032:
				{
					//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
					if (field.equals("names")) 
					{
						//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
						this.names = ((haxe.root.Array<java.lang.String>) (value) );
						//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
						return value;
					}
					
					//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
					break;
				}
				
				
			}
			
			//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		{
			//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
			switch (field.hashCode())
			{
				case 104585032:
				{
					//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
					if (field.equals("names")) 
					{
						//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
						return this.names;
					}
					
					//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
					break;
				}
				
				
			}
			
			//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		baseArr.push("names");
		//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
		{
			//line 10 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Assets.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


