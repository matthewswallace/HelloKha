// Generated by Haxe 3.3.0
package kha._Color;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Color_Impl_
{
	static
	{
		//line 13 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Black = kha._Color.Color_Impl_._new(-16777216);
		//line 14 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.White = kha._Color.Color_Impl_._new(-1);
		//line 15 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Red = kha._Color.Color_Impl_._new(-65536);
		//line 16 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Blue = kha._Color.Color_Impl_._new(-16776961);
		//line 17 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Green = kha._Color.Color_Impl_._new(-16711936);
		//line 18 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Magenta = kha._Color.Color_Impl_._new(-65281);
		//line 19 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Yellow = kha._Color.Color_Impl_._new(-256);
		//line 20 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Cyan = kha._Color.Color_Impl_._new(-16711681);
		//line 21 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Purple = kha._Color.Color_Impl_._new(-8388480);
		//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Pink = kha._Color.Color_Impl_._new(-16181);
		//line 23 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.Orange = kha._Color.Color_Impl_._new(-23296);
		//line 25 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		kha._Color.Color_Impl_.invMaxChannelValue = 0.00392156862745098;
	}
	
	public static int Black;
	
	public static int White;
	
	public static int Red;
	
	public static int Blue;
	
	public static int Green;
	
	public static int Magenta;
	
	public static int Yellow;
	
	public static int Cyan;
	
	public static int Purple;
	
	public static int Pink;
	
	public static int Orange;
	
	public static double invMaxChannelValue;
	
	public static int fromValue(int value)
	{
		//line 31 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return kha._Color.Color_Impl_._new(value);
	}
	
	
	public static int fromBytes(int r, int g, int b, java.lang.Object a)
	{
		//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		int __temp_a55 = ( (haxe.lang.Runtime.eq(a, null)) ? (255) : (((int) (haxe.lang.Runtime.toInt(a)) )) );
		//line 38 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return kha._Color.Color_Impl_._new(( ( ( ( __temp_a55 << 24 ) | ( r << 16 ) ) | ( g << 8 ) ) | b ));
	}
	
	
	public static int fromFloats(double r, double g, double b, java.lang.Object a)
	{
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		double __temp_a56 = ( (haxe.lang.Runtime.eq(a, null)) ? (((double) (1) )) : (((double) (haxe.lang.Runtime.toDouble(a)) )) );
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return kha._Color.Color_Impl_._new(( ( ( ( ((int) (( __temp_a56 * 255 )) ) << 24 ) | ( ((int) (( r * 255 )) ) << 16 ) ) | ( ((int) (( g * 255 )) ) << 8 ) ) | ((int) (( b * 255 )) ) ));
	}
	
	
	public static int fromString(java.lang.String value)
	{
		//line 52 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		if (( (( ( value.length() == 7 ) || ( value.length() == 9 ) )) && ( (( (( 0 < value.length() )) ? (((int) (value.charAt(0)) )) : (-1) )) == 35 ) )) 
		{
			//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
			java.lang.String tmp = haxe.lang.StringExt.substr(value, 1, null);
			//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
			java.lang.Object colorValue = haxe.root.Std.parseInt(( "0x" + tmp ));
			//line 54 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
			if (( value.length() == 7 )) 
			{
				//line 55 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
				colorValue = ((java.lang.Object) (haxe.lang.Runtime.plus(colorValue, -16777216)) );
			}
			
			//line 57 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
			return kha._Color.Color_Impl_._new(((int) (haxe.lang.Runtime.toInt(colorValue)) ));
		}
		else
		{
			//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
			throw haxe.lang.HaxeException.wrap(( ( "Invalid Color string: \'" + value ) + "\'" ));
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static int _new(int value)
	{
		//line 97 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ((int) (value) );
	}
	
	
	
	
	public static int get_value(int this1)
	{
		//line 107 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return this1;
	}
	
	
	public static int set_value(int this1, int value)
	{
		//line 111 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = value;
		//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return value;
	}
	
	
	public static int get_Rb(int this1)
	{
		//line 116 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( (( this1 & 16711680 )) >>> 16 );
	}
	
	
	public static int get_Gb(int this1)
	{
		//line 120 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( (( this1 & 65280 )) >>> 8 );
	}
	
	
	public static int get_Bb(int this1)
	{
		//line 124 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( this1 & 255 );
	}
	
	
	public static int get_Ab(int this1)
	{
		//line 128 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( this1 >>> 24 );
	}
	
	
	public static int set_Rb(int this1, int i)
	{
		//line 132 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( ( ((int) (this1) ) >>> 24 ) << 24 ) | ( i << 16 ) ) | ( ( (( ((int) (this1) ) & 65280 )) >>> 8 ) << 8 ) ) | ( ((int) (this1) ) & 255 ) );
		//line 133 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return i;
	}
	
	
	public static int set_Gb(int this1, int i)
	{
		//line 137 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( ( ((int) (this1) ) >>> 24 ) << 24 ) | ( ( (( ((int) (this1) ) & 16711680 )) >>> 16 ) << 16 ) ) | ( i << 8 ) ) | ( ((int) (this1) ) & 255 ) );
		//line 138 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return i;
	}
	
	
	public static int set_Bb(int this1, int i)
	{
		//line 142 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( ( ((int) (this1) ) >>> 24 ) << 24 ) | ( ( (( ((int) (this1) ) & 16711680 )) >>> 16 ) << 16 ) ) | ( ( (( ((int) (this1) ) & 65280 )) >>> 8 ) << 8 ) ) | i );
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return i;
	}
	
	
	public static int set_Ab(int this1, int i)
	{
		//line 147 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( i << 24 ) | ( ( (( ((int) (this1) ) & 16711680 )) >>> 16 ) << 16 ) ) | ( ( (( ((int) (this1) ) & 65280 )) >>> 8 ) << 8 ) ) | ( ((int) (this1) ) & 255 ) );
		//line 148 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return i;
	}
	
	
	public static double get_R(int this1)
	{
		//line 152 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( (( (( ((int) (this1) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 );
	}
	
	
	public static double get_G(int this1)
	{
		//line 156 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( (( (( ((int) (this1) ) & 65280 )) >>> 8 )) * 0.00392156862745098 );
	}
	
	
	public static double get_B(int this1)
	{
		//line 160 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( (( ((int) (this1) ) & 255 )) * 0.00392156862745098 );
	}
	
	
	public static double get_A(int this1)
	{
		//line 164 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return ( (( ((int) (this1) ) >>> 24 )) * 0.00392156862745098 );
	}
	
	
	public static double set_R(int this1, double f)
	{
		//line 168 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( ((int) (( ( (( ((int) (this1) ) >>> 24 )) * 0.00392156862745098 ) * 255 )) ) << 24 ) | ( ((int) (( f * 255 )) ) << 16 ) ) | ( ((int) (( ( (( (( ((int) (this1) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ) * 255 )) ) << 8 ) ) | ((int) (( ( (( ((int) (this1) ) & 255 )) * 0.00392156862745098 ) * 255 )) ) );
		//line 169 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return f;
	}
	
	
	public static double set_G(int this1, double f)
	{
		//line 173 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( ((int) (( ( (( ((int) (this1) ) >>> 24 )) * 0.00392156862745098 ) * 255 )) ) << 24 ) | ( ((int) (( ( (( (( ((int) (this1) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ) * 255 )) ) << 16 ) ) | ( ((int) (( f * 255 )) ) << 8 ) ) | ((int) (( ( (( ((int) (this1) ) & 255 )) * 0.00392156862745098 ) * 255 )) ) );
		//line 174 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return f;
	}
	
	
	public static double set_B(int this1, double f)
	{
		//line 178 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( ((int) (( ( (( ((int) (this1) ) >>> 24 )) * 0.00392156862745098 ) * 255 )) ) << 24 ) | ( ((int) (( ( (( (( ((int) (this1) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ) * 255 )) ) << 16 ) ) | ( ((int) (( ( (( (( ((int) (this1) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ) * 255 )) ) << 8 ) ) | ((int) (( f * 255 )) ) );
		//line 179 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return f;
	}
	
	
	public static double set_A(int this1, double f)
	{
		//line 183 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		this1 = ( ( ( ( ((int) (( f * 255 )) ) << 24 ) | ( ((int) (( ( (( (( ((int) (this1) ) & 16711680 )) >>> 16 )) * 0.00392156862745098 ) * 255 )) ) << 16 ) ) | ( ((int) (( ( (( (( ((int) (this1) ) & 65280 )) >>> 8 )) * 0.00392156862745098 ) * 255 )) ) << 8 ) ) | ((int) (( ( (( ((int) (this1) ) & 255 )) * 0.00392156862745098 ) * 255 )) ) );
		//line 184 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Color.hx"
		return f;
	}
	
	
}


