// Generated by Haxe 3.3.0
package kha.internal;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class BytesBlob extends haxe.lang.HxObject implements kha.Resource
{
	public BytesBlob(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public BytesBlob(haxe.io.Bytes bytes)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		kha.internal.BytesBlob.__hx_ctor_kha_internal_BytesBlob(this, bytes);
	}
	
	
	public static void __hx_ctor_kha_internal_BytesBlob(kha.internal.BytesBlob __temp_me193, haxe.io.Bytes bytes)
	{
		//line 8 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		__temp_me193.myFirstLine = true;
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		__temp_me193.bytes = bytes;
		//line 13 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		__temp_me193.buffer = new haxe.root.Array<java.lang.Object>();
	}
	
	
	public static kha.internal.BytesBlob fromBytes(haxe.io.Bytes bytes)
	{
		//line 17 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return new kha.internal.BytesBlob(((haxe.io.Bytes) (bytes) ));
	}
	
	
	public static kha.internal.BytesBlob alloc(int size)
	{
		//line 21 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return new kha.internal.BytesBlob(((haxe.io.Bytes) (haxe.io.Bytes.alloc(size)) ));
	}
	
	
	public static double readF32(int i)
	{
		//line 139 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		double sign = ( (( (( i & -2147483648 )) == 0 )) ? (((double) (1) )) : (((double) (-1) )) );
		//line 140 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int exp = ( ( i >> 23 ) & 255 );
		//line 141 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int man = ( i & 8388607 );
		//line 142 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		switch (exp)
		{
			case 0:
			{
				//line 145 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return 0.0;
			}
			
			
			case 255:
			{
				//line 147 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				if (( man != 0 )) 
				{
					//line 147 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					return java.lang.Double.NaN;
				}
				else
				{
					//line 148 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (( sign > 0 )) 
					{
						//line 148 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return java.lang.Double.POSITIVE_INFINITY;
					}
					else
					{
						//line 149 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return java.lang.Double.NEGATIVE_INFINITY;
					}
					
				}
				
			}
			
			
			default:
			{
				//line 151 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return ( ( sign * (( (( man + 8388608 )) / 8388608.0 )) ) * java.lang.Math.pow(((double) (2) ), ((double) (( exp - 127 )) )) );
			}
			
		}
		
	}
	
	
	public static boolean bit(int value, int position)
	{
		//line 160 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		boolean b = ( (( ( value >>> position ) & 1 )) == 1 );
		//line 161 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (b) 
		{
			//line 164 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return true;
		}
		else
		{
			//line 169 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return false;
		}
		
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return new kha.internal.BytesBlob(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return new kha.internal.BytesBlob(((haxe.io.Bytes) (arr.__get(0)) ));
	}
	
	
	public haxe.io.Bytes bytes;
	
	public haxe.root.Array<java.lang.Object> buffer;
	
	public boolean myFirstLine;
	
	public kha.internal.BytesBlob sub(int start, int length)
	{
		//line 25 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return new kha.internal.BytesBlob(((haxe.io.Bytes) (this.bytes.sub(start, length)) ));
	}
	
	
	public int length;
	
	public int get_length()
	{
		//line 31 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return this.bytes.length;
	}
	
	
	public void writeU8(int position, int value)
	{
		//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		this.bytes.b[position] = ((byte) (value) );
	}
	
	
	public int readU8(int position)
	{
		//line 39 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int _byte = ( this.bytes.b[position] & 255 );
		//line 40 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		 ++ position;
		//line 41 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return _byte;
	}
	
	
	public int readS8(int position)
	{
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int _byte = ( this.bytes.b[position] & 255 );
		//line 46 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		 ++ position;
		//line 47 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int sign = ( (( (( _byte & 128 )) == 0 )) ? (1) : (-1) );
		//line 48 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		_byte &= 127;
		//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return ( sign * _byte );
	}
	
	
	public int readU16BE(int position)
	{
		//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[position] & 255 );
		//line 54 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 1 )] & 255 );
		//line 55 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 2;
		//line 56 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return ( ( first * 256 ) + second );
	}
	
	
	public int readU16LE(int position)
	{
		//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[position] & 255 );
		//line 61 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 1 )] & 255 );
		//line 62 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 2;
		//line 63 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return ( ( second * 256 ) + first );
	}
	
	
	public int readU32LE(int position)
	{
		//line 67 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int fourth = ( this.bytes.b[position] & 255 );
		//line 68 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int third = ( this.bytes.b[( position + 1 )] & 255 );
		//line 69 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 2 )] & 255 );
		//line 70 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[( position + 3 )] & 255 );
		//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 4;
		//line 73 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return ( ( ( fourth + ( third * 256 ) ) + ( ( second * 256 ) * 256 ) ) + ( ( ( first * 256 ) * 256 ) * 256 ) );
	}
	
	
	public int readU32BE(int position)
	{
		//line 77 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int fourth = ( this.bytes.b[position] & 255 );
		//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int third = ( this.bytes.b[( position + 1 )] & 255 );
		//line 79 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 2 )] & 255 );
		//line 80 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[( position + 3 )] & 255 );
		//line 81 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 4;
		//line 83 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return ( ( ( first + ( second * 256 ) ) + ( ( third * 256 ) * 256 ) ) + ( ( ( fourth * 256 ) * 256 ) * 256 ) );
	}
	
	
	public int readS16BE(int position)
	{
		//line 87 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[position] & 255 );
		//line 88 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 1 )] & 255 );
		//line 89 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 2;
		//line 90 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int sign = ( (( (( first & 128 )) == 0 )) ? (1) : (-1) );
		//line 91 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		first &= 127;
		//line 92 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (( sign == -1 )) 
		{
			//line 92 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return ( ( -32767 + ( first * 256 ) ) + second );
		}
		else
		{
			//line 93 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return ( ( first * 256 ) + second );
		}
		
	}
	
	
	public int readS16LE(int position)
	{
		//line 97 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[position] & 255 );
		//line 98 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 1 )] & 255 );
		//line 99 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int sign = ( (( (( second & 128 )) == 0 )) ? (1) : (-1) );
		//line 100 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		second &= 127;
		//line 101 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 2;
		//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (( sign == -1 )) 
		{
			//line 102 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return ( ( -32767 + ( second * 256 ) ) + first );
		}
		else
		{
			//line 103 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return ( ( second * 256 ) + first );
		}
		
	}
	
	
	public int readS32LE(int position)
	{
		//line 107 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int fourth = ( this.bytes.b[position] & 255 );
		//line 108 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int third = ( this.bytes.b[( position + 1 )] & 255 );
		//line 109 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 2 )] & 255 );
		//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[( position + 3 )] & 255 );
		//line 111 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int sign = ( (( (( first & 128 )) == 0 )) ? (1) : (-1) );
		//line 112 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		first &= 127;
		//line 113 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 4;
		//line 114 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (( sign == -1 )) 
		{
			//line 114 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return ( ( ( ( -2147483647 + fourth ) + ( third * 256 ) ) + ( ( second * 256 ) * 256 ) ) + ( ( ( first * 256 ) * 256 ) * 256 ) );
		}
		else
		{
			//line 115 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return ( ( ( fourth + ( third * 256 ) ) + ( ( second * 256 ) * 256 ) ) + ( ( ( first * 256 ) * 256 ) * 256 ) );
		}
		
	}
	
	
	public int readS32BE(int position)
	{
		//line 119 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int fourth = ( this.bytes.b[position] & 255 );
		//line 120 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int third = ( this.bytes.b[( position + 1 )] & 255 );
		//line 121 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int second = ( this.bytes.b[( position + 2 )] & 255 );
		//line 122 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int first = ( this.bytes.b[( position + 3 )] & 255 );
		//line 123 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int sign = ( (( (( fourth & 128 )) == 0 )) ? (1) : (-1) );
		//line 124 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		fourth &= 127;
		//line 125 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		position += 4;
		//line 126 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (( sign == -1 )) 
		{
			//line 126 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return ( ( ( ( -2147483647 + first ) + ( second * 256 ) ) + ( ( third * 256 ) * 256 ) ) + ( ( ( fourth * 256 ) * 256 ) * 256 ) );
		}
		
		//line 127 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return ( ( ( first + ( second * 256 ) ) + ( ( third * 256 ) * 256 ) ) + ( ( ( fourth * 256 ) * 256 ) * 256 ) );
	}
	
	
	public double readF32LE(int position)
	{
		//line 131 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return kha.internal.BytesBlob.readF32(this.readS32LE(position));
	}
	
	
	public double readF32BE(int position)
	{
		//line 135 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return kha.internal.BytesBlob.readF32(this.readS32BE(position));
	}
	
	
	@Override public java.lang.String toString()
	{
		//line 156 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return this.bytes.toString();
	}
	
	
	public int readUtf8Char(java.lang.Object position)
	{
		//line 174 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (( haxe.lang.Runtime.compare(((int) (haxe.lang.Runtime.getField_f(position, "value", true)) ), this.get_length()) >= 0 )) 
		{
			//line 174 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return -1;
		}
		
		//line 175 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int c = this.readU8(((int) (haxe.lang.Runtime.getField_f(position, "value", true)) ));
		//line 176 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 176 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			java.lang.Object __temp_getvar1 = position;
			//line 176 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			haxe.lang.Runtime.setField_f(__temp_getvar1, "value", ((double) (( ((int) (haxe.lang.Runtime.getField_f(__temp_getvar1, "value", true)) ) + 1 )) ));
		}
		
		//line 177 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int value = 0;
		//line 178 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if ( ! (kha.internal.BytesBlob.bit(c, 7)) ) 
		{
			//line 179 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			value = c;
		}
		else
		{
			//line 181 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (( ( kha.internal.BytesBlob.bit(c, 7) && kha.internal.BytesBlob.bit(c, 6) ) &&  ! (kha.internal.BytesBlob.bit(c, 5))  )) 
			{
				//line 182 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				int a = ( c & 31 );
				//line 183 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				int c2 = this.readU8(((int) (haxe.lang.Runtime.getField_f(position, "value", true)) ));
				//line 184 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				{
					//line 184 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					java.lang.Object __temp_getvar2 = position;
					//line 184 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					haxe.lang.Runtime.setField_f(__temp_getvar2, "value", ((double) (( ((int) (haxe.lang.Runtime.getField_f(__temp_getvar2, "value", true)) ) + 1 )) ));
				}
				
				//line 185 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				int b = ( c2 & 63 );
				//line 186 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				value = ( ( a << 6 ) | b );
			}
			else
			{
				//line 188 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				if (( ( ( kha.internal.BytesBlob.bit(c, 7) && kha.internal.BytesBlob.bit(c, 6) ) && kha.internal.BytesBlob.bit(c, 5) ) &&  ! (kha.internal.BytesBlob.bit(c, 4))  )) 
				{
					//line 190 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					java.lang.Object __temp_dynop3 = position;
					//line 190 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					haxe.lang.Runtime.setField_f(__temp_dynop3, "value", ((double) (( ((int) (haxe.lang.Runtime.getField_f(__temp_dynop3, "value", true)) ) + 2 )) ));
				}
				else
				{
					//line 192 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (( ( ( ( kha.internal.BytesBlob.bit(c, 7) && kha.internal.BytesBlob.bit(c, 6) ) && kha.internal.BytesBlob.bit(c, 5) ) && kha.internal.BytesBlob.bit(c, 4) ) &&  ! (kha.internal.BytesBlob.bit(c, 3))  )) 
					{
						//line 194 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						java.lang.Object __temp_dynop4 = position;
						//line 194 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						haxe.lang.Runtime.setField_f(__temp_dynop4, "value", ((double) (( ((int) (haxe.lang.Runtime.getField_f(__temp_dynop4, "value", true)) ) + 3 )) ));
					}
					
				}
				
			}
			
		}
		
		//line 196 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return value;
	}
	
	
	public java.lang.String readUtf8Line(java.lang.Object position)
	{
		//line 200 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int bufferindex = 0;
		//line 201 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		int c = this.readUtf8Char(position);
		//line 202 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (( c < 0 )) 
		{
			//line 202 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			return "";
		}
		
		//line 203 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		while (( ( c != 10 ) && ( bufferindex < 2000 ) ))
		{
			//line 204 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			this.buffer.__set(bufferindex, c);
			//line 205 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			 ++ bufferindex;
			//line 206 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			c = this.readUtf8Char(position);
			//line 207 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (( haxe.lang.Runtime.compare(((int) (haxe.lang.Runtime.getField_f(position, "value", true)) ), this.get_length()) >= 0 )) 
			{
				//line 208 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				this.buffer.__set(bufferindex, c);
				//line 209 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				 ++ bufferindex;
				//line 210 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				break;
			}
			
		}
		
		//line 213 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		if (this.myFirstLine) 
		{
			//line 214 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			this.myFirstLine = false;
			//line 215 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (( ( ( ( bufferindex > 2 ) && ( ((int) (haxe.lang.Runtime.toInt(this.buffer.__get(0))) ) == 239 ) ) && ( ((int) (haxe.lang.Runtime.toInt(this.buffer.__get(1))) ) == 187 ) ) && ( ((int) (haxe.lang.Runtime.toInt(this.buffer.__get(2))) ) == 191 ) )) 
			{
				//line 216 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				haxe.root.Array<java.lang.Object> chars = new haxe.root.Array<java.lang.Object>();
				//line 217 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				{
					//line 217 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					int _g1 = 3;
					//line 217 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					int _g = ( bufferindex - 3 );
					//line 217 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					while (( _g1 < _g ))
					{
						//line 217 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						int i = _g1++;
						//line 217 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						chars.__set(( i - 3 ), ((int) (haxe.lang.Runtime.toInt(this.buffer.__get(i))) ));
					}
					
				}
				
				//line 218 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return this.toText(chars, ( bufferindex - 3 ));
			}
			
		}
		
		//line 221 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		haxe.root.Array<java.lang.Object> chars1 = new haxe.root.Array<java.lang.Object>();
		//line 222 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 222 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			int _g11 = 0;
			//line 222 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			int _g2 = bufferindex;
			//line 222 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			while (( _g11 < _g2 ))
			{
				//line 222 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				int i1 = _g11++;
				//line 222 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				chars1.__set(i1, ((int) (haxe.lang.Runtime.toInt(this.buffer.__get(i1))) ));
			}
			
		}
		
		//line 223 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return this.toText(chars1, bufferindex);
	}
	
	
	public java.lang.String toText(haxe.root.Array<java.lang.Object> chars, int length)
	{
		//line 227 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		java.lang.String value = "";
		//line 228 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 228 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			int _g1 = 0;
			//line 228 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			while (( _g1 < length ))
			{
				//line 228 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				int i = _g1++;
				//line 228 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				value += Character.toString((char) ((int) (haxe.lang.Runtime.toInt(chars.__get(i))) ));
			}
			
		}
		
		//line 229 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return value;
	}
	
	
	public java.lang.String readUtf8String()
	{
		//line 233 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		java.lang.String text = "";
		//line 234 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		java.lang.Object position = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"value"}, new double[]{((double) (((double) (0) )) )});
		//line 235 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		while (( haxe.lang.Runtime.compare(((int) (haxe.lang.Runtime.getField_f(position, "value", true)) ), this.get_length()) < 0 ))
		{
			//line 235 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			text += ( this.readUtf8Line(position) + "\n" );
		}
		
		//line 236 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return text;
	}
	
	
	public haxe.io.Bytes toBytes()
	{
		//line 240 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return this.bytes;
	}
	
	
	public void unload()
	{
		//line 244 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		this.bytes = null;
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			switch (field.hashCode())
			{
				case -1106363674:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("length")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						this.length = ((int) (value) );
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return value;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
			}
			
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			switch (field.hashCode())
			{
				case -1106363674:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("length")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						this.length = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return value;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 94224491:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("bytes")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						this.bytes = ((haxe.io.Bytes) (value) );
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return value;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 1534251640:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("myFirstLine")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						this.myFirstLine = haxe.lang.Runtime.toBool(value);
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return value;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1378118592:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("buffer")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						this.buffer = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return value;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
			}
			
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			switch (field.hashCode())
			{
				case -840442113:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("unload")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "unload")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 94224491:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("bytes")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.bytes;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1181247824:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("toBytes")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toBytes")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1378118592:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("buffer")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.buffer;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1748052712:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readUtf8String")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readUtf8String")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 1534251640:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("myFirstLine")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.myFirstLine;
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -868871608:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("toText")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toText")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 114240:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("sub")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "sub")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -851199301:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readUtf8Line")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readUtf8Line")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1106363674:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("length")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						if (handleProperties) 
						{
							//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
							return this.get_length();
						}
						else
						{
							//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
							return this.length;
						}
						
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -851468771:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readUtf8Char")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readUtf8Char")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 974314479:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("get_length")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get_length")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1776922004:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("toString")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toString")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 1603004066:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("writeU8")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "writeU8")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1138518958:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readF32BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readF32BE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -934979943:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU8")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readU8")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1138518648:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readF32LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readF32LE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -934980005:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS8")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readS8")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126513185:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS32BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readS32BE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124721881:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU16BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readU16BE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126512875:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS32LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readS32LE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124721571:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU16LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readU16LE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126568613:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS16LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readS16LE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124665833:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU32LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readU32LE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126568923:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS16BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readS16BE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124666143:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU32BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "readU32BE")) );
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
			}
			
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			switch (field.hashCode())
			{
				case -1106363674:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("length")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						if (handleProperties) 
						{
							//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
							return ((double) (this.get_length()) );
						}
						else
						{
							//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
							return ((double) (this.length) );
						}
						
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
			}
			
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			switch (field.hashCode())
			{
				case -840442113:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("unload")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						this.unload();
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 114240:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("sub")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.sub(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1181247824:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("toBytes")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.toBytes();
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 974314479:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("get_length")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.get_length();
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1748052712:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readUtf8String")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readUtf8String();
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case 1603004066:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("writeU8")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						this.writeU8(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -868871608:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("toText")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.toText(((haxe.root.Array<java.lang.Object>) (dynargs.__get(0)) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -934979943:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU8")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readU8(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -851199301:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readUtf8Line")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readUtf8Line(dynargs.__get(0));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -934980005:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS8")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readS8(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -851468771:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readUtf8Char")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readUtf8Char(dynargs.__get(0));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124721881:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU16BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readU16BE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1776922004:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("toString")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.toString();
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124721571:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU16LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readU16LE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1138518958:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readF32BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readF32BE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124665833:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU32LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readU32LE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1138518648:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readF32LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readF32LE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1124666143:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readU32BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readU32BE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126513185:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS32BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readS32BE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126568923:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS16BE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readS16BE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126512875:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS32LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readS32LE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
				case -1126568613:
				{
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					if (field.equals("readS16LE")) 
					{
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						__temp_executeDef1 = false;
						//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
						return this.readS16LE(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
					break;
				}
				
				
			}
			
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		baseArr.push("length");
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		baseArr.push("myFirstLine");
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		baseArr.push("buffer");
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		baseArr.push("bytes");
		//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
		{
			//line 5 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/internal/BytesBlob.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


