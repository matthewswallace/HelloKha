// Generated by Haxe 3.3.0
package kha;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class SystemImpl extends haxe.lang.HxObject
{
	static
	{
		//line 13 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.w = 640;
		//line 14 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.h = 480;
		//line 110 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.mouseX = 0;
		//line 111 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.mouseY = 0;
		//line 113 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.shift = false;
	}
	
	public SystemImpl(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public SystemImpl()
	{
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.__hx_ctor_kha_SystemImpl(this);
	}
	
	
	public static void __hx_ctor_kha_SystemImpl(kha.SystemImpl __temp_me90)
	{
	}
	
	
	public static int w;
	
	public static int h;
	
	public static double startTime;
	
	public static int windowWidth(java.lang.Object windowId)
	{
		
		android.util.DisplayMetrics metrics = new android.util.DisplayMetrics();
		com.ktxsoftware.kha.KhaActivity.the().getWindowManager().getDefaultDisplay().getMetrics(metrics);
		return metrics.widthPixels;
	
	}
	
	
	public static int windowHeight(java.lang.Object windowId)
	{
		
		android.util.DisplayMetrics metrics = new android.util.DisplayMetrics();
		com.ktxsoftware.kha.KhaActivity.the().getWindowManager().getDefaultDisplay().getMetrics(metrics);
		return metrics.heightPixels;
	
	}
	
	
	public static int screenDpi()
	{
		
		android.util.DisplayMetrics metrics = new android.util.DisplayMetrics();
		com.ktxsoftware.kha.KhaActivity.the().getWindowManager().getDefaultDisplay().getMetrics(metrics);
		return (int)(metrics.density * android.util.DisplayMetrics.DENSITY_DEFAULT);
	
	}
	
	
	public static kha.ScreenRotation getScreenRotation()
	{
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return kha.ScreenRotation.RotationNone;
	}
	
	
	public static int getFrequency()
	{
		//line 49 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return 1000;
	}
	
	
	public static double getTimestamp()
	{
		
		return java.lang.System.currentTimeMillis();
	
	}
	
	
	public static double getTime()
	{
		//line 60 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return ( (( kha.SystemImpl.getTimestamp() - kha.SystemImpl.startTime )) / kha.SystemImpl.getFrequency() );
	}
	
	
	public static boolean getVsync()
	{
		//line 64 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return true;
	}
	
	
	public static int getRefreshRate()
	{
		//line 68 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return 60;
	}
	
	
	public static java.lang.String getSystemId()
	{
		//line 72 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return "Android";
	}
	
	
	public static void requestShutdown()
	{
		//line 76 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.shutdown();
		//line 77 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		java.lang.System.exit(0);
	}
	
	
	public static void changeResolution(int width, int height)
	{
	}
	
	
	public static boolean canSwitchFullscreen()
	{
		//line 85 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return false;
	}
	
	
	public static boolean isFullscreen()
	{
		//line 89 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return false;
	}
	
	
	public static void requestFullscreen()
	{
	}
	
	
	public static void exitFullscreen()
	{
	}
	
	
	public static kha.Framebuffer framebuffer;
	
	public static int mouseX;
	
	public static int mouseY;
	
	public static kha.android.Keyboard keyboard;
	
	public static boolean shift;
	
	public static kha.input.Mouse mouse;
	
	public static kha.input.Surface surface;
	
	public static void init(java.lang.Object options, haxe.lang.Function done)
	{
		//line 118 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.w = ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(options, "width", true))) );
		//line 119 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.h = ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(options, "height", true))) );
		//line 120 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		com.ktxsoftware.kha.KhaActivity.the();
		//line 121 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.keyboard = new kha.android.Keyboard();
		//line 122 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.mouse = new kha.input.Mouse();
		//line 124 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.surface = new kha.input.Surface();
		//line 126 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.LoaderImpl.init(com.ktxsoftware.kha.KhaActivity.the().getApplicationContext());
		//line 127 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.Scheduler.init();
		//line 129 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.Shaders.init();
		//line 130 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.android.Graphics graphics = new kha.android.Graphics(((kha.Image) (null) ));
		//line 131 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.framebuffer = new kha.Framebuffer(0, null, null, graphics);
		//line 132 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.graphics2.Graphics1 g1 = new kha.graphics2.Graphics1(((kha.Canvas) (kha.SystemImpl.framebuffer) ));
		//line 133 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.graphics4.Graphics2 g2 = new kha.graphics4.Graphics2(((kha.Canvas) (kha.SystemImpl.framebuffer) ));
		//line 134 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.framebuffer.init(g1, g2, graphics);
		//line 136 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.Scheduler.start(null);
		//line 138 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		done.__hx_invoke0_o();
	}
	
	
	public static void initEx(java.lang.String title, haxe.root.Array<kha.WindowOptions> options, haxe.lang.Function windowCallback, haxe.lang.Function callback)
	{
		//line 142 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		haxe.Log.trace.__hx_invoke2_o(0.0, "initEx is not supported on android target, falling back to init() with first window options", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"kha.SystemImpl", "SystemImpl.hx", "initEx"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		java.lang.Object tmp = null;
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		boolean tmp1 = ( options.__get(0).rendererOptions != null );
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		if (tmp1) 
		{
			//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			tmp = options.__get(0).rendererOptions.samplesPerPixel;
		}
		else
		{
			//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			tmp = 0;
		}
		
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		java.lang.Object __temp_stmt3 = null;
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		{
			//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			int __temp_odecl1 = options.__get(0).width;
			//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			int __temp_odecl2 = options.__get(0).height;
			//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			__temp_stmt3 = new haxe.lang.DynamicObject(new java.lang.String[]{"samplesPerPixel", "title"}, new java.lang.Object[]{tmp, title}, new java.lang.String[]{"height", "width"}, new double[]{((double) (((double) (__temp_odecl2) )) ), ((double) (((double) (__temp_odecl1) )) )});
		}
		
		//line 143 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.init(__temp_stmt3, callback);
		//line 145 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		boolean tmp2 = ( windowCallback != null );
		//line 145 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		if (tmp2) 
		{
			//line 146 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			windowCallback.__hx_invoke1_o(((double) (0) ), haxe.lang.Runtime.undefined);
		}
		
	}
	
	
	public static kha.android.Keyboard getKeyboard(java.lang.Object num)
	{
		//line 151 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		int __temp_num88 = ( (haxe.lang.Runtime.eq(num, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(num)) )) );
		//line 151 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		if (( __temp_num88 == 0 )) 
		{
			//line 151 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			return kha.SystemImpl.keyboard;
		}
		else
		{
			//line 152 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			return null;
		}
		
	}
	
	
	public static kha.input.Mouse getMouse(java.lang.Object num)
	{
		//line 156 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		int __temp_num89 = ( (haxe.lang.Runtime.eq(num, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(num)) )) );
		//line 156 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		if (( __temp_num89 == 0 )) 
		{
			//line 156 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			return kha.SystemImpl.mouse;
		}
		else
		{
			//line 157 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			return null;
		}
		
	}
	
	
	public static void lockMouse()
	{
	}
	
	
	public static void unlockMouse()
	{
	}
	
	
	public static boolean canLockMouse()
	{
		//line 169 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return false;
	}
	
	
	public static boolean isMouseLocked()
	{
		//line 173 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return false;
	}
	
	
	public static void notifyOfMouseLockChange(haxe.lang.Function func, haxe.lang.Function error)
	{
	}
	
	
	public static void removeFromMouseLockChange(haxe.lang.Function func, haxe.lang.Function error)
	{
	}
	
	
	public static void preinit(int width, int height)
	{
		//line 185 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.w = width;
		//line 186 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.h = height;
		//line 187 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.startTime = kha.SystemImpl.getTimestamp();
		//line 188 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		haxe.root.Main.main();
	}
	
	
	public static void setWidthHeight(int width, int height)
	{
		//line 192 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.w = width;
		//line 193 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.h = height;
	}
	
	
	public static void step()
	{
		//line 197 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.Scheduler.executeFrame();
		//line 198 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.System.render(0, kha.SystemImpl.framebuffer);
	}
	
	
	public static void setMousePosition(int x, int y)
	{
		//line 202 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.mouseX = x;
		//line 203 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.SystemImpl.mouseY = y;
	}
	
	
	public static void touch(int index, int x, int y, int action)
	{
		//line 208 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		switch (action)
		{
			case 0:
			{
				//line 210 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				if (( index == 0 )) 
				{
					//line 211 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					kha.SystemImpl.setMousePosition(x, y);
					//line 212 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					kha.SystemImpl.mouse.sendDownEvent(0, 0, x, y);
				}
				
				//line 214 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.surface.sendTouchStartEvent(index, x, y);
				//line 209 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 1:
			{
				//line 216 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				if (( index == 0 )) 
				{
					//line 217 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					int movementX = ( x - kha.SystemImpl.mouseX );
					//line 218 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					int movementY = ( y - kha.SystemImpl.mouseY );
					//line 219 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					kha.SystemImpl.setMousePosition(x, y);
					//line 220 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					kha.SystemImpl.mouse.sendMoveEvent(0, x, y, movementX, movementY);
				}
				
				//line 222 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.surface.sendMoveEvent(index, x, y);
				//line 215 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 2:
			{
				//line 224 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				if (( index == 0 )) 
				{
					//line 225 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					kha.SystemImpl.setMousePosition(x, y);
					//line 226 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					kha.SystemImpl.mouse.sendUpEvent(0, 0, x, y);
				}
				
				//line 228 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.surface.sendTouchEndEvent(index, x, y);
				//line 223 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
		}
		
	}
	
	
	public static void keyDown(int code)
	{
		//line 233 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		switch (code)
		{
			case 4:
			{
				//line 242 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendDownEvent(kha.Key.BACK, " ");
				//line 242 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 259:
			{
				//line 238 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendDownEvent(kha.Key.BACKSPACE, " ");
				//line 238 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 260:
			{
				//line 240 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendDownEvent(kha.Key.ENTER, " ");
				//line 240 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 288:
			{
				//line 235 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.shift = true;
				//line 236 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendDownEvent(kha.Key.SHIFT, " ");
				//line 234 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			default:
			{
				//line 244 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				java.lang.String _char = ( (kha.SystemImpl.shift) ? (Character.toString((char) code)) : (Character.toString((char) ( ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(code, haxe.lang.StringExt.charCodeAt("a", 0)))) ) - ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt("A", 0))) ) ))) );
				//line 251 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendDownEvent(kha.Key.CHAR, _char);
				//line 243 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
		}
		
	}
	
	
	public static void keyUp(int code)
	{
		//line 256 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		switch (code)
		{
			case 4:
			{
				//line 265 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendUpEvent(kha.Key.BACK, " ");
				//line 265 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 259:
			{
				//line 261 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendUpEvent(kha.Key.BACKSPACE, " ");
				//line 261 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 260:
			{
				//line 263 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendUpEvent(kha.Key.ENTER, " ");
				//line 263 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			case 288:
			{
				//line 258 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.shift = false;
				//line 259 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendUpEvent(kha.Key.SHIFT, " ");
				//line 257 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
			
			default:
			{
				//line 267 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				java.lang.String _char = ( (kha.SystemImpl.shift) ? (Character.toString((char) code)) : (Character.toString((char) ( ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(code, haxe.lang.StringExt.charCodeAt("a", 0)))) ) - ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt("A", 0))) ) ))) );
				//line 274 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				kha.SystemImpl.keyboard.sendUpEvent(kha.Key.CHAR, _char);
				//line 266 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				break;
			}
			
		}
		
	}
	
	
	public static boolean showKeyboard;
	
	public static boolean keyboardShown()
	{
		//line 281 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return kha.SystemImpl.showKeyboard;
	}
	
	
	public static void foreground()
	{
		//line 285 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.System.foreground();
	}
	
	
	public static void resume()
	{
		//line 289 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.System.resume();
	}
	
	
	public static void pause()
	{
		//line 293 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.System.pause();
	}
	
	
	public static void background()
	{
		//line 297 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.System.background();
	}
	
	
	public static void shutdown()
	{
		//line 301 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		kha.System.shutdown();
	}
	
	
	public static void setKeepScreenOn(boolean on)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return new kha.SystemImpl(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return new kha.SystemImpl();
	}
	
	
	public void notifyOfFullscreenChange(haxe.lang.Function func, haxe.lang.Function error)
	{
	}
	
	
	public void removeFromFullscreenChange(haxe.lang.Function func, haxe.lang.Function error)
	{
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		{
			//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			switch (field.hashCode())
			{
				case 329715129:
				{
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					if (field.equals("removeFromFullscreenChange")) 
					{
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						__temp_executeDef1 = false;
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "removeFromFullscreenChange")) );
					}
					
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					break;
				}
				
				
				case 137214571:
				{
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					if (field.equals("notifyOfFullscreenChange")) 
					{
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						__temp_executeDef1 = false;
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "notifyOfFullscreenChange")) );
					}
					
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					break;
				}
				
				
			}
			
			//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		{
			//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			switch (field.hashCode())
			{
				case 329715129:
				{
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					if (field.equals("removeFromFullscreenChange")) 
					{
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						__temp_executeDef1 = false;
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						this.removeFromFullscreenChange(((haxe.lang.Function) (dynargs.__get(0)) ), ((haxe.lang.Function) (dynargs.__get(1)) ));
					}
					
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					break;
				}
				
				
				case 137214571:
				{
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					if (field.equals("notifyOfFullscreenChange")) 
					{
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						__temp_executeDef1 = false;
						//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
						this.notifyOfFullscreenChange(((haxe.lang.Function) (dynargs.__get(0)) ), ((haxe.lang.Function) (dynargs.__get(1)) ));
					}
					
					//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
					break;
				}
				
				
			}
			
			//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 12 "/usr/local/lib/haxe/lib/kha/git/Backends/Android/kha/SystemImpl.hx"
		return null;
	}
	
	
}


