// Generated by Haxe 3.3.0
package kha;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Sound extends haxe.lang.HxObject implements kha.Resource
{
	public Sound(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Sound()
	{
		//line 15 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		kha.Sound.__hx_ctor_kha_Sound(this);
	}
	
	
	public static void __hx_ctor_kha_Sound(kha.Sound __temp_me81)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		return new kha.Sound(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		return new kha.Sound();
	}
	
	
	public haxe.io.Bytes compressedData;
	
	public double[] uncompressedData;
	
	public void uncompress(haxe.lang.Function done)
	{
		//line 18 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		haxe.io.BytesOutput output = new haxe.io.BytesOutput();
		//line 19 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		kha.audio2.ogg.vorbis.data.Header header = kha.audio2.ogg.vorbis.Reader.readAll(this.compressedData, output, true);
		//line 20 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		haxe.io.Bytes soundBytes = output.getBytes();
		//line 21 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		int count = ((int) (( soundBytes.length / 4 )) );
		//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		if (( header.channel == 1 )) 
		{
			//line 23 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			double[] this1 = new double[( count * 2 )];
			//line 23 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			this.uncompressedData = ((double[]) (this1) );
			//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			{
				//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				int _g1 = 0;
				//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				while (( _g1 < count ))
				{
					//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					int i = _g1++;
					//line 25 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					((double[]) (this.uncompressedData) )[( i * 2 )] = soundBytes.getFloat(( i * 4 ));
					//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					((double[]) (this.uncompressedData) )[( ( i * 2 ) + 1 )] = soundBytes.getFloat(( i * 4 ));
				}
				
			}
			
		}
		else
		{
			//line 30 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			double[] this2 = new double[count];
			//line 30 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			this.uncompressedData = ((double[]) (this2) );
			//line 31 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			{
				//line 31 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				int _g11 = 0;
				//line 31 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				while (( _g11 < count ))
				{
					//line 31 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					int i1 = _g11++;
					//line 32 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					((double[]) (this.uncompressedData) )[i1] = soundBytes.getFloat(( i1 * 4 ));
				}
				
			}
			
		}
		
		//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		this.compressedData = null;
		//line 36 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		done.__hx_invoke0_o();
	}
	
	
	public void unload()
	{
		//line 40 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		this.compressedData = null;
		//line 41 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		this.uncompressedData = null;
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			switch (field.hashCode())
			{
				case 1232826788:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("uncompressedData")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						this.uncompressedData = ((double[]) (value) );
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						return value;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
				case -1786158389:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("compressedData")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						this.compressedData = ((haxe.io.Bytes) (value) );
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						return value;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
			}
			
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			switch (field.hashCode())
			{
				case -840442113:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("unload")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "unload")) );
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
				case -1786158389:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("compressedData")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						return this.compressedData;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
				case 926961915:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("uncompress")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "uncompress")) );
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
				case 1232826788:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("uncompressedData")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						return this.uncompressedData;
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
			}
			
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			switch (field.hashCode())
			{
				case -840442113:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("unload")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						this.unload();
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
				case 926961915:
				{
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					if (field.equals("uncompress")) 
					{
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						__temp_executeDef1 = false;
						//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
						this.uncompress(((haxe.lang.Function) (dynargs.__get(0)) ));
					}
					
					//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
					break;
				}
				
				
			}
			
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		baseArr.push("uncompressedData");
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		baseArr.push("compressedData");
		//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
		{
			//line 11 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/Sound.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


