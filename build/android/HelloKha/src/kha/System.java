// Generated by Haxe 3.3.0
package kha;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class System extends haxe.lang.HxObject
{
	static
	{
		//line 14 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.renderListeners = new haxe.root.Array<haxe.root.Array<haxe.lang.Function>>();
		//line 15 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.foregroundListeners = new haxe.root.Array<haxe.lang.Function>();
		//line 16 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.resumeListeners = new haxe.root.Array<haxe.lang.Function>();
		//line 17 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.pauseListeners = new haxe.root.Array<haxe.lang.Function>();
		//line 18 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.backgroundListeners = new haxe.root.Array<haxe.lang.Function>();
		//line 19 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.shutdownListeners = new haxe.root.Array<haxe.lang.Function>();
	}
	
	public System(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public System()
	{
		//line 13 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.__hx_ctor_kha_System(this);
	}
	
	
	public static void __hx_ctor_kha_System(kha.System __temp_me85)
	{
	}
	
	
	public static haxe.root.Array<haxe.root.Array<haxe.lang.Function>> renderListeners;
	
	public static haxe.root.Array<haxe.lang.Function> foregroundListeners;
	
	public static haxe.root.Array<haxe.lang.Function> resumeListeners;
	
	public static haxe.root.Array<haxe.lang.Function> pauseListeners;
	
	public static haxe.root.Array<haxe.lang.Function> backgroundListeners;
	
	public static haxe.root.Array<haxe.lang.Function> shutdownListeners;
	
	public static void init(java.lang.Object options, haxe.lang.Function callback)
	{
		//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp = ( haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "title", true)) == null );
		//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp) 
		{
			//line 22 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Runtime.setField(options, "title", "Kha");
		}
		
		//line 23 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp1 = haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(options, "width", true), null);
		//line 23 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp1) 
		{
			//line 23 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Runtime.setField_f(options, "width", ((double) (800) ));
		}
		
		//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp2 = haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(options, "height", true), null);
		//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp2) 
		{
			//line 24 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Runtime.setField_f(options, "height", ((double) (600) ));
		}
		
		//line 25 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp3 = haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(options, "samplesPerPixel", true), null);
		//line 25 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp3) 
		{
			//line 25 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Runtime.setField_f(options, "samplesPerPixel", ((double) (1) ));
		}
		
		//line 26 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.SystemImpl.init(options, callback);
	}
	
	
	public static void initEx(java.lang.String title, haxe.root.Array<kha.WindowOptions> options, haxe.lang.Function windowCallback, haxe.lang.Function callback)
	{
		//line 30 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.SystemImpl.initEx(title, options, windowCallback, callback);
	}
	
	
	public static void notifyOnRender(haxe.lang.Function listener, java.lang.Object id)
	{
		//line 33 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int __temp_id82 = ( (haxe.lang.Runtime.eq(id, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(id)) )) );
		//line 34 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		while (( __temp_id82 >= kha.System.renderListeners.length ))
		{
			//line 35 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			kha.System.renderListeners.push(new haxe.root.Array<haxe.lang.Function>());
		}
		
		//line 37 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.System.renderListeners.__get(__temp_id82).push(listener);
	}
	
	
	public static void notifyOnApplicationState(haxe.lang.Function foregroundListener, haxe.lang.Function resumeListener, haxe.lang.Function pauseListener, haxe.lang.Function backgroundListener, haxe.lang.Function shutdownListener)
	{
		//line 41 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp = ( foregroundListener != null );
		//line 41 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp) 
		{
			//line 41 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			kha.System.foregroundListeners.push(foregroundListener);
		}
		
		//line 42 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp1 = ( resumeListener != null );
		//line 42 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp1) 
		{
			//line 42 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			kha.System.resumeListeners.push(resumeListener);
		}
		
		//line 43 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp2 = ( pauseListener != null );
		//line 43 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp2) 
		{
			//line 43 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			kha.System.pauseListeners.push(pauseListener);
		}
		
		//line 44 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp3 = ( backgroundListener != null );
		//line 44 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp3) 
		{
			//line 44 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			kha.System.backgroundListeners.push(backgroundListener);
		}
		
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		boolean tmp4 = ( shutdownListener != null );
		//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (tmp4) 
		{
			//line 45 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			kha.System.shutdownListeners.push(shutdownListener);
		}
		
	}
	
	
	public static void render(int id, kha.Framebuffer framebuffer)
	{
		//line 49 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		if (( kha.System.renderListeners.length == 0 )) 
		{
			//line 50 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			return ;
		}
		
		//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		{
			//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			int _g = 0;
			//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.root.Array<haxe.lang.Function> _g1 = kha.System.renderListeners.__get(id);
			//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			while (( _g < _g1.length ))
			{
				//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
				haxe.lang.Function listener = _g1.__get(_g);
				//line 53 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
				 ++ _g;
				//line 54 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
				listener.__hx_invoke1_o(0.0, framebuffer);
			}
			
		}
		
	}
	
	
	public static void foreground()
	{
		//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int _g = 0;
		//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		haxe.root.Array<haxe.lang.Function> _g1 = kha.System.foregroundListeners;
		//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		while (( _g < _g1.length ))
		{
			//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Function listener = _g1.__get(_g);
			//line 59 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			 ++ _g;
			//line 60 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			listener.__hx_invoke0_o();
		}
		
	}
	
	
	public static void resume()
	{
		//line 65 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int _g = 0;
		//line 65 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		haxe.root.Array<haxe.lang.Function> _g1 = kha.System.resumeListeners;
		//line 65 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		while (( _g < _g1.length ))
		{
			//line 65 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Function listener = _g1.__get(_g);
			//line 65 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			 ++ _g;
			//line 66 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			listener.__hx_invoke0_o();
		}
		
	}
	
	
	public static void pause()
	{
		//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int _g = 0;
		//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		haxe.root.Array<haxe.lang.Function> _g1 = kha.System.pauseListeners;
		//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		while (( _g < _g1.length ))
		{
			//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Function listener = _g1.__get(_g);
			//line 71 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			 ++ _g;
			//line 72 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			listener.__hx_invoke0_o();
		}
		
	}
	
	
	public static void background()
	{
		//line 77 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int _g = 0;
		//line 77 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		haxe.root.Array<haxe.lang.Function> _g1 = kha.System.backgroundListeners;
		//line 77 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		while (( _g < _g1.length ))
		{
			//line 77 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Function listener = _g1.__get(_g);
			//line 77 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			 ++ _g;
			//line 78 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			listener.__hx_invoke0_o();
		}
		
	}
	
	
	public static void shutdown()
	{
		//line 83 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int _g = 0;
		//line 83 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		haxe.root.Array<haxe.lang.Function> _g1 = kha.System.shutdownListeners;
		//line 83 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		while (( _g < _g1.length ))
		{
			//line 83 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			haxe.lang.Function listener = _g1.__get(_g);
			//line 83 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			 ++ _g;
			//line 84 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
			listener.__hx_invoke0_o();
		}
		
	}
	
	
	public static double time;
	
	public static double get_time()
	{
		//line 91 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.getTime();
	}
	
	
	public static int windowWidth(java.lang.Object windowId)
	{
		//line 95 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int __temp_windowId83 = ( (haxe.lang.Runtime.eq(windowId, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(windowId)) )) );
		//line 95 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.windowWidth(__temp_windowId83);
	}
	
	
	public static int windowHeight(java.lang.Object windowId)
	{
		//line 99 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		int __temp_windowId84 = ( (haxe.lang.Runtime.eq(windowId, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(windowId)) )) );
		//line 99 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.windowHeight(__temp_windowId84);
	}
	
	
	public static int screenDpi()
	{
		//line 104 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.screenDpi();
	}
	
	
	public static kha.ScreenRotation screenRotation;
	
	public static kha.ScreenRotation get_screenRotation()
	{
		//line 110 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.getScreenRotation();
	}
	
	
	public static boolean vsync;
	
	public static boolean get_vsync()
	{
		//line 116 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.getVsync();
	}
	
	
	public static int refreshRate;
	
	public static int get_refreshRate()
	{
		//line 122 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.getRefreshRate();
	}
	
	
	public static java.lang.String systemId;
	
	public static java.lang.String get_systemId()
	{
		//line 128 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return kha.SystemImpl.getSystemId();
	}
	
	
	public static void requestShutdown()
	{
		//line 132 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.SystemImpl.requestShutdown();
	}
	
	
	public static void changeResolution(int width, int height)
	{
		//line 136 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		kha.SystemImpl.changeResolution(width, height);
	}
	
	
	public static void loadUrl(java.lang.String url)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 13 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return new kha.System(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 13 "/usr/local/lib/haxe/lib/kha/git/Sources/kha/System.hx"
		return new kha.System();
	}
	
	
}


